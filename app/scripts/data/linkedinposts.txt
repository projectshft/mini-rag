**
“Congratulations! You’re hired”.
Me - “Did they make a mistake?”
At every promotion, job change and feature I struggle with - that voice creeps in.
If you’re struggling with imposter syndrome, here’s the good news:
You’re not alone.
The bad news:
You’re not alone.
Alex Lau and I spoke about the 
💡 How embracing discomfort is the ultimate cheat code for career growth—and why those tough moments are where the magic happens.
💡 Why the rise of AI means networking isn’t optional anymore—it’s essential for breaking through today’s hiring pipelines.
Whether you’re just starting out or navigating the chaos of career changes, this episode has the actionable insights you need to thrive.
🎙️ Listen to the full episode here 👉 [Insert link]
**
Real developers barely write any code.
Some of the non-sexy stuff you’ll do as a developer:
meetings
meetings to prepare for other meetings
reviewing code
debugging code you never touched
writing documentation
preparing for demo days
researching poorly documented 3rd party APIs
translating technical limitations to non-coders
emails

**
Here is what I learned after spending 12 months sitting between the 2 best developers in my company.
Clean up the code even if you didn’t write it.
Code isn’t magic. Figure out why things work the way they do.
As
**
A look back at software engineering in 2024 (according to social media):
First, Chat Gippity took your job.
Next, Devin AI made programming obsolete.
All hiring stopped. A total of 0 positions opened up.
Applications to McDonald's skyrocketed. Mostly CS grads.
It was a real blood bath apparently.
Reality was more boring:
Hiring creeped up.
The Devin team hired devs made of flesh.
Too many JS libraries were produced.
100% of companies talked about AI. Just 6.1% of businesses are using AI to produce their products or services (according to Goldman Sachs)
Wind turbine technician is the fastest growing occupation in the US (if you’re looking for a “safe” bet for what to learn)
The big takeaway here:
Stop planning your career based on click bait.
**
I’m leaving JS in 2024. 
Let me be clear: I love JS but it's time for me to expand my horizons and I think you should too.
Python is now the most popular programming language on GitHub, marking the end of JavaScript’s decade-long reign. JavaScript and TypeScript are in 2nd and 3rd place respectively.
I’m starting my learning in an unlikely place.
Spreadsheets.
Most of us forget that a ton of data is not in a secure database but in some boomer's Excel spreadsheet.
Using a libraries like pandas and seaborn, I can transform, analyze and visualize data.
**
Are coding bootcamps dead?
That’s the question my buddy Zubin and I were debating recently. If they are, what’s next for people who want to learn to code? 
More than half of all professional software developers have a four-year degree, so the traditional path is still the norm. Self-teaching is an option but it’s not the answer for most people—it’s tough, lonely, and often lacks structure.
We believe the next wave of coding education will look very different. 
It will be highly personalized, tailored to meet the unique needs of each individual. 
People who want to learn to code aren’t just looking to pick up a skill—they’re looking to transform their lives, often through a career change.
That’s why I’m so excited about what’s coming next. Zubin and I think we’re uniquely positioned to help shape this new phase of coding education, and we’ve been working on something we think will make a big difference.
I can’t wait to share more in the coming days. Stay tuned!
**
10 years of coding advice in 60 seconds
use a debugger
you can’t cheat time in the saddle - get used to making mistakes
interviewing is the highest paying skill
it’s easier to switch jobs than get a large raise
do stuff that makes you nervous
build something outside work to keep your skills relevant
other people in the meeting are afraid to ask the dumb question you are afraid to ask
write tests
keep a brag document or you won’t remember what you did all year
leave the code better than you found it
never make people feel dumb - it’s bad for your career and your soul
if arguing about coding languages online worked - no one would be using JavaScript
marketing, design, sales, product and legal are just as important as your tech team - in many cases - much more important
understand if your team is a cost or profit center before the market turns
the closer you are to the data, the harder you will be to replace
there’s a lot of smart assholes out there - don’t be one
a walk outside solved more bugs than staring at a screen
be careful who’s advice you take 😉
**
10 years of workout and diet advice in 2 minutes
shave your body hair to look 5 pounds thinner
forget fad diets - track your calories
buy a small scale and weigh your food - that cup of rice was never a cup amigo
lift until failure instead of counting reps
there are 3500 calories in a pound
shirtless pics reflect your progress better than the number on the scale
weigh yourself every morning - never at night
you didn’t really gain 5 pounds - that’s water weight
if you’re a dude - train your legs
if you’re not a dude - train something besides your legs
it’s easier to adjust your calories than add cardio
everyone in the gym is too busy looking at themselves to care about you
always do incline bench
sleep, nutrition and walking are your secret weapons
you can’t beat genetics - your calorie maintenance and muscle growth potential will be different than your friend’s
wait 2 weeks before adding or decreasing calories because your weight fluctuates
listen to your body - don’t beat it up and don’t be too easy on it
it’s not a “diet” - it’s just a different way to eat
looking good shirtless is over rated - you’re almost always wearing a shirt
if it’s not fun, you’re not doing it right
**
If I was a recent bootcamp grad, frustrated with the job market or just wanting to take a faster path towards that first role, here’s what I’d do:
Go back in time, enroll in Parsity and take advantage of our amazing career services.
Enroll in David Roberts VIP course for job seekers.
2 is probably easier than 1 at this time.
I’m not sponsored by David, but I find myself recommending him at least once a week to people who call me and want advice on landing their first role.
**
Well this is it, I’m getting fired.
The engineering manager and I were sitting in a small room, frantically trying to fix a program I had released to production that was breaking spectacularly.
The code was on a large monitor for us  investigate.
“What is this code supposed to do?” he asked.
I froze.
That code had been lifted directly from Stack Overflow and I could not explain it.
“If you don’t know what this is supposed to do, it shouldn’t be in this program” he said.
Plot twist: I didn’t get fired that day though I wouldn’t have blamed him.
I can still feel the embarrassment 9 years later.
Don’t make the same mistake I did.
With Chat-Gippity, it’s even easier to become a copy-paste developer than it used to be.
I’m not saying you should NEVER lift code from another source but for the love of Bob, at least understand what it does so you can avoid my fate.
**
The CEO at the company leaned over my desk when I was using Chat GPT.
“What are you doing?”
Me - a bit nervous:
“Styling this page with Tailwind, I’m not great at styling and honestly this is faster a lot of the time”
Him
“Oh cool. Didn’t know you could do that”
Honestly - sometimes ChatGPT or co-pilot is faster than I am.
**
❌ You will be replaced by AI.
❌ You will be replaced by someone using AI to do your job.
✅ You will be replaced by someone who doesn’t need to use AI but is using it to do your job.
**
Coding tutorials are like riding a bike with training wheels. They’re helpful at first, but if you never take them off, you’ll never learn to actually ride.
The same goes for coding. If all you do is follow tutorials, you’ll never hit the point where you can tackle real-world problems. That’s why project-based learning is so important:
•	It forces you to think independently. There’s no “step-by-step guide” when your app breaks in production.
•	You learn by solving actual problems. Need authentication? You’ll figure out user sessions. Want a database? You’ll learn to query it.
•	You build confidence. When you’ve built something end-to-end, you know you can do it again—and better.
Building projects isn’t just about learning to code; it’s about learning to think like a developer. Start small, but start building. The training wheels won’t come off on their own.
**
Breaking into software as:
An 18 year old - just go to college kid. Most of your peers will have a CS degree. There’s a reason this is called the “traditional” path.
A 25 year old with no money - you’re probably saddled with debt from college. You also have time on your side. Do local market research and reverse-engineer your tech stack and what to learn.
A 30 year old with kids - you probably want to spend some money on a mentor or a program to significantly shorten the time to hired and avoid painful guess work while juggling increased responsibilities.
Anyone - build something you care about using some relevant tech. Realize no one wants to take a chance on you. Reverse your risk by having an online presence that points to your coding history and maybe work for free validation.
**
My favorite mental models for computer science concepts:
Recursion - Russian dolls: Each doll holds another, representing a function calling itself within its own context.
Linked Lists - Train cars: Each train car is linked to the next, just like each node points to the next node in a linked list.
Stacks - Stack of plates: You can only take from the top or add to the top, similar to how a stack operates (Last-In, First-Out).
Queues - Line to get on a bus: First person in line is first to get on, which represents the First-In, First-Out (FIFO) principle.
Trees - Family tree: Each “parent” node has “child” nodes, and the child can also be a parent with children.
Big O Notation - Traffic on a highway: As more cars (inputs) join, the effect on speed varies depending on the road’s capacity (algorithm’s efficiency).
What are your some of your favorite mental models for understanding software development?
**
Some people learn to code because “they don’t want to deal with people”

I got some bad news for you.

It’s all about people. 
You spend months on a side project, but no one uses it.
You realize you should have talked to users or built in public.
You watch others learn faster because they ask questions.
You start to wonder if asking for help might not be so bad.
You explain your code, but no one understands it.
You think, maybe it’s time to work on how I communicate.
Someone else pitches an idea you casually mentioned, and everyone loves it.
You realize you need to start making your ideas heard.
You see a teammate sway the whole team with a thoughtful suggestion.
You wonder how they manage to bring others on board so easily.
Eventually, everyone comes to the same conclusion:
Getting better at working with people is the fastest way to grow.
**
I’m not going to sugar-coat it:
The job market does not suck.
Or if it does - then it’s been the norm for so long that it ceases to mean anything.
**
My mom got turned down for a job at Starbucks as a barista.
She’s retired after 30 years working her way up the ladder in corporate America.
They don’t care.
And why would they?
What does working in a bank have to do with being a successful barista?
Switching careers isn’t just difficult for people trying to break into tech.
It’s difficult across the board.
As a junior developer (or barista) you are an inherently risky hire.
This doesn’t mean you should quit - it just means that you’ll need to find ways to re-invent yourself and build trust.
**
If becoming a software developer was as easy as learning the "right" technology then YouTube wouldn't be rotten with videos of boot camp grads talking about how hard it is to get hired.
Your technology stack is still important, obviously.
Don’t think so?
Learn Fortran, COBOL and BrainF*ck and please tell me how that works out for you.
The real disconnect between learning to code and getting hired is that career change requires a completely different skill set:
building an online presence
self promotion
job search strategy
rejection handling
**
Writing code for a living is hard.

You need to master:
 Debugging
Problem-solving
Version control
Software architecture
Patience and persistence
And at the start you think you’ll never be good enough.

But it's still 100x better than working on something you hate.
**
Every few months, someone roasts the tech interview.
I’ll never traverse a BST in “real life” they say.
These tests are “biased” and flawed!
People cheer in the comments.
And nothing changes.
The reality is that you’re way less likely to encounter data structures and algorithms on the interview grind if you’re not limiting your search to the top tech companies in the world.
The other reality is - why not just learn some DSA?
**
One of my biggest struggles as an engineering manager was keeping my tech skills sharp.
I went from writing code for most of the day to:
leading meetings
JIRA management
1 on 1s
sitting in on sales pitches
obsessing over the images in my presentations (the right meme can really make or break it 😅)
I really didn’t want to sit through any 100 hour tutorials to type what some other bandicoot was typing.
CodeCrafters to the rescue.
One of my favorite services for preventing skill-rot is CodeCrafters. I started using it years ago to learn more about complex software like Redis, Docker and SQLite by building it from scratch.
If you’re over watch-and-type tutorials and want a real challenge, I can’t recommend them enough.
**
How old is too old to learn to code and change careers?
According to the internet - it’s 40.
Imagine if Dicky had listened to those geniuses.
I met Dicky a couple years ago on Instagram. I enjoyed his content and what he was building. His journey from working in physical therapy to software engineer wasn’t short or straightforward.
But it did work.
If you’re serious about making a career switch into software then Dicky has a path you might find useful, no matter your age.
https://open.spotify.com/episode/2lmSxPLcz6tKFygvvkcTcw?si=e0162de260c74df7
**
No one is going to pay you thousands of dollars to build a website.
But they might pay you to:
improve SEO
get more clients
sell more products
boost their conversion rates
increase awareness of their brand
Sometimes, a website can do 1 or all of these things. 
It’s just about how you’re selling it.
If you’re looking for no nonsense advice about freelancing and the art of writing code for cold hard cash then you should really follow William Ray.
**
No coding bootcamp, college or tutorial can prepare you for the following scenarios you WILL encounter as a software developer:
your CI pipeline failing because it’s using a different Node version
your first on-call shift
how to write a good PR
a feature breaking during a demo
**
You don’t need to contribute a single line of code to open source to benefit from it:
Step 1 - find a library you actually use and like
Step 2 - get it running on your machine
Step 3 - break, extend or re-write a feature
Example:
Clone everyone’s favorite state management library, ReduxJS and npm-link it to your React project.
Add a debugger somewhere in the code and try to trigger it.
Poke around  and try to change some functionality.
Now you’ve learned a hell of a lot more than fixing a typo in a README and set yourself up nicely IF you want to make some contributions in the future.
**
No one, and I mean no one, uses JS on the backend.
Except:
NASA
Netflix
Uber
LinkedIn
Trello
Walmart
PayPal
Seriously, don’t use JS on the backend, it’s a recipe for… disaster.
**
I didn’t take my own advice and nearly bombed the interview.
I’m such a hypocrite 😬.
I passed the technical portion of the interview and was feeling pretty damn good.
Then I got hit with a question I’ve told you to prepare for 100 times over.
“Tell me about the most technically complex project you’ve worked on recently”
It was like my brain stopped working.
Should I talk about something front-end? Back-end? Something I architected? I just froze and went with a story about a component library, which honestly, wasn’t super interesting.
After this experience I literally wrote down a group of stories I can use for any upcoming interview.
1 story for leading team against a deadline.
1 story about a difficult bug.
1 story about a complex feature or project.
1 story about failure.
I’m curious, what non-tech interview question have you been asked over the years?
**
Every time I talk about a student from my coding program Parsity, getting hired as a developer, I get too many hateful comments and emails.
"You DoNt UndeRStanD hoW BaD the mArkEt is BrOooOooO!"
You're right. What do I know? Not like I got laid off and hired this year or went to a bootcamp at 30 or helped 100+ developers get hired over the last 10 years.
I usually ask them to send me their LinkedIn and resume and what I find is interesting.
Actually, it's really uninteresting.
Their LinkedIn profile is a blank picture with 30 connections.
Their one post is them complaining about the job market.
I check their GitHub and see... a clone of another popular app.
Their resume has their most recent job as a wind turbine technician at the top.
I feel bad for them and I genuinely want to see them succeed even if they hate my guts.
Most don't actually want my help. They just want pity. I can sympathize but I refuse to give it.
Let me make this very simple for you:
Build an app you might actually find useful and deploy it
Write about this experience online
Connect with people who show interest
Try to get users for your app
Work for free if you have to. Walk down main street and see what business has an awful website they need re-done. Do it for free, get a recommendation from them and change your title to freelance web engineer.
Your mileage WILL vary.
I can guarantee you will be hired but I cannot control the timeline. Neither can you.
**
You ever feel like you’re basically coding the same few features over and over and over?
Sometimes your current role doesn’t prepare you for the next role.
Here are my top 4 services for preventing “skill-rot” as a developer:
CodeCrafters - finally something for the mid → senior level developers out there to get their hands dirty. The GitHub workflow is 😘 👨‍🍳
Scrimba. Some students at Parsity have been using this and I have to admit, it’s an amazing platform to learn front end technologies.
Coding Challenges - Mr. Crickett has crafted some non-trivial projects to teach you complex software.
My site, JavaScriptProsApp.com - at some point, you don’t want to “learn React” anymore. I made challenges based on my experience as a developer over the years including API migrations, deploying Lambdas, solving GitHub pipeline issues and creating NPM libraries.
It’s funny because I’ve used every single one of these services in the past year and I’m usually explicit that I’m not sponsored.
Well - can you believe CodeCrafters offered me a sponsorship code? I’m not gonna use it though. I sincerely like all these products, mine included and think you should check them out.
**
“My code speaks for itself”
“I didn’t get into software to deal with politics”
“I’ll solve this later tonight once the kids are asleep”
I won’t tell you how many of these quotes are directly from me (hint: it’s more than 2 and exactly equal to 3)
Thinking like this was naive at best and hindered my career as a software developer at worst.
Turns out I’m not the only one.
I sat down with Dagna Bieda to speak about why developers fall into these mindset “traps” as well as her own struggles with communication and how she had to refactor her brain and approach to her coding career to reach the next level.
Our convo took a very surprising turn towards the end. Hope you enjoy.

**
Recipe for terrible 1 on 1’s:
Manager: “Anything to discuss this week?”
You: “Nah, I’m chilling”
Manager: “Nice. Talk to ya next time 👍”
1 on 1’s can devolve into weekly status updates, which is why I think a lot of people like to skip them. 
I asked 3 engineering leaders how have 1 on 1’s that don’t suck:
Nick: 
What you can do is talk about:
The impact your work is having
Positive/negative interactions with peers and partner teams so I can help offer guidance or follow up
Roadblocks, whether they are technical or with people
Career aspirations and whether or not you feel we’re aligned on career progression
Your level of motivation, engagement, excitement, interest, learning opportunity etc… on your current project
This time is about YOU and as much as I would love to lead the charge on all of these things: You should take responsibility to do this as well.
Ken: Your plans, your dreams, your challenges, where you can improve.
Talk about your goals on the company career plan, as well as your goals outside the career plan.
Talk about how to progress (ask for feedback).
Talk about upcoming projects or suggestions.
Talk about challenges.
Talk about managing up. Not all TL/EMs are comfortable with these meetings.
John
Your 121 is your chance to get as much value as possible from your manager. Ask them for advice, mentoring and coaching. Ask them for help to achieve your career objectives. Make sure you drive the agenda for your benefit.
**
Back when interviews still took place in physical offices, my nerves got to me.
I was bumbling through a system design question about rate limiting when the interviewer suggested the “leaky bucket” approach.
Never heard of it at the time.
I tried to fake it… miserably.
I mean, laughably embarrassing.
I did not get an offer.
I did learn a lesson that I’m honestly re-learning every once in a while:
Admit when you don’t know something.
You’re probably not fooling anyone and even worse, you’re ruining your own credibility. Now go look up the leaky bucket approach, I know you’re curious.
**
The reverse engineering strategy to learn fast af.
Instead of creating some arbitrary goal like “I want to learn ReactJS” or “I want to get hired at the end of the year”, try this:
Work backwards from the goal state.
**
Newsflash:
My podcast about learning to code and creating a solid career in tech is good, BUT
It won't help you:
finish that side project
become a software developer
figure out why that error on line 420 is crashing your TODO list app
Not today, tomorrow, or in a month's time.
The only way to turn it from a collection of useful knowledge into the goal you're chasing?
Action.
I know because I learned this the hard way.
One summer I read an entire book on HTML (it was 11 years ago, please don’t judge me). I sat down in front of my computer to type some sweet HTML and realized I had no effin’ clue what to do.
Have you ever watched a tutorial from start to finish only to wonder what the hell you just built?
Now I always take action with the knowledge I'm cramming into my noggin.
Use codepen, codesandbox or VS Code to make the abstract practical. 
**
My tech interview 10 years ago:
Why do you want to work here?
Y u no have CS degree?
LeetCode easy or coding trivia
In person lunch to make sure you’re not crazy
💰
My most recent tech interviews:
Pair programming with screen share
Automated code challenge (LeetCode medium+)
Take home assignment that takes way too long
Tell me about a technically complex project you did recently…
Design some wildly complex system neither of us know how to build 🙄
Let’s have 12 rounds spread out over 2 months because we don’t trust ourselves
😅
Interviews are a game and they are winnable. 
What’s great about tech interviews is that they’re standardized for the most part. The small startup in SF will use a similar format to tech company in Austin.
Use this to your advantage and make sure you know your audience, research by any means necessary and maybe just cheat if all else fails.
Just kidding… or am I?
**
5 of my biggest regrets about my coding career(so far):
Sticking to JS for too long. It’s easy to get started with and a highly employable language. Learning Rust recently has opened my eyes to how easy I’ve had it working with such a high level language.
Being too good for CSS. I took some kind of sick pride in not being very skilled at CSS. If you’re working on the front end - you need to have some respect for it. Users expect and depend on accessible, decent-looking sites.
Letting my work speak for itself. Naive at best. This was really an excuse to cover up the fact I was scared and insecure to speak up or share ideas. When I started doing this, my career really accelerated.
Not taking optics seriously. No one would call me a fashion icon. I wear silly neon sweatshirts and don’t take myself too seriously. This works well in developer circles but the joke doesn’t translate well to people outside tech. Every book I’ve read on the subject of impressing others gives this advice: dress a little nicer than the people in your group to give an air of authority. I’m trying this right now - will let you know how it goes.
Being a coder. Writing code is cool. Understanding business problems and finding ways to make businesses more money through code is where stars are born. Understanding this would’ve saved me from a few failed businesses and given me more direction on where to spend my energy as a manager and coder.
I’ll have many more regrets in the future but that’s what makes life interesting right?
Right? 😅
**
If software developers are in high demand, why is it so hard to land a job?
I’ve thought about this a lot. I think the reality is that right now, it’s difficult for anyone to get hired and it’s always been difficult for career changers.
I also know that LinkedIn in an echo chamber. The loudest voices tend to be on either end of the spectrum: the person  who 
**
The reality of the advice you read on social media:
Nearly all of it will work, but not necessarily for you.
Here’s how you cut through the noise to pick out the gems in a sea of trash:
Has the person achieved the outcome you want?
Do you have anything in common with this person?
Do they seem happy?
If the answer to all 3 is NO, maybe don’t take their advice.
**
The problem with 99% of the technical interview advice you read is that it applies to the top 1% of companies out there.
I spoke with over 500 developers in the last couple years and now own an online coding school, Parsity where we’ve rolled out mock interviews which reflect the reality of the non-tech job market.
Here’s 4 types of interviews I see over-represented for web dev roles:
build a React component that fetches data
JS trivia including closure, let vs const, event loop and this
take home assignment that’s supposed to take 2 hours but is really a full day 😅
code challenges using 2 pointers, sliding window and array manipulation
I’ve also met developers who accepted offers after no technical screening at all! This has happened to me at least twice.
While you’re pounding LeetCode, don’t forget to have some answers in your back pocket for questions like “tell me about yourself?” or “why do you want to work here?”
Good luck out there.
**
😐
You get it? Cuz Java and JavaScript both have “Java” in them.
As much as we like to bash on recruiters, they can be your greatest resource on the job hunt.
I interviewed David Roberts, a software developer turned recruiter turned career coach and learned why most of us, especially bootcamp grads are going about Linkedin, GitHub profiles and  job searching in the wrong way.
David breaks down how to stand out as a developer on the job market, thoughts on “free work” and learning how to “sell” yourself.

**
There is a limitless amount of free education on .
But the algorithm eventually buries all the best posts.
Here are [X] of my favorite posts from [Month] [Year], written by my friends (so I can find them easily later):
**
3 lessons I learned after getting laid off and hired in the same month:
The non-technical interview is more prevalent than I thought. Between coding challenges and take home assignments, I prepared a few technical stories that always came up.
Stability is a myth. Our entire org got axed at a big, stable, non-tech company. The best defense is a good offense.
LinkedIn ≠ reality. Most of my opportunities came outside LinkedIn. Some of my co-workers were hired shortly after being laid off and they never use LI. I cannot intelligently speak to the larger job market trends. I just know that fear mongering gets likes and sympathy. Maybe triumph posts like this do too. All I’m saying is that the pessimists are often right but the optimists are often successful.
There are a lot of other lessons I’ve learned over the last 10 years working in software and I’ll be sharing some of the major takeaways with CodeCareerMastery here https://bit.ly/44XRLKN. Hope to see you there.
**
You don’t have a problem learning to code. 
You have a time management issue.
Instead of spending marathon sessions where you cram on the weekend, try this:
Strategize - use a decision matrix to identify the most important task you can do
Plan - tackle the most important thing in the morning
Sacrifice - open your phone and check your activity - something’s gotta give
Sprint - humans aren’t robots… yet. Take short pauses to reflect and correct your course
30 mins a day > 6 hours on your day off
consistency > intensity

**
“Been rejected after 4+ rounds of interviews four times now (and counting). Applied to over 100 jobs, been auto rejected by about half, despite meeting all the qualifications.”
“The market is brutal right now - brutal. Over saturation…”
These aren’t quotes from software engineers or bootcamp grads.
I ripped these off Reddit this morning from people in sales.
So yes, things kinda suck across the job market right now.
They won’t forever.
**
My 3rd most popular post is missing a very important step.
I told you to “turn off the tutorial and open the code editor” and that’s mostly correct.
You also need another human who can teach you what you’re missing.
**
The Dunning-Kruger effect ⬇️
Basically, it's when we are new to learning something and don't understand the limits of our knowledge.
This means we greatly over-estimate our own competence because we don't even know what we don't know 😬.
I see this effect in action with people learning Javascript… hell, it happened to me too.
The great thing about JS is that It's simple to use immediately. This can fool us into a false sense of knowledge.
Hey, it works, we say.
That kind of thinking can only get you so far.
Eventually you're going to want to write more than trivial apps and to do interesting work and get paid well 😉you're going to need to dive into the deep end of JS.
Learn things like
🚀 Asynchronous JS
🚀 Design Patterns
🚀 Prototypal Inheritance
🚀 Closure
🚀 Unit Tests
If you're just starting out on your JS journey, I encourage you to just get things working at first, then go back over your code. How can you make it better, how does that code your "borrowed" from StackOverflow really work?
**
10K to learn algorithms?
Yup. I don’t regret it either. As a self-taught coder, I skipped over:
🛑 Big O
🛑 Recursion
🛑 Searching and Sorting Algos
🛑 Data Structures
🛑 System Design😬
Sure, I was able to get a job. But I was at the mercy of the market. I couldn’t apply to any company that dared to ask something outside the knowledge I’d gained at work or Udemy tutorials.
After completing 2 intense courses on DS/A and system design I actually did make it to Google’s onsite 😮.
More importantly, I gained confidence.
I also was better at writing code. I understood the tradeoffs of time and space complexity and could intelligently speak about caching strategies and CAP theorem.
My best advice to you is to invest in your own education as a developer. Especially if you are self taught.
**
There’s always someone who’s got it worse than you.
As a kid, my friends thought I was rich because we had a small house.
They lived in housing projects.
My partner came to this country as a refugee and lived in extreme poverty.
Yes you’re right, the world is an unfair place. Racism, sexism and other biases exist.
Now what?
Do you know what the prize for having a rough life is?
Pity perhaps. Some sympathy.
Then what?
I don’t mean to be harsh, but I sincerely want you want to succeed. 
**
There are still too many smart assholes in the developer community.
Many can code circles around me.
They’re also typically unhappy and have a hidden cost that most teams cannot afford.
At worst they create silos of knowledge and an environment where others are afraid or discouraged from learning and asking questions.
At worst-er 🤔 they lead to lawsuits, mass exoduses and unmaintainable software (they are the only ones who understand how it works).
From speaking with a few hundred of you (and from some of the comments under my posts) I see that this type of developer is still roaming around and sometimes might even be your manager.
Here’s some tactics that might work for you when dealing with these types:
alert them to their behavior with specifics (you’d be shocked how many times people just don’t know how they come off… me included) and they may actually change
stroke their ego in order to “fool” them into agreement: “I know you know a lot about this service and before I consider this refactor, I want to get your take on my approach. When can you check it out with me?”
ask leading questions "Why do you not like this approach? Is this PR comment a necessary change or just a suggestion?" Sometimes, asking a few questions can lead a person to the correct conclusion.
just leave
Unfortunately, sometimes these people aren’t ready to be saved. Sometimes the company is a breeding ground for these types and sometimes you just don’t want to deal with it.
Oh yeah - lastly, don’t be an asshole.
**
This is me at 29.
Drunk, overweight and criminal.
Now, I'm 40.
Sober, 25 pounds lighter and a hell of a lot happier.
Here's a breakdown of what I learned along the way:
Moderation is a myth.
Getting sober, getting in shape and learning to code took more effort than I imagined. Way more. Sometimes you can work smarter and sometimes you just need to work harder.
Routines aren’t boring - they are the key to freedom.
I wake up and do the same damn thing most days. My routine is my rock in a chaotic world. It’s how I make time when there is none.
Bad luck is contagious. So is good luck. 
I stay away from negative people, social media accounts and news. Pessimists are rampant and they’re often right. Optimists are happy and often successful.

**
4 little letters almost got me fired.
LGTM.
Looks good to me.
Later that day, I got a cryptic Slack message from the lead developer. Turns out the code I had barely reviewed blew up and was going to delay the epic from being released.
Whoops.
I was embarrassed and a little surprised - I mean, it wasn’t like I wrote the code.
Either way, he was right. I had failed to do the bare minimum.
I resolved to become the best damn code reviewer on the team that day.
A year later, during my annual review, my manager told me that my peers were complimenting my reviews. I had prevented errors from slipping through and suggested solutions which led to more maintainable code.
I basically just copied what our lead developer was doing:
Block off time in the morning to do the review
Understand the work being done by reading the ticket associated with the PR
Run code locally before looking at the code
Read the code and ask questions or suggest improvements
Use Loom or a screen share to discuss details or demo if needed
This was a slow and often tedious process. I can already see many of you rolling your eyes.
CI/CD!
Pair program!
Small commits!
Yes. Correct. Also - I still stand by this process.
**
A few months ago, I wrote about a developer who struggled in a mock interview because he tried to use a ReactJS API during a vanilla JS challenge.
I suggested he learn the fundamentals of JS before touching React.
Now, I’m not so sure.
How much JS do you really need to know nowadays?
Most roles for JS developers depend on a strong knowledge of the layer above JS. Companies want ReactJS, NextJS and Angular developers (the other 5 are looking for Vue developers).
Is it still worth having a strong grasp on: 
prototypal inheritance
closure
type coercion
scope
I realize you still need some grasp on these concepts but perhaps much less than I previously thought.
Is there anything so wrong with being a framework developer? It appears to be a lucrative career path.
https://open.spotify.com/episode/1PSSf8hbjuCFszOKciJMFF?si=ww51ltyhTFK9xjzvR1t1CA
**
How most successful bootcamp grads operate:
Makes coding and learning a routine
Applies consistently and broadly
Has 1 or 2 complex side projects
Re-calibrates their approach when needed
Has faith that opportunity will present itself
Why most bootcamp grads fail:
Applies to only junior roles
Tutorial
Tutorial
Tutorial
Relies on motivation instead of routine
Doesn’t get hired in 3 months
Gives up
**
A framework for a great side project:
Choose a technology you want to learn
Think of a problem you want to solve for yourself
Sketch out the main pages and functionality
Look up free APIs you can use
Deploy on AWS like a fancy lad
Along the way, you’re going to pull your hair out, throw everything against the wall and get rate-limited on ChatGPT.
This is exactly where the learning occurs.
You keep coming back because you have more emotional attachment to your own project than a 100 hour video where you type what the other person types.
**
It's amazing how much easier creating a side project gets when you stop obsessing over which framework you’re going to us and start obsessing over the set of features you want to launch.
**
Fake it until you make it is my career strategy.
It’s the ONLY way to acquire a skill.
Everyone must be a fool before they can be a master. It’s the price of admission.
1 in 4 doctors feels impostor syndrome. They’ve gone through intense study and formal training and yet they still feel like they’re not good enough.
And you wonder why after a few months or even years of study, you feel like a fake.
Maybe you are.
And maybe that’s ok.
I’m not saying being a sub-par developer or sub-par [whatever] is winning career strategy.
I’m just saying that if you wait for that moment when you’re “ready” you’ll have waited way too long.
**
I’m not optimistic because I’m foolish or naive.
I’m optimistic because it’s the most practical strategy I’ve found to get through life and create luck.
The photo below is me, getting taken to the hospital in an ambulance on the second day of my new job with a heart condition.
I didn’t know if I would come home so I wanted my last picture to be me smiling.
I had done all the right things: 
Quit alcohol
Had an exercise routine
Lost weight
Wrote tests for my code even when I didn’t have to
And yet here I was - maybe about to die.
Plot twist: I Iived!
Could it happen again? 
Sure.
I have a couple options:
Stress everyday, take a bunch of heart pills and avoid strenuous activity
Resume life
I choose option 2. 
Your brain is a pattern-finding wizard. It will find “evidence” to support your assumptions.
Start looking for proof that things can and will get better and that life tends to incrementally improve and you aren’t the unluckiest person you know.
For me, this means limiting local news and social media and generally not hanging around people who always have drama and unfollowing accounts who push fear.
**
Small tweaks that turn your basic ass project into something amazing:
TODO App as a mobile app with reminders when a user is near the location they are supposed to do the task and Google Calendar integration
Weather App with suggestions based on the weather and user preferences. For example, if they have kids - maybe suggest a park. Single 20 year old? Maybe suggest getting blackout in a park.
Movie Finder that uses OpenAI API to suggest movies and genres based on a short questionnaire or previously liked movies.
E-commerce app template connected to a CMS so a user can update text, brand colors and manage inventory and includes a stripe integration with an API key.
These could be the start of your next failed start up or at least introduce you to some cool technologies.
**
The problem with developers in general and content creators specifically is that we use too much anecdotal experience to draw wild conclusions. 
This creates an echo chamber online which makes you think that certain things are truer than they probably are:
Most devs don’t work for big tech
You’re more likely to work on legacy code than brand new features
Designing a system will take weeks or months, not an hour with a whiteboard
Flexible schedules can mean 4 hours one day and 14 the next
Even the best developers fail interviews
Your next interview is unlikely to include a whiteboard
“Real developers” don’t use JS and yet it’s the most popular language in the world
To get an accurate pulse on what’s really happening in the dev community, I recommend checking out Stack Overflow’s yearly survey, looking at hiring trends in the industry and generally taking what we all say on here with a grain of salt.
**
I used ChatGPT to write a script to format some data from a CSV.
It took minutes.
I spent the next 3 hours re-prompting and fixing bugs.
**
❌ Get a job you love and you’ll never work a day in your life.
Look, I love to write code and mentor people.
But there’s so much more to software development than writing code and pair-programming.
Some of the non-sexy stuff you’ll do as a developer:
meetings
meetings to prepare for other meetings
on-call shifts
writing documentation
maintaining legacy code
demo days
researching poorly documented 3rd party APIs
translating technical limitations to non-coders
Coding is my hobby and profession. It’s a job and I try not to wrap too much of my identity into it. It can be incredibly fulfilling and it can also be a chore.
**
We hear a lot of success stories about bootcamp grads AFTER they’ve landed their first role.
What about those who are in the middle of learning to code?
I sit down with Levy, a current student in a coding bootcamp who’s juggling work, life and a learning how to build software.
Levy shares what he wishes he’d known before starting a coding bootcamp, why the self-taught path wasn’t the right fit for him even though he knows some programming languages and offers a bit of advice for those who are considering doing a bootcamp style program.
Follow Levy’s career transformation and connect with him on LinkedIn:
Levy’s LinkedIn
**
❌ The best way to learn is to teach others
✅ The best way to learn is to be ABLE to teach others
**
Something odd I’ve noticed about low performing software engineers:
They work really hard.
I would know. I’ve been one.
The irony is that working harder is rarely the solution. Here’s why I was not making progress despite putting in long hours:
Lack of Focus: Hard work without direction lead to wasted effort. I needed to understand what the priorities were and work on tasks that brought the most value or learning opportunity.
Fear of Asking for Help: Many engineers, myself included, have been guilty of this. You think asking for help is a sign of weakness, but in reality, it's more efficient than getting rate-limited on Chat Gippity or staring at a blank screen.
Not Investing in Skill Development: Tech changes fast. If you're not learning, you're falling behind. Putting in the hours at work on the same tasks over and over has diminishing returns. Invest time in up-skilling.
If you find yourself in a cycle of hard work but low performance, take a step back and evaluate. You might just find that a slight change in approach can lead to significant improvements.
**
I think I may have steered some of you in the wrong direction in your job search.
I generally promote using LinkedIn and learning in public as a way to get a job.
I even have some templates (reach out if you want em).
In addition to smashing the easy apply button and sharing what bugs you’re creating, I would strongly suggest doing this:
Reach out to your current network of non-dev and non-bootcamp friends.
Raise the white flag on IG, FB or TT. Tell your friends, family and that weird aunt that you’re looking for your first developer job.
You might be shocked who can point you in the right direction, get you that first contract or tell you about an opportunity you will never see here.
**
Github stars are a terrible metric for determining a candidate’s capabilities.
They are a great metric for you to determine whether or not you’ve remained focused after your bootcamp is over.
A phenomenon I noticed when hiring a couple years ago and from working with a few bootcamps:
During bootcamp: 🟩 🟩 🟩 🟩 🟩 🟩 🟩
Day after graduation: …
**
Before work from home was the norm, I was forced to work from home and really sucked at it.
Unfortunately, many of you are making the same mistakes I did:
no clear start/stop time
not understanding how to be visible online
no rituals
It’s amazing how a few uncomfortable tweaks helped me to really benefit from WFH and finally stand out
dressing for work
starting and stopping at the same times each day
changing for the gym right after work
eating in a different room
over-communicating online
That last one is a big one. 
When you work in an office, you can show up early and Dave from accounting might notice and give you a pat on the head even if you generally suck at your job. There is a performance art aspect to being at work. Online, no one knows what the hell you’re doing, thinking or struggling with. Share it. Over share it.
And for the love of all that is holy…
Please never start a conversation with “Hi 🙂”
I didn’t make the rules.
**
You cannot cheat time in the saddle.
Too many of the developers I speak to want to play it safe. I tried this too.
✅ Do your work
✅ Move a small ticket across the JIRA board
✅ LGTM another code review
Here’s the thing: you’re going to make mistakes. I cannot promise your experience will be like mine.
I’ve blown up production a few times. I deleted the column without a back up. I pretended to understand and f*cked things up.
I learned a lot, got yelled at a few times and embarrassed too many times to count. Now I can share my takeaways with mentees and team mates (minus the yelling).
I’m not saying to be careless, I’m just saying you will have to get used to the idea of failure if you want to grow.
**
When you turn 40 in tech, you really only have 2 options:
Start a newsletter
Start a podcast
I did both 😅.
Honestly, when I took over Parsity, it came with a podcast. At first I was nervous about it. I have mostly hidden behind a screen, typing bro-etry on LI.
Since I’ve started, it’s become one of my favorite mediums for sharing what I’ve learned and I’ve met so many great people because of it. This week, I got a chance to speak on a few different podcasts on opposite ends of the spectrum:
For early career devs - 
For early career managers - 
Next week, I’ll be dropping a couple episodes I know will help many of you on the interview grind along with some free resources to study for the non-DSA interview.
I’d love to hear your ideas for who I should try to speak to next and topics that will help those just getting started in software.
**
The interview began before you even made it to the interview.
You turn on the camera to get prepared for the technical screening.
You spend 15 minutes on “tell me about yourself” and the interviewer is too polite to cut you off.
Now the REAL interview begins.
You studied how to detect palindromes and common DSA.
The problem is to create a React component.
You didn’t set up VS Code so you bumble around and run create-next-app to get something to begin.
In the remaining 30 minutes you struggle with your system settings to disable Co-Pilot  and write some decent code but can’t quite get the last piece of the puzzle.
With 5 minutes left, the interviewer invites you to ask any questions.
Try this instead:
Ask what you should prepare before the interview and what kind of problem you will be asked
Use CodePen.io or CodeSandbox to quickly scaffold an environment
Keep the chit-chat to a minimum during a tech screen to get to the real problem
Have a question or 2 prepared to ask when it’s over
Do some pushups or a walk around the block to release some nervous energy.
Good luck.
**
A decade of brutal code reviews did not prepare me for what I’ve read on TikTok, IG and Reddit about coding.
If you’re looking for civil discourse or to learn anything useful, I would stay away.
Go old school.
Read a couple books by people who took their time to articulate their thoughts and actually research rather than compete to see who can make the most viral and shocking content.
Here’s a few I’ve read and would recommend:
The Coding Career Handbook
The Manager's Path: A Guide for Tech Leaders Navigating Growth and Change
Kyle Simpson’s YDKJS series
The Art of Refactoring
The Phoenix Project
https://open.spotify.com/episode/6zmpcjmdd8eOHotU7xGE7C?si=38ea48899a4e4a30
**
No one’s going to look at your portfolio.
You should still be building projects.
The real value of that Weather App, Movie Finder or Chat Bot isn’t that it’s unique or styled like a pro.
The real value is that it gives you an idea of how to build and deploy an application.
It gives you something to talk about when they ask you to “Tell me about an interesting project you’ve worked on”
So before you get caught up in the shade of green you’re going to use for that nav bar, consider what you really want to learn. I might suggest:
AWS (dynamo DB, Lambdas, S3)
Vercel (edge functions, streaming)
AI (integrate Dall-E or OpenAI)
Think what will make a good story and work backwards from there.
**
Before you take my advice or the suggestions of any influencer out there, ask yourself 3 things about this person:
Do I want to be anything like them career-wise?
Do they seem happy?
Does their work history support their claims?
If the answer to all 3 is no, then maybe don’t take their advice.
**
Coding interview hacks that have nothing do with coding:
Check Glassdoor or TeamBlind for previous questions from interviews
Stalk your interviewers on LinkedIn - not like in a creepy way though. Are they involved in some communities that you’re part of? Maybe slip that into the convo (again, non-creepy please)
Just straight up ask what the interview will be…
This week I’ve spoken with a few developers, including a Parsity student who is getting ready for an interview. Their recruiter didn’t tell them what kind though 😅.
There’s too much to study and too much at stake to risk. You HAVE to ask.
“To make sure I’m well prepared for the interview, can you let me know what this will entail? Will this be a technical interview, a coding challenge or conversational?”
Good luck out there 🤲
**
Stability is a myth.
Once you get that first role or that next role it’s tempting to coast.
Don’t do that.
Keep making connections
Interview once every 6 months.
Pound a few DSA problems per month.
Work on a side project that teaches you something outside of your work stack.
Stay ready so you don’t have to get ready.
**
Some of my most hated advice for junior developers or bootcamp grads is to contribute to open source.
Will it make you stand out? Maybe. (I think a lot of you over-estimate just how involved most software developers are in the coding community. Twitter and LinkedIn are a bubble with the most passionate developers)
Will you pull your hair out trying to figure out how to get your change merged to any project that would actually impress people? Absolutely.
Are they still worth exploring? For sure.
Open source is a beautiful thing. We stand on the shoulders of tech giants... for free. It's crazy that software like React, NextJS, Serverless and the millions of NPM packages you need to scaffold a simple app are available on the web 😅.
That being said, it's not a great place for junior devs to start:
overwhelming complexity
high bar for entry
lack of guidance
Instead, try this
clone down a popular project
try to get it working locally
update a small feature
try and hit a debugger statement that you’ve added
This give you the benefit of exploring open source and what it’s like to interact with a production-grade codebase instead of fishing around the 1169 open issues only to fix a typo in the README 😅
**
They don’t actually want to know about you…
When your interviewer asks you to “tell me about yourself” or “how you handle conflict” or some other tired question - what they really want to know is this:
“Can I trust you?”
Your stories should revolve around: 
-proving your grit
-technical aptitude
-relevant tech
**
I had 500 15 minute conversations with developers from all over the world in the last 18 months.
Here are my takeaways:
impostor syndrome is prevalent and rampant at all levels (shocker)
most junior developers need to optimize their LinkedIn profiles
picking a good side project is something most developers want to do but don’t know where to start (just follow John Crickett and steal his projects)
networking, cold applying and learning in public ALL work - the trick is sticking to one long enough to see results
LI and X have awesome communities despite what anyone says to the contrary
I was personally shocked to hear just how many of us don’t feel good or smart enough. I do believe that some self-assessment is healthy and useful. 
I also believe that working remotely with cloudy expectations creates an environment for negative assessments to fester.
If it’s any consolation, know that basically everyone I’ve spoken to, from the senior at Amazon to the junior who just got hired feels like there is something missing from their tool belt.
**
I've worked with a lot of amazing junior developers so far in my career.
Here’s what made them stand out:
𝙩𝙝𝙚𝙮 𝙖𝙧𝙚 𝙥𝙧𝙤𝙖𝙘𝙩𝙞𝙫𝙚 - they seek out work to complete and pair with others without being asked. Oh, the pipeline blew up? They don't know the fix but are still investigating it.
𝙩𝙝𝙚𝙮 𝙬𝙧𝙞𝙩𝙚 𝙩𝙝𝙤𝙧𝙤𝙪𝙜𝙝 𝙋𝙍𝙨 - screenshots and before and after pics for UI changes - videos for bonus points! The best PRs have taught me something about a feature or approach I was not familiar with.
𝙩𝙝𝙚𝙮 𝙜𝙤𝙩 𝙜𝙪𝙩𝙨 - they volunteer to take on the tough stuff. They work on tickets just outside their comfort zone, get stuck, freak out and ask for help when needed
𝙩𝙝𝙚𝙮 𝙖𝙧𝙚 𝙘𝙪𝙧𝙞𝙤𝙪𝙨 - how does HotPotatoService work? Why are there so many tests? Why are there none 😮? They assume good intentions and ask why decisions were made... often we learn we don't have a reason 😅
Anything you've seen juniors on your team do that makes you go 😮?
**
5 Biggest mistakes of my coding career?
Not learning the fundamentals before diving into frameworks
Refusing to admit when I didn’t know something
Only taking on tasks I knew I could finish
Not understanding how engineering relates to business goals
Staying silent 🤐
That last one hurt me the most.
I thought I was playing it safe by taking on easy tickets. I nodded my head during estimation sessions and gave bland status updates. I never shared my ideas during meetings.
I just wanted to blend in.
It was the most dangerous thing I could’ve done.
They say the tallest blade of grass is the first to get cut.
Yeah, I guess. It’s also the one growing the fastest.
Companies need average developers more than they’d like to admit. But, if career trajectory and increased hire-ability is your goal, then playing it safe is your greatest threat.
**
Let me save you 90 hours of watch time from the Udemy Course you bought at the beginning of the year.
Between tutorial hell and your own side project is tutorial purgatory.
The awkward phase when you’re not quite ready to create a complex side project but aren’t getting much out of following along with a video.
Here’s how you limit your stay here:
𝗗𝗼𝗻’𝘁 𝗲𝗾𝘂𝗮𝘁𝗲 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀 𝘄𝗶𝘁𝗵 𝗰𝗼𝗺𝗽𝗹𝗲𝘁𝗶𝗼𝗻 - there is no Gold Star for finishing a 100 hour course
Gain enough knowledge to be dangerous
𝗘𝘅𝘁𝗲𝗻𝗱, 𝗯𝗿𝗲𝗮𝗸 𝗼𝗿 𝗿𝗲-𝘄𝗿𝗶𝘁𝗲 𝗮 𝗳𝗲𝗮𝘁𝘂𝗿𝗲 from the tutorial
Write detailed comments about what is happening in the code and why
Now you have a project that is similar to the tutorial but NOT exactly like it and  you’ve removed the training wheels from your learning exercise.
I break down a method I call the caterpillar learning strategy™️ to learn fast af in the comments.
**
2 safe bets for what to learn in 2024 as a full stack software engineer:
NextJS/Vercel
Rust
I’d go all in on Rust.
My bet is that it quickly becomes a mega-trend in software development. Microsoft is re-writing core Windows libraries with it. AWS also announced that its SDK for Rust is now ready for production.
Their are about 128 articles explaining the benefits of Rust for saving on infrastructure costs. As companies become more cost-conscious I’m betting we’ll see more adoption.
Here’s the thing - Rust is a major departure from dev-centric programming languages like Python and JavaScript. The learning curve is steep. Maybe too steep.
I think this means opportunity for you.
Learn the hard stuff while everyone is rushing to be a prompt-engineer. 
Re-write your Node/Express API with Rust and deploy it as an AWS lambda, be at the start of the next mega-trend.
**
“Career change is a completely different game from learning to code. Learning to code is the obvious part.It's the ticket to the dance.”
I sat down with Zubin Pratap, a former lawyer who switched careers into tech at 37 then got hired at Google and now mentors developers in addition to being a full time developer.
Zubin breaks down: 
the reality of switching careers and why the tech industry isn’t as unique as I thought
how he beat the Google interview 
his controversial take on the education business
why you need to ruthlessly prune your social media following
Link in comments.
**
The power of learning in public isn’t JUST networking.
You learn by teaching others.
You learn even more when you’re wrong.
I’ve updated my opinions a few times based on the things you all have told me:
Learning in public (so meta) isn’t a waste of time - you learn best by teaching others
Contributing to open source is not impossible and it can make you stand out
Clones of other projects aren’t inherently bad - why reinvent the wheel to learn a technology?
Framework developers are necessary and it’s not easy to be one
I’m sure I’ll be cringing at some of my other pieces of advice when I look back in a year or 2. It’s just part of the game.
**
Don't let the fear of looking dumb paralyze you.
You'll be forever haunted by 'why didn’t I ask that?'
The most talented developers I’ve admired the most are the first to admit when they don’t know something.
Take it from me (who’s still recovering from this syndrome):
People aren’t as smart as you think
Someone else wants to ask that question too, but they’re just as nervous
If you pretend to understand and don’t - you’ll be exposed sooner or later
Get comfortable being uncomfortable
You don't need to know everything to be successful as a developer.
You do need to get used to exposing your ignorance in a field that is as wide as it is deep.
**
As a developer, you aren't rewarded for how long you spend trying to solve a problem.
You're rewarded for completing it on time.
So don't spend hours scouring the internet when you could just ask your team mates how they might approach it.
For jeebus’ sake, don’t just say, “Can anyone help me with [x], I’m kinda stuck?”
Try this:
I’m having an issue with [specific problem] 
[code sample or link]
I tried [x] but it does not work
Does anyone have 15 minutes to pair with me or suggest an approach?
**
Ok maybe I was wrong about unit testing.
I took our team from 0 - 40% test coverage when I first joined.
It was an arbitrary threshold.
Our most recent project has no enforcement but it’s objectively more complex.
It’s more stable than the previous project with higher coverage.
I’m not saying tests have no place. I still write them but only when:
I cannot easily reproduce the functionality I want to test
I am refactoring something and I want to make sure it didn’t break
The code is on a critical path and I want to make sure I haven’t missed an edge case
I know some of you hate tests or have never written one.
What have tests ever done to you?
Install Jest or Vitest or Playwright and write your first test. It won’t hurt too much.
[video]
**
I got paid a total of 0 dollars from doing these 500 calls with software developers over the last 18 months.
It was a great investment.
I learned about what many of you are struggling with, met some amazing people, got some of you unstuck and a few of you even became customers of mine.
As much as I’d like to continue these calls, I know there’s a better way to reach more people and I just don’t know how to do it yet.
What do you suggest?

**
3 challenges you will experience when you to learn to code
Severe self-doubt when you move past HTML and CSS into JS
Learning that watch and type tutorials ≠ understanding
Discovering that finding a job requires a completely different skill set
But, overcome these and you win.
**
I’ve gone too far down the Reddit tech rabbit hole.
Apparently:
coding is a waste of time
you can learn JS in 100 minutes
no one is hiring
cyber security is the only safe bet
JS sucks - learn Python!
Python sucks - learn JS!
AI will replace everyone in 69 days
Meanwhile, in the real world:
developers are getting hired
interviews still suck
MERN/SERN is boring and popular
I’ve been learning JS for 10 years… I messed up apparently
YouTube/IG/X/LinkedIn ≠ Real life
**
Last year I helped over a dozen software engineers land their first role or their next one.
Here’s what I learned:
Networking works. Cold applying works. Do both.
Being like-able is more important than you think. Do some mock interviews or record yourself solving a problem. Would you hire you?
Junior developers ARE getting hired but less companies are explicitly recruiting for them.
Sneak in through another door. QA, DevOps and Product can be a better fit and leverage your coding skills.
DSA interviews are less likely than practical challenges.
The most important lesson in all this:
Your timeline will be different than someone else’s. Luck plays an important role. To be lucky you must be consistent.
**
The super boring story of how I went from junior dev to mid level to senior to eng manager.
Junior → Mid
I switched companies.
Mid → Senior
Switched companies again. Then I asked.
Senior → Manager
Switched companies again. Then I asked.
I’ve rarely been the best developer on a team.
BUT I have taken on high impact projects, solved tough bugs and studied what those just above me were doing differently. 
I copied them. 
Then I straight up asked.
Don’t underestimate the power of a simple question.
**
We've seen enough highlight reels from last year. Here were my biggest blunders in 2023:
Coding way too much as a manager. I fell into my comfort zone instead of improving our processes.
Not playing politics. Like it or not, presentations and publicizing your teams' work are important.
Focusing on the wrong metrics. I chased likes for too long. They don't equal cash or genuine engagement. At work I focused on arbitrary Lighthouse scores which didn't move the needle for the business.
There were many more 😅 but these stuck out to me as areas where I need to improve going forward.
Let’s see what I break in 2024!
**
My tech stack for side projects in 2023:
Create-React-App
GraphQL
Cypress
AWS
CSS Modules
My tech stack for my next failed startup idea in 2024:
Typescript
NextJS
tRPC
Playwright
Vercel
Edge Functions
OpenAI API
What are you building with this year?
**
I’ve told you not to use the term “passionate developer” in your profile.
I still think you need to be one.
In the short time I’ve been coding, web dev and JS has gone through an incredible amount of changes. I started with Jquery, AngularJS and ES5. I even wrote some JScript (look it up).
Since then we’ve collectively had to learn:
React
Serverless
GraphQL
TypeScript
ES6/7/8/9/10/11…
NextJS
Edge
Webpack
Jest
RTL
… 🥵
If you don’t find some intrinsic joy in coding, I imagine it’s tough to keep up.
Am I off base here? Do you need to enjoy coding to be good at it?
**
There are really only 3 trends I am watching for 2024:
NextJS
AI
Rust
A while ago, I wrote that create-react-app is dead and boy did some people get upset.
Lemme double down.
NextJS is our future as React devs. Ignore it at your own peril.
AI is gonna AI. I’m not on the existential crisis team… yet.
I do see a proliferation of “AI” startups which basically wrap around OpenAI’s API. For this reason, I think you should spend 10 bucks for some tokens on the Open AI dev platform and experiment with fine tuning and working with their API.
Rust will become a mega-trend. It’s a departure from dev-friendly languages and it can save enterprises significant infrastructure costs. High learning curve means most people won’t learn it which means more opportunity to be in a smaller group
**
I’ll turn 40 in a couple days.
This last decade started off pretty rough. Here’s the timeline from 30 → now:
Friend dies, his brother (and my business partner) sentenced to prison
Had new baby - a boy
Quit dabbling in the streets and got a legal job
Mom and girlfriend do an intervention. Got sober cold turkey
Drive Lyft/Uber and meet software engineers
Hmm, I’m bored lemme try coding to pass time
Switch addictions to coding and candy
Learn HTML/CSS/Jquery - first coding job is C#, SQL and AngularJS 🙄
One more kid - a daughter this time
Got kinda fat from candy and started working out
Finally get a six pack at 37
Job hop, get monies and learn from smart people and make many mistakes
Buy a few investment properties
Heart issue almost kills me - consequence of past life
Start business coaching developers and make first dollars online
Purchase first business
I don’t have many lessons to share here.
I’m an average person with an above average tolerance for rejection. I’m a stubborn SOB and probably have some unresolved addictive traits which have helped me in certain aspects of life.
I’m naive enough to try a lot of things and expect they will work out for me.
I’m happily dissatisfied with my progress so far.
I share some of these unglamorous parts of my life online because I distinctly remember feeling very alone in the early stages of this transformation. If you’re reading this and going through a rough period I hope you feel a little less alone.
There’s more of us out there than you realize and most just don’t talk about it online. 
You got this.
**
How do you get better at Javascript and ReactJS?
Build stuff.
Not specific enough? Try this:
Here are the subjects I struggled with the most and how I learned them through practice:
𝘗𝘳𝘰𝘮𝘪𝘴𝘦𝘴 - implement Promise.all or promise-ify a timeout
𝘊𝘭𝘰𝘴𝘶𝘳𝘦 - create a function that returns another function that can only be called 1 time
𝘛𝘩𝘪𝘴 - implement bind and call by leveraging apply
𝘙𝘦𝘤𝘶𝘳𝘴𝘪𝘰𝘯 - make a function that searches a deeply nested object for a value
𝘞𝘦𝘣𝘱𝘢𝘤𝘬 - 𝚗𝚙𝚖 𝚎𝚓𝚎𝚌𝚝 create-react-app and analyze the bundle size
𝘙𝘦𝘥𝘶𝘹 - understand pub/sub pattern and add Redux to a small app using Ducks architecture (look it up 😎)
If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge
**
CTO enters the Slack channel for devs only.
Ruh roh.
“Our app isn’t working as expected. Can someone take a look?”
It was around midnight on a Thursday and I was the only developer on call at this time. I decided to do what any good developer would do at this time and REST.
Reproduce the bug locally. Examine the source code. Set breakpoints. Test the fix.
I go over this method to find and fix bugs and how it actually got me promoted along with a short video for debugging.
**
Most people trying to start their own business focus on:
landing page
offer creation
website
email sequences
social media
When they skipped an important step:
have a skill or product to solve a problem
**
❌ Get hired 
✅ Apply to 5 jobs a day and go to 1 meetup a week
❌Scale my business to 6 figures 
✅ Book 10 new leads per day
❌Six pack abs 
✅ Eat 80% of my total needed calories
❌Learn DSA 
✅ Build 6 most commonly used data structures from scratch
❌Learn Rust 
✅ Re-build my Node/Express app with Rust
**
I got asked how I juggle having 3 kids, a business, a full time job and side projects.
I don’t really know how to best respond when people ask this because what they’re basically looking for is advice about how to maximize their time in a similar way.
Hot take: don’t.
I should also mention that I have a history of addiction.
😅
If you enjoy sports or fishing or taking long ass walks, then create a life that allows you to do that.
I replaced one very unhealthy addiction with an addiction that pays a hell of a lot more and that I enjoy. I also have a family and partner who respects and understands my brand of crazy. It works pretty well for our little tribe but for most people I suspect it would not.
**
Most advice will probably work for you. You just haven’t stuck with it long enough to see any results.
Or  worse, maybe you’re like me and you’re consistent and STILL don’t see any results.
You may have a different problem. 
You may need more volume. 
Lemme explain:
Around 10 years ago I got sober and started working out.
I saw zero results from my diet and exercise routine despite being consistent. It was deflating but I’m also a stubborn SOB.
I broke down and paid for an online coach 3 years ago and got better results in 90 days than I had in the previous 7 years.
What changed?
He cut my calorie intake significantly and increased my workout intensity drastically. I went from 30 mins a day of bumbling around in the gym to doing sets of a 100 burpees at a time.
My body responded.
Apply this approach to your job search or learning to code.
Consistency > Intensity but < Consistency + Intensity
**
What does Erik Andersen really think about the junior developer job market and learning in public?
Do I agree with him? 
I sat down with the world’s happiest engineer and chatted about: 
why LinkedIn is better than X
how to actually get hired in tech
gaining experience as a developer when you have none
his hot takes on coding bootcamps and the developer job market
I may not agree with all his views but I respect the hell out of him for keeping it real and taking time in between being a tech lead, YouTube content creator and one of my favorite people on LinkedIn to talk with us and you give the kind of practical advice you don’t find often enough.
Check out his YouTube channel “Junior Developer Jobs Podcasts” and listen to our convo below.
**
If you’re reading this post, I’ve made some assumptions about you:
You’re a software engineer
You have above average intelligence
You probably look pretty good (don’t tell HR)
I’ve given a lot of advice and now I want yours, you good looking nerd.
I recently became the owner of a coding bootcamp, Parsity.
Updating the curriculum to include NextJS and Typescript (coming soon) was the fun part, now the real work begins.
I know the power of a bootcamp is not just in the knowledge transfer but in getting people hire-able.
I’m working on a LinkedIn course that is short, sweet and super actionable to help avoiding most of the mistakes I’ve seen. 
Next is where I want your advice for where to focus:
Internships
OR
Curating open source opportunities
What’s your take?
**
Typescript or Javascript?
TDD or TaDD (Testing After Development's Done)
Redux or Context?
OOP or FP?
Like most things, it depends.
The problem I see lately is that one solution is seen as THE solution and you are a fool if you disagree.
I think we can all agree that rebase is dumb though right?
**
I wrote to Kyle Simpson about a week ago and I honestly never expected to get this response:
“I’d be happy to appear on your podcast” 😎
Wait, what?
Holy sh*t, I’m going to be interviewing my idol? 
So many intruding thoughts:
I still don’t know JS.
What if he reads my old posts and then bails?
Am I smart enough to ask him anything?
Will he quiz me on closure?
😬
I’m a bit neurotic if it wasn’t clear.
You can check out our conversation in the link in the comments. Kyle breaks down his journey into coding, the pros and cons of social media fame, how he might learn JS nowadays, his interview experience and a surprising take on JS frameworks that caught me off guard.
If you’re a hiring manager looking to snatch up Mr Simpson, he shares what his dream role might entail as well 😉.
The main takeaway I got from this interview is that Kyle is truly who he says he is - a human-centric technologist and not in some corny, superficial way. He took time to chat with me in the hopes it will help others who may be on a similar journey and offered a candid glimpse into his own career and struggles.
My one regret is that I did not ask him about his majestic beard routine. Maybe next time.
**
Are you a JavaScript developer or a ReactJS developer?
If you’re a front end or full-stack developer, your job probably depends on you being a solid ReactJS developer.
Unfortunately, those same skills don’t necessarily translate to being a proficient JavaScript developer.
In fact, I was doing a mock interview last year with a person who tried to use setState while solving a problem that required a pub-sub implementation. 🥲
Here’s the thing, we were using Vanilla JS. No frameworks or anything.
I give a challenge to most of the mentees in my program and I’m going to share with you.
Nothing ground breaking.
Create a form with a button that submits some data to an API and shows a success message on the screen for a couple seconds. Maybe you’ll find this easy. 
Good.
Maybe this will be a reminder to practice your JS skills along with whatever framework you’re currently using.
Also good.
Check it out in comments below.
**
What is the 1 thing that separates developers who get hired vs those who don’t?
I’ve thought about this a lot, especially as I’m now the owner of a coding bootcamp.
I’ve seen too many success stories (and failures) from unlikely people.
The guy who could barely complete a for-loop? Hired before the bootcamp ended.
The woman with a CS degree? Nearly a year and 100’s of applications for her to get a break.
There is very little rhyme, reason or “hack” I can confidently suggest.
Except this:
Grit and consistency WILL get you to the finish line. The surest way towards failure is to quit. Most people will choose this route.
Don’t let your skills atrophy. Build stuff or do LeetCode or Odin Project. Do something where your hands are on a keyboard making code do stuff.
Not getting interviews? Maybe work on that
Getting interviews and failing? Good. Work on that.
**
One of my mentees just got hired after we built a very boring full stack side project.
He never showed it to a single person.
The project didn’t get him hired at all. It did give him confidence and something interesting to talk about during the interview, however. Might even turn into a small business for him.
**
Write code for long enough and you’ll see every sacred cow get slaughtered:
TDD or Die! - except there are  teams that have <1 test and deliver safely (manual QA anyone?).
Typescript is the ONLY choice for modern web apps - unless maybe your team prefers JSDoc. Or better yet, you don’t want or need types to solve a problem you didn’t even know you had.
Pair Programming for Better Code Quality! - but sometimes, it can be a slow and lop-sided affair where you just watch someone else type
CI/CD is a Must! - except when your project involves highly complex or safety-critical systems where manual reviews are essential. CI/CD might introduce more risks than benefits.
Microservices for scalability and flexibility! - unless you're dealing with a small application where the overhead of managing 420 of services just doesn’t make sense.
I was naive and arrogant enough at one point to assume there was THE way to do something based on some article or bald dude with a blue background on LI.
Hate those types amirite?
I still think there are patterns that tend to work better than others and in the absence of time or risk - it’s best to pick a tried and true approach. 
That being said, if you can’t argue for both sides of an argument, you may not understand it well enough to argue for either.
**
Most developers would benefit more from reading “How to Win Friends and Influence People” than “Cracking the Coding Interview”.
Here's the thing: 
Technical skills can get your foot in the door.
Soft skills open up the rest of the house.
Knowing how to navigate human dynamics, to empathize and connect, to articulate your thoughts and influence others – these are the tools that build careers better than learning another programming language.
Also - read The Phoenix Project if you’re looking for some non-dry coding knowledge that you didn’t get in college 😉.
**
After 10 years in software, I can say with 100% certainty that you shouldn't promote skilled engineers who make others feel dumb.
**
It’s OK to self-reject. But most of you are doing way too much of it.
If you meet 50% of the requirements and are within 1 - 2 years of the desired YOE you must apply.
If you meet 100% of the requirements and have all the YOE, you’re probably over-qualified.
**
My old Git flow:
make a branch without pulling down the latest changes
commit after days of coding
gold star messages like fixed bug
manually digging through commits on GitHub to figure out where stuff changed
stress
My new Git flow
small commits at least daily
useful messages that reference the ticket I’m working on
using alias commands to add commit switch branch and other work-specific flows
debugging using git bisect and git log
knowing how use Vim for messages but on purpose this time
Honestly, I think people over-complicate Git. Use a flow that works for you and if you take nothing else away from this, then I beg you, alias your commands and save a few seconds from a task you’ll be doing tens of thousands of times.
**
Maybe you’ve read my title or seen my follower count and I’ve fooled you.
To be very clear, I still:
get nervous speaking in meetings
Google the difference between slice and splice
fail interviews
over-think that dumb thing I said
get intimidated by people’s stupid titles
We’re all figuring out. Some of us are just better at hiding it than others.
**
Creating a side project is draining.
Here's my cheat sheet so you'll never run out of side project inspiration.
4 easy ways to generate quality side project ideas:
Steal from others. Check out sites like Acquire.com and WellFound to see what small startups and 1 person businesses are building for inspiration.
Don’t build a house. Add a brick. Check out their feature requests or reviews for an app you’re using. What do people want? Maybe build that.
Start with an API on rapidAPI or use OpenAI (everyone’s doing it 😎) and think what you can build around it. For example, can you scrape a user’s top posts as a way to train GPT on their voice and content?
Automate something boring and tedious. Is there something at work or in your personal life that you do manually that could be automated? Spreadsheets are an easy target. Fix it for yourself and others.
You also don’t need to solve anything. A great side project really only has 1 metric for success: you learned something.
**
I’ve spoken with about 500 developers in the last 12 months. I won’t be doing any more 15 minute chats in the foreseeable future.
But the truth is, most beginners ask the same 3 questions:
What’s wrong with my resume?
What should I build for a side project?
How do I get hired?
So I want to answer them for free:
Your resume is probably average and sounds like many others. Remove any mention of junior or aspiring and use this framework: did [x] using [y] which led to [z]. Think from the recruiter’s perspective. Do you sound like a risk to hire? Make yourself less risky and don’t tell them everything. Why do they need to know your last job was at a french fry shop? Lead with your developer experience or technical projects.
Side projects should teach you something new or keep your skills sharp if you’re not working. Really, they should be enjoyable. They’re an alternative to grinding away at toy problems and expose you to challenges which you can give yourself. Want to understand how to implement role-based authentication or get your hands dirty with serverless? Build it out. Also follow John Crickett, he has a ton of cool projects to make.
Now here’s the hard part and the truth no one wants to hear: getting hired is a game of skill and luck. If there is one trait that I see in successful grads, it is their consistency. They just didn’t stop. They outlasted their fears, insecurities and the fear mongers. They changed what didn’t work and picked a strategy. Mass apply or network or do both. Then don’t stop.
**
My first senior engineering role was as the lead for a startup that an acquaintance was building.
3 years later and the product never launched.
The pay was non-existent.
The experience was enormous.
I learned more about how to build a product, work with designers and use AWS in those 3 years than I ever learned at work.
**
These things will ruin you as a software developer:
Being too smart for frameworks 🙄
Avoiding data structures and algorithms
Refusing to ask for help
Online debates about why someone is dumb for using a certain stack/language
Avoid as many of these as possible.
**
Friendly reminder that you don’t need to start your own business or have a side hustle if you don’t want to.
I’ve been hustling since I was 10 years old. Car washes, painting houses, selling mixtapes. Crime. Whatevs.
As an adult, my side projects give me energy and purpose. Coding is my hobby and profession. It doesn’t have to be yours though.
Despite what you’ve read and perhaps against my own advice, there is nothing wrong with going to work and then closing your laptop.
I’ve met some amazing developers who don’t touch code on the weekends.
**
I have a confession:
I never really wanted to become a talking head on LinkedIn. I actually just wanted to promote my courses and share the advice I wish I’d been given.
20k followers, hundreds of coffee chats and a dozen podcasts later and I now see writing on here has been one of the best decisions I ever made.
I’ve met too many amazing people to count and even made some real friends.
I also sold some products…. so there’s that too.
Well, now I can finally reveal the next chapter in this twisty story:
I am now the owner of Parsity Coding School. What started as a DM on LinkedIn from the owner, Aaron, turned into a partnership and finally into an offer to take over the ownership.
I’ll be honest, I’m a little scared.
I’m also excited for what’s next. 
Massive curriculum updates, more community engagement and partnerships and so many Slack emojis. I’m honored to take Parsity to the next level with Aaron’s guidance and the amazing program he’s built up.
I can’t wait to indoctrinate, I mean educate, many more developers with a program I’m proud to be part of.
**
Perhaps I’ve fooled you.
You see my title or follower count and make some assumptions.
Just to be clear, I still:
get very nervous about public speaking
google the difference between slice and splice
fail interviews
feel like I should know more than I do
buy courses that I never finish
Luckily, I have the benefit of history to give me confidence. In between my mistakes and fumbles, I’ve actually done some cool stuff.
That doesn’t mean I’m immune to my own insecurities. I’ve just learned to ignore them better.
**
“It’s hard to work with you since you don’t really know the basics of JavaScript”.
A co-worker called told me this years ago at a small start up.
It stung to hear that. He was also right.
I was not junior either. I had been using AngularJS for a couple years. The problem was that I’d become a framework developer, meaning I knew how to use AngularJS but didn’t understand the JS behind it.
I resolved to suck less at JS.
I learned the basics including promises, async/await, this and design patterns. I went through all the Kyle Simpson books. I made janky apps to internalize the information. I gained knowledge and confidence.
Understanding the fundamentals provides a lot of benefits:
frameworks become less magical
you start seeing patterns everywhere
less learning curve when switching between technologies
libraries become more read-able
Frameworks are great. You need to know them. Just don’t build your house on a shaky foundation.
**
Is copy/pasting really so bad?
Honestly, it’s how I’ve survived over the years as a developer.
Every new workplace where I went and every contract I completed, I took note of what the smarter developers were doing.
what books had they read?
I read their pull requests, even when I wasn’t the reviewer.
I copied their styles for writing tests, React components and backend code.
I asked how they investigated and debugged critical issues.
I imitated their mannerisms and studied how they spoke in meetings.
I’ve been lucky. I copied from the right people at some amazing companies and worked with developers who I truly think might be genius.
You don’t have to get lucky though.
Nowadays, through the University of YouTube, you have the ability to learn from other amazing developers and copy what makes sense to you.
A few professors who I’ve learned a lot from recently include
The Primeagen
Theo from Pinglabs
Blue Collar Coder
Anyone else you’d suggest?
**
There’s too much to learn.
A new framework to replace the old one that you just learned.
Obscure algorithms from dudes with too many letters in their last name.
Everyone is switching to AI/ML now? Should you learn Python?
While you can’t JUST stick to the basics, if you chase every shiny new technology you will become a Swiss Army Knife developer. You can do a little of everything… poorly.
Instead:
Identify mega vs micro trends in software development:
Recent mega trends include K8s, NextJS, Serverless and TypeScript.
Micro trends might include tRPC, edge computing and PWA.
Use side projects to gain experience with technologies that make up mega trends and keep your skills relevant. 
Gamble a bit with the micro trends. If you’re lucky, some of them will become mega trends and you’ll be first in line to take advantage.
**
No, TypeScript is not dying.
Turbo dropped TS and Svelte kinda did too. Drizzle (a cool kid JS ORM library) made a joke tweet that they were as well. Cue the fear mongers, TS haters and some toxic Tech Twitter/X “dialogue”.
Let me be totally honest - I’m not a big fan of TypeScript.
A smarter developer used the term “type gymnastics” which accurately sums up my experience with it thus far.
I’m still learning it and using it.
It’s a mega-trend in Software like Serverless, SPA and ReactJS.
I’d be foolish to ignore it or understand the benefits.
**
A simple hack to save your coding portfolio:
Use a template.
Before you yell at me that it’s “cheating”, consider this:
hacking apart someone else’s code to fit your needs is a task in itself
your audience will likely be recruiters or non-coders
If you’re morally opposed to templates for some reason, at least add Tailwind and ask Chat-Gippity to “style this code using Tailwind like a modern SAAS app”
**
Code is just 1 tool in a developer’s box.
There are some equally important ones you’ll want to pick up along the way:
project management
public speaking 
system design
Not only will these nice-to-haves become must-haves at some point in your career but they are more difficult to offload to an AI assistant.
**
Listening to too many influencers on LinkedIn will get you stuck in a learning loop.
Goes a little something like this:
Tech bro with a blue background tells you about hawt technology 🔥
You, a little insecure about your own skills, think this is THE way to get noticed.
You buy a course or a book or go down a YouTube rabbit hole.
Repeat this a few times and you will be a sub-par developer in many technologies instead of good at a couple. 😅
♾️
Instead:
Focus on your core skills and identify trends in the local and global market (hint: ReactJS ain’t going away)
Resist the urge to add more tools to your tool belt early on
Focus on getting interviews and learning from your failures or successes
Use a side project to reinforce your current skills and incrementally add new technologies
**
2 ways to see if you’re growing as a developer:
Who’s holding hands? When you first start writing code, others are holding your hand and leading you towards solutions. As you improve and move up the ladder, you are onboarding and helping others with their problems.
What is the impact of your solutions? If the work you’re doing is creating patterns for others to use, you’re on a good track.
**
The recipe for an amazing side project when you don’t know what to do:
Pick an API - OpenAI, Binance, RapidAPI are the first places I’d check.
Ideate - what are the features of this API you can build something around? Perhaps a stock tracker that integrates with OpenAI to give targeted trading advice.
MUP - what is required to build the minimally usable product? Pick 1 or 2 core features
Sketch - a white piece of paper and pen will do. Draw out the main features of the app. Ask “and then what?” For example, they visit your site, and then what? They click on a button and then “what”?
Pick 1 or 2 new technologies you want to learn and use them. Maybe this is your chance to learn TypeScript or Cobol. Whatevs.
Deploy it and buy a domain on Route53 (or whatever) for like 15 bucks. It will look pro.
Get frustrated. Pull out your hair (I don’t have this problem) and learn more than any tutorial can teach you.
**
There is a valuable skill that will set you apart from most developers. It will go from a nice to have to a requirement if you want to move into leadership.
Public speaking.
If you’re like me, maybe you think you can just hide in your code hole and never speak.
I tried this method for a few years and it sorta worked.
I didn’t get fired. 
I also couldn’t get promoted or make much of an impact.
Now, as an engineering manager, my job is a lot of coding but it’s also a lot of speaking. To get over my fear I did a few things:
Write down questions to ask during meetings 
Volunteer for a lunch and learn
Explain my code over a video using Loom (I made so many videos I’ve never shared)
Make a commitment to be the first to break the silence in a meeting - even with a dumb question (see #1)
You’re probably your worst critic. We’re all much too wrapped up in ourselves to remember the dumb thing you said in that meeting last Tuesday.
**
I became an engineering manager a couple years ago and I’ve seen all your resumes. They go something like this:
“Passionate developer and aspiring coder looking for first role in tech”
“Built this [thing] using this [technology]”
Github link to site that I put in mobile view immediately. And it breaks.
😅
Last week, me and some members of the Not Another Course community pair programmed one member’s resume.
He got an interview the next week.
Here’s the TLDR;
de-risk yourself - no one wants to take a chance on someone and recruiters have even less incentive to do so. Sell yourself as a developer. Remove junior. Remove aspiring.
the power sentence template - [role] on [x] with [y] which led to [z] - “led development on unit testing suite using Jest and React-Testing-Library which led to increased stability for code releases and a 50% decrease in bugs”
use bold formatting for the good stuff - it’s easy to gloss over a resume when you have 100 to go through so lead their eyes where you want them to go
only include links to projects you really want people to see - if you don’t have one either build one or just don’t add it. The risk is higher than the reward in many cases
add some quirk - a little humor can go a long way and can make you stand out in a sea of resumes that sounds basically the same
There’s more for sure but this should improve 99% of the resumes I’ve come across.
**
Popular open source repo Turbo went from TS → JS and developers are furious.
Javascript developers aren’t “real” developers.
TypeScript is a joke. It was only made for C# devs to write client side code.
These debates and low blows aren’t helping anyone.
Truth be told - I don’t love TypeScript.
I won’t ignore it however. You shouldn’t either. It’s a mega-trend in software, like Serverless, SPA and React.
It’s more than just JS with types but that’s a fine place to start.
Here’s how I got started with types in JS:
add JSdoc notation to an existing app - a nice warm up for TypeScript and thinking in types
convert a small existing project to use TS and figure out how the TS config works
start a new project with TS and restrict the use of any types 😉 with a linter
refactor previous code to use advanced features like unions, generics and omit
I’m what I’d consider a TS n00b. For those learning, how did you start?
**
5 phases of a software developer’s career:
I got hired! My work is done!
I know nothing. I’m an awful developer and a burden on this team, the company and the world at large.
Can’t believe I solved that problem and delivered that feature. Perhaps I’m not the absolute worst developer in the entire universe.
I should be paid more. Time to grind DSA and system design.
I got hired! My work is done!
**
The interview just started. Camera turns on and the interviewee looks happy to be here.
We get into the technical portion of the interview after chatting.
I figure why not start off with a soft-ball question?
“Can you explain the difference between a class and an id in CSS?”
Them - 🤔
Maybe I did not phrase this question correctly, I think.
“How would you use a class vs an id? Like how do you write them?”
Them - 🤔^😅
The interview proceeds as planned. But in my mind, it’s already over.
I know everyone is in a rush to learn NextJS, React, Vue (but why?) or Angular.
Don’t forget that the browser still runs on HTML, CSS and JS.
**
The most talented developers I’ve met in real life are NOT on LinkedIn, X or Medium.
Like 99% of the people reading this - they’re here to scroll and troll.
What does that mean for you?
Take our advice with a grain of salt.
We may be the most vocal developers but it doesn’t mean we are the best to listen to. Myself included.
Ask yourself these 3 questions before blindly following what some talking head posts on a social media platform:
Does this person seem happy?
Do I want to be anything like them?
Do their actions support their claims?
If the answer to all 3 is no. Maybe don’t follow their advice.
**
They told you don't need Redux.

𝘛𝘩𝘦𝘳𝘦'𝘴 𝘵𝘰𝘰 𝘮𝘶𝘤𝘩 𝘣𝘰𝘪𝘭𝘦𝘳𝘱𝘭𝘢𝘵𝘦!
Use this library! It’s way better!
My least favorite one: "𝘑𝘶𝘴𝘵 𝘶𝘴𝘦 𝘊𝘰𝘯𝘵𝘦𝘹𝘵! "

With around 8.2 million downloads just last week, there’s a pretty high chance the next company you join will leverage this library.

So stop being scared of it.

Try learning these concepts/tools:
- observer pattern
- Functional Programming basics
-Redux DevTools extension
Also check out Redux Tool Kit and have most of the difficult parts abstracted for you.
And when you're ready to get your hands dirty with some old (and new school) Redux check out my e-com React App Challenge here
https://www.yourcodecoach.com/redux-node-challenges
**
Software engineers who roll their own solutions are often very smart.
Software engineers who understand how to leverage frameworks and libraries are often very hire-able.
**
Building a side project isn’t for your portfolio site.
It fills in your knowledge gaps and keeps you relevant in a constantly changing market. Learn a new framework or language. Deploy it using something you’ve heard of but haven’t tried.
Learn how to market and attract users or developers to contribute.
Monetize it using a freemium strategy or through ads.
The ultimate form of learning by doing.
**
The dirty secret about coding interviews:
No one knows what the hell they’re doing.
We all think we have THE way to find the right candidates.
I’ve spoken with many of you who are devastated after failing an interview. You believe this is a signal that you are not talented and lack fundamental skills.
It may be true.
It also could be that your interviewer is not equipped to determine your ability.
Perhaps they are biased from their own experience and ONLY looking for solutions which they are familiar with and understand.
Maybe they don’t know closures very well or how to explain promises to a 5 year old either.
Maybe they’re just having a bad day… 🥲.
There is less formal training for interviews than you might imagine. Especially at non-tech companies and startups.
Lord knows I’ve failed more than my fair share of interviews. It hurts. I also know it’s a winnable game. Learn from the loss and keep playing.
**
I used to take pride in the fact I was not good at CSS.
As if this made me a “real” developer.
What a fool I was.
I know JS is moving at a breakneck pace lately with major changes in React, NextJS, NodeJS and whatever framework is trying to replace ReduxJS today.
CSS has been quietly introducing a ton of cool new features.
Container queries (media queries based on the parent container)
Nested rules (goodbye Sass!)
Scoped CSS (basically native css modules)
There’s a lot more that I have yet to experiment with but it’s an exciting time to re-introduce yourself to CSS.
**
A mentee of mine asked me a great question this morning:
“What is a practical thing I can do to get closer to senior developer?”
I thought about what worked for me and others I’ve seen over the years.
What was one thing they all had in common?
I mean, they all wrote above average code.
They took ownership of large areas of the codebase.
But what was 1 practical skill they all shared?
❌ Understanding closure?
❌ Command of recursion?
❌ Writing code in Vim? Or Emacs 😮?
✅ Debugging.
When sh*t hits the fan, the seniors are the first to get called.
They understand how the different systems are orchestrated.
They keep cool (or at least fake it) under pressure.
They have a fix but also insight into the origin of the issue and how to avoid it in the future.
That being said, you cannot cheat time.
You don’t have to take the long route though.
Volunteer for an on-call rotation, look up the fix your team mate created for a bug and raise your hand when a fire happens. Seek out experiences instead of waiting for them to happen to you as a way to accelerate your trip from point A to point B.
**
The job market for developers doesn’t suck.
It’s just less piping hot.
And expectations have risen.
So yes, getting that first role is difficult and more luck is involved than many would like to admit.
A mentee of mine had that same issue last year and I suggested we pivot into searching for QA roles.
Here’s what he did:
- 𝘚𝘵𝘶𝘥ied 𝘊𝘺𝘱𝘳𝘦𝘴𝘴 𝘢𝘯𝘥 𝘚𝘦𝘭𝘦𝘯𝘪𝘶𝘮
- 𝘗𝘳𝘢𝘤𝘵𝘪𝘤𝘦d 𝘸𝘳𝘪𝘵𝘪𝘯𝘨 𝘢𝘶𝘵𝘰𝘮𝘢𝘵𝘦𝘥 𝘵𝘦𝘴𝘵𝘴 and web scrapers
- 𝘜𝘱𝘥𝘢𝘵𝘦d 𝘩𝘪𝘴 𝘳𝘦𝘴𝘶𝘮𝘦 𝘵𝘰 𝘳𝘦𝘧𝘭𝘦𝘤𝘵 𝘳𝘦𝘭𝘦𝘷𝘢𝘯𝘵 𝘘𝘈 𝘱𝘳𝘰𝘫𝘦𝘤𝘵𝘴 𝘧𝘳𝘰𝘮 𝘵𝘩𝘦 𝘱𝘳𝘦𝘷𝘪𝘰𝘶𝘴 𝘴𝘵𝘦𝘱
- 𝘈𝘱𝘱𝘭ied 𝘢 𝘭𝘰𝘵

He landed a role at a tech company shortly after as a QA automation engineer where he wrote code for end to end test suites.

There’s more to the tech-o-sphere than ReactJS. There’s DevOps, QA, product, data, sales... 

Don’t limit yourself to what your bootcamp taught you
**
Nothing is quite as embarrassing as code you wrote blowing up in production and someone asking you “hey how’s this supposed to work?” and you respond “I don’t know, my pet robot wrote it” 😬
This happened to me.
I ripped off some code for my first project at work that crashed shortly after the release. I couldn’t explain how it worked - only that it was supposed to.
I still copy and paste code from AI tools or Stack Overflow. Now, I make sure that I understand and refactor the code to make it my own for when it inevitably needs to change.
If you’re blindly copy/pasting code from AI tools or Stack Overflow that you can not explain then you need to seek help for your condition.
The disease is also the cure:
Your AI overlord can explain its code and if you’re in the beginning stages of your dev career then  should re-write what you’ve been given to make it your own.
Add a test or 2 to prove it works (link in comments cuz I like you)
Hopefully this saves you a little pain in the future.
**
You’re having trouble coming up with solutions to problems as a software developer because you’re re-inventing the wheel.
As a junior developer, there are zero problems you will encounter that haven’t been solved a dozen times over. There are tried and true approaches for that feature you’re working on.
But you don’t know what you don’t know.
Here’s where I’d start:
look up meta-software patterns- the general design patterns that dominate the field
familiarize yourself with language-specific patterns - like the module pattern in JS
read up on framework patterns like presenter/container and HOCs for ReactJS
You’ll begin to notice that much of the code you write either fits into a larger pattern or implements smaller patterns. You’ll be a more confident and efficient developer because of it.
What are some common patterns you have encountered that would’ve saved the younger you?
**
"But my friend got hired because of their portfolio!"
That's great for them. I would still caution the majority of developers from spending too much time on a site that:
No one will really look at
Becomes immediately irrelevant after your first job as a developer
Takes time away from preparing for technical interviews
You've heard it's the golden ticket for junior devs to land a dream job. But let's be real: your portfolio probably won't be the reason you get hired.
If you are hell bent on creating a portfolio please:
Make it responsive
Use a template or learn some design (or have GPT style it for you 😉)
Clean the console from all those logs you added
**
Your idea of the 10x developer is all wrong.
It’s not a coding robot pumping out ten times as much code as us regular flesh bags.
They’re not producing code that is wildly more efficient or faster than the average developer either.
Great developers magnify the power of the team.
They take on tasks with more leverage to have greater impact.
They mentor, document and create patterns for others to leverage.
Their greatest contribution might not include writing any code at all.
If your goal is to be a mega-hyperbole-super-senior software engineer, you may need to take a step back from writing better and better code and start thinking “How can I make working on this team a little better?”
Can the deployment process be improved?
Are code reviews useful?
How can we ship code faster with less bugs?
These kinds of questions will lead you down rabbit holes that lead to more interesting problems to solve and make you the kind of developer who stands out on your team.
**
5 things the gym can teach you about coding:
Growth mindset - our body, like our mind is not fixed or as limited as we believe.
Humility - there is always somebody better than you. Learning a new programming language or lifting a larger weight will keep you humble.
Delayed gratification. If you stick with either endeavor you will see long term benefits and fulfillment.
No one is judging you (as much as you think). People are focused on themselves, not you. We’re all looking in the actual mirror or the proverbial mirror at ourselves.
Age limits don’t exist. Despite what you think - the gym, like the software industry is not controlled by 20 somethings and as long as you’re breathing, its a good time to get in shape or learn a new skill.
6. Help: Stuck? Can't lift any further, can't find a solution? Just ask. People in tech and gym are super helpful
7. Discipline: Buying that course and membership is like having a million dollar 'idea', ie, it does nothing. Show up everyday, even if its just for a small amount of time and get things done
8. Process: There is a reason why you should not jump to advanced exercises or Tailwind CSS before CSS, there is a process, do not skip steps
Overloading is needed when working on coding projects in order to see improvement
For all you gym rat coders out there, what are some similarities I missed?
**
They told you don't need Redux.
𝘛𝘩𝘦𝘳𝘦'𝘴 𝘵𝘰𝘰 𝘮𝘶𝘤𝘩 𝘣𝘰𝘪𝘭𝘦𝘳𝘱𝘭𝘢𝘵𝘦!
𝘛𝘩𝘦𝘳𝘦 𝘢𝘳𝘦 𝘣𝘦𝘵𝘵𝘦𝘳 𝘴𝘰𝘭𝘶𝘵𝘪𝘰𝘯𝘴!
My least favorite one: "𝘑𝘶𝘴𝘵 𝘶𝘴𝘦 𝘊𝘰𝘯𝘵𝘦𝘹𝘵! "
With around 8.2 million downloads just last week, there’s a pretty high chance the next company you join will leverage this library.
So stop being scared of it.
Try learning these concepts/tools:
obeserver pattern
ducks architecture
FP principles
And when you're ready to get your hands dirty with some Redux check out my e-com React App Challenge here [link to rtk]
**
You’re not using this pattern in your codebase and it’s going to cost you.
Let’s take a look at some “harmless” code
import axios from 'axios';

const api = axios.create({
	baseURL: 'https://api.example.com',
});

export default api;
​
Here we are using it in another class.
import api from './api';

class UserProfile {
	async getUser(id) {
		const response = await api.get(`/users/${id}`);
		return response.data;
	}
	
	async updateUser(id, data) {
		const response = await api.put(`/users/${id}`, data);
		return response.data;
	}
}

export default UserProfile;
​
Everything works!
Except now your team wants to switch to using the native window.fetch method. Simple fix right? Well except you are using api in a few hundred files at this point. Oh and fetch expects some additional configuration for put and post requests.
Ruh roh.
What you thought was a quick fix ends up being a manual, error-prone process that requires a full regression of the entire app to make sure nothing broke unexpectedly.
Lame.
You could have avoided this mess by using the facade pattern.
Here’s a refactor:
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://api.example.com',
});

class ApiClient {
  get(endpoint) {
    return api.get(endpoint).then(response => response.data);
  }

  post(endpoint, data) {
    return api.post(endpoint, data).then(response => response.data);
  }

  put(endpoint, data) {
    return api.put(endpoint, data).then(response => response.data);
  }
}

export default new ApiClient();
​
We’ve abstracted the http client interaction behind a facade, making the actual usage simpler and more consistent. The public methods are uniform and it’s trivial to update their implementation. Now, when the team lead makes the decision to swap out axios for fetch we make an update to a single file:
const BASE_URL = 'https://api.example.com';

class ApiClient {
  get(endpoint) {
    fetch(`${BASE_URL}${endpoint}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`GET ${endpoint} failed with status ${response.status}`);
        }
        return response.json();
      })
      .catch(error => {
        console.error(error);
      });
  }

  post(endpoint, data) {
    fetch(`${BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`POST ${endpoint} failed with status ${response.status}`);
        }
        return response.json();
      })
      .catch(error => {
        console.error(error);
      });
  }

  put(endpoint, data) {
    fetch(`${BASE_URL}${endpoint}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`PUT ${endpoint} failed with status ${response.status}`);
        }
        return response.json();
      })
      .catch(error => {
        console.error(error);
      });
  }
}

export default new ApiClient();
​
The public methods are the same but their implementation has changed. Tests continue to work because you were smart and mocked the apiClient rather than the underlying library 😉.
This is one of those patterns that requires low effort but provides huge return.
**
17k followers and 1.5 million impressions on LinkedIn and I’ve barely had a “viral” post.
Here are a few lessons I’ve learned along the way:
be consistent - LinkedIn rewards it and your audience will reward you
commenting on posts from larger accounts can grow your following and create connections you could never dream of
promoting others is a great way to promote yourself
people can smell fakes - don’t be one and write what you actually think
you’re smart but no one wants to read a block of text with big words - write at a 5th grade level and don’t be afraid to use “bro-etry” If we wanted an essay we’d read Medium
figure out who your audience is and write for them
wrote a great post? sweet, post it again a few weeks later - I guarantee most of your audience did not see it or already forgot about it
the opening sentence will make or break the post - start off with an interesting number or a hard stance which you can elaborate on further
I think harvesting likes is a silly goal if you’re trying to land a job as a developer but for those of you who are trying to build a brand as an engineer for business, fun or whatever, I hope you find this helpful.
**
Maybe don’t follow my advice.
Will it work for you? I sincerely hope so. It has worked for me but maybe you don’t want what I want.
Maybe your goal does not include climbing the engineering ladder or managing others. Maybe you’re sick of JS and want to go into Product Management. Perhaps coding is a means to a lifestyle you want to live and you don’t want to create complex projects on the side.
That’s OK.
You should have some idea of where you’re headed however or you may end up following the random advice of talking heads on social media platforms and find yourself in a destination you did not intend.
**
Some of my most hated advice for junior developers or bootcamp grads is to contribute to open source.
Will it make you stand out? Maybe. (I think a lot of you over-estimate just how involved most software developers are in the coding community. Twitter and LinkedIn are a bubble with the most passionate developers)
Will you pull your hair out trying to figure out how to get your change merged to any project that would actually impress people? Absolutely.
Are they still worth exploring? For sure.
Open source is a beautiful thing. We stand on the shoulders of tech giants... for free. It's crazy that software like React, NextJS, Serverless and the millions of NPM packages you need to scaffold a simple app are available on the web 😅.
That being said, it's not a great place for junior devs to start:
overwhelming complexity
high bar for entry
lack of guidance
Instead, try this
clone down a popular project
try to get it working locally
update a small feature
try and hit a debugger statement that you’ve added
This give you the benefit of exploring open source and what it’s like to interact with a production-grade codebase instead of fishing around the 1169 open issues only to fix a typo in the README 😅
**
When you land the job, that’s the last thing you’ll need to know how to do is traverse binary trees in O(h).
There will be bugs.
There will also be network requests to debug.
The junior-est way to go about investigating an issue on the server is to replicate the scenario on the front end to hit the server and repeat this process 100+ times until you figure out what’s going on.
I’ve seen too many of you doing this 😅.
Check out the method I use in this video you can use for some ethical hacking and debugging of your own codebase.
**
You know you need a good side project but you don’t know where to begin.
As much as I want to build these products, I just don't have time. So steal 'em.
If you succeed - I'll take the credit.
If you fail... don't mention me.
Personalized job recommendations: Web scraper that gathers some initial user information and explores a few sites like Craigslist, LinkedIn, Indeed and Monster for particular jobs which meet the user criteria and emails the user each morning with a list of jobs to apply for.
CSV to Chart: A user uploads a CSV file and some information about the columns which is used to create 1 of [x] charts. Pie chart, time-series, bar and scatter plots. The charts can be exported as an svg or image type to be used on a site or report.
Meal planner: A user enters some information about their height, weight and lifestyle to get a custom meal plan and workout routine using OpenAI. Each week they get updates to their current plan based on progress and goals.
Threads scheduler: This one can't be done... yet. Once Threads becomes web-based (and it will) users will want to schedule posts, gather stats on their posts and get ideas based on the most popular threads. There are already popular apps that do this for Twitter. I guarantee you will see a few million dollar businesses using this model.
Automate a boring business: I worked for a startup that scraped the web for information about shipping containers and served it in an easy to read format. There are lots of industries still using notepads, excel sheets and email for mission critical flows. Find them and figure out what people would pay to automate.
**
Let me break down your next ReactJS interview for you:
Fetch some data from this API
Display the data according to this mock up
Add some user events
How you fail:
Not understanding the basics of useEffect
No keys in your list or using the index as a key
Ignoring error handling
Mutating state directly
How you study:
Open up CodeSandbox or Codepen or Gitpod
Use a placeholder API like Typicode or FakeStoreAPI
Practice without the aid of intellisense or ChatGPT
Time yourself
Record yourself explaining the code as you write it… ya know, kinda like you do in an interview
**
If you're a junior developer preparing for interviews - don't fall into the LeetCode rabbit hole.
You're more likely to encounter:
JS trivia
• String and Array manipulation problems
• Frequency counters
• Build a React component that fetches data
• Tell me about a project you worked on
Instead of:
Traverse this tree in O(n) 🧐
**
Ok, we’ve seen enough well-written code on this damn site.
It's hard to know what good code is if you can't identify bad code.
Below is some janky ass code for you to refactor. Here's the thing though - it does in fact work with the expected arguments. Could it be improved? Hell yeah it can.
I’m curious, what’s the most unforgivable mistake I’ve made here and how would you fix it?

**
How do I get better at Javascript?
Build stuff.
Not specific enough? Try this:
Here are the subjects I struggled with and how I learned them through practice:
Promises - implement Promise.all
Closure - create a function that returns another function that can only be called 1 time
This - implement bind and call from scratch
Recursion - make a function that searches a deeply nested object for a value
If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge.
[plug nac]
**
LinkedIn or Twitter fame is a silly goal if you’re building in public to land a role.
Your real goal is to demonstrate technical depth and showcase your work.
You want the right eyes on your profile. You don’t want sympathy for the 1000th rejection you’ve had (or maybe you do, I dunno actually)
Instead of fishing for likes, try writing about:
a hairy bug you squished
your deployment strategy
how you’re handling QA
why some obscure framework is really helpful
your take on React Server Components
If you’re really feeling brave, post a code snippet, seek feedback and watch how anyone who ever wrote a line of code becomes an expert on how you can optimize a for loop 😅
**
Your idea of the 10x developer is all wrong.
It’s not a coding robot pumping out ten times as much code as us regular flesh bags.
They’re not producing code that is wildly more efficient or faster than the average developer either.
Great developers magnify the power of the team.
They take on tasks with more leverage to have greater impact.
They mentor, document and create patterns for others to leverage.
Their greatest contribution might not include writing any code at all.
If your goal is to be a mega-hyperbole-super-senior software engineer, you may need to take a step back from writing better and better code and start thinking “How can I make working on this team a little better?”
Can the deployment process be improved?
Are code reviews useful?
How can we ship code faster with less bugs?
These kinds of questions will lead you down rabbit holes that lead to more interesting problems to solve and make you the kind of developer who stands out on your team.
**
Let’s clear up some of the dumb advice you’ve read on LinkedIn:
Titles don’t matter
Seniors need at least [x] years of experience
Seniors are the best coders on the team
Get experience and the titles will come
They’re all right. And they’re all terribly, terribly wrong.
The Senior Developer title can be wildly different at each company. You still need to chase it.
There’s a bit of an unhealthy obsession developers have (me included) with getting to Senior but there is a good reason.
On one end of the developer spectrum is junior.
They are expendable for the most part. Cheap and plentiful and need lots of guidance. They are an important investment and also a bit of a gamble.
On the other end of the spectrum is the senior.
They can make or break your team through their influence on the codebase, team and processes. They squish the really tough bugs. They make sure the team doesn’t over commit or refactor unnecessarily. They’ve made costly mistakes and understand how to avoid them.
I know you’re in a rush but you can’t cheat time in the saddle.
You’ll need to collect enough experiences, errors and tacit knowledge to make it to the next level.
**
My hot take that’s actually a boring take:
Most developers should NOT be entrepreneurs. They should be intrapreneurs instead.
Established companies need innovators. Instead of creating another SAAS app that no one asked for and learning through expensive trial and error you could spend that time solving problems for your current company and reap the rewards there.
You don’t need to be super senior to do this either.
Maybe you’re waiting for the right time. 
It doesn’t exist.
There’s always more to learn.
Someone is smarter than you.
Do it anyways.
At my previous company one of the mid-level developers created a hack-a-thon project that ended being one of the most popular features on the platform. He quickly became a team lead.
Our team hired a junior developer who led our strategy for a complex CMS integration. He’s since been promoted aggressively.
If you work for a startup that pays you in monopoly money then your innovation can literally translate into a large pay day for you if it moves the needle on adoption rates and sales.
**
Front end development stopped being easy a while ago.
It’s a lot less:
Move this a few px to the right.
Make this button a little greener.
Sprinkle a little JS to submit this form.
Translate this design to HTML and CSS.
It’s a lot more:
Decrease the initial page load!
Oh, you know JS? Can you help debug this lambda function written in NodeJS?
SSG vs CSR vs SSR.
Who’s on-call to investigate the code pipeline being broken?!
Move this a few px to the right 😉.
**
The bootcamp is over.
You wonder, “what now?”
Do you create a side project? Pound LeetCode? Mass apply? Learn in public? Some bandicoot said you should just switch to CyberSec or DevOps. So many options.
From speaking with a few hundred of you - I know that many of you just need direction.
Here are the 2 paths I would explore if I was a new grad:
For technical skill
The DSA path - go all in on DSA. Just understand you may limit the types of interviews you can “win” with this path. That’s OK. Many tech companies use DSA challenges and will continue to do so. Don’t just blindly tackle LC problems though: learn the structures, patterns and common approaches and practice with another human.
The side project path - create a complex side project. What’s “complex”? I typically think of something you could potentially sell. If you’re unsure of where to start, look up APIs and build something around that API. Pick at least 1 or 2 new hot technologies to use that your education skipped. Typescript, NextJS, AWS and unit testing would be my top choices.
For getting hired
Learn in Public - use what you are learning for content and remember who your audience is. You want to create connections with software engineers and hiring managers so post the challenges you are facing, post some code for feedback and get into the weeds. You’re not posting for likes - you’re posting for the right kind of engagement from people in tech who may .
Mass apply - this works and I don’t care who says differently. Don’t JUST mass apply however. Try a few resumes to see which one works. If you get no hits after 100 attempts, maybe hire a resume writer. Try multiple platforms including LI and those other older sites like Craigslist (yeah, they have a section for software).
The only wrong path is the one you can’t commit to. Pick a strategy, stick with it, find what works and do more of that.
**
A few controversial things I believe about careers in software development:
You can be an average developer
I’m not saying this will make you rich or get promoted.
I’m just saying you don't HAVE to climb the engineering ladder. Plenty of developers are very happy doing their work, going home and not touching their laptop for the weekend.
Always be interviewing
Stability is a myth.
You can be talented.
Your company can be profitable.
You can still be let go. Nothing personal.
Letting your skills get stagnant is a fast-track to becoming obsolete in a fast moving industry.
Your dream company doesn't exist
Your dream team might. When you say dream company, you (probably) mean:
High salary
Autonomy
Supportive team members
Learning opportunities
Your manager and team have a lot more to do with your individual experience than the larger company.
Your people skills will be more important than your technical skills… soon
Knowing how to speak, write and influence are the skills which make developers indispensable.
Writing code becomes a given when you move past junior. Chat GPT can do a decent job of writing code and solving difficult bugs.
You're a human. Lean into it.
**
Create React App is dead. NextJS is king.
This is not a trivial change.
NextJS introduces an entirely new paradigm and is full stack first.
Let me introduce you to a host of new acronyms you will now need to be familiar with:
RSC
SSR
ISR
SSG
XPF
I made one of those up 😮.
As a full stack JS developer I like many of the things about NextJS like page based routing, API routes, edge runtime and SEO friendliness.
Excellent docs and high adoption means you won’t need to scramble to find answers to questions.
Chat-GPT will be much less useful however. NextJS 13 was released recently and as you may know, Chat-Gippity only knows its stuff up to 2021.
Here’s what I’m doing to make sure I don’t fall too far behind:
Replicating some of my simpler apps to use NextJS
Watching YouTubers like Theo Browne go over complex concepts
Reading the NextJS docs
Building sh*t
If there’s one thing the JS community likes more than new frameworks, it’s drama 😅. If you’re using NextJS 13 what do you love or hate?
**
Something odd I’ve noticed about low performing software engineers:
They work really hard.
I would know. I’ve been one.
The irony is that working harder is rarely the solution. Here’s why I was not making progress despite putting in long hours:
Lack of Focus: Hard work without direction lead to wasted effort. I needed to understand what the priorities were and work on tasks that brought the most value or learning opportunity.
Fear of Asking for Help: Many engineers, myself included, have been guilty of this. You think asking for help is a sign of weakness, but in reality, it's more efficient than getting rate-limited on Chat Gippity or staring at a blank screen.
Not Investing in Skill Development: Tech changes fast. If you're not learning, you're falling behind. Putting in the hours at work on the same tasks over and over has diminishing returns. Invest time in up-skilling.
If you find yourself in a cycle of hard work but low performance, take a step back and evaluate. You might just find that a slight change in approach can lead to significant improvements.
**
Congratulations! You landed your first software engineering role.
Now an entirely new and much longer game begins.
So where should you spend your focus now?
I know several developers who were recently hired. Some from my own Not Another Course community and others from the 15 minute chats I do (link in profile).
Here’s what I would do if I were them:
learn the code deployment process
ask to shadow the on-call engineer
read through previous code reviews from different developers to understand their code and feedback styles
create my own 30 day plan and have a goal to release code to production
understand the testing strategy (QA, unit tests or some combination?)
ask someone to help me navigate the observability tools
enjoy the ride 😎
If you were recently hired, what’s one thing you would suggest to incoming developers?
**
Unit tests are a waste of time.
Instead of taking minutes to write a test you can just:
write your code
manually replicate all the scenarios you want to test
pray for the best and have your QA team ensure it all works
Now that it works, don't touch it! 😅
When done correctly:
tests enable refactoring with confidence
confirm edge cases
document the ACTUAL functionality (I know your docs suck) 🤫
Oddly enough, most bootcamps skip any mention of unit testing even though most dev teams write loads of tests.
Follow along with the video below to write your first unit test with Jest and learn the basics of testing.
**
First, there was the triple for loop that brought our real-time ordering system to a halt.
I got a crash course in Big O that day.
Then, the time I promoted the wrong branch to production after pretending I knew what was being asked.
That morning I walked into the office and decided to get better at Git.
How could I forget the enum array in a Rails project that I updated that launched 1000 emails to every customer?
A simple unit test might have caught that one. Or understanding how array enums work. 😅
Recently I came up with a great solution for some legacy code and launched it.
1 problem - no one asked for this solution. A simple meeting to get buy-in and alignment turned into many meetings to explain the changes and fix my fix.
As a developer, playing it safe is a good way to not get fired.
It’s a horrible way to have an interesting career.
**
Let me save you 90 hours of watch time from the Udemy Course you just bought.
Between tutorial hell and your own side project is tutorial purgatory.
The awkward phase when you’re not quite ready to create a complex side project but aren’t getting much out of following along with a video.
Here’s how you limit your stay here:
Don’t equate progress with completion - there is no Gold Star for finishing a 100 hour course
Gain enough knowledge to be dangerous
Extend, break or re-write a feature from the tutorial
Write detailed comments about what is happening in the code and why
Now you have a project that is similar to the tutorial but NOT exactly like it and  you’ve removed the training wheels from your learning exercise.
**
6 services I used to broaden my skills as a software engineer:
AlgoExpert/FrontEndExpert - finally someone made a solid offering for the JS and ReactJS interview with practical exercises
CodeCrafters.io - I like this site so much. You build complex software that passes tests to see if it works. Addictive and inspired my own program (link in profile of course)
Kindle - I read books from smarter developers. I won’t give you a listicle here, there are plenty out there already.
Plato - when I became a manager I was overwhelmed. I needed mentorship and they provided some of the best I could’ve asked for.
ByteByteGo - system design is where it’s at. As coding can increasingly be handled by AI tools, it’s more important than ever to understand the bigger picture.
JoinTaro - there aren’t a lot of resources out there for mid and senior level devs. Taro fills in the gap here with practical career advice that I steal from time to time 🤫
No one paid me to write this. I just use these tools and think they’re the bees knees. Use em. Or don’t. Whatever.
Anything out there I missed?
**
Shocking and not so shocking takeaways from the 2024 Stack Overflow Developer Survey
Javascript is the most popular programming language - take that haters
Everyone uses VS Code - learn it like a pro.
NextJS is about to surpass Angular in popularity. I’d bet the house on learning it. Same with Typescript.
Bootcamps love MERN - professionals love SERN. There’s never been a better time to learn SQL with offerings like Supabase that make it too easy to start.
Most devs are FS. You probably should be too.
**
Your problems as a software developer are not unique. At all.
Feeling like getting hired is impossible?
Unsure of what to build for your side project?
Not confident in your skills?
I’ve spoken with over 300 of you and heard all the issues you have. You don’t need my sympathy though. You want solutions. Check out this article.
**
Don’t be fooled that I know a ton because I’m an engineering manager. I’m just faking it better than you.
I talk a lot about the mistakes I’ve made in the past but I’m still learning and failing 10 years later.
I may have been a Senior Software Engineer but when I became Engineering Manager I became junior again.
My biggest mistakes in the last 12 months?
Not pulling in other departments and stake holders before building a solution - which led to building the wrong solution and lots of hours of work to fix it.
Writing more code than I should have because it’s where I feel comfortable. That time should have been spent improving processes for the team.
Thinking I was above politics.
That last one is where I see a lot of developers fail. “Politics” is really an umbrella term for anything outside of technical work but it’s incredibly important. Building relationships, giving presentations and creating visibility for my team are areas where I’ve made efforts to improve. I have no clue what the hell I’m doing sometimes, but I’m starting to figure it out.
My biggest takeaways over the last 12 months?
Ask for help more often and don’t assume intentions or motivations
Promote others to promote yourself. Giving public thanks and shining the spotlight on my team members creates visibility without bragging (also - sometimes you gotta brag)
Fix processes, don’t work around them
Solve problems that actually need fixing not because it seems fun or interesting
**
I was killing the interview. I traversed the tree. I scripted the Javascript. I reacted the hell out of the React.
I failed on a lousy rate limiter question.
System Design 101.
There are 5 really common system design questions that make up the majority of interviews and as you move past junior level, you will be expected to answer them.
Here they are:
Design a URL shortener
Rate limiter
Create a news service feed like Facebook or Twitter
Design a web crawler
Create an app that uses geo-location
If you want understand system design and concepts like CAP Theorem, distributed computing and more fancy acronyms check out Alex Xu’s books and site. I am not an affiliate (maybe I should be 🤔).
Any I missed that you’ve received?
**
At some point we told all new developers they had to become mini LinkedIn influencers.
I disagree.
Kinda.
A few weeks ago I invited a former co-worker to speak to the Not Another Course community. She’s an amazing developer who I knew could offer some insight and practical advice for developers at the early stages of their career.
I was shocked to learn that she ended up working on our team from a post that caught the attention of our former VP. This led to an interview that she crushed.
A mentee of mine had an even wilder story:
He follows a popular YouTuber who he reached out to that ended up referring him for a role where he currently works.
He hadn’t even graduated his bootcamp yet.
These stories aren’t typical.
They also can’t be ignored.
Networking and learning in public obviously work, despite my own biases.
You know what else works? 
Never writing a word on LinkedIn.
Making connections with people through comments on their posts.
Mass applying.
Going on Facebook and asking your high school friends and family if they know anyone hiring.
We’re all right.
We’re all wrong.
Pick a strategy you can actually follow and then do it. They all work.
**
You've applied to every company in the Tri-State area.
No one is hiring.
The market is saturated.
I've heard some version of all these frustrations for nearly 10 years. In fact, the ONLY time I stopped hearing these phrases was during the pandemic hiring spree.
Some harsh truths:
Mass applying does work - I don't care what influencer tells you differently
Networking works too
Luck is a factor no one wants to admit
You can control your skills - not the timeline to get hired
Some stuff you should fix quickly:
Get 500 connections on LinkedIn to be more discoverable
Remove any mention of junior/aspiring/student from your profiles
Don't apply for only junior roles - let the market decide
Use strong language on your resume to stand out
Reply with 😎 and I’ll send you my Ultimate JS Guide. 
**
I have a confession.
Over the last year I’ve done nearly 400 calls with developers from all around the world.
The main topics we covered:
Getting hired
Preparing for interviews
Creating side projects
And lots, I mean LOTS of tackling impostor syndrome.
These calls were free but I had an ulterior motive.
First off, I sell courses to people. This originally started off as a marketing tactic but less than 1% of the calls converted to customers.
I kept it going.
I was learning too much.
I could feel the difference it made for people.
I also remember all the feelings I had when I started learning to code and got my first job. 
Doubt. Fear. Anxiety. Hope.
Then I remember all the strangers on the internet or at meetups who helped me.
Don’t get me wrong, I’m still selling stuff but that’s not the sole intention of these calls. If I can save you a few hours, days or even years of time from making the same mistakes I did then I’m happy to give you 15 minutes of my time.
Also, when some of you strike it big I can come groveling to you for a consulting role in the future 😅.
This weekend I’ll be sharing the lessons I’ve learned from speaking with so many of you (sign up at site in bio).
**
You launched that critical feature, onboarded the new dev and helped the juniors on your team get their work done.
You feel pretty damn good when it comes to yearly review time.
You're blind-sided when you're actually the one who's cut from the team when they do a 10% reduction to help the CEO buy a new Yacht. I mean, he really needs that Yacht so you understand... right?
In some organizations, it's not uncommon for your manager to NOT be involved in the daily activities of the engineering team. They may regularly speak to the team lead but not every engineer.
This means they see your work through the lens of the team lead or judge you on useless metrics like lines of code written and number of bugs fixed.
You have to learn to spotlight yourself... but don't be too obvious about it.
Don't brag about your accomplishments - educate instead.
Fixed a critical issue?
Document the fix and have a short lunch and learn to go over the root cause.
Launched a feature?
Offer to demo it next time there is a meeting.
Lastly, keep a document where you track every interesting thing you've done. This makes it way easier to "prove" your value to the team (and yourself) when review time rolls around.
Now you're no longer "whats-their-name-again?" - you're that engineer who everyone knows.
**
No 90 day plan.
No manager feedback.
You think you're doing well but the team is silently frustrated.
Your notice to leave the team comes out of the blue... to you at least.
Your manager isn't some sadistic bastard. In most cases at least. The reason they didn't confront you or offer feedback is because they are human. They just want to focus on their work and avoid conflict. It's not right, but it's reality.
On day 1, you should set some practical milestones with your team lead or manager. What does success for you look like in the first month or two on the job?
If they don't give you a plan, make one yourself and present it to them.
For a junior developer it might look like this:
Days 1 - 30: Get all repos running locally on your machine and understand code review and deployment processes. Get at least 2 small features into production.
Days 30 - 60: Participate in an on-call rotation and learn process for critical incidents. Understand the full software development lifecycle. Be able to fix small bugs with little help.
Days 60 - 90: Take on a mid-level difficulty feature and deploy to production. Contribute to technical discussions.
Once you're aligned on what success looks like, it's no longer a guessing game and you have proof that you are where you should be or have an idea about where you need to improve.
**
I'm not that smart but I know 2 things pretty well:
Coding
Getting in shape
I've talked enough about coding
Here are 3.5 tips to help you get in shape, lose weight and spite your ex. Or get healthy. Whatever.
Weigh out your f*cking food.
That cup of rice was never a cup. Now track that shit with MyFitnessPal and make sure you aren't eating double the calories you think you are.
Nothing is off limits
No carbs! Can't eat after 6 PM. Eat only grass-fed squirrels!
Fuck all that. Eat what you want and just be in a caloric deficit. Basically, eat a couple hundred fewer calories than you need to maintain your weight.
Fail your way to growth
Lift until your muscle fails to lift anymore.
Over 15 reps? Add weight.
Under 10 reps? Remove weight.
3 sets.
You're gonna see your muscles grow.
Stop comparing
Your body will grow within its limits. Your genetics play a part in how your body will look but losing weight is a matter of calories going in and calories going out.
Don't over-complicate it.
**
We get it, networking is important.
But what the hell does that mean? Especially on a platform like LinkedIn?
Well, I can certainly tell you what it’s not:
DMs to strangers asking to look at your resume
Posts romanticizing a string of rejections
Messages to connections you’ve never spoken to, asking for referrals
So what do you do?
Genuine engagement with other people by commenting on their posts
DMs where you give first (a link to a helpful article for example)
Posts that share what you’re learning (and struggling with)
**
There I was doing one of my daily 15 minute chats with a developer (link in bio 😉) and I found myself getting schooled.
There’s a lot of advice out there about getting your first job as a developer:
Send a box of donuts to the hiring committee
DM every hiring manager in the tri-state area
Do a bunch of open source PRs (and get them ignored…)
Write a bot to apply to 1 company per second 24/7
Lie 🤷🏻‍♀️
The guy I was speaking with had a simple approach to getting interviews:
He was reaching out to his network of friends and acquaintances.
Tech people.
Non-tech people.
Asking for referrals or leads and then following up on them.
Skip adding a new shade of green to the banner on your resume. Reconsider learning yet another language.
Don’t forget to reach out to family, friends and acquaintances in real life.
**
5 Biggest mistakes of my coding career?
1. Not learning the fundamentals before diving into frameworks
2. Being afraid to admit when I didn’t know something
3. Only taking on tasks I knew I could finish
4. Not understanding how engineering fits into the company eco-system and business goals
5. Not speaking up
That last one hurt me the most.
I thought I was playing it safe by taking on easy tickets. I nodded my head during estimation sessions and gave bland status updates. I never shared my ideas during meetings. I wanted to blend in. It was the most dangerous thing I could’ve done.
They say the tallest blade of grass is the first to get cut.
Yeah, I guess. It’s also the one growing the fastest.
Companies need average developers more than they’d like to admit. But, if career trajectory and increased hire-ability is your goal, then playing it safe is your greatest threat.
**
LinkedIn Sucks.
It’s full of:
toxic positivity
recruiters who ghost you
fear peddlers
cringy influencers with their big heads in blue backgrounds
It’s also full of:
strangers willing to lend you a hand
quality content you can learn from
inspiring stories
opportunity
LinkedIn, like most social media platforms, will do its best to feed you content it believes you will like. If your LI feed sucks, follow some better people.
Here's a list of people I follow and get a lot of value from:
**
You don’t have a problem learning how to code, you have a problem learning how to learn.
Most people follow this pattern when picking up a new language or framework:
buy tutorial
watch and type what they type
wait what was that new thing they mentioned?
fall down rabbit hole learning new thing
emerge from hole to watch and type more
turn off tutorial and realize you don’t actually know how to code the thing you watched someone else do
Here’s the method I’ve used for learning ReactJS, Node/Express and now NextJS.
read the docs and understand the basics (for loops, objects, arrays)
make a super janky program to reinforce what I learned
get stuck, head back to the docs or tutorial and repeat
build my way towards more complex programs
Once I have the basics down, I may choose to fall down a few rabbit holes. But only AFTER I have some experience with practical application
**
I don’t have a problem with tutorials. I do have a problem with the way most of you are using them however. You’re probably making a lot of the same mistakes I did:
Passive watching
Falling down every rabbit hole
No practical application
You watch a 10 hour video, sit down to code and realize you have no f*ckin clue what to do.
You hate to see it and I’ve been there.
I use this method:
Learn just enough from your tutorial to begin writing some code
Bumble your way through to get something you can interact with
Reach the limit of your technical depth and get stuck
Stop coding and re-visit the tutorial and build up some more knowledge for the next piece of your app
Repeat.
**
Are you a “passionate developer”?
Do you need to be?
If you only got into coding for the money… I actually think that’s OK.
The best developers I’ve met enjoy writing code and most of us do it for fun outside of work. That doesn’t mean YOU have to.
There is an odd expectation that software engineers write code outside work hours and it isn’t uncommon to be asked in an interview about your side project or to take a look at your personal GitHub.
Why?
Do we ask doctors how many patients they’ve seen outside of office hours?
Ever ask your plumber about his side project?
Of course not.
I still believe that in order to be a better than average author of code, you will need to find enjoyment in shipping code and squishing bugs .
Tech moves fast. In order to keep up with trends and updates, you’ll likely need some intrinsic desire to do so… cuz your work certainly won’t be providing that time 😉.
That being said, I don’t think you need to be a super passionate developer to be good one.
Am I off here? Do you need to genuinely love to code in order to move past junior code bot?
**
Very predictable, boring advice that most developers don’t follow:
Don’t over-rely on tutorials - build something on your own, get stuck and learn
Learn the fundamentals before diving into frameworks like React, Angular or Vue
Keep track of your accomplishments. It’s nice to look back at your progress when you’re feeling down
You can’t chase every new tech. Be aware of macro trends in your industry and micro trends in your niche. For example a JS developer may need to have some surface level knowledge of Serverless and a deeper understanding of NextJS
Study CS fundamentals. They’re slower to change and give you a strong foundation to understanding concepts outside your core language and tech stack
Prioritize your health as much as your work.
What’d I miss?
**
Software engineering according to TikTok:
Big bags 💰
Crazy perks 🍕
Chill schedules 😎
For the rest of us:
Stressful on-calls 😬
Legacy spaghetti code 🍝
Staying in interview-shape 365 📖
They’re both accurate depictions but one is probably truer than the other for the majority of us out there.
**
One of my mentees asked me how I juggle being a father of 3, running a business and keeping a consistent work out routine.
Easy - I just neglect my children. 😅
It’s actually a fairly simple process I’ve been using for years to create time where there is none.
plan the night before what I need to do
wake up kinda early and do the most important task immediately - no cold showers, no meditations, no affirmations
work work work work lalalalala work work work work work
workout
kids/food/reading
personal/business work on weekend mornings
Coding is my job but it’s also my hobby. I also work from home. When I commuted 90 mins to an office I used this same process 
My routine is my security blanket. Call it boring. It keeps me sane and gives me freedom.
**
Javascript is easy to write.
Especially if you do it wrong.
You can use a map instead of a forEach or pass a string to a function that accepts a number and get a nice little surprise to debug later 😉.
JS is incredibly forgiving which leads to code that almost works that you can ship to millions of users.
Your power as a JS developer is in understanding the features and quirks to use JS so it doesn’t use you:
prototypal inheritance
reference vs value 
this
global and local scope
type coercion
**
Worst way to spend your weekend?
Completing a take home coding project that was supposed to take 4 hours but really takes 2 full days.
If you MUST participate in these kinds of interviews there are 2 ways you can stand out:
Write documentation
Write some unit tests
You don’t know how to write unit tests? Let’s fix that.
**
My career trajectory exposed in browser history
Junior - how to center a div, what is a promise, how to use reduce, how to revert a commit
Mid-level - what is a n+1 query, how to write a good PR, how to use Jest, what is a Lambda
Senior - git strategies for hotfixes, how to optimize webpack for a React App
Eng Manager - how to give a good presentation, how to have good 1 on 1’s, how to center a div
**
Bootcamp grads generally over-estimate how many projects they need to complete for their portfolio and under-estimate how much impact one solid, well-executed project can have.
Here's why:
🎯 Focus on Quality, Not Quantity
Most employers would rather see 1 outstanding project rather than multiple average ones. It shows dedication and attention to detail.
💼 Real-World Experience
By investing time in perfecting one project, you gain practical experience necessary for the job market. This is what sets you apart from other candidates.
**
Eat code sleep is not a process for progress, it’s a recipe for burnout.
I’ve seen some of you trying out this method and I’ve yet to see it work.
Hell, I tried it myself.
It led to:
anxiety
less enthusiasm for my work
decreased quality of thought
Counter-intuitively, the more I tried to cram in material or optimize my schedule, the less progress I was making.
It was frustrating.
For me, having a non-negotiable work out routine forced me to detach from work.
Few things can interrupt my workout besides a sick kid or a critical bug at work.
This is where I clear my mind and often where I come up with my best ideas. 
Getting in shape was honestly a side effect of this routine and perhaps the best “hack” I’ve discovered for keeping me sane in a fairly stressful occupation.
**
The market for full stack developers is over-saturated.
Learn dev-ops.
Maybe C#.
Java?
PHP perhaps?
Become a Chat-Gippity prompt engineer. Yes, that’s the ticket.
I don’t think there’s anything wrong with learning another language or technology but if you change tech as the wind blows, you will quickly be a sub-par developer in many languages rather than a strong developer in 1 or 2.
Few companies need a swiss-army-knife developer.
However, IF you are a full stack developer who recently graduated and considering what to learn next (hint hint) I would put these 3 technologies at the top of my list:
TypeScript
NextJS
AWS (lambdas, S3 and IAM to start off with)
Just reply JS and I’ll send you my Ultimate JS Guide.
**
3 members in my Not Another Course community just got hired.
They’re amazing people and well deserving. And they’re not much different than you.
One had been looking for nearly a year for that first role. Another graduated from a program recently. They felt uncertain. Like it would never happen. That maybe they just weren’t good enough.
When I think of all the mentees I’ve seen get hired either in my program or in the bootcamps where I’ve taught over the years, there are few hard and fast rules.
Most did NOT learn in public.
Some were not particularly talented. In fact, a few I thought were un-hireable proved me wrong.
Some mass-applied.
A few networked their way to the first role.
Many of their interviews were barely technical. 
Some ONLY got LeetCode problems.
Your timeline will be unpredictable. Not even Chat-GPT can predict the future… yet.
Be persistent, practically optimistic that opportunity will present itself, re-calibrate when you see things not working, maintain your skills and your own success will be inevitable.
**
You want to build an amazing side project but you don’t know where to start.
❌ TODO app?
❌ Clone of that other app that you use?
❌ Tutorial project?
When I’m not sure what I want to build, I do this:
Start with the data - what API can you use which may have some interesting information?
Use a tool like Postman to ensure the API is worthwhile and accessible
What features can you construct around the API? For example, a real time stock API could be used to trigger an alert to a user when it dips below a certain threshold
Figure out the minimal amount of features
What is the user flow? What happens when a user goes to your app? What is the feature they interact with and how is the data surfaced?
Pick a combination of new and familiar technologies
Get stuck, read the docs and build your way out of the hole you’ve dug 😅
Gain more practical knowledge than a 100 hour course could ever offer you
**
Front-end development isn't so front end.
Front-end basically translates to Javascript Developer in many places.
"Oh, you know JS? Great, work on the Node/Express app."
"Ruh roh, code pipelines broke - can you fix?"
"Hmm, that query is slow. Can you refactor?"
You - 🙃
**
You can’t get hired because you have no experience. You have no experience because you can’t get hired.
Let’s change that.
Reach out to your cousin, aunt or that friend trying to launch their music career and offer to build a website. 
For free.
Make them buy a domain. Or buy one for them - f*ck it.
Sketch out the site and main features and review them with your cousin, I mean client.
Build and deploy.
Have them give you a testimonial.
Now you have some viable experience, a real deal site to show off and have dipped your toe into freelance.
**
Sometimes I feel like a fake engineering manager but that’s ok. Before this, I was a fake senior software engineer and before that I was pretending to be a developer.
At each new stage, there’s a little voice in my head reminding me why I shouldn’t be in my position.
I peruse LinkedIn and compare myself to others.
Terrible habit.
I know it will happen again and I’m prepared.
Here’s how I get over that little voice in my head:
find an avatar - who do I want to be like?
what do they know that I don’t?
create a checklist with the items from the previous step
find mentors or books or both to bring me closer to the avatar
check items off the list and prove to myself that I’m where I need to be
Rinse and repeat for each promotion, new company or new role.
**
Of course you suck at interviewing.
You do it once every 2 years and wonder why it’s so difficult.
It’s a game with incredibly high stakes that most of us don’t practice until it’s time to play. This is a recipe for disaster.
There’s enough information on LinkedIn about what you should and shouldn’t study but that’s only half the game of interviewing.
Your nerves are gonna get you.
I bombed a mock interview last year that had the lowest stakes possible. I mean, it was literally a mock interview.
My heart raced.
I drank too much coffee before the meeting.
I didn’t have water nearby.
I froze up.
Don’t wait until the real game starts to get practice.
There is simply no substitute for being judged, I mean interviewed, by another human.
If you’re a little shy try this:
Open up Leetcode or whatever tool you’re using to study problems
Set the timer on your phone for 30 - 45 mins
Open up a video recording tool and explain your thought process and code as you type
Watch it later and cringe a bit
Repeat until you cringe less
**
Dream companies don’t exist.
Your team will shape your experience as a developer far more than the larger organization.
I don’t have a dream company anymore but I do have a dream work environment:
Autonomy
Supportive teammates
People I can learn from
Interesting work which is challenging and engaging
On-call periods that aren’t too brutal
A path toward the next level
You can find it in one of the letters in FAANG.
You can also find this at a small e-commerce startup.
**
Ok so maybe I was wrong.
I often downplay the importance of networking on LinkedIn or learning in public, but I’m changing my tune.
Last Friday, a former co-worker spoke with me and members in my Not Another Course community (link in bio 😉) and shared how posting on LinkedIn helped her land that first role. She was learning in public, invited others to offer suggestions to the code she posted and a VP of technology did just that.
This post led to a conversation which led to an interview which resulted in an offer.
Crazy.
But not really.
I’ve been posting on LinkedIn consistently for a year which has led to more amazing connections and even some friendships that I never would have expected. I’ve personally mentored or spoke with many of you simply from putting myself out there. I am not a stellar engineer. I just have some opinions and advice that I’m confident will help you. So I share it.
I still get nervous though.
What will people think?
Is this too cringe?
Do I know enough to share?
I know I’m not alone. Here’s what’s worked for me when I get paralyzed by “what-if” spiral thinking and maybe will help you as well:
Write about your experience - you are an expert on this subject
If you’ve benefitted from the wisdom of others, it’s your duty to share what you’ve learned
Expose yourself to criticism - it will help you grow. If it reveals jerks, then good. You now know where NOT to apply
No one is judging you nearly as much as you think
We are all too concerned with our own lives to care much about what you’re posting. We read, chuckle  (or cringe) and continue to scroll.
**
Be careful who you listen to.
As a new developer its easy to get overwhelmed with the amount of advice out there on everything from your resume to how to learn to code.
Here’s some advice I’ve been given:
❌ Don’t learn HTML and CSS - you’ll barely use it
❌ ChatGPT can replace my team. I just need to ask it better questions.
❌ My favorite one - don’t write tests. That’s what customers are for.
❌ Real developers don’t use frameworks!
Truly nuggets of gold. 
I’m not exempt either. 
Check my work history, my testimonials and see if I’m the kind of bandicoot you should take seriously 😉 
**
Yes, mistakes can get you fired.
Yes, you will need to make mistakes in order to grow.
Ask any developer who has been coding for a while about their biggest mistake and you won’t be disappointed.
The time they dropped a production database. A tale as old as time.
That time they broke production during a deployment.
The deadline they HAD to hit… and didn’t.
I don’t want to encourage poor coding practices. Your company’s tolerance for these mistakes may vary but I know that moving another bug ticket across the JIRA board isn’t a recipe for growth. I’ve tried it out. 
I’ve had more embarrassing mistakes than I’d like to admit but after the anxiety wore off, I vowed to never make that mistake again and for the most part, I haven’t. I learned a hell of a lot more from wrestling with Git to revert that other revert that broke production but was actually caused by something else than changing the color of a button to be a little less green.
**
All the coding skills in the world won’t save you from poor time management.
It can be tough for any of us but especially for junior developers.
Meetings. Poor estimations. Requests from the guy in sales to investigate a bug he thinks is super critical ... 🫠
Try this:
Do the hard stuff first - that difficult bug, feature or task you really don’t want to do. Get it out of the way as soon as you find the Spotify list to match your mood for the day 
Retroactively estimate - break down that feature into a set of small subtasks. How long will styling that button take? QA back and forth? Tests? (you better be writing those tests bucko) - this is your actual time to completion. When something takes longer than expected you can adjust your estimate accordingly and have a more accurate timeline.
Afraid to say no? Try “Yes, I can certainly do that but it will likely delay [some important thing]. If that’s okay and [some lead person] is OK with it, then I can start”
Meetings aren’t always skip-able BUT if they tend to go over you can mention in the beginning you have a hard stop to work on some feature - maybe you’ll learn that you actually aren’t needed in that case 😉
What’s your time management hack as a developer?
**
Yes, I'm an engineering manager.
Yes, I still have a side project.
I am woefully late to the TypeScript party. I miss SQL. I want to use Vercel like a cool kid.
Here's my side project tech stack so far:
NextJS
Supabase
TypeScript
TailWind
This project will be publicly available with limited access. Members of my Not Another Course community (link in bio 😉) will have full access to help them navigate and sort through the massive number of challenges I have created for them.
If you know me, you know I'm all about side projects.
What technologies are you exploring for your side project?
**
More developers should run towards critical incidents.
It's not as risky as you think.
Likely worst case is you need to lean on your team-mates to get it  figured out.
Likely best case is you fix it, stand out and gain a lot of respect.
Feels riskier to never raise your hand.
**
Turns out I don't hate Typescript.
I just had no clue how to use it beyond adding a type after a variable. 😬
Now that I'm exploring generics, unions and mapped types, I'm starting to see why you all like it so much.
**
I mentor a lot of boot camp grads. They are universally obsessed with these 2 things:
Portfolio projects
DSA
Here's the deal:
Most companies don't care about your portfolio project. If it's hidden behind a login... just forget about it.
Build 1 or 2 really interesting things you can speak about with pride.
2. Yes study DSA. Nothing wrong with that.

Just realize most companies aren't going to ask you these questions.

Also, your job will require a completely different skill set.

Finally...
Double down on the fundamentals of your language and software design patterns. This is what will pay the most dividends and is a lesson I learned later than I should have.
**
The best way to learn promises, closures, bind, call, apply?
Imagine trying to get in shape watching fitness videos on YouTube.
You might understand what to do, but without action, the knowledge is worthless.
So yes, read books, watch videos, buy that course.
Then put it into action.
Open up codepen or repl.it or your code editor and write your own example of the concept you learned.
Promisify a timeout.
Use closure to implement a curried function.
Use apply and call to invoke a function with a variable number of arguments.
It doesn’t have to be pretty or even practical.
It just has to lead you to those “aha” moments. This is where stuff starts to click.
**
Here’s some side projects I want to build. Try to beat me to it:
Github and Google Analytics data comparison tool (compares releases of code with GA metrics to see if a recent release affected things like sessions)
CSS on demand - load a small script on a website that loads some rules to override current styles. The styles are composed via an admin portal and has version history. For when you want to change the color of that button to green but don’t want to risk a deployment.
CSV to timeseries chart. API which takes in a csv file with at least one date column. Returns the data as a historical timeline chart with comparisons of multiple columns.
Personal trainer. TDEE calculator (look it up) which gives user back a suggested calorie budget and meal plans based on some basic information as well as a workout routine and expected weight loss from following the plan.
[in comment] Want help bringing your idea to life? 
DM me - I have one open spot for my side project mentorship program.
**
Git blame is gonna expose you.
That code you copied from Chat GPT or Stack Overflow works….
For now. 
But when it inevitably breaks and you have to refactor it or explain your approach… oof.
I had a mentee who was notorious for this.
I don’t blame him. He simply wanted to finish his work and the code certainly worked. As soon as I asked him to explain his logic it was clear he had considerable help.
We learn best when we struggle through a problem. That bit of trauma has a way of lasting in  our brain.
**
Very practically, the 2 easiest ways to stand out as a junior developer on a new team are:
Be vocal
Write a gosh dang unit test
I’ll be honest, #1 is easier said than done. #2 is higher effort but less intimidating.
“But, I don’t know how to write a unit test.”
Let’s fix that.
**
Recipe for terrible 1 on 1’s:
Manager: “Anything to discuss this week?”
You: “Nah, I’m chilling”
Manager: “Nice. Talk to ya next time 👍”
1 on 1’s can devolve into weekly status updates, which is why I think a lot of people like to skip them. If used correctly, they can be your chance to:
Share accomplishments
Discuss your career path
Find out what it will take to get to the next level
Get buy-in for process improvements.
Just catch up and chat like humans.
At best, by skipping 1 on 1’s frequently, you get time back to work on that bug on line 136 and avoid some awkward small talk.
At worst, it will stagnate your career or leave you wondering why you can’t seem to get promoted.
**
I made a mess of a ReactJS project and realized just how bad it was after looking at a well constructed app. There was one thing I had neglected to consider that seems so obvious in retrospect:
patterns
Some pages used a presenter/container pattern for separating data and presentational logic, others used custom hooks. Our utils file was a kitchen sink. Some files were exported as defaults, others named. Lodash here, native methods there. 🙃
I knew how it worked. So did the team. I mean, we built it.
Also, it worked.
The problem with having a free-for-all in the codebase is that it creates too much cognitive overload for a developer who wants to create a new feature. Which option do they choose without clear guidelines or patterns? What about onboarding junior developers? Maybe they’ll add a new flavor to the mix of this code gumbo.
A computer could care less about the file structure or patterns leveraged in an app, but we write code for other humans, not computers. 
Repeatable process = repeatable progress
**
I thought I was supposed to be happy.
I got promoted to Senior Software Engineer.
I had actually written this goal in my notebook 2 years prior.
Once the initial excitement faded, I started to freak out. What would they expect from me now? The other seniors were much smarter than me. I still didn’t really understand areas of the codebase that I thought I should.
Was this a mistake?
My brain went through every possible scenario that would lead to my failure or get me “exposed.” 
I wouldn’t be able to figure out a critical issue and be fired. 
A new senior member would code circles around me. 
I’d be called on in a meeting to offer a solution and have no answer.
Maybe you think like me 😅.
I’ve had this feeling re-appear when I was promoted to Staff and then moved into management. I’ve come to accept it.
New role = unknown. The unknown is scary. In the absence of experience, you imagine what MIGHT happen and how to best protect yourself from failure.
One thing I started doing to tame the negative voice in my head is to use others’ knowledge to supplement my lack of experience.
I hired mentors.
I read books.
I thought about the prototype of a person in my position and what they would do. How could I inherit their traits? (please tell me you JS devs caught that one)
I hope you’re not as neurotic as me, but after speaking to a few hundred of you… I know that’s not the case.
**
What you think front-end development is:
cute lil' button
sprinkle in some JS
big serving of ReactJS 😎
dash of TailwindCSS
Can you move this button over 2px to the right?
What it really is:
Oh you know JS? Work on this Node/Express API
Rollup? Webpack? Snowpack? Turbopack?
New framework to solve old framework
SEO
Web performance
Can you move this button over 2px to the right?
[grab node/express starter kit]
**
4 ways I’ve seen mentees get hired over the last 12 months in order of frequency:
Mass applying
Working with recruiters
Referrals
Building in public
I have no dog in this fight and you need to pick what makes the most sense to you. I have a limited sample set and am biased from my own experience.
But here’s one strategy I KNOW will not work:
Waiting for the right moment.
You’re never going to know enough.
Your resume will never be good enough.
You don’t have enough experience.
You forgot what CORS is… again.
Learn. Fail. Iterate.
**
No one talks about the part before you learn to code.
How do you get the discipline and ability to learn before you start?
An interesting trend I've noticed in mentees I've worked with who have excelled as career changers: 
They have an exercise routine.
How is that related?
Working out as a routine teaches delayed gratification.
You have to have some faith that you will improve from making daily deposits.
Your brain likes exercise too.
That increased oxygen intake from running or lifting, is giving you the needed boost to ward off stress and super-powers your brain.
Not sold yet?
Try it out.
Next time you're banging your head against a wall while coding, try to pump out 100 pushups or just take a stroll.
Either you'll be a better coder or you'll just look a lot better doing it 😎
**
Stop building clones of popular apps and start creating things you might actually find useful.
I recently worked with a mentee on a side project that I want to steal.
If you didn’t know, I’m into exercise and tracking calories but I also like to eat out sometimes.
The problem: it’s always a game of calorie math when I go to a chain restaurant with my kids.
Solution: pick a chain through the app and enter a calorie limit. 
The user is shown a list of items that fit their “budget”
Simple… kinda.
I won’t give away some of the tricky maneuvers we had to pull to get the data for dozens of chain restaurants or potential ways to automate this task by location, but it was very fun to figure out and there’s more work to do.
By the time [tasdeed] finishes this project I think he’ll have something both interesting to speak about in an interview as well as a useful tool that others might want to use… like me 😉.
**
My tech stack for side projects in 2018:
Create-React-App
Material-UI
Heroku
Enzyme
My own authentication system
My tech stack for my next failed startup idea:
Typescript
NextJS
Jest
Auth0
Vercel
What are you building with this year?
**
Is copy/pasting really so bad?
Honestly, it’s how I’ve survived over the years as a developer.
Every new workplace where I went and every contract I completed, I took note of what the smarter developers were doing.
I wanted to know what books they read.
I read their pull requests, even when I wasn’t the reviewer.
I copied their styles for writing tests, React components and backend code.
I asked how they investigated and debugged critical issues.
I imitated their mannerisms and watched how they spoke in meetings.
I’ve been lucky. I copied from the right people at some amazing companies and worked with developers who I truly think might be genius.
You don’t have to get lucky though.
Nowadays, through the University of YouTube, you have the ability to learn from other amazing developers and copy what makes sense to you.
A few professors who I’ve learned a lot from recently include
Back to Back SWE
Theo from Pinglabs
Blue Collar Coder
Anyone else you’d suggest?
**
I realized that I may have fooled some of you on here.
You read my title, see my follower count and you start to assume things.
Just to be clear:
I still Google the difference between slice and splice
Get stuck on problems and wait too long to ask for help
Fail interviews
Realize how little I know and compare myself to others
I’m kind of glad though. Wouldn’t it be boring to have it all figured out this early in the game?
**
If I was a junior developer, pressed for time and studying for an upcoming interview, I’d do the following:
Go on Glassdoor and look up previous interview questions
Stalk my interviewers on LI to see if we have anything in common I can bring up during the interview… without being too creepy 😉
Research the company so when I’m inevitably asked “Why do you want to work here?” - I don’t choke.
Run a Lighthouse audit on their site if it’s public facing and note any areas for improvement
Pray
**
“I’m going to get exposed” I thought.
As a junior developer, I was really anxious that one day my team would find out I was a hack.
Then, one day, I actually did get “found out” 😬
I was working at a small startup with some incredible talent and when our star engineer left to pursue his own startup, he gave me some candid feedback:
“It’s difficult to work with you since you don’t have a strong grasp of some fundamental Javascript concepts like classes or closure. I think you need to go back to the basics and learn these things.”
I was embarrassed.
He was also correct.
I wrote down his suggestions and made a plan to get more proficient with es6/7 and some of the concepts which had always confused me like promises, prototypal inheritance and decorators.
It wasn’t even that difficult.
I wondered why I hadn’t done this earlier.
In fact it’s the method I still use and share with my mentees:
Open code editor
Create a practical example leveraging the concept you’re learning
Record a video explaining the concept and your code
For promises, you might create a promise using the promise constructor and invoke it using the async/await pattern and then refactor it to use promise chains. Make a video for yourself that you may never even watch. The video simply forces you to articulate what you’ve learned in plain English.
Hope that’s helpful.
**
Here are some communication hacks I’ve learned from studying others
S𝘱𝘦𝘢𝘬 𝘴𝘭𝘰𝘸𝘦𝘳 than you naturally do - your tone should 𝘨𝘰 𝘧𝘳𝘰𝘮 𝘩𝘪𝘨𝘩 𝘵𝘰 𝘭𝘰𝘸 to sound more confident (try it out)
2. N𝘦𝘷𝘦𝘳 𝘳𝘦𝘢𝘥 𝘸𝘰𝘳𝘥 𝘧𝘰𝘳 𝘸𝘰𝘳𝘥 off a slide during a presentation
3. U𝘴𝘦 𝘺𝘰𝘶𝘳 𝘩𝘢𝘯𝘥𝘴 for emphasis and to keep people engaged during a presentation (point to stuff)
4. D𝘰𝘯’𝘵 𝘶𝘴𝘦 𝘵𝘦𝘤𝘩𝘯𝘪𝘤𝘢𝘭 𝘫𝘢𝘳𝘨𝘰𝘯 and aim for the simplest way to explain something (people will silently be thanking you and most are too embarrassed to admit they don’t understand something)
**
Most people think creating 100 small apps will teach them a lot about web development, but actually, creating 1 complex app will teach you more than those 100 trivial ones combined.
My general rule of thumb for creating a “complex” app?
Build it with the intention to sell or use personally.
Solve a problem for yourself, your community or someone else.
❌ MVP
How about MUP?
Minimally Usable Product.
Build the most basic version of this app and deploy it and maybe add a payment integration like Stripe.
Either you’ll walk away with a small business or an incredible learning experience you can speak about during an interview.
[plug side project starter kit]
**
If I was a junior developer looking to increase my marketability, then before I went for that AWS cert, or add another language under my belt, I’d expand my JS knowledge to include TypeScript.
No matter how you feel about TypeScript, it’s impossible to ignore.
The demand for developers who know TS is exploding and though I’ve tried my best to avoid using it on my front end apps, I’m currently using it for all my backend apps and adding a lot more material to my code challenges which incorporate TS.
It’s by no means a silver bullet for those on the job hunt, but it’s probably the most practical tool to add to your belt as a front end developer.
**
Look, no one can tell you how long it’s going to take to get hired.
One thing I’ve learned from working with over a dozen developers last year and having literally hundreds of conversations with many of you here is that there is no single path towards that first job.
My favorite myths:
It’s NOT a numbers game… well, except that sometimes it kind of is. One of my mentees has a wife who sent his resume to tons of companies. He rarely uses LI and has had more interviews than others who have more experience.
You MUST learn in public. Nothing wrong with that. It takes courage and it’s certainly a strategy I’ve seen work. I’ve also never done it and most of the mentees I work with who have been recently hired haven’t either.
If you learn [x] you will be more hire-able. This is how Swiss-Army knife developers are born. They start with JS. Then Python. Next, Go. How bout Rust? These are all great languages but just piling on technologies isn’t a recipe for being more hire-able.
The most successful mentees I’ve worked with are persistent, practically optimistic, work on side projects and adjust their strategy when something is not working.
**
A young man made a Tik Tok about me recently.
He did not like the cut of my jib.
You see, I said something that ruffled his feathers quite a bit.
It was this:
“You should learn HTML and CSS before JavaScript”
Not sure why or how this would controversial but yet here we are.
Last year I interviewed around a dozen bootcamp grads and participated in about 50 other mock interviews through my own program and as a volunteer.
I asked most of these candidates what I considered a softball question:
”Explain the difference between an id and class in CSS?”
Around half of the grads could not. 
As a front end developer you may be using ReactJS, Angular or Vue (I’m sorry for you - be strong) but you better know how to wield some CSS and use HTML elements in a reasonable (and accessible) manner.
Maybe this is my cue to get my old ass off Tik-Tok.
**
Are you a JavaScript developer or a ReactJS developer?
If you’re a front end or full-stack developer, your job probably depends on you being a solid ReactJS developer.
Unfortunately, those same skills don’t necessarily translate to being a proficient JavaScript developer.
In fact, I was doing a mock interview a few months ago with a person who tried to use setState while solving a problem that required a pub-sub implementation. Here’s the thing, we were using Vanilla JS. No frameworks or anything.
I give a challenge to most of the mentees I’ve worked with in the past and I’m going to share with you.
Nothing ground breaking.
Create a form with a button that submits some data to an API and shows a success message on the screen for a couple seconds. Maybe you’ll find this easy. 
Good.
Maybe this will be a reminder to practice your JS skills along with whatever framework you’re currently using.
Also good.
Check it out in comments below.
**
The most dangerous stand-up status:
“Worked on ticket 420 yesterday. Continuing on it today. No blockers”
What that often really means:
“I’m stuck and can’t figure this sh*t out but I don’t want to admit that”
I was the king of these updates.
Sometimes it worked out in my favor and I just figured sh*t out.
The real issue is that these generic updates are misleading at best and can deteriorate trust at worst. When a sprint ends or a project is finally due and you have to ask for an extension, the team will be blind-sided.
It took me a couple years and lot more courage to admit when I reached my technical depth. Counter-intuitively, I asked for more support as a senior than a junior and I also gave much more support as well. 
It’s gotten easier through repetition but I still find myself sometimes slipping into old habits. Ego, fear, hard-headedness… take your pick.
I’d argue that if you are NOT bumping against the limits of your technical capacity as a junior dev, it’s likely that you aren’t growing.
**
My biggest coding hack?
Well, I used to be an addict.
Maybe I still am?
You see, over a decade ago, my life looked a lot more like a music video for a local rapper than an episode of Silicon Valley. 
Nearly 2 years after my son was born, I had an ultimatum: give up my ridiculous lifestyle or lose my family. I quit [a lot of stuff 😅] immediately with zero plan of how I was going to make it work or if I would succeed.
I had lots of time to kill. I had no clue what normal people did for fun.
I got introduced to HTML and CSS from a co-worker and my mind was blown. So this is how the internet works eh? How the hell did I not know this?
Cue my new addiction. I approached coding with the same unhealthy mindset as I did with, uhhh, previous things. It took over my life.
It worked well overall in that I made a transition that even my mother did not really believe was possible. 
But I don’t suggest it.
Eat, sleep, code is a recipe for burnout, not success.
Once I incorporated exercise, reading and other hobbies into my life, I was happier, less anxiety-ridden and more confident.
I still have a ways to go though, honestly. Even now, I tend to go way overboard with any interest I pick up and while that sounds like a superpower it can also be at the expense of those around me and my own health.
Every once in a while, I share this embarrassing piece of my past in the hopes that a few readers will feel less alone who may be in a similar position. Just know that there are quite a few of us floating around out there and most just don’t post it online.
**
Before you take my advice, let me be clear:
I will only ever give you suggestions based on my own experience or what I’ve seen work for others.
Will it work for you?
Perhaps.
As a junior developer, almost any advice can be helpful.
Your problems are fairly generic at this stage and what you mostly need is direction.
As a team lead or senior, more context is needed to deliver useful advice and you have to be pickier with what advice you accept.
The reasons I post here are two-fold:
I have received considerable help from strangers online and I feel it’s only right to give back
I have a business and attract potential students through posting
I’ll continue to do free convos with developers and give you spicy, and not-so-spicy advice because I want to see you win the game.
I encourage you to take what makes sense and ignore what doesn’t.
**
Do you know JS concepts or practical JS?
Concepts will be tested during an interview while practical application will be expected on the job.
JS concepts that come up in interviews time and time again include
closure
promises
prototypal inheritance
this
Practical skills that you will need
Working with APIs
Writing tests
Working with popular frameworks and common patterns
**
People management is not the natural career progression for most software developers.
Project management, however, is.
The problem is that most of us just stumble across project management at some point or are thrust into it through a promotion.
As a junior developer, you are concerned with your code and making sure it works. That’s a task in itself at this stage.
Moving into mid and senior roles, there becomes a not-so-silent expectation that you are the shepherd of the codebase. You should have an overview of the general health of the codebase and the team.
So how do you get practice at these earlier stages to prepare you for the big leagues?
I recommend looking for opportunities to lead epics.
An epic is a high-level story or concept that represents a large body of work and usually includes multiple user stories.
Taking the lead doesn’t mean necessarily writing any code at all but rather organizing the stories in a logical order and keeping track of the pieces and overall delivery.
This provides a good opportunity to dip your toe into project management and get a deeper understanding of the codebase.
**
Your portfolio project probably looks a lot like other portfolio projects out there.
TODO app.
Weather app.
Clone of [x]
Blog
Chat app
Here’s the thing, there’s nothing at all wrong with these projects. They can certainly teach you a lot. 
BUT - when digging through a stack of resumes for an open junior developer position, it is hard to stand out.
If your goal is to stand out AND learn something try this:
Start with an API or a real-world problem you are familiar with
Sketch out the features using a tool like Excalidraw
Build that sh*t
Deploy it on AWS like an adult
Now you have an interesting technical story and maybe even your next startup idea.
If you’re looking for some interesting API’s [anirduh] has compiled (this guy’s a true hero)
https://docs.google.com/spreadsheets/d/1HH5Jf0iazkMrGGXpp03rt_85XypHEhhPRIEq5Q1qUYM/edit?usp=sharing
**
Learning to code didn’t change my life.
Getting sober and exercising did however.
I went from a fluffy, anxiety-ridden addict to a much less fluffy, anxiety-ridden software developer.
**
The job market for developers doesn’t suck.
It’s just less piping hot.
So yes, getting that first role is difficult, arduous and more luck is involved than many would like to admit.
A mentee of mine had that same issue last year and I suggested we pivot into searching for QA roles.
Here’s what he did:
Study Cypress and Selenium
Practice writing automated tests at https://ultimateqa.com/dummy-automation-websites/
Update his resume to reflect relevant QA projects from the previous step
Apply a lot
He landed a role at a tech company shortly after as a QA automation engineer where he will write code for end to end test suites.
There’s more to the tech-o-sphere than ReactJS. There’s DevOps, QA, product, data, sales... Don’t limit yourself to what your bootcamp taught you.
**
300 conversation with developers later and I’m convinced that most of us need a sympathetic ear as much as we need career and coding advice.
Here’s the thing: coding is fun.
It can also be:
lonely
stressful
tedious
confusing
Don’t wrap too much of your identity in the code you write. It can be a fickle beast. Sometimes I’m pretty damn good at slinging code. Sometimes I suck. 
So I hit the gym. Run around a lake. Read stuff. Write on here and in my newsletter (you better have signed up, seriously wtf).
This way when one area drags me down, I use another to lift me up.
Outside of coding, what are some hobbies you’ve picked up?
**
I’ve gone from struggling junior developer to struggling engineering manager over the last 10 years and that little voice in my head has been present that entire time.
“They’re gonna find you out”
It’s lot quieter than when I started but it never left. I’ve come to accept it and seen its patterns.
Promotion?
Voice gets louder.
Accomplishment?
Voice gets quieter.
New job?
Deafeningly loud.
Solve an LC hard in 30 minutes?
🤐
The feeling that you’re just not quite good enough may in fact be true. Be objective. Write out your weaknesses. Write out your strengths. Where is the gap between who you want to be and who you are currently and what will it take to get there?
**
Ok, we’ve seen enough good code on this damn site.
Here’s some janky ass code for you to refactor:
/**
 *
 * @param {Array} array1 array of objects
 * @param {Array} array2 array of objects
 * @param {string} key shared key for objects in both arrays
 * @returns a merged array of objects by key
 */
function mergeArrays(array1, array2, key) {

  const merged = [];

  array1.forEach((item) => {
    const idx = array2.findIndex((item2) => {
      return item[key] === item2[key];
    });
    if (idx !== -1) {
      merged.push({ ...item, ...array2[idx] });
    }
  });

  return merged;
}
​
I’m curious, what’s the most unforgivable mistake I’ve made here and how would you fix it?
**
Top 3 pieces of advice to save your resume for all your junior devs
Stop calling yourself a junior or aspiring. You are a developer.
Use strong language. “Led development on [x] feature which [improved some metric]” or “architected” sounds better than “worked with a team on [generic thing]”
Lead with your relevant experience. It can be confusing to look at resume for a dev role and see nothing coding related. Put your projects/volunteer work/side projects at the top.
What else would you suggest?
**
There’s more in common with getting in shape and learning to code than you might think. Both teach:

Growth mindset - our body, like our mind is not fixed or limited.

Humility - there is always somebody better than you. Learning a new programming language or lifting a larger weight will keep you humble.

Delayed gratification - you have to stick with either endeavor for a while before you “see” the results.

No one is judging you (as much as you think) - People are focused on themselves, not you. We’re all looking in the actual mirror or the proverbial mirror at ourselves for the most part.

Age limits don’t exist - Despite what you may think - the gym, like the software industry is not controlled by 20 somethings and as long as you’re breathing, its a good time to get in shape or learn a new skill.

For all you gym rat coders out there, what are some similarities I missed?
**
How do I get better at Javascript?
Build stuff.
Not specific enough?
Well, here are the subjects I struggled the most with and how I learned them through practice:
Promises - implement Promise.all or Promise.some
Closure - create a function that returns another function that can only be called 1 time
This - implement bind and call from scratch
Recursion - make a function that searches a deeply nested object for a value
If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge.
** 
Stuck on what to build for your next side project?
Here’s the process I’ve been using for years to learn everything from Typescript to AWS Lambdas:
Pick an API - this is important, you need some external data or functionality in order to build something interesting or you’ll be mostly stuck with TODO or clone apps
Use Postman or some other http client to test the API and make sure it’s worthwhile
If the API is not free, consider how you might leverage caching to limit requests
Scaffold out the structure of the app - what is the first page a user lands on? What happens when they click a button? Where is data stored?
Begin building using the new technology/language you want to learn
You will get stuck.
This is kinda what you want.
Google, ChatGPT and Stack Overflow through roadblocks. This will be a messy affair but you will learn a ton.
[https://yourcodecoach.com/redux-node-challenges]
**
Concepts and technologies JS developers consistently struggle with:
Redux
Webpack
Closure
Promises
Recursion
I have material on each of these subjects in my course library but there’s one thing that students have found more difficult than solving the actual challenges:
explaining these concepts on video
It’s tough. It’s awkward.
It’s also the best way to ensure you actually understand the concept. 
Making this material was pretty eye opening for me honestly.
I had to refresh and re-learn a lot of things I thought I knew.
You certainly don’t need to buy my course to do this (you should though 😉) and I encourage you to try this challenge:
Use Loom (or whatever) to record yourself explaining one of the concepts above to a technical audience. Maybe post it on LI. Maybe cringe at hearing your own voice. I don’t know - but I guarantee you’re going to get some much needed practice with technical communication.
If you are a brave soul, tag me when you do post 😉.
**
A mentee asked me a very difficult question when we first started meeting.
“Should I leave my job?”
He liked his team and manager. The problem was he didn’t feel like he was growing as a developer. 
If he stayed, he likely would’ve been the best damn developer on this small team and had a pretty chill work day. Small UI fix here, squash a little bug there. Easy breezy.
But what happens when you want to leave? Or have to? - I asked.
The danger of staying complacent at a company or team where your skills are not growing is that technology moves fast and you will be very much at the mercy of the market when, not if, you find yourself looking for a new role.
Stability is a myth.
The decision was not easy but he began searching for new roles and not only nailed the interview but became a lead developer at a large organization.
Imagine if he had just “played it safe”
**
Why can’t a super smart developer with 1 year of experience be a senior?
Good question.
If the only difference between a junior and senior is truly technical skill, then it seems feasible that a developer with very little experience could be a senior based on technical skill alone.
But that’s not the case.
The biggest differentiator I see is that seniors have the experience to offer solutions and avoid pitfalls that a junior dev just hasn’t been exposed to yet.
They have the benefit of hindsight.
They’ve made all the mistakes the junior hasn’t.
The best way to shorten the path and build up the experiences that often takes years is to (you guessed it) build stuff.
[plug course]
**
I’ve successfully networked my way into 0 of my last 4 jobs as a developer. 
I built exactly 0 projects in public.
I’ve also worked with 20 developers this year. They’ve overwhelmingly had the same experience.
The boring truth:
They applied a lot.
They worked with recruiters to get interviews.
They kept their skills sharp with side projects and mentorship.
I know, I know. Everyone must build in public and network their way to their first role. I don’t doubt this works for a lot of people. I’ve seen it work. It’s just not the only way.
**
These concepts and topics blew my mind as a JS developer and maybe they’ll help you level up too:
generator functions
web workers
web components
currying
decorators
Anything you’d add?
**
The developer who failed 100 interviews.
At first I didn’t believe him.
I mean, 100? There’s no way. Then we did a mock interview.
Oof.
Here’s the thing - he was a very personable dude. Polite, well-spoken and confident. During the interview though, he didn’t come off as such.
His answers were short to the point I could see how they could be perceived as rude. He cut me off a few times as I explained a concept. When asked about a project he had worked on, he gave a cursory overview of a trivial feature and didn’t offer much detail. He used some internal names for the app which didn’t make sense to me.
After the interview, I brought some of these issues to his attention.
We dug into his former role and the work he did. It was interesting. He had worked on challenging technical problems across the stack.
So why in the hell wasn’t he mentioning this in the interview?
He was genuinely surprised with my perception and feedback. 100 interviews deep and here he was getting this hot-take for the first time.
Companies will rarely give feedback to candidates and I know that’s “unfair.” It’s also reality.
Legal reasons. Awkwardness. Time constraints. Pick one.
Many of us are overly focus on the technical aspect of interviews. I mean, we’re software developers. 
Don’t underestimate the human aspect.
**
Every developer should have a side project that teaches them something outside of work.
The problem?
Most people don't know how to build a project that will stretch their limits.
Here are 5 steps that might help you get started:
pick an API you are interested in
decide on a framework or language you’d like to learn for this project
create the MVP user flow by drawing out the features needed for the app (a piece of paper is is sufficient, no need to get fancy)
choose a cloud service provider for deployments - personally I’d use AWS since it’s what you’ll likely use in the “real world”
roughly 25% of your tech stack should be new to you and the other 75% should be familiar so you don’t get completely overwhelmed
// sign up for my side project course
**
Software engineering according to Tik-tok:
chill ass schedules
big bags
games at work
Software engineering for the rest of us:
tight deadlines
brutal on-call periods
going between feeling really smart and really dumb on a daily basis
They’re both reality but I’d say one is more realistic than the other.
https://open.spotify.com/episode/1q0LMCUPThFSAs5QwB4jl4
**
Do you really have to be a software engineer? Ya know, there are other disciplines within software besides front end, back end and full stack.
QA
Product
Design
Sales
Support
DevOps
If you’re a recent bootcamp grad and the market has you feeling defeated, you may want to consider other roles within tech, especially QA. Quality assurance can involve quite a lot of coding for test automation and tools like Cypress.io use a language many of you are already familiar with - Javascript.
I encourage you to do whatever makes sense to you and not limit yourself to what your bootcamp taught you.
**
Another mentee of mine got hired.
The funny thing is we barely covered any technical material during our meetings.
I'm beginning to realize a lot of developers just need encouragement, a clear direction for what to study and a good kick in the ass to go for what they want.
Also… closure 😉
**
In software development, it's rarely picking the right language, framework, or technology at the exact right time that makes the biggest difference in your career. 
It's usually just practicing the fundamentals, staying up to date with the trends in your domain and learning consistently over a long period of time.
Instead of chasing the shiniest framework or language in the hopes it’s the next big thing, just learn what actually interests you. You’ll probably end up timing it right a few times anyways. 
**
I’ve seen all your side projects.
They fall into 1 of 3 categories:
Clone of popular app
Random thing generator
Chat app
I’m not saying there’s anything at all wrong with these apps. I’ve seen some amazing (and not so amazing) variations of these.
Here’s the real issue though:
It’s hard to stand out on a resume full of other bootcamp grads who have basically created the same app.
So what can you do?
Create your own side project.
Pick an API about something you’re interested in. Choose a language and framework you’re curious about. Ideally, try to solve a real world problem. Maybe a web scraper that aggregates jobs with less than [x] applicants from a popular site. Something that displays historical data? Whatever floats your damn boat.
Add some tests maybe.
Deploy it.
Now you’ve learned some valuable skills and maybe even have something beautiful to show off.
Grab my side project starter template here:https://docs.google.com/document/d/1H508NN2HCnnKmkRMgCg3pj_mXr3i8x3Np0jS6w4xzCs/edit?usp=sharing
**
The economics of the junior developer:
Junior dev joins a new company for below market rate.
They bumble around and learn, and feel guilty for being so… junior.
Company is banking on the junior staying for longer than they are junior.
Now, instead of paying market rate for a mid-level developer, they have one for a little more than the original junior rate.
Junior gets the benefit of training and company gets a very good deal on a mid-level dev if they stay.
**
What people think front end is:
cute lil button
move that over a few px
centering divs
sprinkle a lil JS
What it really is
module bundlers
new framework to solve old framework
performance optimizations
centering divs
**
Why are we writing tests again?
Isn’t that what QA is for?
Tests aren’t free, they take time and when done correctly they can
supplement documentation
allow for easier refactoring
verify edge cases which are difficult to trigger manually
The problem most people have when it comes to writing tests is just getting started.
Check out the video and the links below to code snippets you can use to write your first tests using Jest.
**
Oh no, titles don’t matter at all.
Not one bit…
But my recent experience with hiring developers for our small team may be of interest to you:
Posting for junior developer:
200+ applications
Posting for senior developer:
~20 applications
Of the 20 for senior, I fully expect at least half will either be unqualified, already have an offer by the time we finish interviewing or be using our interview as practice or leverage in other interviews (hey, no shame in your game - I understand).
If it wasn’t obvious, of course your godd*mn title matters. 
It’s directly tied to your salary, career trajectory and leverage when looking for work. It’s a hell of a lot easier to get hired as a senior after already having the title.
So does that mean you chase titles for the sake of titles? 
Well, to some degree, yeah.
As a software developer, Senior <Whatever> is where you’re likely to spend the majority of your career. I’ve worked with Senior Devs in their 50’s, 60’s and even 70’s.
Senior covers a large range of competency and of course at more mature, engineering focused companies, you can become Staff, Principle or Distinguished Dev/Engineer/Code Jockey.
To me, Senior is a nice sweet spot in the software developer career life-cycle. You can dip your toe into management, mentorship and have more career stability.
**
Expecting formal mentorship at your next job as a developer?
Got some bad news for ya’ buddy.
Most companies simply don’t have a plan to offer the kind of mentorship that will actually accelerate your career so they rely on:
Video tutorials from popular services which may be outdated
Conferences
Onboarding buddies with little to no training
Oh - and those tutorials and videos they offer are usually done on your own time… have fun.
So what can you do?
Here’s the harsh truth - you, not your company, are ultimately responsible for your growth as a developer.
If paid mentorship isn’t something you’re into, you can try
books 
building an app using a few technologies you are interested in
start an engineering book club at work
What are some ways you’ve been able to stay sharp as a developer?
**
In the last decade I got sober, learned to code and got in shape.
I had to update a lot of my habits to change these areas of my life.
In order for these new habits to stick I had to make them easy to adhere to.
I’m a sugar fiend so I got rid of all treats in my house - why tempt myself?
I would code first thing in the morning before work and kids got in my way.
I told everyone that I was going to stop drinking to force accountability.
These habits led to more positive habits and the effect compounded over time.
**
No one really cares about your sob story.
I’m telling you this because I sincerely want you to succeed.
There are few things which frustrate me more than people unwilling (not unable - there is a difference) to realize their potential.
I know what that’s like. For me, I was lost in addiction, crime and generally being a fool. Maybe your struggle is less salacious. Perhaps you’re an ex-cashier struggling to break into tech. Ex-con. Ex-whatever.
I could tell you the system is rigged and unfair.
But what good would that do?
From the hundreds of conversations I’ve had with many of you, I’ve learned we are all dealing with our own insecurities and external issues. 
The dude who grew up with software engineering parents and works for FAANG - yup, him too.
I’ll offer you the same advice I was given and that I give to people who I care about:
Focus on your skills and be undeniable in your talent
Learn to speak well and clearly
Find out what makes you feel insecure and attack that problem
Write out your thoughts to make sense of them
Find comfort by creating a personal, daily routine - the world is chaotic enough
**
The job search can feel unrewarding, draining and shake what little confidence you have in yourself.
It’s a game of both skill and chance.
You can be absolutely qualified and still “fail”.
Rejection is rarely personal, it’s an inevitable consequence of many factors:
Resume quality is subjective (ask 5 people to look at your resume and get 5 different opinions)
Some companies hire internal candidates but open roles to the public with 0 intention of hiring
Engineering interviews can be biased in favor of a specific answer even when presented with working (or even better) alternatives
So what does this mean?
Expect failure and learn from it.
Try your hardest not to take it personally.
Whatever you do, please do not stop playing the game.
You only have to win once.
**
An engineer on my team did a pretty genius thing yesterday. 
It had nothing to do with coding.
He was asked to give a quick presentation on some of the work we’re doing to a large audience.
He nailed the presentation and I was impressed with his clear and concise delivery.
I can barely get through more than a couple sentences without an “uh” or an “um” even after speaking on camera every day for a while now.
What was his secret?
A small teleprompter.
Genius.
No technical jargon, a few nice visuals and no more than a couple minutes presenting the most interesting and tangible aspects of the work we’re doing (e.g. here’s a new UI treatment for this page, rather than digging into the particulars of our ReactJS component library or ongoing migrations).
**
There can only be 1 best coder on the team and it’s probably not you.
As an average developer there’s still a lot of room to make impact outside being the highest technical authority.
As a very non-rockstar coder, here are some things I’ve done over the years which helped me stand out:
start an engineering book club
volunteer for on-call
onboard junior members
create a PR template to streamline the code review process
offer to assist with others’ work
actually talk during pointing sessions and clarify tasks instead of just nodding my head
Of course, getting work done in a timely manner and not significantly adding to the number of bugs in our backlog didn’t hurt either. 
I don’t think I’ve ever been the “best” coder on any team where I’ve worked. I’ve certainly been the worst in at least 1 company. Let me be clear, you cannot be technically incompetent, start a book club and expect to get recognized and promoted… BUT you also don’t need to wait until you understand JS on a Kyle Simpson level to offer your insight, suggest changes and speak up
**
Git really doesn’t have to be that complicated
commit your work git add . git commit -m “some good message” git push
uh oh, got work I don’t wanna commit right now git stash 
now I want to get that code back git stash pop
double uh oh - something does not work because of an old commit - git log to find the issue then git revert <commit hash>
on second thought let’s add back in that commit you reverted git log to find the revert commit hash and git revert <revert commit hash>
switch back to branch I was just working on git checkout -
I only want that one file from my other branch git checkout <branch_name> — ./path/to/file
so many conflicts find all <<<< then fix conflicts, test your branch and commit that sh*t
I’ve been using some version of this flow for nearly a decade to push my work, find and revert changes and triage critical incidents. 
Any git moves you’d add here? (don’t say rebase, don’t say rebase 😅)
**
Before you learn Kubernetes or Python or whatever is collecting dust in your Udemy library, I want you to do me a small favor.
If you’re a JS developer, make sure you can build a small application, free of any external framework.
I have a small challenge I give to developers who I mentor 1 on 1. It seems simple on the surface and my hope is that they do in fact find it easy. Often times, it uncovers some gaps in their knowledge and gives us a good idea about where to begin focusing our attention.
You can’t build a house on a shaky foundation.
Check it out in the comments below and if you’ve completed this challenge, don’t drop any hints!
**
There’s no such thing as a dumb question?
Eh, I guess.
There certainly is a dumb way to ask a question though…
As a junior software developer I’m sure I annoyed the hell out of the benevolent senior on our team.
“Hey dude, I can’t figure out this issue”
“What’s the issue?”
“I can’t figure out why this button does not trigger a request to the API”
“Is there any error or…”
“Uh… lemme check”
It’s hard asking questions as a junior (or not so junior developer) developer. Here are some of my rules of thumb for seeking assistance when I’m stuck:
detail the issue that’s causing problems and steps to reproduce
open the freakin’ console and post any errors that might be relevant (better yet, google them)
post your conundrum in a public channel so others get the benefit of learning from your issue
 As a junior it’s important to ask questions early and often but if you’re worried you’re asking too many, it may be a sign that you need to do some due diligence before DM’ing the 1 nice senior on the team.
**
Happy path coding - the mark of the junior developer.
Goes a little something like this:
function works
test cases pass
PR LGMT’ed
Blows up spectacularly in production
I’ve had this experience happen more than a few times because I didn’t consider edge cases. What happens when a deeply nested object from a 3rd party API doesn’t come back as expected? What if the user clicks like a mad-man on the submit button? How often should a request be re-tried before failing?
Treat your users kindly but expect them to treat your app like raving lunatics with thumbs for fingers.
**
Here’s the harsh truth about interviews that no one ever really addresses:
Luck is a factor.
You could be absolutely qualified for a position and study all the relevant material.
Get a bad interviewer? All that pre-work might go down the drain.
Perhaps your interviewer asks an unreasonably difficult question or has different standards about what constitutes a reasonable solution? 
Or perhaps luck works in your favor.
Maybe you study a particular question that you have memorized and get asked that question.
Maybe the interview is not technical at all and just consists of small talk and personality fit.
So if you’ve recently bombed an interview or are beating yourself up because you see others achieving success on a timeline that doesn’t seem possible for you, realize that interviewers are both a game of skill AND chance.
Increase your surface area for luck by continuing to apply, studying 
**
Can we all agree that snapshot tests are pointless 99% of the time?
They somehow sneak into our test suites with good intentions.
Inevitably they result in false alarms and are ignored.
Unit tests are concerned with confirming expected functionality. React-Testing-Library allows us to interact with React components in the way a user would. We click around and certain behavior triggers events that the DOM reacts to based on our logic.
Now we have these pesky snapshots.
They take a pic (a snapshot if you will) of the DOM output and then compare the original code to the current output. If there’s a difference, we get a failed test.
Maybe you changed the button color from light-green to not-so-light green.
Whoops.
Used incorrectly, snapshots give us a false sense of security or get ignored entirely. They contribute to vanity test coverage metrics with no real benefit.
Am I way off base here? If you’ve used snap shots in a useful way I’d love to hear about it.

**
Contrary to popular LinkedIn belief, you don’t HAVE to climb the corporate or engineering ladder at your organization.
To an extent at least.
I’ve met more than a few senior engineers who had been at the IC (individual contributor) level for the majority of their careers.
One was past 50.
He was amazing. 
He knew a lot. Maybe too much.
Chasing titles for the sake of “progression” can be mentally draining and if you don’t have an underlying goal or intrinsic desire to make the leap to the next level, then it may do you more harm than good.
God forbid you go the management route because you want more money 😅. Unfortunately, based on a lot of the horror stories in my DMs, I suspect this is more common than any of us would like to believe.
That being said, I still think at a minimum you want to get to senior level. Not just because of the money, but because of the stability, opportunities to dip your toe into people management and leverage when interviewing.
**
As a junior dev you take care of a small area of the codebase. You make small things work.
As a mid level dev you take care of a larger area of the codebase. Things work and they work well for the most part. You help juniors get things to work and still get help from seniors in this effort.
As a senior dev you help create patterns and standards that the team leverages. You get others’ things to work. You mentor.
**
Working as a software engineer isn’t all WFH, late mornings, big bags and chill schedules.
It’s also:
oncalls
aggressive deadlines
switching stacks and learning on your own time
self-doubt
Should this discourage you? Well, I hope not. Like anything else worth doing, it’s not easy and expecting to be over-compensated for under-performing is a recipe for disaster.
**
Diving into an unfamiliar codebase can be scary.
As a new developer, I was intimidated by just how many files, services and docs were associated with an app.
Many of my mentees have started new positions and are having a similar experience.
Here’s how we navigate a new codebase:
Get it working locally
Look for patterns - for a UI app, how is the business logic handled as opposed to presentational logic? 
Pick a feature and break it - expand the API response or trigger an auth error. Update a route to go to a page you just created
Update a test - pick a part of the codebase that could use more testing and write a test
Read the f*** docs
Oh - they don’t exist?
Write the f*** docs!
Anything you’d add?
**
How does it feel to be the worst developer on a team?
Well, I had the unpleasant experience of holding this title when I worked at a small startup.
I probably had more technical growth in the short time I was there than at any other company I’ve worked since.
You’ve probably heard the advice “If you’re the smartest person in the room, it’s time to leave the room.”
Easier said than done.
The guilt and anxiety I felt on a daily basis was difficult to deal with. There I was, confronted with my own limitations and the realization that this wasn’t just all in my head.
I could barely keep up with the tasks I was assigned and relied on lots of pairing sessions to get my work done.
The company was small - only 3 engineers and they were the kind of developers who gave speeches at conferences and wrote the libraries that other devs use in their daily work.
I could either quit or at least attempt to keep up with the other devs and contribute to the best of my ability.
I made a resolution to suck less.
I asked the smarty-pants devs what books they suggested I read
I audited my Javascript knowledge and wrote out what I knew I had to learn to contribute to discussions
I enrolled in a course to learn DSA and comp sci fundamentals
Someone made a joke about Djikstra once… who the hell is that? I would find out
I never became the 2nd worst developer at this company, but I grew my technical skills, confidence and threshold for failure.
As uncomfortable as it was, I know see just how pivotal this experience was.
So if you’re just starting out, or maybe on a new team and discovering just how little you know…good. Embrace the suck, expose your ignorance and be prepared to learn.
**
Random interview tips that have nothing to do with coding
have some water near you during an interview
make sure your battery life and charger are sufficient
clean up your messy ass room
arrive a few minutes early to bumble around with the video chat login
have your code editor ready (and turn off Github Co-pilot 😉)
take a short walk or do some pushups before the interview
Any other non-technical tips you’d add?
**
Code should always follow DRY principles!
Except, maybe your abstraction is more clever than useful in this case.
TDD or die!
Or you know, TaDD (test after development is done). Or, perhaps manual QA can be enough.
TypeScript is the only choice for serious JS developers!
But maybe it’s overkill for this simple UI app. Or just use JSDoc annotations.
Be careful falling into dogmatic, knee-jerk responses when it comes to writing software. One thing I’ve learned is that there are exceptions to the rules we accept as coding law.
Any sacred cows I missed here?
**
Do the boring stuff.
It will take you far.
While you’re chasing the latest technology and shiny frameworks, realize that these 4 things will be just as important to your career as a software developer
effective communication
software design patterns
time management
writing
**
My 4 step process for debugging sh*t:
Reproduce the bug consistently and on my local set up if possible
Explore any issues in the console using dev tools - my usual suspects: network requests not behaving, Javascript errors, unexpected or missing data, data type mismatches (queue the Typescript brigade 😅)
Set breakpoints, debuggers and console logs to identify the issue and step through the offending code line by line
Implement a fix and test it then have another engineer review the logic. Jumping the gun can result in introducing more bugs, so I like to have someone with a cooler head reviewing code I wrote in an emotional state
Bonus step: write a test to ensure the issue does not repeat itself. 
Any debugging tips you’d add?
https://typeshare.co/brianjenney/posts/debugging-javascript-code-using-the-rest-method
**
Getting interviews is hard.
Interviewing is hard.
Do you know what’s harder?
The part after the interview. Starting a new position, learning a new codebase, getting your first feature, doing your first on call rotation.
The interview is just the entry fee to an entirely new game.
**
One way to ensure you don't grow as a developer:
take on tasks you are 100% sure you will finish
Instead:
take on a task just outside of your comfort zone
google what you don’t know
ask for help
Force your growth.
**
Your next technical interview might not be so technical at all.
What I’ve learned from working with nearly 20 front end developers in the last year on the interview grind, is that in addition to having canned answers for explaining closure, promises, and the difference between bind, call and apply, you want to have answers for questions like:
tell me about a challenging project you’ve worked on
how do you resolve conflicts with team mates?
here’s a website we made, how can we improve it (how do you measure the performance of a webpage basically?)
how do you handle tight deadlines?
what’s your debugging process?
why do you want to work here?
What’s a good (or terrible), non-technical question you’ve been asked in an interview?
**
Turn off the tutorial. 
Open the code editor.
You’re going to learn a hell of a lot more from:
getting stuck
reading the documentation
realizing the docs suck
scouring Stack Overflow
oh no - that’s an old comment
throwing everything at the wall
finally figuring it out
feeling like a genius… for a few minutes
as opposed to:
typing what another person has typed
**
Quintessential junior dev move:
Wasting hours solving a problem a co-worker could’ve helped you figure out in minutes.
No, this is not a long term solution to becoming an effective developer.
Also:
You are ultimately judged on the work you complete. When you bump your head against your technical depth, acknowledge it and ask for help.
But for Jeebus sake please don’t just say “I can’t figure out [x]”
Try this:
I’m having an issue with [this specific problem]
I’ve tried [y] but it’s not working in the way I expect which is [this way]
[Maybe add a screenshot or documentation] 
Is anyone available to take a look with me sometime today or point me in the right direction?
Don’t let your ego get in the way of progress.
**
I’ve worked at a company that had exactly 0 unit tests and one with 90% overall coverage.
Which one do you think had more bugs?
Surprisingly, the company with 0 tests had less critical issues than the one with high coverage 🤔.
Of course other factors were at play and I don’t necessarily think either strategy is wrong. Different teams require different approaches.
My rule of thumb for tests:
they should allow for easy/ruthless refactoring by validating core functionality
they should test scenarios which would be time consuming to test manually
critical areas should have high coverage
they should support, not substitute manual QA
Tests are not a guarantee against bugs, but a first line of defense. At best they allow us to write code that behaves in a way we expect and actually increases velocity. At worst they just feel like another chore.
**
Most stressful scenarios you will encounter as a software developer:
code you just deployed causing a critical error
demoing code that breaks apart in front of an audience - when it just worked on your machine
notification from GitHub that your code review has 100+ comments
getting a PagerDuty alert on a weekend about a component you aren’t familiar with
cryptic messages to meet to chat with your manager with no agenda
interviews
What else?
**
Nearly a decade ago I started my first day as a developer. I knew HTML, CSS, Jquery and a little AngularJS.
The night before the first day, I was barely able to sleep.
Would I be found out as a fake developer and fired immediately?
Would they give me a task I couldn’t figure out?
How long before they realized they made an error in their hiring process?
Well, I never got “found out” and took on more than a few tasks I couldn’t figure out… yet.
If you recently started a new position or are about to, you may be feeling a lot of the same emotions.
I still do each time I start a new position.
Here are some ways I get over my anxiety:
make a 30/60/90 day plan which usually includes delivering a small feature
immediately explore the codebase and identify areas I just don’t understand
ask a bunch of questions while I’m still new enough that no one will judge me
take notes
realize I’m here to do more watching than doing during my first month
So if you just got hired, congrats! I also know it can be just as stressful as the interview process. Perhaps moreso.
What’s your tips for people just starting a new dev position?
**
A couple developers I mentor recently got hired. Now the real work begins.
Exploring a new codebase.
Finding areas to make impact.
Learning the engineering culture.
Using git… but like, foreal this time.
I’m beginning to think this is the area where developers need the most support. The job search is stressful for sure but it makes up such a small portion of the developer life-cycle. You won’t be spending your days optimizing algorithms or manipulating palindromes.
The part after the interview is when the real work begins.
If you’re a recently hired developer, what are some areas where you wish you had more knowledge?
**
Some things you need to develop an opinion on as a web developer:
Typescript vs Javascript
CSS - TailwindCSS? Material UI? Styled Components? Plain CSS?
Testing - TDD? Unit tests? e2e? All of the above? None of the above 😱
Module bundlers - TurboPack, Webpack, Snowpack, [x]pack
React flavors - (NextJS, RemixJS, Create-React-App)
What would you add?
**
Ask yourself 3 questions before you refactor code:
Does this make the code more readable?
Will this prevent an error from occurring?
Is the effort worth the benefit?
If the answer to all 3 is no, then don’t refactor.
**
You don’t have a problem learning to code. 
You have a time management issue.
Too many people follow this pattern:
Zero coding 80% of the week.
Marathon coding sessions on their day off.
I’ve yet to see this strategy work. It’s simply not sustainable.
1 hour a day beats 6 on a Sunday. Hell, 30 minutes a day will likely get you further than attempting to cram a new framework into a weekend.
Consistency > Intensity.
**
Congratulations! You got the job. Now here comes the hard part.
Bootcamps do a great job (for the most part) of getting developers hire-able. But what happens after you nail the interview?
I work with and speak with a lot of developers at the beginning of their careers. Many of them struggle in the same areas that I did after getting hired:
Git flows and branching
Code editor shortcuts and commands
Writing good peer reviews
Estimating features
Deployment processes
Writing unit tests
Debugging
Learning a new codebase
Like too many of us, I learned these skills through trial and error. Over years!
Anything I missed on this list that you wished you had learned before starting your first role as a developer?
