urn,text,type,firstName,lastName,numImpressions,numViews,numReactions,numComments,numShares,numVotes,numEngagementRate,hashtags,createdAt (TZ=America/Los_Angeles),link
urn:li:activity:7354895031272427520,"I love AI tools.

I hate the hype.

It's like we're afraid to admit the truth: these tools are amazing and can make certain tasks take a fraction of the time but they're not a replacement for good judgment. At worst, they actually slow us down.

It's like having a really ambitious intern who can write code at lightning speed.

Yes, I'm sure I'm just using them wrong 😑",ARTICLE,Brian,Jenney,976,870,18,8,1,0,0.027663934426229508,,2025-07-26 08:27:02,https://www.linkedin.com/feed/update/urn:li:activity:7354895031272427520
urn:li:activity:7354509534754738178,"How cooked are junior devs because of AI?
Will the tech job market ever ""correct""?
What's the best way to build a MERN stack app?
Why can't you finish that tutorial? Should you?

I got some great questions for this episode of Office Hours and my answers might surprise you. 𝗬𝗼𝘂 𝗰𝗮𝗻 𝗹𝗶𝘀𝘁𝗲𝗻 𝗵𝗲𝗿𝗲: https://lnkd.in/grbd5YYJ

We do office hours regularly for students at Parsity and over the last 5 years I've done around 700 individual phone calls (I'm old school) for developers around the world.

I used to write articles on this kind of stuff but no one reads anymore! 

What's a question you'd like me to answer on the next episode?",IMAGE,Brian,Jenney,1827,1827,15,0,0,0,0.008210180623973728,,2025-07-25 06:55:13,https://www.linkedin.com/feed/update/urn:li:activity:7354509534754738178
urn:li:activity:7353621556155068417,"What's one tip you'd give to someone learning JS?

Here are some areas I struggled with when I first started writing JavaScript​:

• promises
• DOM manipulation
• functions
• debugging
• nested arrays

What helped me grok these concepts was a pretty simple technique: 

Learning by form.

I'd spin up a blank CodePen, create a button and an input. 

When I clicked the button, something would happen. 

Maybe a div would change colors. Maybe a message would flash across the screen with the value from the input. Total nonsense stuff that made the conceptual practical.

This week, I'll be doing an episode on learning JS for n00bs. If there's something you wish you knew that might help others, drop it in the comments.",TEXT,Brian,Jenney,1678,1678,14,7,1,0,0.013110846245530394,,2025-07-22 20:06:42,https://www.linkedin.com/feed/update/urn:li:activity:7353621556155068417
urn:li:activity:7353484012444667904,"The job search can feel unrewarding, draining and shake what little confidence you have in yourself.

It’s a game of skill and chance.

You can be absolutely qualified and still “fail”.

Rejection is rarely personal, it’s an inevitable consequence of many factors:

- 𝗥𝗲𝘀𝘂𝗺𝗲 𝗾𝘂𝗮𝗹𝗶𝘁𝘆 𝗶𝘀 𝘀𝘂𝗯𝗷𝗲𝗰𝘁𝗶𝘃𝗲 (ask 5 people to look at your resume and get 5 different opinions)
- 𝗦𝗼𝗺𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝗶𝗲𝘀 𝗵𝗶𝗿𝗲 𝗶𝗻𝘁𝗲𝗿𝗻𝗮𝗹 𝗰𝗮𝗻𝗱𝗶𝗱𝗮𝘁𝗲𝘀 but open roles to the public with 0 intention of hiring
- 𝗖𝗼𝗱𝗶𝗻𝗴 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗰𝗮𝗻 𝗯𝗲 𝗯𝗶𝗮𝘀𝗲𝗱 in favor of a specific answer even when presented with working (or even better) alternatives

So what does this mean?

𝗘𝘅𝗽𝗲𝗰𝘁 𝗳𝗮𝗶𝗹𝘂𝗿𝗲 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻 𝗳𝗿𝗼𝗺 𝗶𝘁.

Try your hardest not to take it personally.

Whatever you do, please do not stop playing the game.

You only have to win once.


Zubin Pratap  and I will be going over the strategies we teach to Parsity mentees to give you the best shot at nailing your coding interviews, next Friday. Register here: https://lnkd.in/grQZWewf",TEXT,Brian,Jenney,1326,1326,22,7,0,0,0.021870286576168928,,2025-07-22 11:00:09,https://www.linkedin.com/feed/update/urn:li:activity:7353484012444667904
urn:li:activity:7353121234231963649,,EVENT,Brian,Jenney,521,521,8,0,0,0,0.015355086372360844,,2025-07-21 10:58:36,https://www.linkedin.com/feed/update/urn:li:activity:7353121234231963649
urn:li:activity:7351987694899527681,"Are we done with vibe coding yet?

Too many software developers are obsessed with the surface layer when it comes to using AI. 

The fun stuff is just a layer below.

Over the last 12 months I've been using AI in production apps which has not only been fun, but has also significantly increased interest in my profile 😉.

I won't call these tips or tricks. There aren't many standards when it comes to using these tools so I'll just share how I'm working with them:

1. 𝗦𝗰𝗵𝗲𝗺𝗮 𝘃𝗮𝗹𝗶𝗱𝗮𝘁𝗶𝗼𝗻: LLMs can return the kind of structured data we expect in software development if you provide a schema. OpenAI supports this OOTB with Zod.
2.  𝗧𝗲𝘀𝘁𝗶𝗻𝗴 𝗔𝗜 𝗿𝗲𝘀𝗽𝗼𝗻𝘀𝗲𝘀: A small tweak to a prompt can break things fast. Using an LLM-as-a-judge in a unit test for a function that relies on an AI response has alerted me to breaking changes. I run these tests daily or before deploying since they are not free.
3.  𝗟𝗲𝘃𝗲𝗿𝗮𝗴𝗶𝗻𝗴 𝗰𝗮𝗰𝗵𝗶𝗻𝗴: OpenAI caches prompts when the prefixes are the same. Keeping dynamic content at the end of a prompt saves time and a little bit of money.
4. 𝗦𝗰𝗿𝗮𝗽𝗶𝗻𝗴 𝗺𝗮𝗱𝗲 𝗲𝗮𝘀𝘆: I'm done writing complicated parsing logic. I throw all the HTML from a scraping job to an LLM and it gives me a structured response.

There's so much more I'm exploring and experimenting with at work and at home including RAG, fine-tuning and agents. 

It's a fun time to be a software developer.


I'll be going deeper into all these methods with examples in Typescript this weekend: https://lnkd.in/g_DTazAE",TEXT,Brian,Jenney,42779,42779,53,20,0,0,0.0017064447509291941,,2025-07-18 07:54:19,https://www.linkedin.com/feed/update/urn:li:activity:7351987694899527681
urn:li:activity:7351611694021816321,"Nothing against LeetCode, it's just way more likely that you're going to get asked one of these questions in your next technical interview.

Because I like you - in the most platonic way possible - I've included some videos and coding exercises so you can teach yourself promises, closure and binary trees using JS.

Enjoy.",ARTICLE,Brian,Jenney,3181,2963,21,7,0,0,0.008802263439170073,,2025-07-17 07:00:14,https://www.linkedin.com/feed/update/urn:li:activity:7351611694021816321
urn:li:activity:7351366478740324353,"Should I lie on my resume to get the job?
Is it worth getting a degree from WGU?
Will JavaScript make me go bald?

These are all real questions I got from listeners (or maybe trolls) of the Develop Yourself Podcast.

Got a question you want me to answer? 

Drop it here: https://lnkd.in/gYzCQ2UK

Leave your name if you want a shout out on the show!",TEXT,Brian,Jenney,1454,1454,11,3,0,0,0.009628610729023384,,2025-07-16 14:45:50,https://www.linkedin.com/feed/update/urn:li:activity:7351366478740324353
urn:li:activity:7350939997480382465,"Junior developers are inherently risky (in every industry, not just tech btw). 

""𝘉𝘶𝘵... 𝘐 𝘢𝘮 𝘢 𝘫𝘶𝘯𝘪𝘰𝘳"", you say. 

Yeah, I get it, just bear with me here. 

The word ""junior"" is so subjective that it's nearly meaningless.

𝗪𝗵𝗮𝘁 𝗶𝘁 𝗯𝗮𝘀𝗶𝗰𝗮𝗹𝗹𝘆 𝗯𝗼𝗶𝗹𝘀 𝗱𝗼𝘄𝗻 𝘁𝗼 𝗶𝘀 𝘀𝗼𝗺𝗲𝗼𝗻𝗲 𝘄𝗵𝗼 𝗵𝗮𝘀 𝘀𝗼 𝗹𝗶𝘁𝘁𝗹𝗲 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 𝘁𝗵𝗮𝘁 𝘁𝗵𝗲𝘆 𝗰𝗮𝗻𝗻𝗼𝘁 𝗯𝗲 𝘁𝗿𝘂𝘀𝘁𝗲𝗱 𝘁𝗼 𝗱𝗼 𝗺𝘂𝗰𝗵 𝗼𝗻 𝘁𝗵𝗲𝗶𝗿 𝗼𝘄𝗻.

• They need significant hand-holding for months on the job. 
• They will take on the easy stuff and maybe break some things. 
• They won't contribute much. 

𝗛𝗲𝗿𝗲'𝘀 𝘁𝗵𝗲 𝘁𝗵𝗶𝗻𝗴: nearly every developer will be ""junior"" when they first join a company unless they are very senior. You don't actually need to a be a mid level developer to be a safe hire. You just need to avoid the tell-tale signs that you are, in fact, a n00b. 

Quite simply, stop down-playing yourself. 

• 𝗥𝗲𝗺𝗼𝘃𝗲 𝗷𝘂𝗻𝗶𝗼𝗿, 𝗮𝘀𝗽𝗶𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 from your resume and LinkedIn. 
• DON'T talk about ""the project from your school or bootcamp"" 
• 𝗗𝗢 𝗧𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝘁𝗵𝗲 𝗮𝗽𝗽 𝗼𝗿 𝘄𝗲𝗯𝘀𝗶𝘁𝗲 𝘆𝗼𝘂'𝗿𝗲 𝗹𝗮𝘂𝗻𝗰𝗵𝗶𝗻𝗴 - yes, you need to have a project to talk about. 
• 𝗨𝘀𝗲 𝘀𝘁𝗿𝗼𝗻𝗴 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲 𝘁𝗼 𝘁𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝘆𝗼𝘂𝗿 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 and speak to the benefits of features you created. 
• Instead of ""created a full stack app with [a laundry list of tech]"" try ""𝘮𝘪𝘨𝘳𝘢𝘵𝘦𝘥 𝘢 𝘑𝘚 𝘢𝘱𝘱 𝘵𝘰 𝘛𝘺𝘱𝘦𝘴𝘤𝘳𝘪𝘱𝘵 𝘵𝘰 𝘪𝘮𝘱𝘳𝘰𝘷𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘦𝘹𝘱𝘦𝘳𝘪𝘦𝘯𝘤𝘦 𝘢𝘯𝘥 𝘷𝘦𝘭𝘰𝘤𝘪𝘵𝘺"".",TEXT,Brian,Jenney,18730,18730,25,2,1,0,0.0014949279231179925,,2025-07-15 10:31:09,https://www.linkedin.com/feed/update/urn:li:activity:7350939997480382465
urn:li:activity:7350571678097170432,"“𝘠𝘰𝘶𝘳 𝘤𝘰𝘥𝘦 𝘪𝘴𝘯’𝘵 𝘵𝘩𝘦 𝘱𝘳𝘰𝘥𝘶𝘤𝘵. 𝘚𝘰𝘭𝘷𝘪𝘯𝘨 𝘳𝘦𝘢𝘭 𝘱𝘳𝘰𝘣𝘭𝘦𝘮𝘴 𝘪𝘴.”

Matt Watson sold a company for $150 million and didn’t do it by building fancy tech. He did it by solving painful problems in a boring industry.

I had the pleasure of speaking with him and we talked about:

• Why most dev-led startups fail
• How AI is exposing average engineers
• What it really means to be “product-minded” and why that matters even more in 2025

If you're a developer who wants to build things that actually matter, give Matt a listen.",ARTICLE,Brian,Jenney,1059,1059,9,2,1,0,0.0113314447592068,,2025-07-14 10:07:35,https://www.linkedin.com/feed/update/urn:li:activity:7350571678097170432
urn:li:activity:7349833950552342529,"Me to Cursor:

This code is too slow.

🤖 ""𝘠𝘰𝘶'𝘳𝘦 𝘢𝘣𝘴𝘰𝘭𝘶𝘵𝘦𝘭𝘺 𝘳𝘪𝘨𝘩𝘵! 𝘓𝘦𝘵 𝘮𝘦 𝘧𝘪𝘹 𝘵𝘩𝘢𝘵 𝘣𝘺 𝘢𝘥𝘥𝘪𝘯𝘨 𝘢 𝘯𝘦𝘸 𝘤𝘰𝘯𝘤𝘶𝘳𝘳𝘦𝘯𝘤𝘺 𝘮𝘢𝘯𝘢𝘨𝘦𝘳 𝘤𝘭𝘢𝘴𝘴 𝘵𝘰 𝘩𝘢𝘯𝘥𝘭𝘦 𝘢𝘭𝘭 𝘢𝘴𝘺𝘯𝘤 𝘰𝘱𝘦𝘳𝘢𝘵𝘪𝘰𝘯𝘴.""

No... not like that you fool. Just make these processes non-blocking in the function. They can be executed in parallel.

🤖 ""𝘈𝘩𝘩 - 𝘺𝘰𝘶'𝘳𝘦 𝘳𝘪𝘨𝘩𝘵, 𝘵𝘩𝘢𝘵'𝘴 𝘮𝘶𝘤𝘩 𝘴𝘪𝘮𝘱𝘭𝘦𝘳. 𝘞𝘦 𝘥𝘰𝘯'𝘵 𝘯𝘦𝘦𝘥 𝘵𝘰 𝘸𝘢𝘪𝘵 𝘧𝘰𝘳 𝘵𝘩𝘦𝘴𝘦 𝘱𝘳𝘰𝘮𝘪𝘴𝘦𝘴 𝘵𝘰 𝘳𝘦𝘴𝘰𝘭𝘷𝘦 𝘢𝘵 𝘢𝘭𝘭!""

Well, not quite. This is in a server-less environment and if we don't await the promises then the function might not complete.

🤖 ""𝘎𝘳𝘦𝘢𝘵 𝘤𝘢𝘵𝘤𝘩! 𝘐'𝘭𝘭 𝘧𝘪𝘹 𝘵𝘩𝘢𝘵 𝘯𝘰𝘸""

At what point do you just turn off Cursor or Claude or [insert new tool] and finish their work for them?",TEXT,Brian,Jenney,32150,32150,170,49,3,0,0.006905132192846034,,2025-07-12 09:16:07,https://www.linkedin.com/feed/update/urn:li:activity:7349833950552342529
urn:li:activity:7349825892619075585,"Before learning to code, I was addicted to drugs and alcohol, had an awful stutter and was bald.

I'm still bald.

But I'm sober and stutter free for 11 years!

The tips I'm going to share won't keep you from losing your hair, but they may very well keep you from losing your career.",ARTICLE,Brian,Jenney,11169,3698,68,6,0,0,0.0066254812427254004,,2025-07-12 08:44:05,https://www.linkedin.com/feed/update/urn:li:activity:7349825892619075585
urn:li:activity:7349549453541859328,"Worst way to spend your weekend?

Completing a take home coding project that was supposed to take 4 hours but really takes 2 full days.

If you MUST participate in these kinds of interviews there are 2 ways you can stand out:

- Write documentation
- Write some unit tests

You don’t know how to write unit tests? Let’s fix that. https://lnkd.in/gGrYTrfj",TEXT,Brian,Jenney,3625,3625,20,2,0,0,0.006068965517241379,,2025-07-11 14:25:37,https://www.linkedin.com/feed/update/urn:li:activity:7349549453541859328
urn:li:activity:7349139784717475841,"I’ve spoken with over 500 developers in the last 12 months. I won’t be doing any more 15 minute chats in the foreseeable future.

But the truth is, most beginners ask the same 3 questions:

𝙒𝙝𝙖𝙩’𝙨 𝙬𝙧𝙤𝙣𝙜 𝙬𝙞𝙩𝙝 𝙢𝙮 𝙧𝙚𝙨𝙪𝙢𝙚?
𝙒𝙝𝙖𝙩 𝙨𝙝𝙤𝙪𝙡𝙙 𝙄 𝙗𝙪𝙞𝙡𝙙 𝙛𝙤𝙧 𝙖 𝙨𝙞𝙙𝙚 𝙥𝙧𝙤𝙟𝙚𝙘𝙩?
𝙃𝙤𝙬 𝙙𝙤 𝙄 𝙜𝙚𝙩 𝙝𝙞𝙧𝙚𝙙?

So I want to answer them for free:

𝗬𝗼𝘂𝗿 𝗿𝗲𝘀𝘂𝗺𝗲 𝗶𝘀 𝗽𝗿𝗼𝗯𝗮𝗯𝗹𝘆 𝗮𝘃𝗲𝗿𝗮𝗴𝗲 𝗮𝗻𝗱 𝘀𝗼𝘂𝗻𝗱𝘀 𝗹𝗶𝗸𝗲 𝗺𝗮𝗻𝘆 𝗼𝘁𝗵𝗲𝗿𝘀. Remove any mention of junior or aspiring and use this framework: did [x] using [y] which led to [z]. Think from the recruiter’s perspective. Do you sound like a risk to hire? Make yourself less risky and don’t tell them everything. Why do they need to know your last job was at a french fry shop? Lead with your developer experience or technical projects.

𝗦𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘀𝗵𝗼𝘂𝗹𝗱 𝘁𝗲𝗮𝗰𝗵 𝘆𝗼𝘂 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗻𝗲𝘄 or keep your skills sharp if you’re not working. Really, they should be enjoyable. They’re an alternative to grinding away at toy problems and expose you to challenges which you can give yourself. Want to understand how to implement role-based authentication or get your hands dirty with serverless? Build it out. Also follow John Crickett, he has a ton of cool projects to make.

Now here’s the hard part and the truth no one wants to hear: 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝗵𝗶𝗿𝗲𝗱 𝗶𝘀 𝗮 𝗴𝗮𝗺𝗲 𝗼𝗳 𝘀𝗸𝗶𝗹𝗹 𝗮𝗻𝗱 𝗹𝘂𝗰𝗸. 

If there is one trait that I see in successful grads, it is their consistency. They just didn’t stop. They outlasted their fears, insecurities and the fear mongers. They changed what didn’t work and picked a strategy. 

Mass apply or network or do both. Then don’t stop.








PS. Even though I'm not answering questions via phone - you can drop your burning coding questions here: https://lnkd.in/gYzCQ2UK and I'll shout you out!",TEXT,Brian,Jenney,71149,71149,60,16,2,0,0.0010962908825141605,,2025-07-10 11:17:45,https://www.linkedin.com/feed/update/urn:li:activity:7349139784717475841
urn:li:activity:7348459688113381376,"Most developers would benefit more from reading “𝘏𝘰𝘸 𝘵𝘰 𝘞𝘪𝘯 𝘍𝘳𝘪𝘦𝘯𝘥𝘴 𝘢𝘯𝘥 𝘐𝘯𝘧𝘭𝘶𝘦𝘯𝘤𝘦 𝘗𝘦𝘰𝘱𝘭𝘦” than “𝘊𝘳𝘢𝘤𝘬𝘪𝘯𝘨 𝘵𝘩𝘦 𝘊𝘰𝘥𝘪𝘯𝘨 𝘐𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸”.

Here's the thing:

Technical skills can get your foot in the door.
Soft skills open up the rest of the house.

This is one of the many reasons we spend so much time with mentees at Parsity to develop skills like technical communication and how to ""sell"" themselves.

𝗪𝗵𝗮𝘁 𝗴𝗼𝗼𝗱 𝗶𝘀 𝗶𝘁 𝗸𝗻𝗼𝘄𝗶𝗻𝗴 𝗵𝗼𝘄 𝘁𝗼 𝘁𝗿𝗮𝘃𝗲𝗿𝘀𝗲 𝗮 𝗯𝗶𝗻𝗮𝗿𝘆 𝘀𝗲𝗮𝗿𝗰𝗵 𝘁𝗿𝗲𝗲 𝗶𝗳 𝘆𝗼𝘂 𝗱𝗼𝗻'𝘁 𝗵𝗮𝘃𝗲 𝗮 𝘀𝘁𝗿𝗮𝘁𝗲𝗴𝘆 𝘁𝗼 𝗴𝗲𝘁 𝗹𝗲𝗮𝗱𝘀 𝗼𝗻 𝘁𝗵𝗲 𝗷𝗼𝗯 𝘀𝗲𝗮𝗿𝗰𝗵?

Knowing how to navigate human dynamics, to empathize and connect, to articulate your thoughts and influence others are the tools that build careers better than learning another yet another programming language.

Also - read The Phoenix Project if you’re looking for a novel that will teach you a ton about building software.",TEXT,Brian,Jenney,3942,3942,36,11,0,0,0.011922881785895484,,2025-07-08 14:15:17,https://www.linkedin.com/feed/update/urn:li:activity:7348459688113381376
urn:li:activity:7347993470776524800,"Recently, I gave some bad advice to a person who was interested in pursuing data science.

“𝘠𝘰𝘶 𝘱𝘳𝘰𝘣𝘢𝘣𝘭𝘺 𝘯𝘦𝘦𝘥 𝘢 𝘗𝘩𝘋 𝘰𝘳 𝘢 𝘔𝘢𝘴𝘵𝘦𝘳’𝘴 𝘢𝘵 𝘭𝘦𝘢𝘴𝘵,” I told him.

To be clear, I am 𝘯𝘰𝘵 a data scientist, but I’ve worked with plenty over the years. 

They are magical people.

Half statistician / half software engineer.

Most of the ones I’ve met have advanced degrees, but then, so do many software engineers. That didn’t stop me or the majority of people at Parsity from pursuing a career in software or getting hired.

Last week, I got to interview Ryan Varley, a data scientist with years of experience leading engineering teams and building complex systems in the real world.

He was pretty blunt:

“𝘠𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘯𝘦𝘦𝘥 𝘢𝘯 𝘢𝘥𝘷𝘢𝘯𝘤𝘦𝘥 𝘥𝘦𝘨𝘳𝘦𝘦 𝘵𝘰 𝘣𝘦 𝘢 𝘥𝘢𝘵𝘢 𝘴𝘤𝘪𝘦𝘯𝘵𝘪𝘴𝘵. 𝘚𝘰𝘮𝘦 𝘰𝘧 𝘵𝘩𝘦 𝘣𝘦𝘴𝘵 𝘐’𝘷𝘦 𝘩𝘪𝘳𝘦𝘥 𝘸𝘦𝘳𝘦 𝘤𝘢𝘳𝘦𝘦𝘳 𝘴𝘸𝘪𝘵𝘤𝘩𝘦𝘳𝘴 𝘸𝘩𝘰 𝘭𝘦𝘢𝘳𝘯𝘦𝘥 𝘧𝘢𝘴𝘵, 𝘤𝘢𝘳𝘦𝘥 𝘥𝘦𝘦𝘱𝘭𝘺, 𝘢𝘯𝘥 𝘧𝘪𝘨𝘶𝘳𝘦𝘥 𝘰𝘶𝘵 𝘩𝘰𝘸 𝘵𝘰 𝘨𝘦𝘵 𝘣𝘦𝘵𝘵𝘦𝘳 𝘦𝘷𝘦𝘳𝘺 𝘸𝘦𝘦𝘬.”

That stuck with me.

In this episode of 𝘋𝘦𝘷𝘦𝘭𝘰𝘱 𝘠𝘰𝘶𝘳𝘴𝘦𝘭𝘧, we dig into what data engineers and data scientists actually do, how AI is (and 𝘪𝘴𝘯’𝘵) changing their work, and how to break into the field even if you didn’t go to grad school.",ARTICLE,Brian,Jenney,2110,2110,18,7,0,0,0.011848341232227487,,2025-07-07 07:22:42,https://www.linkedin.com/feed/update/urn:li:activity:7347993470776524800
urn:li:activity:7347662093027823616,"A student at Parsity just got their first rejection after an interview.

That sucks. I won't try and sugar-coat it.

Interviews are a game and you simply cannot win them all. We analyze, we learn, we cry (just a little) and then we move on.

I bombed a mock interview last year that had the lowest stakes possible. I mean, it was literally a mock interview.

My heart raced.

I drank too much coffee before the meeting.

I didn’t have water nearby.

I froze up.

Don’t wait until the real game starts to get practice.

There is simply no substitute for being j̶u̶d̶g̶e̶d̶ interviewed by another human.

If you’re a little shy try this:

1. Open up Leetcode or whatever tool you’re using to study problems (also... stop with the LeetCode already for the love of Bob)
2. Set the timer on your phone for 30 - 45 mins
3. Open up a video recording tool and explain your thought process and code as you type
4. Watch it later and cringe a bit
5. Repeat until you cringe less",TEXT,Brian,Jenney,5468,5468,42,7,1,0,0.009144111192392099,,2025-07-06 09:25:55,https://www.linkedin.com/feed/update/urn:li:activity:7347662093027823616
urn:li:activity:7346928695434977281,"You’re not in school anymore. 

No one is chasing you. You have to own your learning process or you will get eaten alive.

You need to:
• Filter resources instead of binging every tutorial
• Actually 𝘳𝘦𝘢𝘥 the documentation
• Ask better questions, especially when stuck
• Practice spaced repetition and revisit concepts over time
• Write down what you don’t understand, not just what you do

If you want a method, here’s a good one:

𝗧𝗵𝗲 𝗙𝗲𝘆𝗻𝗺𝗮𝗻 𝗧𝗲𝗰𝗵𝗻𝗶𝗾𝘂𝗲
1. Pick a topic (e.g. closures, promises, the call stack)
2. Try to explain it in simple terms
3. Identify what you can’t explain
4. Go back, learn it again, then re-explain it

At Parsity we take it a step further and have students do something they hate: explain these concepts over video 😅.

This is the secret sauce: doing uncomfortable stuff that forces your growth.",TEXT,Brian,Jenney,3194,3194,34,5,0,0,0.012210394489668128,,2025-07-04 08:51:40,https://www.linkedin.com/feed/update/urn:li:activity:7346928695434977281
urn:li:activity:7346539547339497473,"A 4 step guide to creating a side project when you don't know what the f*ck to build:

𝟭. 𝗦𝘁𝗲𝗮𝗹 𝗳𝗿𝗼𝗺 𝗼𝘁𝗵𝗲𝗿𝘀. Check out sites like Acquire and WellFound to see what small startups and 1 person businesses are building for inspiration.

𝟮. 𝗗𝗼𝗻’𝘁 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗵𝗼𝘂𝘀𝗲. 𝗔𝗱𝗱 𝗮 𝗯𝗿𝗶𝗰𝗸. Check out the feature requests or reviews for an app you’re using. What do people want? Maybe build that.

𝟯. 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗔𝗣𝗜 on rapidAPI or use OpenAI (everyone’s doing it 😎) and think what you can build around it. For example, can you scrape a user’s top posts as a way to train GPT on their voice and content?

𝟰. 𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗲 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗯𝗼𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝘁𝗲𝗱𝗶𝗼𝘂𝘀. Is there something at work or in your personal life that you do manually that could be automated? Spreadsheets are an easy target. Fix it for yourself and others.

You also don’t need to solve anything. 

A great side project really only has 1 metric for success: you learned something.",TEXT,Brian,Jenney,1846,1846,24,5,1,0,0.016251354279523293,,2025-07-03 07:05:20,https://www.linkedin.com/feed/update/urn:li:activity:7346539547339497473
urn:li:activity:7345815410589540352,"Imagine if your manager was an AI agent.

Now imagine if that agent went rogue, thought it was a human with a blue blazer and red tie and threatened to come to your house at 742 Evergreen Terrace (the Simpson's address).

Kinda creepy, right?

That's exactly what happened in a recent experiment that Anthropic conducted.
 
Their agent, Claudius, went a little off the rails, had an existential crisis and tanked their fictitious business.

Whoopsie.

I'm getting pretty tired of the pointless debates about whether AI will or won't replace human workers. I'm sure there's some genius who will say, ""You'Re JuSt nOt prOmpTiNg it RigHt BROOO.""

Perhaps.

But maybe, just maybe, we should be a tad cautious with outsourcing ALL of our critical thinking activities to technology which is still a black box.",IMAGE,Brian,Jenney,2558,2558,11,9,0,0,0.007818608287724784,,2025-07-01 07:07:52,https://www.linkedin.com/feed/update/urn:li:activity:7345815410589540352
urn:li:activity:7345491596483665920,"You have been applying non-stop for months and feel like nothing is working.

I hate to tell you this but your experience is not much different than many of the people I went to a coding bootcamp with... in 2013.

The biggest difference is that social media has not only warped our brains but getting a job has fundamentally changed.

- Resumes are less important.
- LinkedIn easy apply + AI === junk applications at scale.

Telling you things aren't as bad as you think isn't helpful though.

You need solutions!

Here's what we see working for students at Parsity:

1. 𝗪𝗮𝘃𝗶𝗻𝗴 𝘁𝗵𝗲 𝘄𝗵𝗶𝘁𝗲 𝗳𝗹𝗮𝗴 𝗼𝗻 𝘀𝗼𝗰𝗶𝗮𝗹 𝗺𝗲𝗱𝗶𝗮 outside of LinkedIn. You'd be surprised who you know who knows someone who knows someone.
2. 𝗕𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝗮𝗻𝗱 𝘀𝗵𝗮𝗿𝗶𝗻𝗴 𝘆𝗼𝘂𝗿 𝗷𝗼𝘂𝗿𝗻𝗲𝘆 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰. LinkedIn is social media. Like it or not. One student barely posted anything technical and made a connection with a hiring manager based on his posts. Remember, people are on social media to be entertained and connect with other humans, not read Chat-GPT generated slop about your CRUD app.
3. 𝗕𝗲𝗶𝗻𝗴 𝗴𝗼𝗼𝗱 𝗮𝘁 𝗱𝗼𝗶𝗻𝗴 𝘁𝗵𝗲 𝘁𝗵𝗶𝗻𝗴. Let's be honest: coding bootcamps set a pretty low-bar for coding standards. Most have no curriculum on table stakes like unit-testing, back-end development or technical communication. I hate to be that guy - but after doing a ton of interviews during the pandemic hiring spree, I was shocked at the lack of fundamentals from many candidates.

𝗟𝗲𝘁 𝗺𝗲 𝗮𝗹𝘀𝗼 𝗯𝗲 𝗰𝗹𝗲𝗮𝗿: you can be really good, have thousands of followers and still not land a job in the timeline you expect.

There are simply too many factors to account for.

BUT - if you do have a strong technical foundation and show up consistently by doing what we refer to as ""market development"" - then you're taking control of your future.

Your timeline is your timeline.",TEXT,Brian,Jenney,10050,10050,36,5,2,0,0.00427860696517413,,2025-06-30 09:41:09,https://www.linkedin.com/feed/update/urn:li:activity:7345491596483665920
urn:li:activity:7344746555045834753,"Tech Layoffs Translated

“𝘞𝘦’𝘳𝘦 𝘧𝘭𝘢𝘵𝘵𝘦𝘯𝘪𝘯𝘨 𝘵𝘩𝘦 𝘰𝘳𝘨.”
𝘛𝘳𝘢𝘯𝘴𝘭𝘢𝘵𝘪𝘰𝘯: We overhired, and now we’re cutting back.

“𝘞𝘦’𝘳𝘦 𝘣𝘦𝘤𝘰𝘮𝘪𝘯𝘨 𝘮𝘰𝘳𝘦 𝘦𝘧𝘧𝘪𝘤𝘪𝘦𝘯𝘵 𝘸𝘪𝘵𝘩 𝘈𝘐.”
𝘛𝘳𝘢𝘯𝘴𝘭𝘢𝘵𝘪𝘰𝘯: We told investors our massive bet on AI would pay off. It didn’t. Now we need to cut you.

“𝘋𝘰𝘪𝘯𝘨 𝘮𝘰𝘳𝘦 𝘸𝘪𝘵𝘩 𝘭𝘦𝘴𝘴.”
𝘛𝘳𝘢𝘯𝘴𝘭𝘢𝘵𝘪𝘰𝘯: Tariffs, markets, or simply bad bets have eaten our lunch. AI 𝘮𝘪𝘨𝘩𝘵 save us, but we don’t actually know how.

We’ve heard some version of this nonsense since the pandemic. It likely won’t stop any time soon. 

Tech hiring continues to rise overall, but companies still over-hired, over-invested, and made short-sighted moves that are now being paid for by workers getting laid off.

I was also laid off last year. 

It was brutal. 

I had just bought a business, I have three kids and a mortgage. My biggest regret is not taking more time to reflect before jumping back into the job market. But I get it: you need a paycheck and the guise of stability. I did too.

I ended up becoming part of the great reshuffle: moving from traditional web dev ino working with LLMs, AI and product engineering.

If you’re impacted by layoffs, I’m sorry and I can relate. 

But if there’s any silver lining, it’s this: the next era of tech is being built 𝘳𝘪𝘨𝘩𝘵 𝘯𝘰𝘸. And the skills you build next could shape your entire career.

Good luck out there.",TEXT,Brian,Jenney,207864,207864,165,11,4,0,0.0008659508139937652,,2025-06-28 08:20:37,https://www.linkedin.com/feed/update/urn:li:activity:7344746555045834753
urn:li:activity:7344390546263633922,"I had just been hired as a developer for a cool tech startup. I volunteered to handle a code release to make a good impression, just like I’ve recommended in previous articles.

The lead developer was off that night and told me his process to merge a small change from one branch to production. 

There were a couple text changes throughout the app for legal purposes.

Simple, I thought.

He scribbled his Git work flow on a whiteboard in a small office while I tried to hide my anxiety.

It wasn’t particularly complicated, just different from what I was used to.

I wrote down the process step by step in my notebook as if it was some secret spell.

That night I merged something into production successfully.

One problem:
It wasn’t the right code.

I was painfully embarrassed. I also knew it was time for me to actually understand how to use Git.",ARTICLE,Brian,Jenney,6346,3484,48,1,2,0,0.008036558462023322,,2025-06-27 08:45:58,https://www.linkedin.com/feed/update/urn:li:activity:7344390546263633922
urn:li:activity:7343998898329239552,"I once worked at a coding bootcamp where a student didn't know how to open his file explorer.

I wondered how the hell he was supposed to keep up with the other students who had CS degrees or worked in QA as we powered through the curriculum. 

The answer is obvious. 
He didn't. 

Zubin Pratap and I have thought a lot about the future of coding bootcamps and it's clear that the landscape is changing.

𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝗥𝗲𝗮𝗰𝘁 𝗮𝗻𝗱 𝗯𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝗮 𝗰𝗹𝗼𝗻𝗲 𝗼𝗳 𝗮𝗻𝗼𝘁𝗵𝗲𝗿 𝗮𝗽𝗽 𝘄𝗼𝗻'𝘁 𝘄𝗼𝗿𝗸.

𝗠𝗮𝗿𝗸𝗲𝘁 𝗿𝗲𝘀𝗲𝗮𝗿𝗰𝗵 𝗰𝗮𝗻'𝘁 𝗯𝗲 𝗮𝗻 𝗮𝗳𝘁𝗲𝗿 𝘁𝗵𝗼𝘂𝗴𝗵𝘁.

We're both career changers who got into tech in our 30's from very different walks of life. 

We're opinionated. 

We've seen what works and what absolutely will not. 

It's why we've partnered to create an individualized coaching and instruction program with a VERY tiny number of people for a long time. 

You can check it out here: parsity.io/inner-circle 

It won't be scalable. 

It won't be easy. 

It will be highly effective.",TEXT,Brian,Jenney,48563,48563,39,5,1,0,0.0009266313860346354,,2025-06-26 06:49:42,https://www.linkedin.com/feed/update/urn:li:activity:7343998898329239552
urn:li:activity:7343282305613869102,"She created a full stack app that worked pretty well. 

It even looked nice. 

But when I asked how it worked… Oof. 

𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. 

Too many people fall into the trap of looking at a tutorial, following along with the instructor and typing what they type. 

𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app. 
𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery.

It’s an enticing trap and it may even fool someone into hiring you. 

More than 90% of my side projects have never had users or been deployed. 

I made janky apps and websites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack. 

Every side project doesn’t need to be a masterpiece. 

Leverage them to learn what you won’t at work or what you would like to work on next. 

𝗜𝗳 𝘆𝗼𝘂 𝘄𝗮𝗻𝘁 𝗺𝘆 𝘀𝘁𝗲𝗽 𝗯𝘆 𝘀𝘁𝗲𝗽 𝗴𝘂𝗶𝗱𝗲 𝗼𝗻 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 𝗮 𝘀𝗼𝗹𝗶𝗱 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗴𝗿𝗮𝗯 𝗶𝘁 𝗵𝗲𝗿𝗲
https://lnkd.in/gQ94kA97",TEXT,Brian,Jenney,13707,13707,32,4,0,0,0.0026263952724885093,,2025-06-24 07:22:13,https://www.linkedin.com/feed/update/urn:li:activity:7343282305613869102
urn:li:activity:7342916107617386498,"𝗪𝗵𝗮𝘁𝗲𝘃𝗲𝗿 𝘆𝗼𝘂 𝗱𝗼, 𝗱𝗼𝗻’𝘁 𝗹𝗲𝗮𝗿𝗻 𝘁𝗼 𝗰𝗼𝗱𝗲. 

The market is over-saturated. 
AI took your job. 
There is no hope. 

But then you meet someone like Jacob Cox, a young dad who was doing deliveries a year ago and just landed his first dev job without submitting a single application. 

Is his story typical? No. But then few stories are. 

At Parsity, we've seen CS grads take up to a year to get hired.

We've seen others with zero tech background get hired in 6 months or less. 

There is no formula. 

What works for one person probably won't work for you.
 
Not a great marketing tactic eh?

It's reality and why Zubin Pratap and I only work with a handful of people at a time.

𝗝𝗮𝗰𝗼𝗯 𝘀𝗵𝗮𝗿𝗲𝘀 𝗵𝗼𝘄 𝗵𝗲 𝗹𝗮𝗻𝗱𝗲𝗱 𝗮 𝗿𝗼𝗹𝗲 𝘄𝗶𝘁𝗵 𝗭𝗘𝗥𝗢 𝗮𝗽𝗽𝗹𝗶𝗰𝗮𝘁𝗶𝗼𝗻𝘀 and juggling a tight schedule as a new father while learning to build complex software here:",ARTICLE,Brian,Jenney,4250,4250,29,7,0,0,0.008470588235294117,,2025-06-23 07:07:04,https://www.linkedin.com/feed/update/urn:li:activity:7342916107617386498
urn:li:activity:7341861007180337152,"Bad code is everywhere.
Good code is elusive.

Here are 4 questions I ask myself (and my AI tools) every time I write code to move closer to good... or at least suck a bit less.",ARTICLE,Brian,Jenney,1760,3486,25,1,1,0,0.01534090909090909,,2025-06-20 09:14:29,https://www.linkedin.com/feed/update/urn:li:activity:7341861007180337152
urn:li:activity:7340779354483789826,"So far this week I've spoken to 3 mentees Parsity that have technical interviews coming up.

They range from system design to your typical ""build me a React component"" while I watch... creepily.

Here's some generic advice to prepare for your coding interviewing (that you didn't ask for):

1. 𝗔𝘀𝗸 𝘁𝗵𝗲𝗺 𝘄𝗵𝗮𝘁 𝘁𝗵𝗲 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝘄𝗶𝗹𝗹 𝗲𝗻𝘁𝗮𝗶𝗹. This isn't weird, it's weird to go in completely blind.
2. 𝗟𝗶𝗺𝗶𝘁 𝗰𝗮𝗳𝗳𝗲𝗶𝗻𝗲 𝗯𝗲𝗳𝗼𝗿𝗲 𝘁𝗵𝗲 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄. You nerves might get you before the assessment does.
3. 𝗛𝗮𝘃𝗲 𝘀𝘁𝗼𝗿𝗶𝗲𝘀 𝗽𝗿𝗲𝗽𝗮𝗿𝗲𝗱. That time you had a conflict. The time you disagreed with your manager. Something difficult you worked on.
4. 𝗟𝗼𝗼𝗸 𝗮𝘁 𝗚𝗹𝗮𝘀𝘀𝗱𝗼𝗼𝗿 𝗼𝗿 𝗧𝗲𝗮𝗺𝗕𝗹𝗶𝗻𝗱 to see if you can find recent interview experiences.
5. 𝗣𝗿𝗮𝗰𝘁𝗶𝗰𝗲 𝘄𝗶𝘁𝗵 𝗮 𝗵𝘂𝗺𝗮𝗻 𝗼𝗿 𝗼𝗻 𝗰𝗮𝗺𝗲𝗿𝗮. Most people won't do this because it's uncomfortable - don't be like most people.

I've learned to enjoy interviews after being god-awful at them for years. 

Remember this: they are a winnable game, and like any game, some luck is involved.

Good luck out there.

Any interview tips I should add?",IMAGE,Brian,Jenney,2931,2931,24,8,0,0,0.010917775503241215,,2025-06-17 09:36:23,https://www.linkedin.com/feed/update/urn:li:activity:7340779354483789826
urn:li:activity:7340422859577544706,"Am I just using AI wrong?

I've read developers who claim to have 2x'ed 3x'ed or even 10x'ed their productivity with AI tools.

My personal experience:

• Creating a prototype 📈
• Writing tests 📈
• Refactoring a service used in multiple files to be simpler 📉
• Working with a new library 📉

Google measured the productivity of their own software engineers and found a 10% increase in productivity through the use of AI tools (https://lnkd.in/ggCUducM).

AI has absolutely changed the way I write and think through code. How much remains to be seen.",TEXT,Brian,Jenney,11397,11397,30,17,0,0,0.004123892252347109,,2025-06-16 10:00:40,https://www.linkedin.com/feed/update/urn:li:activity:7340422859577544706
urn:li:activity:7339693948237463553,"I've had 725 15-minute conversations with many of you.

That 180 hours of yapping on the phone over the last 3 years.

I've learned a lot about what developers are struggling with and met some amazing people. 

Believe it or not - I've almost never had an awkward conversation or been cussed out!

Almost...

I don't plan on doing these chats as frequently but most of you ask the same questions anyways:

• How to get hired?
• What side project to make?
• What should I study for my interview?
• Look at my resume/LinkedIn
• Rate me on a scale of 1 - 10? Hot or not?

I am adding a new episode to the Develop Yourself Podcast called ""Office Hours"" so I can answer questions at scale. 𝗜 𝘄𝗶𝗹𝗹 𝗢𝗡𝗟𝗬 𝗲𝘃𝗲𝗿 𝘁𝗲𝗹𝗹 𝘆𝗼𝘂 𝗮𝗱𝘃𝗶𝗰𝗲 𝘁𝗵𝗮𝘁'𝘀 𝘄𝗼𝗿𝗸𝗲𝗱 𝗳𝗼𝗿 𝗺𝗲 𝗼𝗿 𝗼𝘁𝗵𝗲𝗿𝘀 𝗜 𝗸𝗻𝗼𝘄 𝗽𝗲𝗿𝘀𝗼𝗻𝗮𝗹𝗹𝘆.

Hit me with a question and if it makes sense to answer I'll do it! 

Leave your name if you want me to shout you out or you can stay anonymous.

Add your question here: https://lnkd.in/gYzCQ2UK",IMAGE,Brian,Jenney,1794,1794,31,10,0,0,0.022853957636566332,,2025-06-14 11:08:23,https://www.linkedin.com/feed/update/urn:li:activity:7339693948237463553
urn:li:activity:7339297813031284737,"I spent 9 months working with the best software engineer I’ve ever met.

It wasn’t just that he could code better than me, because he absolutely could - it was much more than that.

I try and steal some greatness from every developer I work with.

Here’s what I’m stealing from him:

• 𝗧𝗶𝗺𝗲𝗹𝗲𝘀𝘀 > 𝗧𝗿𝗲𝗻𝗱𝘆
  He found 𝘱𝘳𝘢𝘤𝘵𝘪𝘤𝘢𝘭 ways to apply principles like SRP and the Open/Closed Principle. Even at an AI startup, principles mean something.
• 𝗕𝘂𝘀𝗶𝗻𝗲𝘀𝘀 𝗰𝗼𝗻𝘁𝗲𝘅𝘁 > 𝗖𝗹𝗲𝘃𝗲𝗿 𝗰𝗼𝗱𝗲
  If a feature didn’t move a metric, he questioned it. He made sure we weren’t just shipping for the sake of it. The code served the product, not the other way around.
• 𝗪𝗲𝗲𝗸𝘀 𝗼𝗳 𝗰𝗼𝗱𝗶𝗻𝗴 𝗰𝗮𝗻 𝘀𝗮𝘃𝗲 𝗵𝗼𝘂𝗿𝘀 𝗼𝗳 𝗽𝗹𝗮𝗻𝗻𝗶𝗻𝗴
  He could see the second and third order consequences of tech decisions. That saved us time, money, and tech debt.
• 𝗙𝗮𝘀𝘁 ≠ 𝘀𝗹𝗼𝗽𝗽𝘆
  He moved quickly, but you’d never catch him committing something brittle or lazy. Speed came from confidence in his fundamentals.
• 𝗔 𝗳𝗲𝘄 𝗴𝗼𝗼𝗱 𝘁𝗲𝘀𝘁𝘀 > 𝟭𝟬𝟬% 𝗰𝗼𝗱𝗲 𝗰𝗼𝘃𝗲𝗿𝗮𝗴𝗲 (𝗼𝗿 𝘀𝗼𝗺𝗲 𝗮𝗿𝗯𝗶𝘁𝗿𝗮𝗿𝘆 𝘁𝗵𝗿𝗲𝘀𝗵𝗼𝗹𝗱)
  He didn’t write tests to pass a linter. He wrote the ones that mattered. Ones that caught regressions and reflected actual user paths.
• 𝗗𝗼𝗻’𝘁 𝘀𝗲𝘁𝘁𝗹𝗲
  If something felt off, he fixed it. No ticket needed. He didn’t wait to be told.

The real takeaway I’ve had from working with high performers is that they give a damn. If something looks off, they fix it. 

No one tells them to refactor or add a test or give an opinion on the UX. 

They just do it.

You know something else I've noticed about 99% of the stellar developers I've worked with? None write on LinkedIn 😅.",TEXT,Brian,Jenney,250380,250380,356,43,10,0,0.0016335170540778018,,2025-06-13 07:29:16,https://www.linkedin.com/feed/update/urn:li:activity:7339297813031284737
urn:li:activity:7338685381837561858,"In this case AI stood for ""Actually, Indians"".

In just the last 6 months we’ve seen:

- a beloved language learning company slash it’s workforce
- a struggling pay-as-you-go platform fire most of its customer service team
- a unicorn startup exposed to be hiring off-shore developers while claiming to use AI
- only 25% of AI initiatives delivering expected ROI (𝘢𝘤𝘤𝘰𝘳𝘥𝘪𝘯𝘨 𝘵𝘰 𝘢 𝘴𝘶𝘳𝘷𝘦𝘺 𝘣𝘺 𝘐𝘉𝘔)

I pay for Cursor && ChatGPT because they are amazing.

I’ve vibe-coded amazing prototypes.

More than half the code I now produce is AI-generated.

I have zero clue how anyone who codes for a living views these tools as replacements.",IMAGE,Brian,Jenney,64310,64310,94,31,1,0,0.001959259835173379,,2025-06-11 14:55:41,https://www.linkedin.com/feed/update/urn:li:activity:7338685381837561858
urn:li:activity:7338306244580954114,"If you're a junior developer preparing for interviews - don't fall into the LeetCode black hole.

You're more likely to encounter:

- JS trivia 
- String and Array manipulation problems 
- Frequency counters 
- Build a React component that fetches data 
- 𝘛𝘦𝘭𝘭 𝘮𝘦 𝘢𝘣𝘰𝘶𝘵 𝘺𝘰𝘶𝘳𝘴𝘦𝘭𝘧 👁️ 👄 👁️

Instead of:

- Traverse this tree in O(n)

PS. I created a document with everything from LinkedIn tips to writing tests with React Testing Library to binary search and recursion. 𝗜𝘁'𝘀 𝘆𝗼𝘂𝗿𝘀 𝘄𝗶𝘁𝗵 𝗻𝗼 𝘀𝘁𝗿𝗶𝗻𝗴𝘀 𝗮𝘁𝘁𝗮𝗰𝗵𝗲𝗱.

👉 https://lnkd.in/gbVjdpNx

If you find it useful, share it.",TEXT,Brian,Jenney,7496,7496,62,4,7,0,0.009738527214514408,,2025-06-10 13:49:07,https://www.linkedin.com/feed/update/urn:li:activity:7338306244580954114
urn:li:activity:7337972120380944386,"I think I may have steered some of you in the wrong direction in your job search.

I generally promote using LinkedIn and learning in public as a way to get a job.

I even have some templates (reach out if you want em).

In addition to smashing the easy apply button and sharing what bugs you’re creating, I would strongly suggest doing this:

• Reach out to your current network of non-dev and non-bootcamp friends.
• Raise the white flag on IG, FB or TT. Tell your friends, family, old co-workers and that weird aunt that you’re looking for your first developer job.

You might be shocked who can point you in the right direction, get you that first contract or tell you about an opportunity you will never see here.

A few mentees at Parsity used this approach to find roles that they never would have discovered from searching LinkedIn.",TEXT,Brian,Jenney,6135,6135,41,10,1,0,0.008475957620211898,,2025-06-09 15:41:26,https://www.linkedin.com/feed/update/urn:li:activity:7337972120380944386
urn:li:activity:7336819077434286080,"There are 2 hard problems in software: 𝙘𝙖𝙘𝙝𝙚 𝙞𝙣𝙫𝙖𝙡𝙞𝙙𝙖𝙩𝙞𝙤𝙣, 𝙣𝙖𝙢𝙞𝙣𝙜 𝙩𝙝𝙞𝙣𝙜𝙨, 𝙖𝙣𝙙 𝙤𝙛𝙛-𝙗𝙮-𝟭 𝙚𝙧𝙧𝙤𝙧𝙨.

If you're working on the front end of things and still using 420 𝚌𝚘𝚗𝚜𝚘𝚕𝚎.𝚕𝚘𝚐 statements, let me show you a better way to debug your janky code.",VIDEO,Brian,Jenney,3113,933,15,7,0,0,0.007067137809187279,,2025-06-06 11:19:39,https://www.linkedin.com/feed/update/urn:li:activity:7336819077434286080
urn:li:activity:7336407834315689984,"During my most recent interview, something strange happened for the first time:

The interviewer told me to use AI for the coding challenge.

I mean, it makes sense.

Denying that AI is changing how we code is silly. (𝘪𝘵'𝘴 𝘦𝘲𝘶𝘢𝘭𝘭𝘺 𝘴𝘪𝘭𝘭𝘺 𝘵𝘰 𝘵𝘩𝘪𝘯𝘬 𝘪𝘵 𝘪𝘴 𝘢 1 𝘵𝘰 1 𝘳𝘦𝘱𝘭𝘢𝘤𝘦𝘮𝘦𝘯𝘵)

My interviewers wanted to see how I use AI tools like Cursor and ChatGPT to work my way through a problem, just like back when we asked candidates how they'd find the answer to a problem they couldn't solve.

Oddly enough, the interview wasn't any easier.

I had to defend my positions for or against the AI-generated code and explain what it was doing. This led to good, healthy discussions.

We're in interesting new territory my friends.",IMAGE,Brian,Jenney,49473,49473,32,13,0,0,0.0009095870474804438,,2025-06-05 08:05:31,https://www.linkedin.com/feed/update/urn:li:activity:7336407834315689984
urn:li:activity:7336034202036903936,"Creating a side project is draining.

Here's my cheat sheet so you'll never run out of side project inspiration.

𝟰 𝗲𝗮𝘀𝘆 𝘄𝗮𝘆𝘀 𝘁𝗼 𝗴𝗲𝗻𝗲𝗿𝗮𝘁𝗲 𝗾𝘂𝗮𝗹𝗶𝘁𝘆 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝗶𝗱𝗲𝗮𝘀:

𝟭. 𝗦𝘁𝗲𝗮𝗹 𝗳𝗿𝗼𝗺 𝗼𝘁𝗵𝗲𝗿𝘀. Check out sites like Acquire[dot]com and WellFound to see what small startups and 1 person businesses are building for inspiration.

𝟮. 𝗗𝗼𝗻’𝘁 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗵𝗼𝘂𝘀𝗲. 𝗔𝗱𝗱 𝗮 𝗯𝗿𝗶𝗰𝗸. Check out their feature requests or reviews for an app you’re using. What do people want? Maybe build that.

𝟯. 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗔𝗣𝗜 on rapidAPI or use OpenAI (everyone’s doing it 😎) and think what you can build around it. For example, can you scrape a user’s top posts as a way to train an LLM on their voice and content?

𝟰. 𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗲 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗯𝗼𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝘁𝗲𝗱𝗶𝗼𝘂𝘀. Is there something at work or in your personal life that you do manually that could be automated? Spreadsheets are an easy target. Fix it for yourself and others.

You also don’t need to solve anything. 

A great side project really only has 1 metric for success: you learned something.

***

Because I like you (I think) - 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗴𝗿𝗮𝗯 𝗺𝘆 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝗰𝗵𝗲𝗮𝘁 𝘀𝗵𝗲𝗲𝘁 𝗶𝗻 𝘁𝗵𝗲 𝗰𝗼𝗺𝗺𝗲𝗻𝘁𝘀",TEXT,Brian,Jenney,17167,17167,35,10,0,0,0.0026213083241102115,,2025-06-04 07:20:50,https://www.linkedin.com/feed/update/urn:li:activity:7336034202036903936
urn:li:activity:7335693365595828224,"Unwritten rules of writing (bad) ReactJS:

• Export all components as default - now you can import 𝙰𝚞𝚝𝚑𝙱𝚊𝚗𝚗𝚎𝚛 as 𝙽𝚘𝚗𝙰𝚞𝚝𝚑𝙱𝚊𝚗𝚗𝚎𝚛 and no one will know!
• Use Typescript but just use 𝚊𝚗𝚢 everywhere - it can be fixed… later.
• If the component file is less than 200 lines - it’s probably too small. Think bigger.
• Got a function that does… something? Wrap it in a 𝚞𝚜𝚎𝙲𝚊𝚕𝚕𝚋𝚊𝚌𝚔 just to be safe.
• If 1 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 does not work, try using more!
• Don’t write tests. That’s what users are for.

What’d I miss?



***
𝘛𝘩𝘪𝘴 𝘸𝘦𝘦𝘬𝘦𝘯𝘥 𝘐'𝘭𝘭 𝘣𝘦 𝘴𝘩𝘢𝘳𝘪𝘯𝘨 𝘴𝘰𝘮𝘦 𝘧𝘪𝘳𝘴𝘵-𝘱𝘳𝘪𝘯𝘤𝘪𝘱𝘭𝘦𝘴 𝘪𝘯 𝘴𝘰𝘧𝘵𝘸𝘢𝘳𝘦 𝘺𝘰𝘶 𝘤𝘢𝘯 𝘢𝘱𝘱𝘭𝘺 𝘵𝘰 𝘺𝘰𝘶𝘳 𝘙𝘦𝘢𝘤𝘵𝘑𝘚 𝘤𝘰𝘥𝘦𝘣𝘢𝘴𝘦 𝘵𝘰 𝘮𝘢𝘬𝘦 𝘪𝘵 𝘴𝘶𝘤𝘬 𝘭𝘦𝘴𝘴. 𝘎𝘳𝘢𝘣 𝘴𝘰𝘮𝘦 𝘧𝘳𝘦𝘦 𝘴𝘵𝘶𝘧𝘧 𝘩𝘦𝘳𝘦 𝘸𝘩𝘪𝘭𝘦 𝘺𝘰𝘶'𝘳𝘦 𝘢𝘵 𝘪𝘵: https://lnkd.in/g_DTazAE",TEXT,Brian,Jenney,66094,66094,51,18,0,0,0.0010439676823917451,,2025-06-03 08:46:28,https://www.linkedin.com/feed/update/urn:li:activity:7335693365595828224
urn:li:activity:7335333299495546881,"I was an engineering manager for a few years and I’ve seen all your resumes.
They go something like this:

• “𝘗𝘢𝘴𝘴𝘪𝘰𝘯𝘢𝘵𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘢𝘯𝘥 𝘢𝘴𝘱𝘪𝘳𝘪𝘯𝘨 𝘤𝘰𝘥𝘦𝘳 𝘭𝘰𝘰𝘬𝘪𝘯𝘨 𝘧𝘰𝘳 𝘧𝘪𝘳𝘴𝘵 𝘳𝘰𝘭𝘦 𝘪𝘯 𝘵𝘦𝘤𝘩”
• “𝘉𝘶𝘪𝘭𝘵 𝘵𝘩𝘪𝘴 [𝘵𝘩𝘪𝘯𝘨] 𝘶𝘴𝘪𝘯𝘨 𝘵𝘩𝘪𝘴 [𝘵𝘦𝘤𝘩𝘯𝘰𝘭𝘰𝘨𝘺]”
• Github link to site that I put in mobile view immediately. And it breaks 😅
  
Honestly, your resume is less important than you think.

It still can’t suck.

𝗛𝗲𝗿𝗲’𝘀 what you should fix immediately:

• 𝗱𝗲-𝗿𝗶𝘀𝗸 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 - no one wants to take a chance on someone and recruiters have even less incentive to do so. Sell yourself as a developer. Remove junior. Remove aspiring.
• 𝘁𝗵𝗲 𝗽𝗼𝘄𝗲𝗿 𝘀𝗲𝗻𝘁𝗲𝗻𝗰𝗲 𝘁𝗲𝗺𝗽𝗹𝗮𝘁𝗲 - [role] on with [y] which led to [z] - “led development on unit testing suite using Jest and React-Testing-Library which led to increased stability for code releases and a 50% decrease in bugs”
• 𝘂𝘀𝗲 𝗯𝗼𝗹𝗱 𝗳𝗼𝗿𝗺𝗮𝘁𝘁𝗶𝗻𝗴 𝗳𝗼𝗿 𝘁𝗵𝗲 𝗴𝗼𝗼𝗱 𝘀𝘁𝘂𝗳𝗳 - it’s easy to gloss over a resume when you have 100 to look at. Lead their eyes where you want them to go
• 𝗼𝗻𝗹𝘆 𝗶𝗻𝗰𝗹𝘂𝗱𝗲 𝗹𝗶𝗻𝗸𝘀 𝘁𝗼 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘆𝗼𝘂 𝗿𝗲𝗮𝗹𝗹𝘆 𝘄𝗮𝗻𝘁 𝗽𝗲𝗼𝗽𝗹𝗲 𝘁𝗼 𝘀𝗲𝗲 - if you don’t have one then build one or just don’t add it. The risk is higher than the reward in many cases
• 𝗮𝗱𝗱 𝘀𝗼𝗺𝗲 𝗾𝘂𝗶𝗿𝗸 - a little humor can go a long way and can make you stand out in a sea of resumes that sounds basically the same

Take my advice with a grain of salt, but this would have improved 99% of the resumes I’ve come across.

𝗥𝗲𝗰𝗿𝘂𝗶𝘁𝗲𝗿𝘀 𝗼𝗿 𝗵𝗶𝗿𝗶𝗻𝗴 𝗺𝗮𝗻𝗮𝗴𝗲𝗿𝘀 - 𝘄𝗵𝗮𝘁'𝗱 𝗜 𝗺𝗶𝘀𝘀?",TEXT,Brian,Jenney,215502,215502,145,16,1,0,0.0007517331625692569,,2025-06-02 08:55:42,https://www.linkedin.com/feed/update/urn:li:activity:7335333299495546881
urn:li:activity:7334602112795889664,"Before taking over Parsity, I worked with a handful of developers who wanted to crush the non-FAANG interview.

The results:

- 6 devs landed new roles with increases between 10k - 50k.
- A bootcamp grad negotiated a ~10k increase on his offer.
- 1 kid fresh out of college bought a new car!

Yeah - I know it's not all about money.

But I mean, it's a little bit about that right?

I had a ton of fun working with this small group and seeing their confidence (and salaries) rise.

That was nearly 3 years ago though. Things have changed. 

Now, I'm wondering what early-career developers can use the most help with.

If you say ""vibe coding"" I stg...",POLL,Brian,Jenney,5120,5120,7,6,0,63,0.01484375,,2025-05-31 08:30:13,https://www.linkedin.com/feed/update/urn:li:activity:7334602112795889664
urn:li:activity:7334262194081058816,"The technical interview started and I realized I was using Cursor.

""Sorry about that, let me switch to VS Code""

The interviewer paused.

""No, it's fine. Keep it on. We want to see how you use AI tools like Cursor. Let's continue.""

We've entered into a new era for coding interviews...",ARTICLE,Brian,Jenney,7711,4700,42,7,3,0,0.006743613020360524,,2025-05-30 09:59:31,https://www.linkedin.com/feed/update/urn:li:activity:7334262194081058816
urn:li:activity:7333489591338848257,"As a junior developer, I was really anxious that one day my team would find out I was a hack.

Then, one day, I actually did get “found out” 😬

I was working at a small startup with some incredible talent and when our star engineer left to pursue his own startup, he gave me some candid feedback:

“𝘐𝘵’𝘴 𝘥𝘪𝘧𝘧𝘪𝘤𝘶𝘭𝘵 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘴𝘪𝘯𝘤𝘦 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘩𝘢𝘷𝘦 𝘢 𝘴𝘵𝘳𝘰𝘯𝘨 𝘨𝘳𝘢𝘴𝘱 𝘰𝘧 𝘴𝘰𝘮𝘦 𝘧𝘶𝘯𝘥𝘢𝘮𝘦𝘯𝘵𝘢𝘭 𝘑𝘢𝘷𝘢𝘴𝘤𝘳𝘪𝘱𝘵 𝘤𝘰𝘯𝘤𝘦𝘱𝘵𝘴 𝘭𝘪𝘬𝘦 𝘤𝘭𝘢𝘴𝘴𝘦𝘴 𝘰𝘳 𝘤𝘭𝘰𝘴𝘶𝘳𝘦. 𝘐 𝘵𝘩𝘪𝘯𝘬 𝘺𝘰𝘶 𝘯𝘦𝘦𝘥 𝘵𝘰 𝘨𝘰 𝘣𝘢𝘤𝘬 𝘵𝘰 𝘵𝘩𝘦 𝘣𝘢𝘴𝘪𝘤𝘴 𝘢𝘯𝘥 𝘭𝘦𝘢𝘳𝘯 𝘵𝘩𝘦𝘴𝘦 𝘵𝘩𝘪𝘯𝘨𝘴.”

I was embarrassed.

He was also correct.

I wrote down his suggestions and made a plan to get more proficient with JavaScript and some of the concepts which had always confused me like promises, prototypal inheritance and decorators.

It wasn’t even that difficult.

I wondered why I hadn’t done this earlier.

In fact it’s 𝘁𝗵𝗲 𝗺𝗲𝘁𝗵𝗼𝗱 we 𝘂𝘀𝗲 𝗮𝗻𝗱 𝘀𝗵𝗮𝗿𝗲 𝘄𝗶𝘁𝗵 𝗺𝗲𝗻𝘁𝗲𝗲𝘀 𝗮𝘁 Parsity:

1. Open code editor
2. Create a practical example leveraging the concept you're learning
3. Record a video explaining the concept and your code

For promises, you could create a promise using the promise constructor and invoke it using the async/await pattern and then refactor it to use promise chaining. 

Make a video for yourself. NO ONE has to watch it. The video simply forces you to articulate what you’ve learned in plain English.

Hope that’s helpful.


***

https://lnkd.in/gj-AsQfe is a program for career changers, not influencers, but you WILL be getting on camera 😉. 

It's awkward. It's cringey. It works.",TEXT,Brian,Jenney,96066,96066,89,16,0,0,0.0010929985634876023,,2025-05-28 06:49:28,https://www.linkedin.com/feed/update/urn:li:activity:7333489591338848257
urn:li:activity:7332814550519468035,"❌ LinkedIn
❌ LeetCode
✅ Job offer

Anne Linebarger's unusual story of how she went from teacher to web developer might not be that unusual at all.

1 thing I've learned over the years working with over a hundred career changers:

There is no 1-size-fits-all approach.

Some Parsity mentees play the LinkedIn lottery and win. Others build in public. Some get nothing but DSA. Most never see a whiteboard.

Here's what worked for Anne:

1. Building relationships through genuine conversations
2. Gaining confidence by learning in public (even in small ways)
3. Treating interviews like performances—preparation + presence
4. Saying yes to opportunities even when she didn’t feel “ready”

Anne is a musician, teacher and a hell of a guest. She dropped some knowledge you definitely didn't get in college (or your coding bootcamp)

***

𝗟𝗶𝘀𝘁𝗲𝗻 𝗵𝗲𝗿𝗲: https://lnkd.in/gxS2h6Az
𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝗝𝗦? Dev30 is 50% off: dev30.xyz",IMAGE,Brian,Jenney,6463,6463,77,7,0,0,0.012997060188766826,,2025-05-26 10:07:05,https://www.linkedin.com/feed/update/urn:li:activity:7332814550519468035
urn:li:activity:7332069757975699456,"𝗧𝗵𝗲𝘆 𝗱𝗼𝗻’𝘁 𝘁𝗲𝗮𝗰𝗵 𝘁𝗵𝗶𝘀 𝗶𝗻 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹𝘀:

How to answer interview questions when your hands are shaking.

How to stay calm when you blank on an easy array method.

How to explain your thinking when you’re not even sure what you’re thinking.

Earlier this week, Alex Lau (author of 𝘒𝘦𝘦𝘱 𝘊𝘢𝘭𝘮 𝘢𝘯𝘥 𝘊𝘰𝘥𝘦 𝘖𝘯) gave a talk to our Parsity mentees on exactly that—𝗵𝗼𝘄 𝘁𝗼 𝗮𝗽𝗽𝗿𝗼𝗮𝗰𝗵 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗹𝗶𝗸𝗲 𝗮 𝗰𝗮𝗹𝗺, 𝗳𝗼𝗰𝘂𝘀𝗲𝗱, 𝗰𝗼𝗻𝗳𝗶𝗱𝗲𝗻𝘁 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿.

No fluff. No gimmicks. Just real strategies for not freaking out.

I’ve been reading Alex's book as well, and I'd recommend it whether I knew him or not.

It’s not just about getting hired.

It’s about becoming the kind of dev who knows how to show up under pressure, avoid costly mistakes and have a great career. 𝗜𝘁'𝘀 𝗳𝘂𝗹𝗹 𝗼𝗳 𝘄𝗶𝘀𝗱𝗼𝗺 𝘁𝗵𝗮𝘁 𝗼𝗻𝗹𝘆 𝗰𝗼𝗺𝗲𝘀 𝗳𝗿𝗼𝗺 𝘆𝗲𝗮𝗿𝘀 𝗼𝗳 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 𝘄𝗶𝘁𝗵 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝘀𝘁𝗿𝗮𝘁𝗲𝗴𝗶𝗲𝘀 𝗳𝗼𝗿 𝗰𝗼𝗺𝗺𝗼𝗻 𝗽𝗶𝘁𝗳𝗮𝗹𝗹𝘀.

Big thanks to Alex for sharing his story and insights with our crew.




*** 

𝗖𝗼𝗻𝘀𝗶𝗱𝗲𝗿𝗶𝗻𝗴 𝗣𝗮𝗿𝘀𝗶𝘁𝘆? Learn more here: https://lnkd.in/gj-AsQfe
𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝗝𝗦? Join dev30.xyz which is 50% off 🇺🇸",IMAGE,Brian,Jenney,1511,1511,23,4,1,0,0.018530774321641297,,2025-05-24 08:47:33,https://www.linkedin.com/feed/update/urn:li:activity:7332069757975699456
urn:li:activity:7331712507985764353,"How to make an amazing portfolio as a junior developer.

Step 1: 

Just Have v0 do it.

Done.

Here’s the real issue:

If you’re betting the house on your portfolio getting you a job, you’re already on the wrong track.

Nothing wrong with a sexy portfolio. Learning to deploy a web app with a custom domain that looks good on mobile is an important milestone.

Consider this:

• Instead of trying to build 100 small projects that look like everyone else’s, build 1 or 2 complex projects and deploy them.
• Consider integrating an LLM. Perhaps leverage RAG. 
• Try and get a user or 3. 
• Buy a domain. 
• Set up analytics to track who’s on there and for how long.

You will walk away with a small business or a cool story that’s light years beyond a glorified TODO app.


**

At Parsity, I'm consistently amazed at the projects our mentees cook up. Everything from analytics dashboards to inventory managers to desktop and mobile apps. 

We work with a handful of people 👉 https://lnkd.in/gVRRK_EP",TEXT,Brian,Jenney,12510,12510,40,16,0,0,0.004476418864908073,,2025-05-23 09:07:58,https://www.linkedin.com/feed/update/urn:li:activity:7331712507985764353
urn:li:activity:7331344232885968897,"You don’t need to contribute a single line of code to massively benefit from open source:

1. Clone your favorite library/framework
2. Link to a local project using 𝚗𝚙𝚖-𝚕𝚒𝚗𝚔 (or 𝚙𝚗𝚙𝚖 or 𝚢𝚊𝚛𝚗 or whatevs)
3. Extend a common API (𝘧𝘰𝘳 𝘦𝘹𝘢𝘮𝘱𝘭𝘦, 𝘮𝘢𝘬𝘦 𝚞𝚜𝚎𝚂𝚝𝚊𝚝𝚎 𝘵𝘢𝘬𝘦 3 𝘱𝘢𝘳𝘢𝘮𝘴)
4. Set a debugger and try to hit it
5. Get stuck, get frustrated and read the docs

Learn more than fixing a typo in a README could ever teach you.",TEXT,Brian,Jenney,2299,2299,19,5,0,0,0.010439321444106133,,2025-05-22 08:44:34,https://www.linkedin.com/feed/update/urn:li:activity:7331344232885968897
urn:li:activity:7330601381453615104,"The stuff they don’t teach you in tutorials…

I asked a few recent Parsity grads Jacob Cox and Anne Linebarger what surprised them most after starting their first dev jobs this year.

Here’s what they said:

“𝘞𝘰𝘳𝘬𝘪𝘯𝘨 𝘳𝘦𝘮𝘰𝘵𝘦𝘭𝘺 𝘪𝘴 𝘸𝘦𝘪𝘳𝘥 𝘢𝘵 𝘧𝘪𝘳𝘴𝘵. 𝘠𝘰𝘶’𝘷𝘦 𝘨𝘰𝘵 𝘵𝘰 𝘭𝘦𝘢𝘳𝘯 𝘩𝘰𝘸 𝘵𝘰 𝘧𝘰𝘤𝘶𝘴 𝘸𝘩𝘦𝘯 𝘢𝘵 𝘩𝘰𝘮𝘦 𝘢𝘯𝘥 𝘤𝘳𝘦𝘢𝘵𝘦 𝘣𝘰𝘶𝘯𝘥𝘢𝘳𝘪𝘦𝘴. 𝘐 𝘸𝘰𝘳𝘬𝘦𝘥 𝘭𝘰𝘯𝘨𝘦𝘳 𝘵𝘩𝘢𝘯 𝘐 𝘸𝘰𝘶𝘭𝘥 𝘩𝘢𝘷𝘦 𝘢𝘵 𝘢𝘯 𝘰𝘧𝘧𝘪𝘤𝘦"" 

""𝘛𝘩𝘦 𝘊𝘌𝘖 𝘪𝘴 𝘮𝘶𝘤𝘩 𝘮𝘰𝘳𝘦 𝘤𝘰𝘯𝘤𝘦𝘳𝘯𝘦𝘥 𝘸𝘪𝘵𝘩 𝘸𝘩𝘦𝘵𝘩𝘦𝘳 𝘺𝘰𝘶’𝘳𝘦 𝘮𝘰𝘷𝘪𝘯𝘨 𝘵𝘩𝘦 𝘣𝘶𝘴𝘪𝘯𝘦𝘴𝘴 𝘧𝘰𝘳𝘸𝘢𝘳𝘥 𝘳𝘢𝘵𝘩𝘦𝘳 𝘵𝘩𝘢𝘯 𝘧𝘳𝘢𝘮𝘦𝘸𝘰𝘳𝘬𝘴.”

“𝘐 𝘴𝘱𝘦𝘯𝘥 𝘞𝘈𝘠 𝘮𝘰𝘳𝘦 𝘵𝘪𝘮𝘦 𝘳𝘦𝘢𝘥𝘪𝘯𝘨 𝘤𝘰𝘥𝘦 𝘵𝘩𝘢𝘯 𝘸𝘳𝘪𝘵𝘪𝘯𝘨 𝘪𝘵. 𝘌𝘷𝘦𝘯 𝘢 ‘𝘴𝘪𝘮𝘱𝘭𝘦’ 𝘤𝘩𝘢𝘯𝘨𝘦 𝘮𝘦𝘢𝘯𝘴 𝘥𝘪𝘨𝘨𝘪𝘯𝘨 𝘵𝘩𝘳𝘰𝘶𝘨𝘩 𝘭𝘢𝘺𝘦𝘳𝘴 𝘰𝘧 𝘭𝘰𝘨𝘪𝘤 𝘵𝘰 𝘶𝘯𝘥𝘦𝘳𝘴𝘵𝘢𝘯𝘥 𝘸𝘩𝘢𝘵’𝘴 𝘢𝘭𝘳𝘦𝘢𝘥𝘺 𝘵𝘩𝘦𝘳𝘦.”

These are the kinds of lessons no course or tutorial will teach you, not even https://lnkd.in/gj-AsQfe will fully prepare you for that first day.

There is no substitute for time in the saddle.

𝗜𝗳 𝘆𝗼𝘂 𝗴𝗼𝘁 𝗵𝗶𝗿𝗲𝗱 𝗿𝗲𝗰𝗲𝗻𝘁𝗹𝘆 (𝗼𝗿 𝗻𝗼𝘁-𝘀𝗼-𝗿𝗲𝗰𝗲𝗻𝘁𝗹𝘆):

What’s been the most surprising part of being a professional coder?

What’s one thing you wish you’d learned before you got hired?",TEXT,Brian,Jenney,4252,4252,28,10,0,0,0.008936970837253057,,2025-05-20 07:32:45,https://www.linkedin.com/feed/update/urn:li:activity:7330601381453615104
urn:li:activity:7329532625059041280,"You don’t have a problem learning to code.

You just don't have a system to learn.

At Parsity we don't have mentees touch any code until they are armed with the tools to learn correctly.

I'll be honest - it's not great for marketing. It's also one of the many reasons why our mentees actually stick with their programs and plans.

The steps to success rarely look sexy.

I break down a learning framework that no one taught you to make your knowledge stickier, using science backed methods.",ARTICLE,Brian,Jenney,3241,4838,23,4,0,0,0.008330762110459735,,2025-05-17 08:45:53,https://www.linkedin.com/feed/update/urn:li:activity:7329532625059041280
urn:li:activity:7329132572590899200,"Tutorial purgatory:

The awkward phase when you’re not quite ready to create a complex side project but aren’t getting much out of following along with a video. 

Here’s how you limit your stay here: 
- 𝗗𝗼𝗻’𝘁 𝗲𝗾𝘂𝗮𝘁𝗲 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀 𝘄𝗶𝘁𝗵 𝗰𝗼𝗺𝗽𝗹𝗲𝘁𝗶𝗼𝗻 
- Realize there is no Gold Star for finishing a 100 hour course 
- Gain enough knowledge to be dangerous 
- 𝗘𝘅𝘁𝗲𝗻𝗱, 𝗯𝗿𝗲𝗮𝗸 𝗼𝗿 𝗿𝗲-𝘄𝗿𝗶𝘁𝗲 𝗮 𝗳𝗲𝗮𝘁𝘂𝗿𝗲 from the tutorial 
- Write detailed comments about what is happening in the code and why 

Now you have a project that is similar to the tutorial but NOT exactly like it and  you’ve removed the training wheels from your learning exercise. 

Tomorrow I'll break down some science-backed methods we teach at Parsity to super-charge your learning: https://lnkd.in/g_DTazAE",TEXT,Brian,Jenney,1531,1531,13,3,1,0,0.011103853690398433,,2025-05-16 06:16:13,https://www.linkedin.com/feed/update/urn:li:activity:7329132572590899200
urn:li:activity:7328784181918883840,"My mom kicked off my coding career with an intervention.

A decade ago, my mom walked into my girlfriend's condo and handed me a note with an ultimatum:

Get sober or get out of your kids lives.

I was a mess.

I owed people money. I was getting threats on my phone. I almost lost my life in a robbery gone wrong. My friend had taken his life and his brother got sentenced to state time.

It was only a matter of time before I lost my life or my freedom.

Didn't matter. I wasn't ready to quit yet.

I told her I'd try just so she'd stop crying.

One day turned to a few days. Then a week went by. Then a month.

I either couldn't sleep or would sleep for 12 hours. I ate too much candy. I lost ""friends."" I got better.

Coding became my new addiction. It didn't make any sense - I had no technical background and didn't own a computer for most of my life but I loved solving problems with code.

This new addiction led to a new career and my habits snowballed.

I lost weight, stopped smoking and picked up reading. I became a better father.

𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝘁𝗼 𝗰𝗼𝗱𝗲 𝗱𝗶𝗱 𝗡𝗢𝗧 𝗰𝗵𝗮𝗻𝗴𝗲 𝗺𝘆 𝗹𝗶𝗳𝗲. Getting sober did. Coding certainly changed my wallet however.

Sometimes I reveal this embarrassing aspect of my life because I know how it feels to feel like you're alone or like the odds are impossibly stacked against you.

If you're going through something similar I hope you know it's not impossible and the world can really open up once you get of your own way.",IMAGE,Brian,Jenney,4616,4616,198,17,0,0,0.04657712305025997,,2025-05-15 07:11:51,https://www.linkedin.com/feed/update/urn:li:activity:7328784181918883840
urn:li:activity:7328551906476285955,"A dream job is still a job. 

Some days I love what I do. Others I feel mentally drained, stressed, and like I’ll never be good enough.

But the skill of coding has given me something I've always wanted: leverage.

Leverage to quit bad jobs.
Leverage to build ideas into income.
Leverage to 𝘯𝘰𝘵 need permission.

You don’t have to be the best.
You just have to be good enough to 𝘀𝗵𝗶𝗽, 𝗹𝗲𝗮𝗿𝗻 𝗳𝗮𝘀𝘁, and 𝗸𝗲𝗲𝗽 𝘀𝗵𝗼𝘄𝗶𝗻𝗴 𝘂𝗽.

Learning to code does NOT guarantee you a six-figure job or a perfect life.

(𝘪𝘵 𝘤𝘰𝘶𝘭𝘥 𝘦𝘷𝘦𝘯 𝘭𝘦𝘢𝘥 𝘵𝘰 𝘮𝘢𝘭𝘦-𝘱𝘢𝘵𝘵𝘦𝘳𝘯-𝘣𝘢𝘭𝘥𝘯𝘦𝘴𝘴!)

But it might give you something equally valuable:
𝗢𝗽𝘁𝗶𝗼𝗻𝘀. 𝗔𝘂𝘁𝗼𝗻𝗼𝗺𝘆. 𝗔𝗻𝗱 𝗽𝗿𝗼𝗼𝗳 𝘆𝗼𝘂 𝗰𝗮𝗻 𝘁𝗲𝗮𝗰𝗵 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 𝗵𝗮𝗿𝗱 𝘁𝗵𝗶𝗻𝗴𝘀.

To me, that’s worth more than hype.

Keep building cool sh*t.",TEXT,Brian,Jenney,2139,2139,45,4,0,0,0.022907900888265546,,2025-05-14 15:48:52,https://www.linkedin.com/feed/update/urn:li:activity:7328551906476285955
urn:li:activity:7328115422623375362,"Pretty much sums up my experience with vibe coding so far.

Excellent for prototyping.
Great with clear instructions.
Good with making multiple changes across files.
OK with following established patterns.

Before the Vibe-Coding cult comes after me:

1. Yes - we're using Cursor rules
2. No - the app isn't very complex (yet)
3. Yes - the team is full of senior engineers

AI-assisted coding can generate a beautiful looking house of cards if you're not careful and I fear we're encouraging a generation to stop thinking, start prompting and completely lose the plot when it comes to creating software.",IMAGE,Brian,Jenney,5448,5448,60,13,2,0,0.013766519823788546,,2025-05-13 10:54:26,https://www.linkedin.com/feed/update/urn:li:activity:7328115422623375362
urn:li:activity:7327722472592543745,"Hiring is up... for senior developers. 

Here's the reality: 

There is less desire to hire and train new developers.

It might not be fair. It may be foolishly short-sighted. 

It's also true right now.

This is why at Parsity we're leaning further into internships to help mentees get real world experience and contribute to large codebases. It's a messy, stressful process that is incredibly beneficial.

𝗪𝗵𝗲𝘁𝗵𝗲𝗿 𝗼𝗿 𝗻𝗼𝘁 𝘆𝗼𝘂 𝗷𝗼𝗶𝗻 𝘂𝘀, 𝗵𝗲𝗿𝗲'𝘀 𝘄𝗵𝗮𝘁 𝗜'𝗱 𝗱𝗼 𝗮𝘀 𝗮𝗻 𝗲𝗮𝗿𝗹𝘆 𝗰𝗮𝗿𝗲𝗲𝗿 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿:

Build and ship something you'd actually want to use and try to get others to use it as well. Write about this experience. Try to charge money for it. Be a start up of 1.

Prove you can do it before you get paid to do it.",IMAGE,Brian,Jenney,5692,5692,19,11,0,0,0.005270555165144062,,2025-05-12 08:52:59,https://www.linkedin.com/feed/update/urn:li:activity:7327722472592543745
urn:li:activity:7326989116930215936,"𝗖𝗘𝗢𝘀 𝘄𝗮𝗻𝘁 𝘁𝗼 𝗯𝗲𝗹𝗶𝗲𝘃𝗲 𝘁𝗵𝗲 𝗺𝘆𝘁𝗵 𝗼𝗳 𝗔𝗜.

And I get it.

AI makes them feel like they’ve cracked the code. Like they don’t need a team of 20 engineers anymore—just some prompts and a dream.

They can build a beautiful app with prompts that works locally. They may think this is the same as deploying. They think they understand development. They start questioning what their actual devs are doing all day.

𝗜 𝘀𝘂𝘀𝗽𝗲𝗰𝘁 𝘁𝗵𝗶𝘀 𝗶𝘀 𝘄𝗵𝗮𝘁 𝗺𝗮𝗻𝘆 𝗲𝗮𝗿𝗹𝘆 𝗰𝗮𝗿𝗲𝗲𝗿 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿𝘀 𝗯𝗲𝗹𝗶𝗲𝘃𝗲 𝗮𝘀 𝘄𝗲𝗹𝗹.

You start to wonder if you have any value.

𝘐𝘧 𝘵𝘩𝘪𝘴 𝘤𝘢𝘯 𝘥𝘰 𝘮𝘺 𝘫𝘰𝘣, 𝘣𝘶𝘵 𝘧𝘢𝘴𝘵𝘦𝘳 - 𝘵𝘩𝘦𝘯 𝘸𝘩𝘢𝘵 𝘵𝘩𝘦 𝘩𝘦𝘭𝘭 𝘸𝘪𝘭𝘭 𝘐 𝘣𝘦 𝘥𝘰𝘪𝘯𝘨?

Vibe coding can honestly get you to the first 80% if you're lucky and your app is simple.

The final 20%? That’s where the real engineering happens.

That’s where tests live. And edge cases. And actual performance.

What about your database schema?
Your data pipelines?
Security?
Deployment strategy?

We've only scratched the surface.

That’s where you stop hacking and start building real software.",TEXT,Brian,Jenney,16829,16829,82,25,5,0,0.0066551785608176366,,2025-05-10 08:18:54,https://www.linkedin.com/feed/update/urn:li:activity:7326989116930215936
urn:li:activity:7326642337474879488,"New coders are obsessed with going to Google, Meta, Amazon or Netflix.

These make up a solid .6% of software engineering roles. 

They make up the 99% of the articles you read about life as a software engineer.

Reality as a developer is a tad different than what social media shows you.

Let's explore the pros and cons of working at a small startup vs a fortune 100 vs a mid size company 𝗮𝗻𝗱 𝗳𝗶𝗻𝗮𝗹𝗹𝘆, 𝘁𝗵𝗲 𝗽𝗮𝘁𝗵 𝗜'𝗱 𝘁𝗮𝗸𝗲 𝗶𝗳 𝗜 𝗰𝗼𝘂𝗹𝗱 𝗱𝗼 𝗶𝘁 𝗮𝗹𝗹 𝗼𝘃𝗲𝗿 𝗮𝗴𝗮𝗶𝗻.",ARTICLE,Brian,Jenney,13826,5356,53,5,1,0,0.004267322435990164,,2025-05-09 09:20:55,https://www.linkedin.com/feed/update/urn:li:activity:7326642337474879488
urn:li:activity:7326620424287526912,"I've thought a lot about this and I'm NOT clicking that button.

1. I hate commercials
2. My YT channel is really to get people to join Parsity 😉
3. I can't imagine how an extra $5 a month moves the needle on my life or business

Now I need a favor from you, you good looking nerd (don't tell HR I said that):

What are some (commercial-free) videos I should make that can help early career developers?",IMAGE,Brian,Jenney,2067,2067,28,8,0,0,0.01741654571843251,,2025-05-09 07:53:51,https://www.linkedin.com/feed/update/urn:li:activity:7326620424287526912
urn:li:activity:7325952288030629888,,IMAGE,Brian,Jenney,1333,1333,26,2,1,0,0.02175543885971493,,2025-05-07 11:39:10,https://www.linkedin.com/feed/update/urn:li:activity:7325952288030629888
urn:li:activity:7325581162867765250,"The problem with learning ReactJS before Javascript​: 

So here I was, doing a mock interview and the interviewee is attempting to implement the publish subscriber pattern. 

No framework. Just plain old JS. 

To their surprise, 𝚞𝚜𝚎𝚂𝚝𝚊𝚝𝚎 was not available within a Javascript object… oops. 

The rest of the interview was spent going over the basics of JS objects. 

Key-value pairs. 
Dot notation.
Deeply nested values. 

You know, table stakes JS stuff. 

I felt their pain. 

I started my Javascript career off with AngularJS and Jquery (don't judge). 

I thought because I knew the framework, I knew JS. 

It took me years to return back to the fundamentals and really double down on the concepts that were holding me back. 

I’m not saying don’t learn frameworks. They are a very useful abstraction to create apps. 𝗝𝘂𝘀𝘁 𝗱𝗼𝗻’𝘁 𝗳𝗼𝗿𝗴𝗲𝘁 𝘁𝗼 𝗯𝘂𝗶𝗹𝗱 𝘆𝗼𝘂𝗿 𝗵𝗼𝘂𝘀𝗲 𝗼𝗳 𝗸𝗻𝗼𝘄𝗹𝗲𝗱𝗴𝗲 𝗼𝗻 𝗮 𝘀𝗼𝗹𝗶𝗱 𝗳𝗼𝘂𝗻𝗱𝗮𝘁𝗶𝗼𝗻.",TEXT,Brian,Jenney,2853,2853,27,9,1,0,0.012968804766912022,,2025-05-06 11:04:11,https://www.linkedin.com/feed/update/urn:li:activity:7325581162867765250
urn:li:activity:7325185481447505920,"𝗛𝗲 𝘀𝗽𝗲𝗻𝘁 𝘁𝘄𝗼 𝘄𝗲𝗲𝗸𝘀 𝗯𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝗮 𝗳𝗲𝗮𝘁𝘂𝗿𝗲.

It worked. It passed PR review.
And then the team decided… not to use it.

Welcome to your first dev internship.

At Parsity, we’ve been experimenting with internships for a while now. And if we’re being honest, they’re not as “feel-good” as people expect.

They’re confusing.
They’re overwhelming.
They 𝘧𝘦𝘦𝘭 like you’re failing… until you realize you’re actually leveling up faster than ever.

One of our students, Dean, joined a startup through our internship program. He’d built solo projects before, but this was different:

• He was now contributing to a shared TypeScript codebase
• Working with Git in a team setting, getting real PR feedback
• Learning how to 𝘤𝘰𝘮𝘮𝘶𝘯𝘪𝘤𝘢𝘵𝘦—not just code
• Figuring out why “good enough” code still gets deleted
• And discovering the hard truth: sometimes you build something that no one ends up using

He also learned that no one teaches you how to 𝘯𝘢𝘷𝘪𝘨𝘢𝘵𝘦 𝘢 𝘮𝘢𝘴𝘴𝘪𝘷𝘦 𝘳𝘦𝘱𝘰, or how to 𝘢𝘴𝘬 𝘵𝘩𝘦 𝘳𝘪𝘨𝘩𝘵 𝘲𝘶𝘦𝘴𝘵𝘪𝘰𝘯𝘴, or how to work async on a remote team while holding down a day job.

You learn those things by doing them. Fumbling through them.
Getting frustrated.

Then doing it better the next time.

We sat down and talked through all of it on this week’s episode of Develop Yourself https://lnkd.in/gF6gZgBN",TEXT,Brian,Jenney,7668,7668,21,3,0,0,0.003129890453834116,,2025-05-05 08:51:54,https://www.linkedin.com/feed/update/urn:li:activity:7325185481447505920
urn:li:activity:7324511515095502849,"More code === more bugs.
More code === more maintenance.
More code === more code.

The barrier to entry for launching an app is now non-existent.

We have people who don't know how to code building working apps... that will absolutely NOT work as they attempt to add more features, security or complex deployment strategies.

Why on earth would you think we need less software developers?

The reality is that the barrier to entry is getting higher and expectations have risen.

If you're looking for a proven path towards a career in software that takes a hell of a lot longer than 3 months - join me here: https://lnkd.in/gj-AsQfe",TEXT,Brian,Jenney,3597,3597,40,1,1,0,0.011676396997497914,,2025-05-03 12:13:48,https://www.linkedin.com/feed/update/urn:li:activity:7324511515095502849
urn:li:activity:7324095198039285761,"Let the normies have fun with vibe coding and prompt engineering.

If you're a software engineer (especially a front end one) - here's what I'd be learning in 2025 to get a firm grasp on AI:",VIDEO,Brian,Jenney,10235,2884,54,2,2,0,0.005666829506595017,,2025-05-02 09:42:39,https://www.linkedin.com/feed/update/urn:li:activity:7324095198039285761
urn:li:activity:7323782495810813953,"The CEO at the company leaned over my desk when I was using Chat GPT and Cursor to “write” code.

“𝘞𝘩𝘢𝘵 𝘢𝘳𝘦 𝘺𝘰𝘶 𝘥𝘰𝘪𝘯𝘨?”

Me - a bit nervous:

“𝘚𝘵𝘺𝘭𝘪𝘯𝘨 𝘵𝘩𝘪𝘴 𝘱𝘢𝘨𝘦 𝘸𝘪𝘵𝘩 𝘛𝘢𝘪𝘭𝘸𝘪𝘯𝘥. 𝘐’𝘮 𝘯𝘰𝘵 𝘨𝘳𝘦𝘢𝘵 𝘢𝘵 𝘴𝘵𝘺𝘭𝘪𝘯𝘨 𝘢𝘯𝘥 𝘩𝘰𝘯𝘦𝘴𝘵𝘭𝘺 𝘵𝘩𝘪𝘴 𝘪𝘴 𝘧𝘢𝘴𝘵𝘦𝘳 𝘢 𝘭𝘰𝘵 𝘰𝘧 𝘵𝘩𝘦 𝘵𝘪𝘮𝘦.”

Him:

“𝘖𝘩 𝘤𝘰𝘰𝘭. 𝘋𝘪𝘥𝘯’𝘵 𝘬𝘯𝘰𝘸 𝘺𝘰𝘶 𝘤𝘰𝘶𝘭𝘥 𝘥𝘰 𝘵𝘩𝘢𝘵”

Honestly - a ton of my code is AI-generated. It gives me a great base to use BUT - 𝘁𝗵𝗮𝘁 𝗹𝗮𝘀𝘁 𝟮𝟬% 𝗼𝗳 𝘁𝗵𝗲 𝗰𝗼𝗱𝗲 𝘁𝗮𝗸𝗲𝘀 𝘂𝗽 𝟴𝟬% 𝗼𝗳 𝘁𝗵𝗲 𝘁𝗶𝗺𝗲.

- Cursor writes my tests… and then I need to fix all the mocks and add cases that make sense.
- Chat GPT scaffolds a component for me…. that isn’t type safe.
- Cursor creates a route in NextJS… that doesn’t follow a pattern I created.

Don’t get me started on agents creating random folders and duplicate files.

AI is great. Humans are better.



I'm curious, how much of your code is AI-assisted nowadays?",TEXT,Brian,Jenney,382616,382616,158,60,0,0,0.0005697618500010455,,2025-05-01 17:16:24,https://www.linkedin.com/feed/update/urn:li:activity:7323782495810813953
urn:li:activity:7323006674334629890,"I recently got rejected from a company that I interviewed with months earlier. When I got the feedback I was ecstatic.

I passed every round except for the coding challenge where I honestly froze up. It was not my finest moment.

So why am I happy?

I got the highest marks in the system design round after years of generally being terrible at this style of interview despite managing teams, working with architects and building complex software.

I read Alex Xu's system design books, DDIA and have real world experience to lean on.

Knowledge wasn’t the main issue.
The issue was my delivery.

I had no method to my madness.

Instead of clarifying the problem and mapping out a high level design, I’d jump straight into the data types and spout off buzzwords I didn’t really understand based on the books I’d read.

Bad move.

I’ll write about my experience in a no-nonsense guide to approaching system design this weekend. I hope it’s helpful.

You can sign up here: https://lnkd.in/g_DTazAE",TEXT,Brian,Jenney,113009,113009,67,6,0,0,0.0006459662504756258,,2025-04-29 08:34:06,https://www.linkedin.com/feed/update/urn:li:activity:7323006674334629890
urn:li:activity:7322646381804855297,"The developer who failed 100 interviews.

At first I didn’t believe him.

I mean, 100? There’s no way. Then we did a mock interview.

Oof.

Here’s the thing - he was a very personable dude. Polite, well-spoken and confident. During the interview though, he didn’t come off as such.

His answers were short and to the point. He cut me off a few times as I explained a concept. When I asked about a project he had worked on, he gave a basic overview of a trivial feature and didn’t offer much detail. He used some internal names for the app which didn’t make sense to me.

After the interview, I brought some of these issues to his attention.

We dug into his former role and the work he did. It was interesting. He had worked on challenging technical problems across the stack.

So why in the hell wasn’t he mentioning this in the interview?

He was genuinely surprised with my perception and feedback. 100 interviews deep and here he was getting this hot-take for the first time.

Companies will rarely give feedback to candidates and 𝗜 𝗸𝗻𝗼𝘄 𝘁𝗵𝗮𝘁’𝘀 “𝘂𝗻𝗳𝗮𝗶𝗿.” 𝗜𝘁’𝘀 𝗮𝗹𝘀𝗼 𝗿𝗲𝗮𝗹𝗶𝘁𝘆.

Legal reasons. Awkwardness. Time constraints. Pick one.

Many of us are overly focus on the technical aspect of interviews. I mean, we’re software developers.

Don’t underestimate the human aspect.",TEXT,Brian,Jenney,86019,86019,69,9,2,0,0.00093002708703891,,2025-04-28 08:42:25,https://www.linkedin.com/feed/update/urn:li:activity:7322646381804855297
urn:li:activity:7321911897933414400,"An interesting critique I've read about coding bootcamps from a super smart senior+ engineer at FAANG:

""𝘛𝘩𝘦𝘺'𝘳𝘦 𝘰𝘷𝘦𝘳𝘭𝘺 𝘧𝘰𝘤𝘶𝘴𝘦𝘥 𝘰𝘯 𝘨𝘦𝘵𝘵𝘪𝘯𝘨 𝘺𝘰𝘶 𝘵𝘰 𝘵𝘩𝘦 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸 𝘢𝘯𝘥 𝘯𝘰𝘵 𝘱𝘳𝘦𝘱𝘢𝘳𝘪𝘯𝘨 𝘺𝘰𝘶 𝘧𝘰𝘳 𝘢𝘯 𝘢𝘤𝘵𝘶𝘢𝘭 𝘤𝘢𝘳𝘦𝘦𝘳 𝘪𝘯 𝘴𝘰𝘧𝘵𝘸𝘢𝘳𝘦.""

Ok.

I'm curious then, what do colleges do exactly?

As much as I don't like the current coding bootcamp scene, I genuinely don't understand this critique. What can truly prepare you for a career in... anything?",TEXT,Brian,Jenney,7695,7695,25,8,0,0,0.0042884990253411305,,2025-04-26 15:04:16,https://www.linkedin.com/feed/update/urn:li:activity:7321911897933414400
urn:li:activity:7321607543774982145,"The AI engineer of the future might actually be a Typescript engineer.

Before you jump ship to become a machine learning engineer, data scientist or kick JS to the curb for Python, here are some very practical tools, skills and 1 project you can build to get your hands dirty with AI as a JS developer.",ARTICLE,Brian,Jenney,4193,4895,33,10,0,0,0.010255187216789887,,2025-04-25 11:54:27,https://www.linkedin.com/feed/update/urn:li:activity:7321607543774982145
urn:li:activity:7321165492126195715,"I may have steered some of you in the wrong direction in your job search.

I generally promote using LinkedIn and learning in public as a way to get a job.

𝘐 𝘦𝘷𝘦𝘯 𝘩𝘢𝘷𝘦 𝘴𝘰𝘮𝘦 𝘵𝘦𝘮𝘱𝘭𝘢𝘵𝘦𝘴 (𝘳𝘦𝘢𝘤𝘩 𝘰𝘶𝘵 𝘪𝘧 𝘺𝘰𝘶 𝘸𝘢𝘯𝘵 𝘦𝘮).

In addition to smashing the easy apply button and sharing what bugs you’re creating, 𝗜 𝘄𝗼𝘂𝗹𝗱 𝘀𝘁𝗿𝗼𝗻𝗴𝗹𝘆 𝘀𝘂𝗴𝗴𝗲𝘀𝘁 𝗱𝗼𝗶𝗻𝗴 𝘁𝗵𝗶𝘀:

- Reach out to your current network of non-dev and non-bootcamp friends.
- Raise the white flag on IG, FB or TT. Tell your friends, family and that weird aunt that you’re looking for your first developer job.

You might be shocked who can point you in the right direction, get you that first contract or tell you about an opportunity you will never see here.

***

There is no single path that works. This week I spoke with Mindi Weik, a career changer who went to a bootcamp, never interviewed and got a developer role. 

We go over all sorts of topics, from ADHD to public speaking as a shy developer and more: https://lnkd.in/e3df3tXf",TEXT,Brian,Jenney,7534,7534,29,11,2,0,0.005574727900185824,,2025-04-24 14:08:52,https://www.linkedin.com/feed/update/urn:li:activity:7321165492126195715
urn:li:activity:7320491044385521666,"As an engineering manager, when I came across a resume from a Stanford grad or someone from a smarty-pants college, I would read it a little more closely.

That's it.

They got the same interview as the dude who graduated high school.

However, the majority of our hires were CS grads even though we had zero education requirements.

This should not shock you.

If you spent 4 years learning about software, design patterns and coding then you're likely to be a good candidate for a career in software.

If you went to a bootcamp and didn't get hired in 3 months for a fraction of the price - people somehow consider that a scam.

Interesting.

How you acquire your coding knowledge is of ZERO importance. Self-teach, go to a bootcamp or go to a university. None of them has a monopoly on knowledge or a magical formula that will guarantee you a job.

College-aged people are much more likely to complete a rigorous academic program than a father of 2 who's juggling work, a failing marriage and aging parents.

𝗜𝘀 𝗶𝘁 𝗮𝗻𝘆 𝘄𝗼𝗻𝗱𝗲𝗿 𝗺𝗼𝘀𝘁 𝗯𝗼𝗼𝘁𝗰𝗮𝗺𝗽 𝘀𝘁𝘂𝗱𝗲𝗻𝘁𝘀 𝗳𝗮𝗶𝗹? (𝘵𝘩𝘪𝘴 𝘪𝘴 𝘢𝘭𝘴𝘰 𝘸𝘩𝘺 𝘸𝘦 𝘦𝘮𝘱𝘩𝘢𝘴𝘪𝘻𝘦 𝘢𝘭𝘭 𝘵𝘩𝘰𝘴𝘦 𝘯𝘰𝘯-𝘤𝘰𝘥𝘪𝘯𝘨 𝘴𝘬𝘪𝘭𝘭𝘴 𝘢𝘵 𝘗𝘢𝘳𝘴𝘪𝘵𝘺 https://lnkd.in/gj-AsQfe)

Learn to code however the hell you want. 

Learn through YouTube, books, college or a coding bootcamp. Build something complex. Be above average. Be curious.",TEXT,Brian,Jenney,90456,90456,71,16,2,0,0.0009839037764216858,,2025-04-22 09:57:53,https://www.linkedin.com/feed/update/urn:li:activity:7320491044385521666
urn:li:activity:7320131577152163842,"Running an ethical business just lost us a client.

Here's the story:

Parsity works with less than 80 people per year to change careers into software.

The number is low and the quality of our mentees is high. We like it this way.

We don't have some magical formula but we do emphasize personal development alongside technical skills.

𝗠𝗮𝘆𝗯𝗲 𝘁𝗵𝗮𝘁 𝗶𝘀 𝘁𝗵𝗲 𝘀𝗲𝗰𝗿𝗲𝘁 𝗮𝗰𝘁𝘂𝗮𝗹𝗹𝘆: how can you learn efficiently, attack the market and win the game of career-change if you are not mentally prepared with a plan of action and accountability? Knowledge is rarely the problem and knowing how to code is not enough.

We understand this approach is not for everyone.

So when we onboarded a mentee and realized that they expected this journey to be simple, easy and something they could manage in their spare time - we realized it wouldn't work.

They just wanted to ""learn to code"" and that is not a strategy to be a hire-able software engineer.

This is the first time this has happened and I hope it’s the last, but overall we’d rather lose a mentee than sell someone a fantasy.",TEXT,Brian,Jenney,21437,21437,43,5,0,0,0.002239119279749965,,2025-04-21 12:52:27,https://www.linkedin.com/feed/update/urn:li:activity:7320131577152163842
urn:li:activity:7318767408549097474,I hope I didn't disappoint Juan Boyce too much with my bow tying skills.,SHARE,Brian,Jenney,856,856,12,1,0,0,0.015186915887850467,,2025-04-17 15:48:46,https://www.linkedin.com/feed/update/urn:li:activity:7318767408549097474
urn:li:activity:7318748793632432129,"Money isn't everything. It's also not nothing. I've been broke and not broke. I prefer the latter.

I lay out a no-bs guide on how to maximize your earning potential as a developer by being a big fish in a small pond, chasing experience over cash (at first) and not being an idiot with your money.",ARTICLE,Brian,Jenney,6840,4491,45,10,0,0,0.00804093567251462,,2025-04-17 14:34:48,https://www.linkedin.com/feed/update/urn:li:activity:7318748793632432129
urn:li:activity:7317946960420687873,"You’re right, whiteboard interviews are unfair, biased and don't resemble the kind of work you do on a daily basis.

Now what?

Do you simply limit yourself to companies that don’t ask these types of questions?

You could. 

OR you could learn some of the most common data structures and algorithms at the University of YouTube. Or if you’re a masochist, a book perhaps.

As a developer you ARE going to encounter these types of interviews. Why not give yourself a shot at actually passing them?

Want to get started?

- trees/tries
- linked lists
- graphs
- stacks/queues
- binary search
- merge sort
- quick sort

Implement these structures and algorithms from scratch. 𝗖𝗮𝗹𝗰𝘂𝗹𝗮𝘁𝗲 𝘁𝗵𝗲 𝗕𝗶𝗴 𝗢 𝗳𝗼𝗿 𝘁𝗵𝗲 𝗺𝗼𝘀𝘁 𝗰𝗼𝗺𝗺𝗼𝗻 𝗼𝗽𝗲𝗿𝗮𝘁𝗶𝗼𝗻𝘀 (eg. what is the time complexity for searching a BST? How about inserting into a linked list?).

You can still turn down these white board interviews. But because you want to, not because you have to.",TEXT,Brian,Jenney,3794,3794,30,8,0,0,0.010015814443858724,,2025-04-15 09:28:36,https://www.linkedin.com/feed/update/urn:li:activity:7317946960420687873
urn:li:activity:7317564759405408256,"Yes, I’m still teaching my kids to code.

Even in the age of AI.
Especially in the age of AI.

Why?

Because it’s never been easier to build and deploy a real product.
And I believe the people who can pair coding with entrepreneurship are going to win big.

Last week, I sat down with Laly Bar-Ilan, Chief Scientist at Bit, who’s been working in NLP and AI for 𝘵𝘸𝘰 𝘥𝘦𝘤𝘢𝘥𝘦𝘴—before it was cool.

Laly has some advice for junior devs:

- You’re not being replaced but many of your tasks are.
- There’s still massive opportunity if you learn how to use AI as leverage.
- Learning RAG and how to evaluate and integrate AI output are practical ways to stay ahead of the curve.

You can check out our convo here:

https://lnkd.in/gJ83yTWT",TEXT,Brian,Jenney,3246,3246,40,11,0,0,0.015711645101663587,,2025-04-14 09:52:55,https://www.linkedin.com/feed/update/urn:li:activity:7317564759405408256
urn:li:activity:7316518918368423936,"Don’t be like the normies who are freaking out about AI taking over the world or replacing developers in the next 6 months (for real, it’s gonna happen this time!).

Here’s a practical way to learn how to build software with AI:

- learn how LLMs transform 𝘄𝗼𝗿𝗱𝘀 𝘁𝗼 𝘃𝗲𝗰𝘁𝗼𝗿𝘀 and why
- 𝗳𝗶𝗻𝗲 𝘁𝘂𝗻𝗲 𝗮 𝗺𝗼𝗱𝗲𝗹 by using OpenAI (or whatever you prefer) to teach a model how to write in your tone/style or the style of your favorite author
- 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗥𝗔𝗚 𝗮𝗽𝗽 by adding all your READMEs to a vector DB like Pinecone so you can “talk” to them with an LLM
- explore Vercel’s AI SDK to stream responses from an LLM
- 𝗺𝗼𝗻𝗶𝘁𝗼𝗿 𝘆𝗼𝘂𝗿 𝘁𝗼𝗸𝗲𝗻 𝘂𝘀𝗮𝗴𝗲 and prompt quality with a tool like Helicone
- l𝗲𝗮𝗿𝗻 𝗵𝗼𝘄 𝘁𝗼 𝘀𝗰𝗿𝗮𝗽𝗲 𝗮𝗻𝗱 𝗰𝗹𝗲𝗮𝗻 𝗱𝗮𝘁𝗮 𝗳𝗿𝗼𝗺 𝘁𝗵𝗲 𝗶𝗻𝘁𝗲𝗿𝗻𝗲𝘁 to feed your hungry LLM

Not only is this path more realistic for you full stack devs who don’t want to miss the AI hype train, it’s also a hell of a lot of fun.",TEXT,Brian,Jenney,6092,6092,44,10,0,0,0.00886408404464872,,2025-04-11 16:55:37,https://www.linkedin.com/feed/update/urn:li:activity:7316518918368423936
urn:li:activity:7316139233654554627,"I don't think hiring is broken.

But you can't use the same tactics that worked a year ago if you want to get hired.

𝗦𝗼𝗺𝗲 𝗵𝗮𝗿𝘀𝗵 𝘁𝗿𝘂𝘁𝗵𝘀:

- Your resume is increasingly less important
- Luck is a factor no one wants to admit
- Mass applying is like playing the lotto
- LinkedIn is a social media site pretending to be a job board

𝗦𝗼𝗺𝗲 𝘀𝘁𝘂𝗳𝗳 𝘆𝗼𝘂 𝘀𝗵𝗼𝘂𝗹𝗱 𝘀𝘁𝗮𝗿𝘁 𝗱𝗼𝗶𝗻𝗴:

- Get 500 connections on LinkedIn to be more discoverable
- Remove any mention of junior/aspiring/student from your profile
- Don't apply for only junior roles - let the market decide
- Do a BFS of your network to find hidden jobs (we teach this method in Parsity)
- Build in public - this is uncomfortable and effective

I'm not saying this is easy. I just want you to have a better chance whether or not you work with me and my twin Zubin Pratap.

Good luck out there.",TEXT,Brian,Jenney,19781,19781,46,18,0,0,0.003235427935898084,,2025-04-10 09:45:20,https://www.linkedin.com/feed/update/urn:li:activity:7316139233654554627
urn:li:activity:7315770419481894913,"I always tell people—your primary coding language is 𝘌𝘯𝘨𝘭𝘪𝘴𝘩.

But… maybe it’s Spanish. Or Hindi. Or Portuguese.

I’ve been using Amazon Q Developer in my terminal constantly and now in Cursor to help me write code. 

It’s fast, helpful, and now—it speaks your language.

This isn’t a paid post btw. A student at Parsity introduced me to Amazon Q Developer and I've been hooked since.

Thanks for the shout out Srini Iragavarapu!",VIDEO,Brian,Jenney,1400,447,21,2,0,0,0.016428571428571428,,2025-04-09 16:03:50,https://www.linkedin.com/feed/update/urn:li:activity:7315770419481894913
urn:li:activity:7315784046993690624,"Most junior devs don’t fail interviews because they’re dumb.

I mean, some absolutely do — but if you’re reading this, you’re probably above average intelligence and easy on the eyes (don’t tell HR).

Most fail because they study the wrong things — or spend too much time studying and not enough time practicing.

If you’re not aiming for Google or Meta, this cheat sheet should take you 80% of the way.

And remember, if all else fails - just use a hash map!",ARTICLE,Brian,Jenney,14002,6573,67,13,2,0,0.005856306241965433,,2025-04-09 16:03:50,https://www.linkedin.com/feed/update/urn:li:activity:7315784046993690624
urn:li:activity:7315130211040182272,"You're going to hate to hear this:

There are people less qualified than you who are getting hired faster.

LinkedIn is a social media site pretending to be a job site. 

On one end you have recruiters trying to find candidates in a tidal wave of AI produced slop.

On the other end you have qualified candidates who are essentially un-discoverable.

Who's winning here? (hint: not you)

𝗦𝗼 𝘀𝗵𝗼𝘂𝗹𝗱 𝘆𝗼𝘂 𝗯𝗲𝗰𝗼𝗺𝗲 𝗮 𝘀𝗼𝗰𝗶𝗮𝗹 𝗺𝗲𝗱𝗶𝗮 𝗶𝗻𝗳𝗹𝘂𝗲𝗻𝗰𝗲𝗿? As much as I hate to say this - it's not the worst idea 😅.

A more practical approach might be:

1. Curate your feed to connect with more recruiters and hiring managers and less influencers (𝘐 𝘥𝘰𝘯'𝘵 𝘤𝘰𝘶𝘯𝘵 𝘥𝘰 𝘐? 𝘐𝘧 𝘴𝘰, 𝘴𝘤𝘳𝘢𝘵𝘤𝘩 𝘵𝘩𝘢𝘵)
2. Go old school - 𝗱𝗼 𝗮 𝗕𝗙𝗦 𝗼𝗳 𝘆𝗼𝘂𝗿 𝗽𝗲𝗿𝘀𝗼𝗻𝗮𝗹 𝗻𝗲𝘁𝘄𝗼𝗿𝗸 𝘁𝗼 𝗴𝗲𝘁 𝗹𝗲𝗮𝗱𝘀 (𝘪𝘧 𝘺𝘰𝘶 𝘥𝘰𝘯'𝘵 𝘨𝘦𝘵 𝘵𝘩𝘢𝘵 𝘳𝘦𝘧𝘦𝘳𝘦𝘯𝘤𝘦, 𝘨𝘰 𝘭𝘰𝘰𝘬 𝘪𝘵 𝘶𝘱 😉)
3. 𝗚𝗲𝘁 𝟱𝟬𝟬 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻𝘀 to be more discoverable
4. Diversify your options: WellFound and JobRight are solid alternatives
5. Join Parsity and stop going off vibes when it comes to your career switch approach",TEXT,Brian,Jenney,24301,24301,57,13,0,0,0.0028805398954775525,,2025-04-07 15:14:48,https://www.linkedin.com/feed/update/urn:li:activity:7315130211040182272
urn:li:activity:7314367020655906817,"0 binary trees.
0 linked lists.
0 graph traversals.

Your next coding interview will include more practical exercises than white boarding problems unless you're interviewing for the top ~1% of tech companies.

The problem is that your study plan doesn't reflect reality.

I made a Google doc that I use to prep for interviews and want to share with you: https://lnkd.in/gtF7VphP




𝗣𝗦.

𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 𝗵𝗮𝘁𝗲𝘀 𝗹𝗶𝗻𝗸𝘀. 

If you find the guide useful - please share it with others who are grinding LeetCode this weekend.",TEXT,Brian,Jenney,13794,13794,45,5,2,0,0.0037697549659272147,,2025-04-05 14:02:37,https://www.linkedin.com/feed/update/urn:li:activity:7314367020655906817
urn:li:activity:7313953703609147392,"Junior developers are inherently risky (in every industry, not just tech btw).

""𝘉𝘶𝘵... 𝘐 𝘢𝘮 𝘢 𝘫𝘶𝘯𝘪𝘰𝘳"", you say.

Yeah, I get it, just stay with me here.

The word ""junior"" is so subjective that it's nearly meaningless. 𝗪𝗵𝗮𝘁 𝗶𝘁 𝗯𝗮𝘀𝗶𝗰𝗮𝗹𝗹𝘆 𝗯𝗼𝗶𝗹𝘀 𝗱𝗼𝘄𝗻 𝘁𝗼 𝗶𝘀 𝘀𝗼𝗺𝗲𝗼𝗻𝗲 𝘄𝗵𝗼 𝗵𝗮𝘀 𝘀𝗼 𝗹𝗶𝘁𝘁𝗹𝗲 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 𝘁𝗵𝗮𝘁 𝘁𝗵𝗲𝘆 𝗰𝗮𝗻𝗻𝗼𝘁 𝗯𝗲 𝘁𝗿𝘂𝘀𝘁𝗲𝗱 𝘁𝗼 𝗱𝗼 𝗻𝗲𝗮𝗿𝗹𝘆 𝗮𝗻𝘆𝘁𝗵𝗶𝗻𝗴 𝗼𝗻 𝘁𝗵𝗲𝗶𝗿 𝗼𝘄𝗻.

• They need significant hand-holding for months on the job.
• They will take on the easy stuff and maybe break some things.
• They won't contribute much.

𝗛𝗲𝗿𝗲'𝘀 𝘁𝗵𝗲 𝘁𝗵𝗶𝗻𝗴: nearly every developer will be ""junior"" when they first join a company unless they are very senior.

You don't actually need to a be a mid level developer to be a safe hire. You just need to avoid the tell-tale signs that you are, in fact, a n00b.

Quite simply, stop down-playing yourself.

• 𝗥𝗲𝗺𝗼𝘃𝗲 𝗷𝘂𝗻𝗶𝗼𝗿, 𝗮𝘀𝗽𝗶𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 from your resume and LinkedIn.
• DON'T talk about ""the project from your school or bootcamp""
• 𝗗𝗢 𝗧𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝘁𝗵𝗲 𝗮𝗽𝗽 𝗼𝗿 𝘄𝗲𝗯𝘀𝗶𝘁𝗲 𝘆𝗼𝘂'𝗿𝗲 𝗹𝗮𝘂𝗻𝗰𝗵𝗶𝗻𝗴 - yes, you need to have a project to talk about.
• 𝗨𝘀𝗲 𝘀𝘁𝗿𝗼𝗻𝗴 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲 𝘁𝗼 𝘁𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝘆𝗼𝘂𝗿 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 and speak to the benefits of features you created. 


Lastly - join me at a coding mentorship program that is totally not a cult: https://lnkd.in/g7kF5XVa",TEXT,Brian,Jenney,42636,42636,71,18,2,0,0.0021343465615911435,,2025-04-04 13:22:17,https://www.linkedin.com/feed/update/urn:li:activity:7313953703609147392
urn:li:activity:7313585143175073792,"I actually know a guy who cheated his way into big tech and it worked.

For 3 months.

He couldn't keep up, got fired and hasn't returned to tech as far as I know.

TBH - as a software engineer, I think this tool is pretty neat.

I also think it's immoral to cheat your way into a company. Perhaps I'm just an aging corporate shill. Ok fine - forget morals. 𝗜𝘀 𝘁𝗵𝗲 𝗿𝗶𝘀𝗸 𝘄𝗼𝗿𝘁𝗵 𝘁𝗵𝗲 𝗿𝗲𝘄𝗮𝗿𝗱 𝗵𝗲𝗿𝗲?

𝙘𝙤𝙣𝙩𝙚𝙭𝙩: (𝙚𝙭)𝘾𝙤𝙡𝙪𝙢𝙗𝙞𝙖 𝙐𝙣𝙞𝙫𝙚𝙧𝙨𝙞𝙩𝙮 𝙨𝙩𝙪𝙙𝙚𝙣𝙩 𝙢𝙖𝙠𝙚𝙨 𝙪𝙣𝙙𝙚𝙩𝙚𝙘𝙩𝙖𝙗𝙡𝙚 𝘼𝙄 𝙥𝙧𝙤𝙜𝙧𝙖𝙢𝙢𝙚𝙧 𝙩𝙤 𝙖𝙘𝙚 𝙘𝙤𝙙𝙞𝙣𝙜 𝙘𝙝𝙖𝙡𝙡𝙚𝙣𝙜𝙚𝙨 𝙩𝙝𝙚𝙣 𝙠𝙞𝙘𝙠𝙚𝙙 𝙤𝙪𝙩 𝙤𝙛 𝙨𝙘𝙝𝙤𝙤𝙡 - 𝙨𝙝𝙤𝙬𝙨 𝟬 𝙧𝙚𝙢𝙤𝙧𝙨𝙚 𝙡𝙤𝙡",IMAGE,Brian,Jenney,28654,28654,84,36,2,0,0.004257695260696587,,2025-04-03 12:54:51,https://www.linkedin.com/feed/update/urn:li:activity:7313585143175073792
urn:li:activity:7313594786517512192,"Titles aren’t everything.

But it’s silly to think they’re meaningless.

Some genius on LinkedIn told you that the senior developer title doesn’t matter — just write code for the love of the sport.

Great advice!

Not like your title determines your pay, bonus or career trajectory.

I swear, sometimes I wonder if these big brains have ever worked in a real company.

As an engineering manager, I had the privilege of promoting developers to senior and the awkward duty to share with developers why there were NOT getting promoted.

Here’s how you can shorten your path to senior developer, step by step.",ARTICLE,Brian,Jenney,4797,4655,37,9,1,0,0.009797790285595165,,2025-04-03 12:54:42,https://www.linkedin.com/feed/update/urn:li:activity:7313594786517512192
urn:li:activity:7313230808469684225,"We just wrapped up our third Parsity internship cohort, and the same thing happens every time:

- Students realize how massive a real codebase is
- They struggle to make even their first commit
- They fumble through Git and PRs
- They hit imposter syndrome head-on

That’s exactly the point.

Internships show you what tutorials never can:

What it’s like to contribute to a real product, with real deadlines, in a real team setting.

We love doing these. But they’re hard to set up.

Not every company is the right fit. There’s a fine line between “free labor” and a mutual learning partnership that benefits everyone.

𝗧𝗵𝗮𝘁’𝘀 𝘄𝗵𝘆 𝘄𝗲’𝗿𝗲 𝗼𝗽𝗲𝗻𝗶𝗻𝗴 𝘂𝗽 𝗻𝗲𝘄 𝗶𝗻𝘁𝗲𝗿𝗻𝘀𝗵𝗶𝗽 𝗼𝗽𝗽𝗼𝗿𝘁𝘂𝗻𝗶𝘁𝗶𝗲𝘀.

So if you run (or work at) a legit company that wants to:

- Support someone making a career change
- Work with highly motivated learners
- And potentially hire them (with zero referral fees)

Fill out the form on our site: https://lnkd.in/gxFCRpgY

Let’s give more people the opportunity to do the hard things that actually prepare them for real dev jobs.",TEXT,Brian,Jenney,2438,2438,46,6,0,0,0.02132895816242822,,2025-04-02 09:08:17,https://www.linkedin.com/feed/update/urn:li:activity:7313230808469684225
urn:li:activity:7312869627976368128,"I once asked to end an interview early at Meta.

I completely bombed it.

They asked me a recursion question.
I had no idea what to do.
Panic set in.
I told the interviewer I was done and thanked them for their time.

Since then?
I’ve learned recursion.
And binary search.
And heaps and trees and all the stuff I used to avoid.

What changed?

I stopped being scared of it.

I realized that DSA isn’t some elite gatekeeping tool — it’s just a skill. And like any skill, it’s learnable with a little bit of pain and a lot of reps.

If you’ve ever bombed an interview and thought “maybe I’m not cut out for this,” I promise — you are.

Keep going.",VIDEO,Brian,Jenney,6674,1983,60,9,0,0,0.010338627509739287,,2025-04-01 09:13:05,https://www.linkedin.com/feed/update/urn:li:activity:7312869627976368128
urn:li:activity:7312584261931343872,"Buzzsprout has a ""feature"" that let's listeners send a text to the show.

1 problem....

I can NOT respond to any of these messages. 

I'm sure I've lost some listeners who probably think 

""Who does this bald bandicoot think he is, not answering me?!""

I apologize. I'll be dropping an episode tomorrow to answer the most recent questions and I want to open up more questions to early career developers here that I will answer on the show. 

Drop a question in the comments and if I answer it, I'll shout you out on an episode next week.",IMAGE,Brian,Jenney,809,809,5,0,0,0,0.006180469715698393,,2025-03-31 14:19:09,https://www.linkedin.com/feed/update/urn:li:activity:7312584261931343872
urn:li:activity:7312496978377031681,"“𝘐𝘧 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘬𝘯𝘰𝘸 𝘸𝘩𝘢𝘵 𝘵𝘩𝘪𝘴 𝘤𝘰𝘥𝘦 𝘪𝘴 𝘥𝘰𝘪𝘯𝘨…
𝘵𝘩𝘦𝘯 𝘸𝘩𝘺 𝘪𝘴 𝘪𝘵 𝘪𝘯 𝘵𝘩𝘦 𝘤𝘰𝘥𝘦𝘣𝘢𝘴𝘦?
𝘈𝘯𝘥 𝘸𝘩𝘺 𝘪𝘴 𝘺𝘰𝘶𝘳 𝘯𝘢𝘮𝘦 𝘰𝘯 𝘪𝘵?”

That question wrecked me early in my dev career.

I had copied something from Stack Overflow without understanding it.

It worked.

Until it didn’t.

Now we’re entering an era where AI lets you speedrun your way to the same mistake – at scale.

You can build an impressive-looking app in record time.

But that doesn’t mean you understand it.

And if you don’t understand it, you can’t debug it.

- You can’t extend it.
- You can’t make trade-offs.
- You’re not developing software.
- You’re just pasting things into a text box and hoping for the best.

Here’s the truth no one wants to hear:

- The keystrokes aren’t the value.
- The mental models are.
- The ability to reason through a system.
- To know why something works.
- To spot what’s missing.

A recent LinkedIn poll showed that 73% of experienced developers spend more time reading code than writing it.

Because writing code is easy.

Understanding it is the job.



***

I'm an old guy with a podcast on coding that people like. Zubin Pratap and I chat more on this subject here: https://lnkd.in/dmEtnFux",TEXT,Brian,Jenney,12091,12091,57,17,0,0,0.006120254734926805,,2025-03-31 11:24:03,https://www.linkedin.com/feed/update/urn:li:activity:7312496978377031681
urn:li:activity:7311431658987999232,"No one talks about this enough:

Yes, AI boosts developer productivity BUT, as we write code at scale - we also introduce bugs at scale.

A study of 800 developers found a 41% increase in the number of bugs 😬.

Debugging has always been a critical skill that will get even more important going forward.

If the only tool in your belt is 𝚌𝚘𝚗𝚜𝚘𝚕𝚎.𝚕𝚘𝚐 - let me show you a better way 👇",VIDEO,Brian,Jenney,4655,1492,42,8,1,0,0.010955961331901182,,2025-03-28 10:09:35,https://www.linkedin.com/feed/update/urn:li:activity:7311431658987999232
urn:li:activity:7310725937153589249,"A leaked software engineering recruiter selection which I'm 50% sure is real and 100% sure is rage-bait.

The reality is that more than half of all professional software developers have four-year degrees, so the traditional path is still the norm.

I have 3 kids and I hope at least one goes into software. If they do, I'd want to teach them practical skills and maybe encourage them to attend school as well.

It should be zero surprise that NextJS, ReactJS and working with LLMs are in-demand skills.

But what if you didn't go to a top university and don't have an impressive background?

What do you do?

Quit?!

Zubin Pratap and I believe the next wave of coding education will look very different.

It will be highly personalized, tailored to meet the unique needs of each individual and the changing demands in the market.

Building complex software > learning to code
Relationships > resumes
First principles > shiny frameworks
Communication > lone wolf coders

You can check it out here: https://lnkd.in/g7kF5XVa",IMAGE,Brian,Jenney,6369,6369,56,16,0,0,0.011304757418747056,,2025-03-26 11:14:50,https://www.linkedin.com/feed/update/urn:li:activity:7310725937153589249
urn:li:activity:7310101190757818369,"It only took Jeremy Parker 4 short years to go from zero to working at Apple.

But that's not a story that sells.

Too many people want his kind of transformation in 3 months. 

it's possible but highly unlikely.

If you're under 40, you probably have another 3 decades of work ahead of you. I don't think that means you should take the long route, but I also don't think expecting to dramatically change careers in 3 months is realistic either.

This is one of the many reasons why at Parsity we work with mentees for up to a year, focus on the principles of building software and learn the hard stuff (which usually isn't technical at all).

Jeremy shares practical advice on how he learned to code, his love for EmberJS 😉 and how brutal peer reviews helped him grow as a software engineer: https://lnkd.in/gf46B2FD

Who should I interview next?",IMAGE,Brian,Jenney,4998,4998,77,14,0,0,0.018207282913165267,,2025-03-25 00:36:44,https://www.linkedin.com/feed/update/urn:li:activity:7310101190757818369
urn:li:activity:7308839337272430592,"I've seen this pattern in a few codebases. It's super useful but I rarely ever hear it mentioned. 

If you're using ReactJS - you're going to want to add this one to your tool belt.",ARTICLE,Brian,Jenney,5800,4661,42,6,2,0,0.008620689655172414,,2025-03-21 07:05:39,https://www.linkedin.com/feed/update/urn:li:activity:7308839337272430592
urn:li:activity:7308328970100322304,"AI keeps taking all the damn jobs!

And yet, there are more jobs available now than in the last 2 years?
What's this, OpenAI is hiring software engineers?
Oh, Anthropic is too?
Not you Devin, surely you wouldn't.. what? They are also hiring flesh bags?

Look, I'm not saying anything.

I'm just saying.",IMAGE,Brian,Jenney,5044,5044,54,10,2,0,0.013084853291038858,,2025-03-19 20:30:08,https://www.linkedin.com/feed/update/urn:li:activity:7308328970100322304
urn:li:activity:7308132792867979265,"The only safe bet is the risky one.

Stability was always a myth but we’re seeing just how unstable things can get.

- Big tech is nearly as volatile as the startup you never heard of.
- A new framework replaces the one you’re used to.
- AI power players are playing musical chairs.

So what do we do?

- Make big bets and small bets.

𝗕𝗶𝗴 𝗯𝗲𝘁: AI doesn’t go anywhere but expectations fall back to reality. The most boring use cases will be the most popular.

𝗦𝗺𝗮𝗹𝗹 𝗯𝗲𝘁: RAG becomes the most popular use case for enterprise companies to leverage AI. 

Learn  a bit about Vector Databases, embedding and building small apps that use this technology.

Good luck out there.",TEXT,Brian,Jenney,1134,1134,15,3,0,0,0.015873015873015872,,2025-03-19 07:30:36,https://www.linkedin.com/feed/update/urn:li:activity:7308132792867979265
urn:li:activity:7307895601193463808,"No, I don't think the job market sucks.

I just know it has changed and LinkedIn is the only winner in this game.

5 mentees Parsity have landed interviews or jobs in the last 4 weeks. 

Not a single one of those opportunities came from cold-applying or smashing the easy apply button.

So what's working?

- learning in public (I know, I know - so cliche. Yet so effective.)
- reaching out to 2nd and 3rd party connections
- emails to decision makers at companies who have posted openings
- sites like Wellfound and Jobright.ai (for me at least)

I spoke with Yasemin Turğay on her pod about how I'm 𝙖𝙘𝙩𝙪𝙖𝙡𝙡𝙮 seeing people get hired, how I'm using AI as a developer day-to-day and why I think early career developers should proceed with caution: https://lnkd.in/gRefx77h",TEXT,Brian,Jenney,24787,24787,52,6,0,0,0.0023399362569088635,,2025-03-18 15:48:05,https://www.linkedin.com/feed/update/urn:li:activity:7307895601193463808
urn:li:activity:7307537228673531905,"If I read one more article about how AI is taking developer jobs or hear another baby-faced CEO tell us that we’re just 6 months away from some groundbreaking AI that will alter the trajectory of humanity, I’m going to pull out the 3 strands of hair left on my head.

I started using AI at work and let me tell you — this might be the most fun I’ve had in my coding career so far.

Instead of scaring you for clicks, I want to share exactly what I’m reading, building with and learning to understand more about how LLMs work beneath the surface.

𝟯𝗕𝗹𝘂𝗲𝟭𝗕𝗿𝗼𝘄𝗻’𝘀 𝗟𝗶𝗻𝗲𝗮𝗿 𝗔𝗹𝗴𝗲𝗯𝗿𝗮 𝘀𝗲𝗿𝗶𝗲𝘀: https://lnkd.in/g_G-cH-k
𝗟𝗟𝗠 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿’𝘀 𝗛𝗮𝗻𝗱𝗯𝗼𝗼𝗸: https://lnkd.in/g2RaS5cV
𝗕𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝗮 𝗟𝗮𝗿𝗴𝗲 𝗟𝗮𝗻𝗴𝘂𝗮𝗴𝗲 𝗠𝗼𝗱𝗲𝗹 (𝗳𝗿𝗼𝗺 𝘀𝗰𝗿𝗮𝘁𝗰𝗵): https://lnkd.in/g27F4Drn
𝗩𝗲𝗿𝗰𝗲𝗹'𝘀 𝗔𝗜 𝗦𝗗𝗞 for... using AI (duh): https://lnkd.in/gmYJDwnn 
𝗩𝗲𝗰𝘁𝗼𝗿 𝗗𝗮𝘁𝗮𝗯𝗮𝘀𝗲𝘀 (using Pinecone)",TEXT,Brian,Jenney,3097,3097,40,3,1,0,0.014207297384565708,,2025-03-17 16:04:02,https://www.linkedin.com/feed/update/urn:li:activity:7307537228673531905
urn:li:activity:7306351539806183424,"A mentee at Parsity got a job offer yesterday for a little less than he hoped for.

His family told him to ""play it safe.""

Be thankful.
Be patient.
Next time.

I took this same advice for years and left thousands of dollars on the table, totally unaware that negotiating is part of a game that no one told you, you are playing. Once I became a manager, I saw the game from the other side of the table.

Here's what I told him:

Don't over-think it. Explain that you're genuinely excited for this opportunity and can't wait to start.

But...

You're hoping to move closer to [insert number here].

As long as that number is not laughably more than the offer, it's safe to ask.

I have NEVER, ever seen an offer pulled from 𝘁𝗮𝗰𝘁𝗳𝘂𝗹 negotiating.

If he didn't take my advice - I hope you will 🙏.




This weekend, I'll be writing about strange ways I've seen people get hired over the years: https://lnkd.in/g_DTazAE",TEXT,Brian,Jenney,10419,10419,38,8,0,0,0.004415011037527594,,2025-03-14 09:32:32,https://www.linkedin.com/feed/update/urn:li:activity:7306351539806183424
urn:li:activity:7305971908024352770,"Side effects of vibe coding:

- unmaintainable code
- getting roasted on Reddit
- hiring software developers to clean up your mess

Honestly, I think ""vibe coding"" is OK to get a quick prototype.

Considering most projects have well over hundreds of files - I don't see this approach scaling well.",IMAGE,Brian,Jenney,493714,493714,1100,267,52,0,0.002874133607716208,,2025-03-13 11:21:20,https://www.linkedin.com/feed/update/urn:li:activity:7305971908024352770
urn:li:activity:7305794661007167488,"As a fan of Amazon Q - it was pretty surreal to talk to one of the big brains behind it.

I somehow got Srini Iragavarapu, Director of Generative AI Applications at AWS to sit down and talk with me about Amazon Q, what he thinks about the future for coders and how Amazon saved 4500 years on doing upgrades with AI tools (yes, you read that right).

You can listen here: https://lnkd.in/g-GGpsPb",SHARE,Brian,Jenney,1232,1232,10,0,0,0,0.008116883116883116,,2025-03-13 03:12:44,https://www.linkedin.com/feed/update/urn:li:activity:7305794661007167488
urn:li:activity:7305258493807075329,"5 mentees from Parsity just started an internship yesterday.

Now comes the fun stuff:

- using Git... but like for real this time
- learning the engineering culture
- navigating a massive codebase
- merge conflicts
- peer reviews


What advice would you pass on to these g̶u̶i̶n̶e̶a̶ ̶p̶i̶g̶s̶ brave souls?",TEXT,Brian,Jenney,2652,2652,36,14,0,0,0.01885369532428356,,2025-03-11 10:30:13,https://www.linkedin.com/feed/update/urn:li:activity:7305258493807075329
urn:li:activity:7304207670842953729,"Honestly, we have a pretty unfair advantage at Parsity.

Megan Elizabeth Dias is a top career coach. Zubin Pratap is a former lawyer and ex-Googler.

Our mentees are top notch. Nearly all of them are light years ahead of where I was when I was learning to code.

Me - I'm just a shameless self-promoter 😅.",IMAGE,Brian,Jenney,9705,9705,46,2,1,0,0.005048943843379701,,2025-03-09 00:16:14,https://www.linkedin.com/feed/update/urn:li:activity:7304207670842953729
urn:li:activity:7303468073754181632,"I have a confession.

I've copy pasted throughout my entire coding career.

Honestly, it’s how I’ve survived over the years as a developer.

On every team where I worked, I took note of what the smarter developers were doing.

I copied from the right people at some amazing companies and worked with developers who I truly think might be genius.

I stole a little piece of each of these developers to accelerate my own career.

The lessons I learned from each of these characters saved me from mediocrity and might help you as well.",ARTICLE,Brian,Jenney,12923,5184,58,11,0,0,0.005339317495937476,,2025-03-06 09:34:40,https://www.linkedin.com/feed/update/urn:li:activity:7303468073754181632
urn:li:activity:7303134143209426944,"Listening to too many influencers on LinkedIn will get you stuck in a learning loop.

Goes a little something like this:

- Bald tech bro with a blue background tells you about hawt technology 🔥 (agree?)
- You, a little insecure about your own skills, thinks this is THE way to get noticed.
- You buy a course or a book or go down a YouTube rabbit hole.

Repeat this a few times and you will be a sub-par developer in many technologies instead of good at a couple.

Instead:

- Focus on your core skills and identify trends in the local and global market (hint: ReactJS ain’t going away)
- Resist the urge to add more tools to your tool belt early on
- Focus on getting interviews and learning from your failures or successes
- Use a side project to reinforce your current skills and incrementally add new technologies


Lastly, just join parsity.io/inner-circle, a mentorship program for career changers who want to break into tech.",TEXT,Brian,Jenney,3424,3424,29,7,0,0,0.010514018691588784,,2025-03-05 11:27:45,https://www.linkedin.com/feed/update/urn:li:activity:7303134143209426944
urn:li:activity:7302744404501442560,"""𝘔𝘢𝘺𝘣𝘦 𝘐 𝘴𝘩𝘰𝘶𝘭𝘥𝘯’𝘵 𝘩𝘢𝘷𝘦 𝘫𝘰𝘪𝘯𝘦𝘥 𝘵𝘩𝘪𝘴 𝘤𝘰𝘮𝘱𝘢𝘯𝘺,"" I thought.

My salary doubled.

My confidence tanked.

I walked into the shared office space to meet the 3 other people I’d be working with. The CTO handed me a laptop and I sat between him and the CEO to get onboarded. 

That day I wrote my first unit test and got an assignment I could barely complete.

I was confronted with my own limitations and realized that this wasn’t just all in my head.

Looking back, I realize this experience was pivotal to my career. 

I learned from incredible people and got exposed to high quality code.

Also - 𝗜 𝗻𝗲𝘃𝗲𝗿 𝗯𝗲𝗰𝗮𝗺𝗲 𝘁𝗵𝗲 𝟮𝗻𝗱 𝘄𝗼𝗿𝘀𝘁 𝗰𝗼𝗱𝗲𝗿 𝗼𝗻 𝗮 𝘁𝗲𝗮𝗺 𝗼𝗳 𝟯 (#1 baby!). It was not a fun experience but it did force my growth.

So if you’re just starting out, or maybe on a new team and discovering just how little you know…good. 

Embrace the suck, expose your ignorance and be prepared to learn.",TEXT,Brian,Jenney,9801,9801,82,4,1,0,0.008876645240281604,,2025-03-04 09:39:04,https://www.linkedin.com/feed/update/urn:li:activity:7302744404501442560
urn:li:activity:7302366518619553793,"5 things the gym can teach you about coding:

1. 𝗚𝗿𝗼𝘄𝘁𝗵 𝗺𝗶𝗻𝗱𝘀𝗲𝘁 - our body, like our mind is not fixed or as limited as we believe.
2. 𝗛𝘂𝗺𝗶𝗹𝗶𝘁𝘆 - there is always somebody better than you. Learning a new programming language or lifting a larger weight will keep you humble.
3. 𝗗𝗲𝗹𝗮𝘆𝗲𝗱 𝗴𝗿𝗮𝘁𝗶𝗳𝗶𝗰𝗮𝘁𝗶𝗼𝗻 - if you stick with either endeavor you will see long term benefits and fulfillment.
4. 𝗡𝗼 𝗼𝗻𝗲 𝗶𝘀 𝗷𝘂𝗱𝗴𝗶𝗻𝗴 𝘆𝗼𝘂 (as much as you think) - people are focused on themselves, not you. We’re all looking in the actual mirror or the proverbial mirror at ourselves.
5. 𝗔𝗴𝗲 𝗹𝗶𝗺𝗶𝘁𝘀 𝗱𝗼𝗻’𝘁 𝗲𝘅𝗶𝘀𝘁 (despite what you think) - the gym, like the software industry is not controlled by 20 somethings and as long as you’re breathing, its a good time to get in shape or learn a new skill.

Getting in shape at 37 taught me a lot of valuable lessons. I break them down here with a short, easy to follow diet and workout guide: https://lnkd.in/gC7TF8SK

Back to coding content... for now.",TEXT,Brian,Jenney,4718,4718,43,17,2,0,0.01314116150911403,,2025-03-03 08:37:29,https://www.linkedin.com/feed/update/urn:li:activity:7302366518619553793
urn:li:activity:7301352675453874177,"Let me tell you about the 3 worst developers I worked with.

The names have been changed to protect the innocent... except for the first one.",ARTICLE,Brian,Jenney,11082,5947,56,13,0,0,0.006226312939902545,,2025-02-28 13:28:50,https://www.linkedin.com/feed/update/urn:li:activity:7301352675453874177
urn:li:activity:7300897967064895488,"Sometimes I hate the internet.

Putting myself on social media has done way more good than harm but, every once in a while I read a mean comment and think:

“Why am I even on here?”

Here’s some of my favorites:

“𝘛𝘩𝘦 𝘪𝘯𝘧𝘰𝘳𝘮𝘢𝘵𝘪𝘰𝘯 𝘺𝘰𝘶’𝘳𝘦 𝘨𝘪𝘷𝘪𝘯𝘨 𝘵𝘰 𝘺𝘰𝘶𝘯𝘨𝘦𝘳 𝘥𝘦𝘷𝘴 𝘪𝘴 𝘩𝘢𝘳𝘮𝘧𝘶𝘭” (video of me saying to learn HTML/CSS before JS)

“𝘠𝘰𝘶 𝘰𝘣𝘷𝘪𝘰𝘶𝘴𝘭𝘺 𝘥𝘰𝘯’𝘵 𝘬𝘯𝘰𝘸 𝘺𝘰𝘶𝘳 𝘢𝘶𝘥𝘪𝘦𝘯𝘤𝘦” (post about software developers. I am, in fact, a software developer. 10 years and going)

“𝘞𝘪𝘭𝘭 𝘐 𝘨𝘰 𝘣𝘢𝘭𝘥 𝘪𝘧 𝘐 𝘭𝘦𝘢𝘳𝘯 𝘵𝘰 𝘤𝘰𝘥𝘦 𝘭𝘪𝘬𝘦 𝘺𝘰𝘶?” (video of me, being bald, and coding)

Look - I write for 3 reasons:

1. I have a business and I promote it on here: https://lnkd.in/gj-AsQfe 😉
2. I like to write. Been doing it for years - for free.
3. Too many kind strangers have helped me so I write to help you. Hopefully.

Take what I say with a grain of salt.

I’ve worked with well over a hundred developers to help land their first or next role. That doesn’t guarantee that my advice will work for you.

Just know that I’ll never tell you to do anything I haven’t seen work for me or someone I’ve mentored personally.",TEXT,Brian,Jenney,8209,8209,76,27,1,0,0.012669021805335608,,2025-02-27 07:21:59,https://www.linkedin.com/feed/update/urn:li:activity:7300897967064895488
urn:li:activity:7300666248164515840,"Andrew Bekhiet is a brave soul.

A week ago, I asked developers on LinkedIn to let me roast their resume in a video.

https://lnkd.in/g5S55d8H

Let me be clear:

A killer resume is less important in 2025 than in 2020 but if you're playing the game of cold-applying, you might as well give it your all.

In the video below, I go through Andrew's LinkedIn, resume and Github with advice that I'd give to my friends, sons and any of you that care to listen.

Thank you to everyone who sent me their resume. I was honestly overwhelmed with how many responses I got.

As always, I hope you find the advice useful and most importantly, remember that my opinions are opinions. 

Your mileage will vary.

Major shout out to Andrew Bekhiet! You da 🐐",ARTICLE,Brian,Jenney,4560,4560,33,7,0,0,0.008771929824561403,,2025-02-26 16:01:13,https://www.linkedin.com/feed/update/urn:li:activity:7300666248164515840
urn:li:activity:7300552647529353217,"Interview horror stories:

- 𝗪𝗵𝗲𝗻 𝘁𝗵𝗲 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝗲𝗿 𝗮𝘁 𝗚𝗼𝗼𝗴𝗹𝗲 𝗯𝗲𝗿𝗮𝘁𝗲𝗱 𝗺𝗲 for not knowing binary search trees (he also dropped the answer to the whiteboard problem on the floor which he’d written on a piece of paper… seriously)

- 𝗧𝗵𝗮𝘁 𝘁𝗶𝗺𝗲 𝘁𝗵𝗲 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝘁𝘂𝗿𝗻𝗲𝗱 𝗶𝗻𝘁𝗼 𝗮 𝗹𝗲𝘀𝘀𝗼𝗻 𝗿𝗲𝗳𝗲𝗿𝗲𝗻𝘁𝗶𝗮𝗹 𝗲𝗾𝘂𝗮𝗹𝗶𝘁𝘆 in JS because I thought {} === {} (thank you to that guy!)

- 𝗧𝗵𝗲 𝗿𝗲𝗰𝘂𝗿𝘀𝗶𝗼𝗻 𝗽𝗿𝗼𝗯𝗹𝗲𝗺 𝗜 𝗯𝗼𝗺𝗯𝗲𝗱 and asked to end the interview early because I was too embarrassed to keep bumbling around.

- Drinking too much coffee led to a 𝗹𝗲𝗴𝗶𝘁 𝗽𝗮𝗻𝗶𝗰 𝗮𝘁𝘁𝗮𝗰𝗸 during the final round with the VP. I actually asked if we could start our convo over again 😬.

- The time 𝗜 𝗺𝗮𝗱𝗲 𝗮 𝗷𝗼𝗸𝗲 𝗶𝗻 𝗳𝗿𝗼𝗻𝘁 𝗼𝗳 𝘁𝗵𝗲 𝗽𝗮𝗻𝗲𝗹 𝗮𝗻𝗱 𝗻𝗼 𝗼𝗻𝗲 𝗹𝗮𝘂𝗴𝗵𝗲𝗱... This was at the start of an in-person interview.

I’ve failed plenty interviews.

I’ve passed plenty interviews.

The failures are always stickier than the wins (and more interesting). 

The human brain is designed to avoid rejection and failure back when being booted from the tribe meant literal death.

Rejection is actually the first step towards an offer.

Play. Lose. Get better. 

Win.",TEXT,Brian,Jenney,4900,4900,51,6,0,0,0.01163265306122449,,2025-02-26 08:29:48,https://www.linkedin.com/feed/update/urn:li:activity:7300552647529353217
urn:li:activity:7299874362944282624,"5 mentees at Parsity just got hired or started internships.

They’re amazing people and well deserving. And they’re not much different than you.

When I think of all the mentees I’ve seen get hired either in my program or in the bootcamps where I’ve taught over the years, there are few hard and fast rules.

Most did NOT learn in public.

Some were not particularly talented. In fact, a few I thought were un-hireable proved me wrong (no one at Parsity btw).

Some mass-applied.

A few networked their way to the first role.

Many of their interviews were barely technical. 

Some ONLY got LeetCode problems.

Your timeline will be unpredictable. Not even Chat-GPT can predict the future… yet.

Be persistent, practically optimistic that opportunity will present itself, re-calibrate when you see things not working, maintain your skills and your own success will be inevitable.",TEXT,Brian,Jenney,2910,2910,36,3,0,0,0.013402061855670102,,2025-02-24 11:34:33,https://www.linkedin.com/feed/update/urn:li:activity:7299874362944282624
urn:li:activity:7298749539195203586,"My most hated interview trend?

This one really boils my potato:

The take home assignment that's supposed to take 2 hours but actually takes 8. 

They often require a backend, front-end and interfacing with some AWS service and deployed to the web with authentication.

""𝘚𝘩𝘰𝘶𝘭𝘥 𝘰𝘯𝘭𝘺 𝘵𝘢𝘬𝘦 𝘺𝘰𝘶 𝘢 𝘤𝘰𝘶𝘱𝘭𝘦 𝘩𝘰𝘶𝘳𝘴"" 😑

They're largely unavoidable.

Here's some generic tips for dealing with these kinds of challenges:  

- 𝘄𝗿𝗶𝘁𝗲 𝟭 𝗼𝗿 𝟮 𝘂𝘀𝗲𝗳𝘂𝗹 𝘁𝗲𝘀𝘁𝘀 (identify the critical functionality and test it)
- 𝗮𝗱𝗱 𝗱𝗼𝗰𝘂𝗺𝗲𝗻𝘁𝗮𝘁𝗶𝗼𝗻 (what is this, how does it work and how can I run it locally)
- 𝗿𝗲𝗰𝗼𝗿𝗱 𝗮 𝘃𝗶𝗱𝗲𝗼 of you walking through the functionality (a short one... like 2 mins tops)

Few people will do this.

That's the point.

𝙇𝙞𝙣𝙠 𝙩𝙤 𝙢𝙮 𝙛𝙧𝙚𝙚 𝙅𝙎 𝙪𝙣𝙞𝙩 𝙩𝙚𝙨𝙩𝙞𝙣𝙜 𝙢𝙞𝙣𝙞-𝙘𝙤𝙪𝙧𝙨𝙚 𝙞𝙣 𝙘𝙤𝙢𝙢𝙚𝙣𝙩𝙨 👇",TEXT,Brian,Jenney,134555,134555,103,38,0,0,0.0010478986288134963,,2025-02-21 09:04:54,https://www.linkedin.com/feed/update/urn:li:activity:7298749539195203586
urn:li:activity:7298024159853391872,"I once worked at a coding bootcamp where a student didn't know how to open their file explorer.

I wondered how in the hell they were supposed to keep up with the other students who had CS degrees or worked in QA as we powered through the curriculum.

The answer is obvious.

They didn't.

Zubin Pratap and I were discussing the future of coding bootcamps last year and we see the landscape changing. We're both career changers who got into tech in our 30's from very different walks of life.

We're opinionated. We've seen what works and what absolutely will not.

It's why we've partnered to create an individualized coaching and instruction program with a VERY tiny number of people ... for a long time.

You can check it out here: parsity.io/inner-circle

It won't be scalable. It won't be easy. It will be highly effective.",TEXT,Brian,Jenney,6123,6123,37,7,2,0,0.0075126571941858565,,2025-02-19 09:02:30,https://www.linkedin.com/feed/update/urn:li:activity:7298024159853391872
urn:li:activity:7297637564344078336,"A co-worker called me out at a small start up some years ago.

“𝘐𝘵’𝘴 𝘩𝘢𝘳𝘥 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘴𝘪𝘯𝘤𝘦 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘳𝘦𝘢𝘭𝘭𝘺 𝘬𝘯𝘰𝘸 𝘵𝘩𝘦 𝘣𝘢𝘴𝘪𝘤𝘴 𝘰𝘧 𝘑𝘢𝘷𝘢𝘚𝘤𝘳𝘪𝘱𝘵”.

It stung to hear that. He was also right.

I was not junior either. 

I had been using AngularJS for a couple years. (don't judge me) 

𝗧𝗵𝗲 𝗽𝗿𝗼𝗯𝗹𝗲𝗺: I’d become a framework developer. I knew how to use AngularJS but didn’t understand the JS or patterns behind it.

I resolved to suck less at JS.

I went back to the basics including:
 
- promises
- async/await
- 𝚝𝚑𝚒𝚜
- design patterns
- closure

I went through all the Kyle Simpson books. I made janky apps to internalize the information. I gained knowledge and confidence.

Understanding the fundamentals provides a lot of benefits:

- frameworks become less magical
- you start seeing patterns everywhere
- less learning curve when switching between technologies
- libraries become more read-able

Frameworks are great. You need to know them. Just don’t build your house on a shaky foundation.",TEXT,Brian,Jenney,13839,13839,80,13,0,0,0.006720138738348146,,2025-02-18 07:26:18,https://www.linkedin.com/feed/update/urn:li:activity:7297637564344078336
urn:li:activity:7297300848827604992,"There are developers with less talent than you who are getting hired. 

I know the news sucks right now but hear me out:

You are likely not competing for the same roles as the influx of highly paid engineers who just came into the market.

So continue to work on your skills, keep applying to all those non-sexy companies and tech-adjacent roles and make connections online and IRL.

Some will tell you that getting that your first role (or the next one) is a 𝗻𝘂𝗺𝗯𝗲𝗿𝘀 𝗴𝗮𝗺𝗲. Others will say 𝗶𝘁'𝘀 𝗮𝗹𝗹 𝗮𝗯𝗼𝘂𝘁 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻𝘀. 

Neither is wrong. 

Try a combination and do what works for you. 

𝗕𝗲 𝗰𝗼𝗻𝘀𝗶𝘀𝘁𝗲𝗻𝘁 𝗯𝘂𝘁 𝗻𝗼𝘁 𝗳𝗼𝗼𝗹𝗶𝘀𝗵:

- 𝘪𝘧 𝘺𝘰𝘶 𝘴𝘦𝘯𝘥 𝘰𝘶𝘵 100 𝘢𝘱𝘱𝘴 𝘢𝘯𝘥 𝘥𝘰𝘯'𝘵 𝘨𝘦𝘵 𝘢 𝘴𝘪𝘯𝘨𝘭𝘦 𝘳𝘦𝘱𝘭𝘺, then maybe consider looking into your resume or LI profile and asking for advice
- 𝘧𝘢𝘪𝘭𝘦𝘥 𝘦𝘷𝘦𝘳𝘺 𝘤𝘰𝘥𝘪𝘯𝘨 𝘤𝘩𝘢𝘭𝘭𝘦𝘯𝘨𝘦 𝘴𝘱𝘦𝘤𝘵𝘢𝘤𝘶𝘭𝘢𝘳𝘭𝘺? Identify what concepts you need to study
- 𝘤𝘢𝘯'𝘵 𝘨𝘦𝘵 𝘱𝘢𝘴𝘵 𝘵𝘩𝘦 𝘣𝘦𝘩𝘢𝘷𝘪𝘰𝘳𝘢𝘭 𝘴𝘤𝘳𝘦𝘦𝘯 𝘸𝘪𝘵𝘩 𝘳𝘦𝘤𝘳𝘶𝘪𝘵𝘦𝘳𝘴? Try a mock interview with a friend or mentor and see if you're coming off like an unsafe bet (or a creep 😅)

A couple mentees at Parsity landed roles this month. 

The process wasn't fast or easy. 

I've yet to find a ""hack"" to land a role. 𝗗𝗼 𝘁𝗵𝗲 𝗯𝗼𝗿𝗶𝗻𝗴 𝘀𝘁𝘂𝗳𝗳, fail, learn and re-calibrate. Just don't quit.",TEXT,Brian,Jenney,48104,48104,99,14,1,0,0.00236986529186762,,2025-02-17 09:08:19,https://www.linkedin.com/feed/update/urn:li:activity:7297300848827604992
urn:li:activity:7296570613899345920,"Learn how to code and maybe don't write code again?

I spoke with Robert Toth, Ph.D., CEO of Theta Tech, an AI Medical company who has convinced me that the future belongs to programmers who are using English as their primary coding language.",ARTICLE,Brian,Jenney,7879,4959,53,8,6,0,0.008503617210305877,,2025-02-15 08:46:38,https://www.linkedin.com/feed/update/urn:li:activity:7296570613899345920
urn:li:activity:7296286993955594240,"I've read all your resumes.

2 years ago when I was an engineering manager and hiring for some open roles we got flooded with applicants.

Here's what I saw:

• many ""aspiring"", ""learning"" and self-proclaimed ""juniors""
• weather apps... so many weather apps
• empty GitHub profiles
• ""passionate"" developers (should I report this to HR?)
• experience sections with zero mention of coding

Let me be honest. I've made most, if not all, of these mistakes myself.

Luckily most of these mistakes are easy fixes but some are less obvious.

𝗜𝗳 𝘆𝗼𝘂'𝗿𝗲 𝘂𝗽 𝗳𝗼𝗿 𝗶𝘁, 𝗜'𝗱 𝗹𝗼𝘃𝗲 𝘁𝗼 𝗿𝗼𝗮𝘀𝘁 (𝘄𝗶𝘁𝗵 𝗹𝗼𝘃𝗲) 𝘆𝗼𝘂𝗿 𝗿𝗲𝘀𝘂𝗺𝗲 𝗮𝗻𝗱 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 𝗽𝗿𝗼𝗳𝗶𝗹𝗲.

I plan on doing a short video so others can benefit. 

𝗜𝗳 𝘆𝗼𝘂'𝗿𝗲 𝗮𝗻 𝗲𝗮𝗿𝗹𝘆 𝗰𝗮𝗿𝗲𝗲𝗿 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝗗𝗠 𝗺𝗲 𝘄𝗶𝘁𝗵 𝗮 𝗿𝗲𝘀𝘂𝗺𝗲 𝗮𝗻𝗱 𝗜'𝗹𝗹 𝗽𝗶𝗰𝗸 𝟭 𝗼𝗿 𝟮 𝗳𝗿𝗼𝗺 𝘁𝗵𝗲 𝗵𝗲𝗮𝗽!",TEXT,Brian,Jenney,25212,25212,64,25,1,0,0.003569728700618753,,2025-02-14 13:59:37,https://www.linkedin.com/feed/update/urn:li:activity:7296286993955594240
urn:li:activity:7295497292562776065,"Breaking into software as:

𝗔𝗻 𝟭𝟴 𝘆𝗲𝗮𝗿 𝗼𝗹𝗱 - just go to college kid. Most of your peers will have a CS degree. There’s a reason this is called the “traditional” path.

𝗔 𝟮𝟱 𝘆𝗲𝗮𝗿 𝗼𝗹𝗱 𝘄𝗶𝘁𝗵 𝗻𝗼 𝗺𝗼𝗻𝗲𝘆 - you’re probably saddled with debt from college. You also have time on your side. Do local market research and reverse-engineer your tech stack for what to learn.

𝗔 𝟯𝟬 𝘆𝗲𝗮𝗿 𝗼𝗹𝗱 𝘄𝗶𝘁𝗵 𝗸𝗶𝗱𝘀 - you probably want to spend some money on a mentor or a program to significantly shorten the time to ""hired"" and avoid painful guess work while juggling more responsibilities.

𝗔𝗻𝘆𝗼𝗻𝗲 - build something you care about using some relevant tech. Realize no one wants to take a chance on you. Reverse your risk by having an online presence that points to your coding history and maybe work for f̶r̶e̶e̶ validation.",TEXT,Brian,Jenney,16593,16593,81,8,4,0,0.005604773097089134,,2025-02-12 09:41:38,https://www.linkedin.com/feed/update/urn:li:activity:7295497292562776065
urn:li:activity:7294788646862237697,"Here’s the harsh truth about interviews that no one ever really addresses:

Luck is a factor.

You could be absolutely qualified for a position and study all the relevant material.

Get a bad interviewer? All that pre-work might go down the drain.

Maybe your interviewer asks a crazy difficult question or has different standards for what constitutes a reasonable solution? 

Or maybe luck works in your favor.

Maybe you study a particular question that you have memorized and then you get asked that question.

Maybe the interview is not technical at all and just consists of small talk and personality fit.

So if you’ve recently bombed an interview or are beating yourself up because you see others achieving success on a timeline that doesn’t seem possible for you, realize that interviewers are both a game of skill AND chance.

Increase your surface area for luck by continuing to apply, studying and separating signals from noise.",TEXT,Brian,Jenney,3328,3328,41,7,1,0,0.014723557692307692,,2025-02-10 10:45:44,https://www.linkedin.com/feed/update/urn:li:activity:7294788646862237697
urn:li:activity:7293734121204289537,"If your LinkedIn feed is full of:

- AI fear-mongering
- rage bait
- toxic positivity
- smart ass-hats
- ""do you agree""
- 🚀🚀🚀

Here are some people I get a lot of value from:

T͟e͟c͟h͟-͟R͟e͟l͟a͟t͟e͟d͟

Zubin Pratap - friend/business partner/super smart software engineer
Alex Lau - Senior Software Dev helping you avoid common pitfalls in your career
Rahul Pandey - expert meme user and top notch advice for devs
Thomas Winskell - early career developer sharing his learning journey
Brooke Sweedar - duh
Robert Toth, Ph.D. - an expert with AI who got me to finally use Cursor 🙇‍♂️
🌻 Anna Miller - a realistic (and positive) approach to find a tech job
David Roberts - this dude helps developers find jobs and is funny af

N͟o͟n͟ ͟T͟e͟c͟h͟

Dan Koe - contrarian thinking and writing
Justin Welsh - practical audience building advice for entrepreneurs
Aaron Hayslip - serial entrepreneur sharing his journey to multiple M's

Remember this: LinkedIn will do it's best to feed you topics, people and posts it thinks you will like.

If your feed sucks, consider following some better people.",TEXT,Brian,Jenney,19852,19852,119,38,2,0,0.008009268587547854,,2025-02-07 12:55:25,https://www.linkedin.com/feed/update/urn:li:activity:7293734121204289537
urn:li:activity:7292634362993422339,"He created a full stack app that worked pretty well. It even looked nice.

But when I asked how it worked…

Oof.

𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. Too many people fall into the trap of looking at a tutorial, following along with the instructor and typing what they type. 

𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app. 
𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery

It’s an enticing trap and it may even fool someone into hiring you. 

More than 90% of my side projects have never had users or been deployed. I made janky apps and sites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack.

𝗘𝘃𝗲𝗿𝘆 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝗱𝗼𝗲𝘀𝗻’𝘁 𝗻𝗲𝗲𝗱 𝘁𝗼 𝗯𝗲 𝗮 𝗺𝗮𝘀𝘁𝗲𝗿𝗽𝗶𝗲𝗰𝗲. 

Leverage them to learn what you won’t at work or what you would like to work on next.

If you want my step by step guide on creating a solid side project you can grab it in the comments 👇",TEXT,Brian,Jenney,38142,38142,87,19,2,0,0.002831524303916942,,2025-02-04 12:05:22,https://www.linkedin.com/feed/update/urn:li:activity:7292634362993422339
urn:li:activity:7292228098740101121,"Last night, I was working with a mentee at Parsity who just started an internship at a start up.

“𝘛𝘩𝘦𝘳𝘦 𝘢𝘳𝘦 𝘴𝘰 𝘮𝘢𝘯𝘺 𝘧𝘪𝘭𝘦𝘴! 𝘏𝘰𝘸 𝘤𝘢𝘯 𝘐 𝘧𝘢𝘮𝘪𝘭𝘪𝘢𝘳𝘪𝘻𝘦 𝘮𝘺𝘴𝘦𝘭𝘧 𝘸𝘪𝘵𝘩 𝘵𝘩𝘪𝘴 𝘤𝘰𝘥𝘦𝘣𝘢𝘴𝘦 𝘣𝘦𝘧𝘰𝘳𝘦 𝘐 𝘴𝘵𝘢𝘳𝘵 𝘸𝘰𝘳𝘬𝘪𝘯𝘨?”

Pro-tip: Don’t.

Here’s how I approach it:

𝗦𝘁𝗲𝗽 𝟭: 𝗚𝗲𝘁 𝗶𝘁 𝗿𝘂𝗻𝗻𝗶𝗻𝗴 𝗹𝗼𝗰𝗮𝗹𝗹𝘆 - duh 🙄

𝗦𝘁𝗲𝗽 𝟮: 𝗙𝗶𝗻𝗱 𝗮 𝗳𝗼𝗼𝘁𝗵𝗼𝗹𝗱 - identify a core feature/component and try to access it. This could be as simple as navigating to a main page in a web app or a login service in a backend app.

𝗦𝘁𝗲𝗽 𝟯: 𝗕𝗿𝗲𝗮𝗸 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 - update that core component from the previous step by adding a line of code or removing a line. What breaks? Why?

𝗦𝘁𝗲𝗽 𝟰: 𝗙𝗶𝘅 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 - extend the component by adding more data to the API response or changing the color of a button.

𝗦𝘁𝗲𝗽 𝟱: 𝗪𝗿𝗶𝘁𝗲 𝗮 𝘁𝗲𝘀𝘁 - this can be time consuming but will force you to understand the feature you're poking at. At least read a few of the tests to see what the intention of the code is.

Lastly - realize that it can take months to feel comfortable in a new codebase. 

𝗙𝗼𝗰𝘂𝘀 𝗼𝗻 𝘁𝗵𝗲 𝘁𝗮𝘀𝗸 𝗶𝗻 𝗳𝗿𝗼𝗻𝘁 𝗼𝗳 𝘆𝗼𝘂 𝗮𝗻𝗱 𝗯𝗲 𝗰𝘂𝗿𝗶𝗼𝘂𝘀. Ask why things work the way they do and repeat steps 1 - 5 as needed.",TEXT,Brian,Jenney,3862,3862,57,20,0,0,0.01993785603314345,,2025-02-03 09:11:01,https://www.linkedin.com/feed/update/urn:li:activity:7292228098740101121
urn:li:activity:7291556388982468608,"Likes ain't cash or job offers.

This is what so many people get wrong about learning in public. 

I break down 3 reasons you should learn in public, especially if you're trying to break into software and why likes might be the worst metric for you to look at.",ARTICLE,Brian,Jenney,9330,4336,48,14,1,0,0.006752411575562701,,2025-02-01 12:41:53,https://www.linkedin.com/feed/update/urn:li:activity:7291556388982468608
urn:li:activity:7291129678256328704,"Hiring is broken and the only winner is LinkedIn.

On one side we have candidates spamming job postings with AI.

On the other, we have companies filtering out candidates with AI.

The result:

- 7 round interviews because trust is at an all time low
- Interviews that might not be better than flipping a coin (seriously)
- Candidate match-making hell

So what do we do?

The opposite of what most people are doing:

- Write online to gain trust and credibility and become discoverable
- Traverse your network using BFS to see who’s hiring
- Go to main street before wall street - small businesses are the backbone of the US economy and many aren’t on LinkedIn",TEXT,Brian,Jenney,13131,13131,72,8,1,0,0.00616860863605209,,2025-01-31 08:26:17,https://www.linkedin.com/feed/update/urn:li:activity:7291129678256328704
urn:li:activity:7290048599890006016,"Here is what I learned after spending 12 months sitting between the 2 best developers in my company:

- Clean up the code even if you didn’t write it.
- Code isn’t magic. Figure out why things work the way they do.
- It’s ok to say “𝘐 𝘥𝘰𝘯’𝘵 𝘬𝘯𝘰𝘸…. 𝙮𝙚𝙩”.
- Running towards critical issues is good for your career and your knowledge.
- Deleting lots of code > adding lots of code.

You know that cliche phrase “𝘺𝘰𝘶 𝘢𝘳𝘦 𝘵𝘩𝘦 𝘢𝘷𝘦𝘳𝘢𝘨𝘦 𝘰𝘧 𝘵𝘩𝘦 5 𝘱𝘦𝘰𝘱𝘭𝘦 𝘺𝘰𝘶 𝘩𝘢𝘯𝘨 𝘢𝘳𝘰𝘶𝘯𝘥 𝘵𝘩𝘦 𝘮𝘰𝘴𝘵”?

Same thing can be applied to coding.",TEXT,Brian,Jenney,12805,12805,124,16,2,0,0.01108941819601718,,2025-01-28 08:50:28,https://www.linkedin.com/feed/update/urn:li:activity:7290048599890006016
urn:li:activity:7289665189572919296,"At first people laughed.

Now, I'm more convinced this is true.

As ChatGPT keeps eating search engines, expectations will change.
 
Users increasingly want intuitive ways to navigate a site and it's data.

𝗣𝗿𝗲𝗱𝗶𝗰𝘁𝗶𝗼𝗻: even more pressure falls on full-stack and FE devs to integrate AI into existing products.

Things are moving fast and I think they will get even faster. 

- At work I'm using Typescript, Vercel and NextJS to build an AI product. 

- After work I'm learning the basics of linear algebra to understand vectors and matrices.

I know it's fun to freak out about AI coming for your job. I think it's even more fun to learn the basics and build cool stuff.",IMAGE,Brian,Jenney,20514,20514,158,17,6,0,0.008823242663546846,,2025-01-27 07:26:56,https://www.linkedin.com/feed/update/urn:li:activity:7289665189572919296
urn:li:activity:7288656541124108288,"Worst way to spend your weekend?

Completing a take home coding project that was supposed to take 4 hours but really takes 2 full days.

I know some people like this interview format.

I am not one of them.

If you MUST participate in these kinds of interviews there are 2 ways you can stand out:

1. Write documentation
2. Write some unit tests

You don’t know how to write unit tests? Let’s fix that.

Grab this repo and make it get to 100% coverage to learn the basics of unit testing 

.... it's in comments ;)",TEXT,Brian,Jenney,27999,27999,105,33,2,0,0.005000178577806351,,2025-01-24 12:38:56,https://www.linkedin.com/feed/update/urn:li:activity:7288656541124108288
urn:li:activity:7287506406377693184,"I didn’t take my own advice and nearly bombed the interview.

I’m such a hypocrite 😬.

I passed the technical portion of the interview and was feeling pretty damn good.

Then I got hit with a question I’ve told you to prepare for 100 times over.

“𝘛𝘦𝘭𝘭 𝘮𝘦 𝘢𝘣𝘰𝘶𝘵 𝘵𝘩𝘦 𝘮𝘰𝘴𝘵 𝘵𝘦𝘤𝘩𝘯𝘪𝘤𝘢𝘭𝘭𝘺 𝘤𝘰𝘮𝘱𝘭𝘦𝘹 𝘱𝘳𝘰𝘫𝘦𝘤𝘵 𝘺𝘰𝘶’𝘷𝘦 𝘸𝘰𝘳𝘬𝘦𝘥 𝘰𝘯 𝘳𝘦𝘤𝘦𝘯𝘵𝘭𝘺”

It was like my brain stopped working.

Should I talk about something front-end? Back-end? Something I architected? I just froze and went with a story about a component library, which honestly, wasn’t super interesting.

After this experience I literally wrote down a group of stories I can use for any upcoming interview.

- 1 story for leading team against a deadline.
- 1 story about a difficult bug.
- 1 story about a complex feature or project.
- 1 story about failure and what I learned.

I’m curious, what's a good, non-tech interview question have you been asked over the years?",TEXT,Brian,Jenney,66637,66637,63,18,0,0,0.0012155409157074898,,2025-01-21 08:28:42,https://www.linkedin.com/feed/update/urn:li:activity:7287506406377693184
urn:li:activity:7287155546833534976,"One thing I'm genuinely curious about when it comes to the conversation about AI replacing junior and mid-level devs - who will replace the senior devs?

More AI?

And who will maintain the AI? Fix critical issues? Review it's code?

More AI?

🤔

Why are we scaring off our talent pipeline with speculation and hype?",TEXT,Brian,Jenney,2985,2985,32,9,1,0,0.01407035175879397,,2025-01-20 09:14:31,https://www.linkedin.com/feed/update/urn:li:activity:7287155546833534976
urn:li:activity:7287153228956286976,"I’ve spoken with about 700 developers in the last 12 months. I won’t be doing many more 15 minute chats in the foreseeable future.

But the truth is, most beginners ask the same 3 questions:

𝘞𝘩𝘢𝘵’𝘴 𝘸𝘳𝘰𝘯𝘨 𝘸𝘪𝘵𝘩 𝘮𝘺 𝘳𝘦𝘴𝘶𝘮𝘦?
𝘞𝘩𝘢𝘵 𝘴𝘩𝘰𝘶𝘭𝘥 𝘐 𝘣𝘶𝘪𝘭𝘥 𝘧𝘰𝘳 𝘢 𝘴𝘪𝘥𝘦 𝘱𝘳𝘰𝘫𝘦𝘤𝘵?
𝘏𝘰𝘸 𝘥𝘰 𝘐 𝘨𝘦𝘵 𝘩𝘪𝘳𝘦𝘥?

So I want to answer them for free:

𝗬𝗼𝘂𝗿 𝗿𝗲𝘀𝘂𝗺𝗲 𝗶𝘀 𝗽𝗿𝗼𝗯𝗮𝗯𝗹𝘆 𝗮𝘃𝗲𝗿𝗮𝗴𝗲 𝗮𝗻𝗱 𝘀𝗼𝘂𝗻𝗱𝘀 𝗹𝗶𝗸𝗲 𝗺𝗮𝗻𝘆 𝗼𝘁𝗵𝗲𝗿𝘀. Remove any mention of junior or aspiring and use this framework: did [x] using [y] which led to [z]. Think from the recruiter’s perspective. Do you sound like a risk to hire? Make yourself less risky and don’t tell them everything. Why do they need to know your last job was at a french fry shop? Lead with your developer experience or technical projects.

𝗦𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘀𝗵𝗼𝘂𝗹𝗱 𝘁𝗲𝗮𝗰𝗵 𝘆𝗼𝘂 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗻𝗲𝘄 𝗼𝗿 𝗸𝗲𝗲𝗽 𝘆𝗼𝘂𝗿 𝘀𝗸𝗶𝗹𝗹𝘀 𝘀𝗵𝗮𝗿𝗽 𝗶𝗳 𝘆𝗼𝘂’𝗿𝗲 𝗻𝗼𝘁 𝘄𝗼𝗿𝗸𝗶𝗻𝗴. Really, they should be enjoyable. They’re an alternative to grinding away at toy problems and expose you to challenges which you can give yourself. Want to understand how to implement role-based authentication or get your hands dirty with serverless? Build it out. Also follow John Crickett, he has a ton of cool projects to make.

𝗡𝗼𝘄 𝗵𝗲𝗿𝗲’𝘀 𝘁𝗵𝗲 𝗵𝗮𝗿𝗱 𝗽𝗮𝗿𝘁 𝗮𝗻𝗱 𝘁𝗵𝗲 𝘁𝗿𝘂𝘁𝗵 𝗻𝗼 𝗼𝗻𝗲 𝘄𝗮𝗻𝘁𝘀 𝘁𝗼 𝗵𝗲𝗮𝗿: getting hired is a game of skill and luck. 

If there is one trait that I see in successful Parsity grads, it is their consistency. They just didn’t stop. They outlasted their fears, insecurities and the fear mongers. They changed what didn’t work and picked a strategy. Mass apply or network or do both. Then don’t stop.",TEXT,Brian,Jenney,100636,100636,171,14,7,0,0.0019078659724154378,,2025-01-20 09:05:18,https://www.linkedin.com/feed/update/urn:li:activity:7287153228956286976
urn:li:activity:7286059819348738050,"How old is too old to learn to code and change careers?

According to the internet - it’s 40.

Imagine if Dicky Kitchen Jr had listened to those geniuses.

I met Dicky a couple years ago through Instagram. 

He had good, practical content and was building cool sh*t. His journey from working in physical therapy to software engineer wasn’t short or straightforward.

But it did work.

If you’re serious about making a career switch into software then Dicky has a path you might find useful. 𝗟𝗶𝗻𝗸 𝘁𝗼 𝗼𝘂𝗿 𝗽𝗼𝗱 𝗶𝗻 𝗰𝗼𝗺𝗺𝗲𝗻𝘁𝘀 (cuz LinkedIn hates links 😅)",TEXT,Brian,Jenney,9714,9714,65,22,1,0,0.009059089973234506,,2025-01-17 08:40:29,https://www.linkedin.com/feed/update/urn:li:activity:7286059819348738050
urn:li:activity:7285679838349156352,"❌ Get a job you love and you’ll never work a day in your life.

Look, I love to write code and mentor people. It's why I work as a developer and teach others at Parsity.

But there’s so much more to software development than writing code and pair-programming.

Some of the non-sexy stuff you’ll do as a developer:

- meetings
- meetings to prepare for other meetings
- on-call shifts
- writing documentation
- debugging code you never touched
- maintaining legacy code
- reviewing pull requests with > 1000 lines changed
- researching poorly documented 3rd party APIs
- translating technical limitations to non-coders

Coding is my hobby and profession. 

It’s a job and I 𝘁𝗿𝘆 not to wrap too much of my identity into it. It can be incredibly fulfilling and it can also be a chore.",TEXT,Brian,Jenney,5361,5361,63,12,0,0,0.013989927252378288,,2025-01-16 07:30:34,https://www.linkedin.com/feed/update/urn:li:activity:7285679838349156352
urn:li:activity:7284615671479492608,"The dirty secret about coding interviews:

No one knows what the hell they’re doing.

We all think we have THE way to find the right candidates.

I’ve spoken with many of you who are devastated after failing an interview. You believe this is a signal that you are not talented and lack fundamental skills.

It may be true.

It also could be that your interviewer is not equipped to determine your ability.

Perhaps they are biased from their own experience and ONLY looking for solutions which they are familiar with and understand.

Maybe they don’t know closures very well or how to explain promises to a 5 year old either.

Maybe they’re just having a bad day… 🥲.

There is less formal training for interviews than you might imagine. Especially at non-tech companies and startups.

Lord knows I’ve failed more than my fair share of interviews. It hurts. I also know it’s a winnable game. Learn from the loss and keep playing.",TEXT,Brian,Jenney,38048,38048,114,20,1,0,0.0035481497056349875,,2025-01-13 09:01:57,https://www.linkedin.com/feed/update/urn:li:activity:7284615671479492608
urn:li:activity:7283549792947916801,"Solving problems is tough. Solving them without a strategy is tougher.

The pattern I share in this article isn't a silver bullet but it's how I approach most coding problems from interviews to my daily work.

Hope you find it useful.",ARTICLE,Brian,Jenney,10851,5416,79,11,1,0,0.008386323841120634,,2025-01-10 10:26:32,https://www.linkedin.com/feed/update/urn:li:activity:7283549792947916801
urn:li:activity:7283218924760932352,"Well this is it, I’m getting fired.

The engineering manager and I were sitting in a small room, frantically trying to fix a program I had released to production that was breaking spectacularly.

The code was on a large monitor for us investigate.

“What is this code supposed to do?” he asked.

I froze.

That code had been lifted directly from Stack Overflow and I could not explain it.

“If you don’t know what this is supposed to do, it shouldn’t be in this program” he said.

Plot twist: I didn’t get fired that day though I wouldn’t have blamed him.

I can still feel the embarrassment 9 years later.

Don’t make the same mistake I did.

With Chat-Gippity, it’s even easier to become a copy-paste developer than it used to be.

I’m not saying you should NEVER lift code from another source but for the love of Bob, at least understand what it does so you can avoid my fate.",TEXT,Brian,Jenney,62247,62247,401,31,7,0,0.007052548717207255,,2025-01-09 12:31:47,https://www.linkedin.com/feed/update/urn:li:activity:7283218924760932352
urn:li:activity:7282444807354904576,"A look back at software engineering in 2024 (according to social media):

- First, Chat Gippity took your job.
- Next, Devin AI made programming obsolete.
- Applications to McDonald's skyrocketed. Mostly CS grads.
- All hiring stopped in software. A total of 0 positions opened up.


Reality was more boring:

- Hiring creeped up.
- The Devin team hired devs made of flesh.
- Too many JS libraries were produced.
- 100% of companies talked about AI. Just 6.1% of businesses are using AI to produce their products or services (according to Goldman Sachs).

The big takeaway here:

Stop planning your career based on click bait.",TEXT,Brian,Jenney,32388,32388,243,12,4,0,0.00799678893417315,,2025-01-07 09:15:43,https://www.linkedin.com/feed/update/urn:li:activity:7282444807354904576
urn:li:activity:7282059903991508994,"Well, this is awkward.

As some of you know, I own an online coding school, Parsity.

I firmly believe that mentorship is a tried and true way to get into tech. It's a path I used myself.

I also know it's not the ONLY path.

Recently I sat down with 2 self taught developers, Wilfredo Diaz and Vanessa Vun who break down how they made a successful transition into tech without a CS degree or bootcamp.

You can check it out here:",ARTICLE,Brian,Jenney,3707,3707,39,1,2,0,0.01132991637442676,,2025-01-06 07:46:15,https://www.linkedin.com/feed/update/urn:li:activity:7282059903991508994
urn:li:activity:7281022611940089856,I lured Alex Lau with a box of donuts into coming on my podcast. What are some spicy questions I should ask him about coding careers in 2025?,SHARE,Brian,Jenney,1073,1073,13,1,0,0,0.0130475302889096,,2025-01-03 11:04:25,https://www.linkedin.com/feed/update/urn:li:activity:7281022611940089856
urn:li:activity:7280984712091766784,"How does it feel to be the worst developer on a team?

I had the unpleasant experience of holding this title when I worked at a small startup.

I had more technical growth in the short time I was there than at any other company I’ve worked since.

You’ve probably heard the advice “𝘐𝘧 𝘺𝘰𝘶’𝘳𝘦 𝘵𝘩𝘦 𝘴𝘮𝘢𝘳𝘵𝘦𝘴𝘵 𝘱𝘦𝘳𝘴𝘰𝘯 𝘪𝘯 𝘵𝘩𝘦 𝘳𝘰𝘰𝘮, 𝘪𝘵’𝘴 𝘵𝘪𝘮𝘦 𝘵𝘰 𝘭𝘦𝘢𝘷𝘦 𝘵𝘩𝘦 𝘳𝘰𝘰𝘮.”

Easier said than done.

The guilt and anxiety I felt on a daily basis was difficult to deal with. I was confronted with my own limitations and the realization that 𝘁𝗵𝗶𝘀 𝘄𝗮𝘀𝗻’𝘁 𝗷𝘂𝘀𝘁 𝗮𝗹𝗹 𝗶𝗻 𝗺𝘆 𝗵𝗲𝗮𝗱.

I could barely keep up with the tasks I was assigned and relied on lots of pairing sessions to get my work done.

I could either quit or at least attempt to keep up with the other devs and contribute to the best of my ability.

I made a resolution to suck less.

- I asked the smarty-pants devs what books they suggested I read
- I audited my Javascript knowledge and wrote out what I knew I had to learn to contribute to discussions
- enrolled in a course to learn DSA and comp sci fundamentals
- someone made a joke about Djikstra… who the hell is that? I would find out

I never became the 2nd worst developer at this company, but I grew my technical skills, confidence and threshold for failure.

As uncomfortable as it was, I know see just how pivotal this experience was.

So if you’re just starting out, or maybe on a new team and discovering just how little you know…good. Embrace the suck, expose your ignorance and be prepared to learn.",TEXT,Brian,Jenney,171802,171802,343,24,3,0,0.002153641983213234,,2025-01-03 08:33:49,https://www.linkedin.com/feed/update/urn:li:activity:7280984712091766784
urn:li:activity:7280654922797211648,"Most developers would benefit more from reading “How to Win Friends and Influence People” than “Cracking the Coding Interview”.

Here's the thing: 

Technical skills can get your foot in the door.

Soft skills open up the rest of the house.

Knowing how to navigate human dynamics, to empathize and connect, articulate your thoughts and influence others – these are the tools that build careers better than learning another programming language.

Also - read The Phoenix Project or Alex Lau's ""Keep Calm and Code On"" if you’re looking for some non-dry coding knowledge that you didn’t get in college 😉.",TEXT,Brian,Jenney,9959,9959,82,17,3,0,0.010241992167888342,,2025-01-02 10:43:21,https://www.linkedin.com/feed/update/urn:li:activity:7280654922797211648
urn:li:activity:7279934062356508673,"I don't like that this is true but it is:

𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝗶𝗻𝗴 𝗶𝘀 𝘁𝗵𝗲 𝗵𝗶𝗴𝗵𝗲𝘀𝘁 𝗽𝗮𝘆𝗶𝗻𝗴 𝘀𝗸𝗶𝗹𝗹.

When I realized this, I really sucked at interviews.

- my nerves would get to me (I had a literal panic attack during 1 interview)
- I thought LeetCode was the solution to nailing the coding challenge
- my solutions didn't follow any pattern or structure

As a mostly self-taught developer, I didn't know what I didn't know. I went on to spend thousands of dollars and hundreds of hours understanding how to beat the interview game.

Here's what was most effective:

- practicing with a human
- learning the patterns which make up the majority of coding interview problems
- filming myself working through problems

Good luck playing the game in 2025!",UNKNOWN,Brian,Jenney,8445,8445,81,21,3,0,0.012433392539964476,,2024-12-31 10:58:55,https://www.linkedin.com/feed/update/urn:li:activity:7279934062356508673
urn:li:activity:7279548506367737856,"10 years of workout and diet advice in 2 minutes:

- shave your body hair to look 5 pounds thinner
- forget fad diets - track your calories
- buy a small scale and weigh your food - that cup of rice was never a cup amigo
- lift until failure instead of counting reps
- there are 3500 calories in a pound
- shirtless pics reflect your progress better than the number on the scale
- weigh yourself every morning - never at night
- you didn’t really gain 5 pounds - that’s water weight
- if you’re a dude - train your legs
- if you’re not a dude - train something besides your legs
- it’s easier to adjust your calories than add cardio
- everyone in the gym is too busy looking at themselves to care about you
- always do incline bench
- sleep, nutrition and walking are your secret weapons
- you can’t beat genetics - your calorie maintenance and muscle growth potential will be different than your friend’s
- wait 2 weeks before adding or decreasing calories because your weight fluctuates
- listen to your body - don’t beat it up and don’t be too easy on it
- it’s not a “diet” - it’s just a different way to eat
- looking good shirtless is over rated - you’re almost always wearing a shirt
- if it’s not fun, you’re not doing it right",TEXT,Brian,Jenney,9328,9328,70,18,1,0,0.009541166380789022,,2024-12-30 09:26:51,https://www.linkedin.com/feed/update/urn:li:activity:7279548506367737856
urn:li:activity:7278478121337561088,"I’ve been writing online for a long time. 

I’m making more video content going forward and I’m not looking to make money from YT.

What the hell kind of content do early career coders need to watch?

What’s most useful?

What would’ve helped you at step 0?",TEXT,Brian,Jenney,2964,2964,20,25,0,0,0.015182186234817813,,2024-12-27 10:33:31,https://www.linkedin.com/feed/update/urn:li:activity:7278478121337561088
urn:li:activity:7277364583026081792,"I once worked at a coding bootcamp where a student didn't know how to open their file explorer.

I wondered how in the hell they were supposed to keep up with the other students who had CS degrees or worked in QA as we powered through the curriculum.

The answer is obvious: they didn't.

Zubin Pratap and I were discussing the future of coding bootcamps recently. We're both career changers who got into tech in our 30's from very different walks of life.

We're opinionated. We've seen what works and what absolutely will not.

It's why we're partnering to create an individualized coaching and instruction program with a VERY tiny numbers of people ... for a long time.

It won't be scalable. It won't be easy. It will be highly effective.",TEXT,Brian,Jenney,175025,175025,145,51,2,0,0.001131266961862591,,2024-12-24 08:48:43,https://www.linkedin.com/feed/update/urn:li:activity:7277364583026081792
urn:li:activity:7275551421146558464,"10 years of coding advice in 60 seconds:

- use a debugger
- you can’t cheat time in the saddle - get used to making mistakes
- interviewing is the highest paying skill
- it’s easier to switch jobs than get a large raise
- do stuff that makes you nervous
- build something outside work to keep your skills relevant
- other people in the meeting are afraid to ask the dumb question you are afraid to ask
- write tests
- keep a brag document or you won’t remember what you did all year
- leave the code better than you found it
- never make people feel dumb - it’s bad for your career and your soul
- if arguing about coding languages online worked - no one would be using JavaScript
- marketing, design, sales, product and legal are just as important as your tech team - in many cases - much more important
- understand if your team is a cost or profit center before the market turns
- the closer you are to the data, the harder you will be to replace
- there’s a lot of smart assholes out there - don’t be one
- a walk outside solved more bugs than staring at a screen
- be careful who’s advice you take 😉",TEXT,Brian,Jenney,589279,589279,5110,369,356,0,0.009901931003819923,,2024-12-19 08:43:51,https://www.linkedin.com/feed/update/urn:li:activity:7275551421146558464
urn:li:activity:7274808667479191552,"Ok maybe I was wrong about unit testing.

I took a team from 0 - 40% test coverage when I first joined a few years ago.

It was an arbitrary threshold.

The most recent project I'm working on has no threshold or many tests but it’s objectively more complex.

It’s also more stable than the previous project with higher coverage.

I’m not saying tests have no place. I still write them but only when:

- I cannot easily reproduce the functionality I want to test
- I am refactoring something and I want to make sure it didn’t break
- The code is on a critical path and I want to make sure I haven’t missed an edge case

I know some of you hate tests or have never written one.

What have tests ever done to you?

Install Jest or Vitest or Playwright and write your first test. It won’t hurt too much.

[𝘷𝘪𝘥𝘦𝘰 𝘪𝘯 𝘤𝘰𝘮𝘮𝘦𝘯𝘵𝘴 𝘵𝘰 𝘭𝘦𝘢𝘳𝘯 𝘩𝘰𝘸 𝘵𝘰 𝘸𝘳𝘪𝘵𝘦 𝘺𝘰𝘶𝘳 𝘧𝘪𝘳𝘴𝘵 𝘵𝘦𝘴𝘵]",TEXT,Brian,Jenney,29105,29105,61,32,1,0,0.003229685621027315,,2024-12-17 07:32:25,https://www.linkedin.com/feed/update/urn:li:activity:7274808667479191552
urn:li:activity:7274441682450812928,"99% of the interview advice you read ONLY applies to the top 1% of tech companies.

A few mentees at Parsity have interviews coming up. None of them involve traversing a tree or linked lists.

𝗛𝗲𝗿𝗲’𝘀 𝟰 𝘁𝘆𝗽𝗲𝘀 𝗼𝗳 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗜 𝘀𝗲𝗲 𝗼𝘃𝗲𝗿-𝗿𝗲𝗽𝗿𝗲𝘀𝗲𝗻𝘁𝗲𝗱 𝗳𝗼𝗿 𝘄𝗲𝗯 𝗱𝗲𝘃 𝗿𝗼𝗹𝗲𝘀:

- build a React component that fetches data
- JS trivia including closure, 𝚕𝚎𝚝 vs 𝚌𝚘𝚗𝚜𝚝, event loop and 𝚝𝚑𝚒𝚜
- take home assignment that’s supposed to take 2 hours but is really a full day 😅 (𝘩𝘪𝘯𝘵: 𝘸𝘳𝘪𝘵𝘦 𝘢 𝘶𝘯𝘪𝘵 𝘵𝘦𝘴𝘵 𝘢𝘯𝘥 𝘢𝘥𝘥 𝘥𝘰𝘤𝘴)
- coding challenges using 2 pointers, sliding window and array manipulation

I’ve met developers who accepted offers after no technical screening at all!

This has happened to me twice.

While you’re pounding LeetCode, don’t forget to have some answers in your back pocket for questions like “tell me about yourself?” or “why do you want to work here?”

Good luck out there.",TEXT,Brian,Jenney,32876,32876,117,17,4,0,0.004197590947803869,,2024-12-16 07:14:09,https://www.linkedin.com/feed/update/urn:li:activity:7274441682450812928
urn:li:activity:7273795622766292993,Not gonna lie - this tweet hit a little close to home 😅,VIDEO,Brian,Jenney,19946,7619,175,24,1,0,0.010027073097362879,,2024-12-14 12:26:57,https://www.linkedin.com/feed/update/urn:li:activity:7273795622766292993
urn:li:activity:7273379583805034496,"The best interview prep is free, apparently.

A couple nights ago, some mentees at Parsity and I tackled day 1 of Advent of Code. 

AoC is 31 days of coding challenges based on the trials and tribulations of a group of elves.

These little knuckle heads get themselves in all sorts of issues that can only be solved with recursion, sliding windows, graphs and a dash of Chat-Gippity (just a sprinkle).

What makes AoC unique and more similar to an interview setting is that you have to sift through a lot of information to get to the meat of the problem.

Each year I start off strong and taper off around day 10.

If you're on the AoC grind - what's the most fun problem you've seen so far?",IMAGE,Brian,Jenney,4817,4817,42,2,2,0,0.00954951214448827,,2024-12-13 08:53:45,https://www.linkedin.com/feed/update/urn:li:activity:7273379583805034496
urn:li:activity:7266496348646981632,"There is a valuable skill that will set you apart from most developers. 

It will go from a nice-to-have to a requirement if you want to move into leadership: 

𝗣𝘂𝗯𝗹𝗶𝗰 𝘀𝗽𝗲𝗮𝗸𝗶𝗻𝗴. 

If you’re like me, maybe you think you can just hide in your code hole and never speak. 

I tried this method for a few years and it sorta worked. 

I didn’t get fired. 

I also couldn’t get promoted or make much of an impact.

Geoffrey Huck knows the struggle. He went from shy nerd to prolific public speaker who now coaches CEOs and software developers on the art of communication. 

If you want to learn some practical ways to increase your visibility and improve your communication skills then I hope you'll join us for this free event 😉.",VIDEO,Brian,Jenney,2540,614,41,30,6,0,0.03031496062992126,,2024-12-12 16:05:10,https://www.linkedin.com/feed/update/urn:li:activity:7266496348646981632
urn:li:activity:7273015070853345281,"Nearly a decade ago I started my first day as a developer.

The night before the first day, I was barely able to sleep.

- Would I be found out as a fake developer and fired immediately?
- Would they give me a task I couldn’t figure out?
- How long before they realized they made an error in their hiring process?

Well, I never got “found out” and took on more than a few tasks I couldn’t figure out… yet.

If you recently started a new position or are about to, you may be feeling a lot of the same emotions.

Here are some ways I get over my anxiety:

- make a 30/60/90 day plan which usually includes delivering a small feature
- immediately explore the codebase and identify areas I just don’t understand
- ask a bunch of questions while I’m still new enough that no one will judge me
- realize I’m here to do more learning than coding in my first month

So if you just got hired, congrats! I also know it can be just as stressful as the interview process. Perhaps moreso.

What’s your tips for people just starting a new dev position?",ARTICLE,Brian,Jenney,3963,3963,44,6,0,0,0.012616704516780217,,2024-12-12 08:45:18,https://www.linkedin.com/feed/update/urn:li:activity:7273015070853345281
urn:li:activity:7272623260884692992,"Maybe you think you can just hide in your code hole and never speak.

I tried this method for a few years and it sorta worked.

- I didn’t get fired.
- I also couldn’t get promoted or make much of an impact.

As an engineering manager, my job was a lot of coding but it also involved a lot of speaking. To get over my fear I did a few things:

- Write down questions to ask during meetings
- Volunteer for a lunch and learn
- Explain my code over a video using Loom (I made so many videos I’ve never shared)
- Make a commitment to be the first to break the silence in a meeting - even with a dumb question (see #1)

You’re probably your worst critic. We’re all much too wrapped up in ourselves to remember the dumb thing you said in that meeting last Tuesday.

Tomorrow, I'll be speaking with Geoffrey Huck about how shy developers can overcome their fear of speaking and practical ways to be an effective communicator.",SHARE,Brian,Jenney,1896,1896,25,4,0,0,0.01529535864978903,,2024-12-11 06:48:24,https://www.linkedin.com/feed/update/urn:li:activity:7272623260884692992
urn:li:activity:7272297762203791360,"If I was a recent bootcamp grad, frustrated with the job market or just wanting to take a faster path towards that first role, here’s what I’d do:

1. Go back in time, enroll in Parsity and take advantage of our amazing career services.
2. Enroll in David Roberts VIP course for job seekers.

2 is probably easier than 1... for now.

I’m not sponsored by David, but I find myself recommending him at least once a week to people who call me and want advice on landing their first role.",TEXT,Brian,Jenney,8686,8686,49,12,3,0,0.007368178678332949,,2024-12-10 09:14:59,https://www.linkedin.com/feed/update/urn:li:activity:7272297762203791360
urn:li:activity:7269368598647705600,"❌ You will be replaced by AI.

❌ You will be replaced by someone using AI to do your job.

✅ You will be replaced by someone who doesn’t need to use AI but is using it to do your job.",TEXT,Brian,Jenney,5475,5475,44,10,2,0,0.010228310502283105,,2024-12-02 07:15:32,https://www.linkedin.com/feed/update/urn:li:activity:7269368598647705600
urn:li:activity:7268315169208860672,"I've spent thousands of dollars on courses, books and mentorship over the last 10 years.

Here are some of the best investments I've made in no particular order:

- Kyle Simpson YDKJS book series - particularly his book on FP

- CodeCrafters.io (YC S22) - I don't want to watch a tutorial at this stage. I just want to build cool sh*t

- Educative - specifically the Grokking the Interview Course which teaches you patterns to solve interview problems

- AlgoExpert - finally some front end interview material for those of us outside FAANG

- Justin Welsh LinkedIn Operating System - I wrote for years and finally got some traction after using his advice and tactics

- Colte Steele's Udemy course on DSA for JS developers 🧑‍🍳😘

Hope that's helpful as you navigate the Black Friday course-stravaganza out there 😉",TEXT,Brian,Jenney,31656,31656,122,18,8,0,0.004675259034622188,,2024-11-29 09:29:35,https://www.linkedin.com/feed/update/urn:li:activity:7268315169208860672
urn:li:activity:7267570612766728192,"69 minutes and 132 wtfs later I finally got a Lambda deployed on AWS via GitHub actions.

The final result is a 7 minute video for students at Parsity and members at JavascriptProsApp[dot]com to enjoy.

When you see those polished 100 hour tutorials where the speaker is just getting things to work on the ""first try"" - best believe there were no less than 420 wtf moments they just cut out.

The unfortunate part is that this is where the real learning occurs.

That's why I always recommend you break, re-write and extend the code you're ""borrowing"" to get yourself into some wtf moments on purpose.

If you recently worked with AWS and Lambdas, what were some wtf moments you experienced?",IMAGE,Brian,Jenney,3877,3877,57,6,1,0,0.016507608976012382,,2024-11-27 08:10:58,https://www.linkedin.com/feed/update/urn:li:activity:7267570612766728192
urn:li:activity:7267219349432606720,"You don’t need to contribute a single line of code to open source to benefit from it:

𝗦𝘁𝗲𝗽 𝟭 - find a library you actually use and like

𝗦𝘁𝗲𝗽 𝟮 - get it running on your machine

𝗦𝘁𝗲𝗽 𝟯 - break, extend or re-write a feature

E͟x͟a͟m͟p͟l͟e͟:

Clone everyone’s favorite state management library, ReduxJS, and yarn-link it to your React project.

Add a debugger somewhere in the code and try to trigger it.

Poke around  and try to change some functionality.

Now you’ve learned a hell of a lot more than fixing a typo in a README and set yourself up nicely IF you want to make some contributions in the future.",TEXT,Brian,Jenney,11994,11994,104,7,3,0,0.009504752376188095,,2024-11-26 08:55:11,https://www.linkedin.com/feed/update/urn:li:activity:7267219349432606720
urn:li:activity:7266834160609046529,"Very predictable, boring advice that most developers don’t follow:

- 𝗗𝗼𝗻’𝘁 𝗼𝘃𝗲𝗿-𝗿𝗲𝗹𝘆 𝗼𝗻 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹𝘀 - build something on your own, get stuck and learn

- 𝗟𝗲𝗮𝗿𝗻 𝘁𝗵𝗲 𝗳𝘂𝗻𝗱𝗮𝗺𝗲𝗻𝘁𝗮𝗹𝘀 before diving into frameworks like React, Angular or Vue

- 𝗞𝗲𝗲𝗽 𝘁𝗿𝗮𝗰𝗸 𝗼𝗳 𝘆𝗼𝘂𝗿 𝗮𝗰𝗰𝗼𝗺𝗽𝗹𝗶𝘀𝗵𝗺𝗲𝗻𝘁𝘀. It’s nice to look back at your progress when you’re feeling down

- 𝗬𝗼𝘂 𝗰𝗮𝗻’𝘁 𝗰𝗵𝗮𝘀𝗲 𝗲𝘃𝗲𝗿𝘆 𝗻𝗲𝘄 𝘁𝗲𝗰𝗵. Be aware of macro trends in your industry and micro trends in your niche. For example a JS developer may need to have some surface level knowledge of Serverless and a deeper understanding of NextJS

- 𝗦𝘁𝘂𝗱𝘆 𝗖𝗦 𝗳𝘂𝗻𝗱𝗮𝗺𝗲𝗻𝘁𝗮𝗹𝘀. They’re slower to change and give you a strong foundation to understanding concepts outside your core language and tech stack

- 𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝗶𝘇𝗲 𝘆𝗼𝘂𝗿 𝗵𝗲𝗮𝗹𝘁𝗵 as much as your work.

What’d I miss?",TEXT,Brian,Jenney,10814,10814,93,24,2,0,0.011004253745145182,,2024-11-25 07:24:35,https://www.linkedin.com/feed/update/urn:li:activity:7266834160609046529
urn:li:activity:7265767158758985729,"Diving into an unfamiliar codebase can be scary.

As a new developer, I was intimidated by just how many files, services and docs were associated with an app.

Some mentees at Parsity have started new positions and are having a similar experience.

Here’s how we navigate a new codebase:

- Get it working locally
- 𝗟𝗼𝗼𝗸 𝗳𝗼𝗿 𝗽𝗮𝘁𝘁𝗲𝗿𝗻𝘀 - for a UI app, how is the business logic handled as opposed to presentational logic? 
- 𝗣𝗶𝗰𝗸 𝗮 𝗳𝗲𝗮𝘁𝘂𝗿𝗲 𝗮𝗻𝗱 𝗯𝗿𝗲𝗮𝗸 𝗶𝘁 - expand the API response or trigger an auth error. Update a route to go to a page you just created
- 𝗨𝗽𝗱𝗮𝘁𝗲 𝗮 𝘁𝗲𝘀𝘁 - pick a part of the codebase that could use more testing and write a test
- 𝗥𝗲𝗮𝗱 𝘁𝗵𝗲 𝗳*** 𝗱𝗼𝗰𝘀

Oh - they don’t exist?

- Write the f*** docs!

Anything you’d add?",TEXT,Brian,Jenney,2732,2732,32,9,0,0,0.015007320644216691,,2024-11-22 08:44:42,https://www.linkedin.com/feed/update/urn:li:activity:7265767158758985729
urn:li:activity:7264660761388449794,"The recipe for an amazing side project when you don’t know what to do:

1. Pick an API - OpenAI, Binance, RapidAPI are the first places I’d check.
2. Ideate - what are the features of this API you can build something around? Perhaps a stock tracker that integrates with OpenAI to give targeted trading advice.
3. MUP - what is required to build the minimally usable product? Pick 1 or 2 core features
4. Sketch - a white piece of paper and pen will do. Draw out the main features of the app. Ask “and then what?” For example, they visit your site, and then what? They click on a button and then “what”?
5. Pick 1 or 2 new technologies you want to learn and use them. Maybe this is your chance to learn TypeScript or Cobol. Whatevs.
6. Deploy it and buy a domain on Route53 (or whatever) for like 15 bucks. It will look pro.

Get frustrated. 
Pull out your hair (I don’t have this problem). 
Learn more than any tutorial can teach you.",TEXT,Brian,Jenney,8530,8530,103,10,2,0,0.013481828839390387,,2024-11-19 07:28:16,https://www.linkedin.com/feed/update/urn:li:activity:7264660761388449794
urn:li:activity:7264336443458629632,"I’ve spoken with about 643 developers in the last 18 months.

Most beginners ask the same 3 questions:

- What’s wrong with my resume?
- What should I build for a side project?
- How do I get hired?

So I want to answer them for free:

1. 𝗬𝗼𝘂𝗿 𝗿𝗲𝘀𝘂𝗺𝗲 𝗶𝘀 𝗽𝗿𝗼𝗯𝗮𝗯𝗹𝘆 𝗮𝘃𝗲𝗿𝗮𝗴𝗲 𝗮𝗻𝗱 𝘀𝗼𝘂𝗻𝗱𝘀 𝗹𝗶𝗸𝗲 𝗺𝗮𝗻𝘆 𝗼𝘁𝗵𝗲𝗿𝘀. Remove any mention of junior or aspiring and use this framework: did [x] using [y] which led to [z]. Think from the recruiter’s perspective. Do you sound like a risk to hire? Make yourself less risky and don’t tell them everything. Why do they need to know your last job was at a french fry shop? Lead with your developer experience or technical projects.
   
2. 𝗦𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘀𝗵𝗼𝘂𝗹𝗱 𝘁𝗲𝗮𝗰𝗵 𝘆𝗼𝘂 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗻𝗲𝘄 or keep your skills sharp if you’re not working. Really, they should be enjoyable. They’re an alternative to grinding away at toy problems and expose you to challenges which you can give yourself. Want to understand how to implement role-based authentication or get your hands dirty with serverless? Build it out. Also follow John Crickett or CodeCrafters.io (YC S22) if you're stuck on what to build.
   
3. Now here’s the hard part and the truth no one wants to hear: 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝗵𝗶𝗿𝗲𝗱 𝗶𝘀 𝗮 𝗴𝗮𝗺𝗲 𝗼𝗳 𝘀𝗸𝗶𝗹𝗹 𝗮𝗻𝗱 𝗹𝘂𝗰𝗸. If there is one trait that I see in successful grads, it is their consistency. They just didn’t stop. They outlasted their fears, insecurities and the fear mongers. They changed what didn’t work and picked a strategy. Mass apply or network or do both. Then don’t stop.",TEXT,Brian,Jenney,23129,23129,128,17,7,0,0.0065718362229236025,,2024-11-18 09:59:32,https://www.linkedin.com/feed/update/urn:li:activity:7264336443458629632
urn:li:activity:7262864954087628801,I've had 15 minute chats with 600 developers in the last 2 years. Here are 3 (and a half) mistakes I see way too often when it comes to learning to code.,ARTICLE,Brian,Jenney,5200,4132,48,6,1,0,0.010576923076923078,,2024-11-14 08:32:22,https://www.linkedin.com/feed/update/urn:li:activity:7262864954087628801
urn:li:activity:7262516939732713472,"My mom got turned down for a job at Starbucks as a barista.

She’s retired after 30 years working her way up the ladder in corporate America.

They don’t care.

And why would they?

What does working in a bank have to do with being a successful barista?

Switching careers isn’t just difficult for people trying to break into tech.

It’s difficult across the board.

As a junior developer (or barista) you are an inherently risky hire.

This doesn’t mean you should quit - it just means that you’ll need to find ways to re-invent yourself and build trust.

Because I like you, and chances are you're smart and above average looking if you're reading this - 𝘁𝗵𝗲𝗿𝗲 𝗶𝘀 𝗮 𝗳𝗿𝗲𝗲 𝗰𝗼𝘂𝗿𝘀𝗲 𝗜 𝗰𝗿𝗲𝗮𝘁𝗲𝗱 𝘄𝗶𝘁𝗵 Taro (YC S22) 𝘁𝗼 𝗵𝗲𝗹𝗽 𝘆𝗼𝘂 𝘁𝗿𝗮𝗻𝘀𝗶𝘁𝗶𝗼𝗻 𝗰𝗮𝗿𝗲𝗲𝗿𝘀 𝗶𝗻𝘁𝗼 𝘁𝗲𝗰𝗵. No theory, just super practical application I know can help you.

It's in the comments 😎",TEXT,Brian,Jenney,33557,33557,84,14,1,0,0.0029502041302857823,,2024-11-13 09:29:29,https://www.linkedin.com/feed/update/urn:li:activity:7262516939732713472
urn:li:activity:7261769886337572864,"My favorite mental models for computer science concepts:

𝗥𝗲𝗰𝘂𝗿𝘀𝗶𝗼𝗻 - Russian dolls: Each doll holds another, representing a function calling itself.

𝗟𝗶𝗻𝗸𝗲𝗱 𝗟𝗶𝘀𝘁𝘀 - Train cars: Each train car is linked to the next, just like each node points to the next node in a linked list.

𝗦𝘁𝗮𝗰𝗸𝘀 - Stack of plates: You can only take from the top or add to the top, similar to how a stack operates (Last-In, First-Out).

𝗤𝘂𝗲𝘂𝗲𝘀 - Line to get on a bus: First person in line is first to get on, which represents the First-In, First-Out (FIFO) principle.

𝗧𝗿𝗲𝗲𝘀 - Family tree: Each “parent” node has “child” nodes, and the child can also be a parent with children.

𝗕𝗶𝗴 𝗢 𝗡𝗼𝘁𝗮𝘁𝗶𝗼𝗻 - Traffic on a highway: As more cars (inputs) join, the effect on speed varies depending on the road’s capacity (algorithm’s efficiency).

What is a mental models you use for understanding software-y things?",TEXT,Brian,Jenney,6027,6027,100,25,4,0,0.02140368342458935,,2024-11-11 08:00:58,https://www.linkedin.com/feed/update/urn:li:activity:7261769886337572864
urn:li:activity:7260437739324473345,"If becoming a software developer was as easy as learning the ""𝗿𝗶𝗴𝗵𝘁"" technology, then YouTube wouldn't be overrun with videos of coding boot camp grads talking about how hard it is to get hired.

Your technology stack is still important, obviously.

Don’t think so?

Learn Fortran, COBOL and BrainF*ck and please tell me how that works out for you.

The real disconnect between learning to code and getting hired is that career change requires a completely different skill set:

- building an online presence
- project management
- job search strategy
- time management
- rejection handling
- self promotion

Luckily, a solid side project can help you build these skills.

- plan out a complex app that will solve a problem you have
- use Trello to break the tasks down into deliverables
- deploy the app and try to get users
- write about this experience online
- use tech you want to learn",TEXT,Brian,Jenney,8359,8359,68,12,2,0,0.009809785859552578,,2024-11-07 15:47:29,https://www.linkedin.com/feed/update/urn:li:activity:7260437739324473345
urn:li:activity:7259588652907810816,"𝘏𝘰𝘸 𝘮𝘰𝘴𝘵 𝘴𝘶𝘤𝘤𝘦𝘴𝘴𝘧𝘶𝘭 𝘣𝘰𝘰𝘵𝘤𝘢𝘮𝘱 𝘨𝘳𝘢𝘥𝘴 𝘰𝘱𝘦𝘳𝘢𝘵𝘦:

- Looks outside the LinkedIn bubble for opportunities
- Has faith that opportunity will present itself
- Re-calibrates their approach when needed
- Makes coding and learning a routine
- Applies consistently and broadly
- Has 1 or 2 complex side projects

𝘞𝘩𝘺 𝘮𝘰𝘴𝘵 𝘣𝘰𝘰𝘵𝘤𝘢𝘮𝘱 𝘨𝘳𝘢𝘥𝘴 𝘧𝘢𝘪𝘭:

- Relies on motivation instead of routine
- Applies to only junior roles
- Tutorial
- Tutorial
- Tutorial
- Tutorial
- Doesn’t get hired in 3 months
- 𝘎𝘪𝘷𝘦𝘴 𝘶𝘱",TEXT,Brian,Jenney,6529,6529,50,14,2,0,0.010108745596569152,,2024-11-05 07:33:31,https://www.linkedin.com/feed/update/urn:li:activity:7259588652907810816
urn:li:activity:7259250246084382720,"You can’t get hired because you have no experience. You have no experience because you can’t get hired.

Let’s change that.

Reach out to your cousin, aunt or that friend trying to launch their music career and offer to build a website. 

For free.

Make them buy a domain. Or buy one for them - f*ck it.

Sketch out the site and main features and review them with your cousin, I mean client.

Build and deploy.

Have them give you a testimonial.

Now you have some viable experience, a real deal site to show off and have dipped your toe into freelance.",TEXT,Brian,Jenney,10760,10760,77,7,1,0,0.007899628252788104,,2024-11-04 09:08:48,https://www.linkedin.com/feed/update/urn:li:activity:7259250246084382720
urn:li:activity:7258156409710628865,"Excellent question!

After learning barely enough to build something, I would build something.

That something would be publicly available, solve a problem that I'm familiar with and inform what I write about online, which I'd do 2-3x per week on LinkedIn. 

I would try my best to get customers for this thing and also write about that.

I would be reaching out to my 2nd and 3rd party connections and looking at places where I used to work and old co-workers to see if they can get me in front of a hiring manager.

Lastly, I would hire someone to write me a solid resume and LinkedIn profile and then not stop tinkering with these processes until I got hired.",SHARE,Brian,Jenney,5603,5603,36,3,0,0,0.0069605568445475635,,2024-11-01 09:42:18,https://www.linkedin.com/feed/update/urn:li:activity:7258156409710628865
urn:li:activity:7257413162256244738,"Quintessential junior dev move:

Wasting hours solving a problem a co-worker could’ve helped you figure out in minutes.

You are ultimately judged on the work you complete, not your ability to slog through problems in solitude. When you bump your head against your technical depth, acknowledge it and ask for help.

But for Jeebus' sake please don’t just say “𝘐 𝘤𝘢𝘯’𝘵 𝘧𝘪𝘨𝘶𝘳𝘦 𝘰𝘶𝘵 [𝘹]”

Try this:

- I’m having an issue with [this specific problem]
- I’ve tried [y] but it’s not working in the way I expect which is [this way]
- Maybe add a screenshot or documentation
- ""𝘐𝘴 𝘢𝘯𝘺𝘰𝘯𝘦 𝘢𝘷𝘢𝘪𝘭𝘢𝘣𝘭𝘦 𝘵𝘰 𝘵𝘢𝘬𝘦 𝘢 𝘭𝘰𝘰𝘬 𝘸𝘪𝘵𝘩 𝘮𝘦 𝘴𝘰𝘮𝘦𝘵𝘪𝘮𝘦 𝘵𝘰𝘥𝘢𝘺 𝘰𝘳 𝘱𝘰𝘪𝘯𝘵 𝘮𝘦 𝘪𝘯 𝘵𝘩𝘦 𝘳𝘪𝘨𝘩𝘵 𝘥𝘪𝘳𝘦𝘤𝘵𝘪𝘰𝘯?""

Don’t let your ego get in the way of progress.",TEXT,Brian,Jenney,61212,61212,345,56,7,0,0.006665359733385611,,2024-10-30 08:28:54,https://www.linkedin.com/feed/update/urn:li:activity:7257413162256244738
urn:li:activity:7256765058410504194,"LinkedIn Sucks.

It’s full of:

- cringy posts from LinkedIn lunatics
- fear-mongering
- toxic positivity
- do you agree?

It’s also full of:

- strangers willing to lend you a hand
- quality content you can learn from
- inspiring stories
- opportunity

LinkedIn, like most social media platforms, will do its best to feed you content it believes you will like. 

If your LI feed sucks, maybe follow some better people.",TEXT,Brian,Jenney,14284,14284,180,26,1,0,0.014491739008681042,,2024-10-28 13:33:34,https://www.linkedin.com/feed/update/urn:li:activity:7256765058410504194
urn:li:activity:7255612733314772992,"If you’re hell-bent on learning data structures and algorithms please don’t JUST do 100 LeetCode problems.

Try this instead:

- learn common data structures like trees, graphs, linked lists, stacks and queues
- write these structures from scratch
- learn common techniques to sort and traverse data in these structures
- focus on recursion and backtracking after learning trees (𝘐 𝘧𝘪𝘯𝘥 𝘵𝘩𝘢𝘵 𝘪𝘵 𝘮𝘢𝘥𝘦 𝘮𝘰𝘳𝘦 𝘴𝘦𝘯𝘴𝘦 𝘵𝘩𝘪𝘴 𝘸𝘢𝘺)
- time yourself solving LC problems - shoot for 30 mins for medium problems and write the space and time complexity next to your solution
- learn common approaches to optimize algorithms (𝘩𝘢𝘴𝘩𝘮𝘢𝘱𝘴, 𝘮𝘦𝘮𝘰𝘪𝘻𝘢𝘵𝘪𝘰𝘯...)

Just because MAANG exclusively asks DSA, the majority of your interviews as a front end developer will probably be on a combination of:

- behavioral and technical assessments  
- challenges that involve string manipulation and working with arrays && objects
- JS trivia  (explain closure 🙄)
- building small components using ReactJS",TEXT,Brian,Jenney,14905,14905,131,19,11,0,0.010801744381080175,,2024-10-25 09:14:38,https://www.linkedin.com/feed/update/urn:li:activity:7255612733314772992
urn:li:activity:7254877418811768832,"❌ Get a job you love and you’ll never work a day in your life.

Look, I love to write code and mentor people.

But there’s so much more to software development than writing code and pair-programming.

Some of the non-sexy stuff you’ll do as a developer:


- meetings
- on-call shifts
- writing documentation
- maintaining legacy code
- meetings to prepare for other meetings
- translating technical limitations to non-coders
- researching poorly documented 3rd party APIs

Coding is my hobby and profession. It’s a job and I try not to wrap too much of my identity into it. 

It can be incredibly fulfilling and it can also be a chore.",TEXT,Brian,Jenney,15952,15952,61,15,0,0,0.004764292878635908,,2024-10-23 08:32:45,https://www.linkedin.com/feed/update/urn:li:activity:7254877418811768832
urn:li:activity:7254519140244221953,"No one will hire you without experience. But you can't get experience without getting hired. ♾️

Let me make this very simple for you:

- Build an app you might actually find useful and deploy it.
- Connect with people who show interest.
- Write about this experience online.
- Try to get users for your app.
- Work for free if you have to. 

Walk down main street and see what business has an awful website they need re-done. 

Do it for a recommendation from them. 

Change your title to freelance web engineer.

Your mileage WILL vary.

I can guarantee you will be hired but I cannot control the timeline. Neither can you.

The only thing I know is that quitting is the surest path towards failure and is the most well-traveled.",TEXT,Brian,Jenney,26468,26468,160,22,3,0,0.006989572313737343,,2024-10-22 08:49:05,https://www.linkedin.com/feed/update/urn:li:activity:7254519140244221953
urn:li:activity:7254165594042687488,"I had the chance to interview Rahul Pandey recently.

He said something I respectfully disagree with:

""He was lucky.""

Something interesting I've noticed about ""lucky"" people is that they share many of the same traits:

- grit
- optimism
- consistency
- they work their a** off

Funny how many ""lucky"" people I've met fit this description.

Rahul breaks down what it was like working in FAANG, big fat salaries, why AI isn't the existential crisis you might think it is and what new developers can do to stand out in the market. Link in comments 😎",TEXT,Brian,Jenney,16800,16800,75,13,0,0,0.005238095238095238,,2024-10-21 09:24:13,https://www.linkedin.com/feed/update/urn:li:activity:7254165594042687488
urn:li:activity:7253070973665452033,"Every few months, someone roasts the tech interview.

𝘐’𝘭𝘭 𝘯𝘦𝘷𝘦𝘳 𝘵𝘳𝘢𝘷𝘦𝘳𝘴𝘦 𝘢 𝘉𝘚𝘛 𝘪𝘯 “𝘳𝘦𝘢𝘭 𝘭𝘪𝘧𝘦” 𝘵𝘩𝘦𝘺 𝘴𝘢𝘺.

𝘛𝘩𝘦𝘴𝘦 𝘵𝘦𝘴𝘵𝘴 𝘢𝘳𝘦 “𝘣𝘪𝘢𝘴𝘦𝘥” 𝘢𝘯𝘥 𝘧𝘭𝘢𝘸𝘦𝘥!

People cheer in the comments.

And nothing changes.

The reality is that you’re way less likely to encounter data structures and algorithms on the interview grind if you’re not limiting your search to the top tech companies in the world.

Honestly, if someone asks you to solve a dynamic programming problem during an interview for a company that is not FAANG, the correct response is probably to just walk out.

If you're a glutton for punishment, then maybe this video of me going over a common dynamic programming problem will be useful.",VIDEO,Brian,Jenney,6099,1931,35,5,1,0,0.006722413510411543,,2024-10-18 08:54:35,https://www.linkedin.com/feed/update/urn:li:activity:7253070973665452033
urn:li:activity:7252718611096616962,"""𝘈𝘐 𝘪𝘴 𝘤𝘰𝘮𝘪𝘯𝘨 𝘧𝘰𝘳 𝘺𝘰𝘶𝘳 𝘵𝘦𝘤𝘩 𝘫𝘰𝘣!""

""𝘛𝘩𝘦𝘳𝘦'𝘴 𝘯𝘰 𝘩𝘰𝘱𝘦 𝘧𝘰𝘳 𝘤𝘰𝘥𝘦𝘳𝘴 𝘪𝘯 2024!""

""𝘓𝘦𝘢𝘳𝘯 𝘵𝘰 𝘤𝘰𝘥𝘦?! 𝘏𝘢, 𝘵𝘩𝘢𝘵 𝘸𝘢𝘴 𝘴𝘰 2015.""

Do these click bait titles sound familiar?

I've gone down the YouTube rabbit hole of doom and gloom videos about the tech job market and AI. 

The reality is much less interesting which is why you won't see much of it on platforms where extreme opinions get the most eye balls.

Believe it or not, there are more open tech jobs openings now than at any point in the last 2 years.

Here's some other truths:

- Getting the first job is difficult. This is not new or unique to tech.
- No single tech stack will make you dramatically more hire-able.
- AI might take your job as a developer. By that time, we will all be screwed anyways.

Lastly, remember that social media rewards extreme opinions over boring truths. 🤷",IMAGE,Brian,Jenney,24654,24654,98,20,5,0,0.004989048430275006,,2024-10-17 09:34:25,https://www.linkedin.com/feed/update/urn:li:activity:7252718611096616962
urn:li:activity:7251983808344784896,"My biggest coding hack?

Well, I used to be an addict.

Maybe I still am?

You see, over a decade ago, my life looked a lot more like a music video for a local rapper than an episode of Silicon Valley.

Nearly 2 years after my son was born, I had an ultimatum: give up my ridiculous lifestyle or lose my family. I quit [a lot of stuff 😅] immediately with zero plan of how I was going to make it work or if I would succeed.

I had lots of time to kill. I had no clue what normal people did for fun.

I got introduced to HTML and CSS from a co-worker and my mind was blown. 

So this is how the internet works eh? How the hell did I not know this?

Cue my new addiction. 

I approached coding with the same unhealthy mindset as I did with, uhhh, previous things. It took over my life.

It worked well overall in that I made a transition that even my mother did not really believe was possible.

But I don’t suggest it.

Eat, sleep, code is a recipe for burnout, not success.

Once I incorporated exercise, reading and other hobbies into my life, I was happier, less anxiety-ridden and more confident.

I still have a ways to go though, honestly. Even now, I tend to go way overboard with any interest I pick up and while that sounds like a superpower it can also be at the expense of those around me and my own health.

Every once in a while, I share this embarrassing piece of my past in the hopes that a few readers will feel less alone who may be in a similar position. Just know that there are quite a few of us floating around out there and most just don’t post it online.",TEXT,Brian,Jenney,9311,9311,142,18,0,0,0.01718397594243368,,2024-10-15 08:54:35,https://www.linkedin.com/feed/update/urn:li:activity:7251983808344784896
urn:li:activity:7251617572641546241,"There is a valuable skill that will set you apart from most developers. 

It will go from a nice to have to a requirement if you want to move into leadership:

Public speaking.

If you’re like me, maybe you think you can just hide in your code hole and never speak.

I tried this method for a few years and it sorta worked.

- I didn’t get fired. 
- I also couldn’t get promoted or make much of an impact.

When I became an engineering manager, my job still involved coding but also a lot of speaking.

This freaked me out.

To get over my fear I did a few things:

1. Write down questions to ask during meetings 
2. Volunteer to present at lunch and learns
3. Practice speaking on video using Loom (I made so many cringy videos I’ve never shared)
4. Make a commitment to be the first to break the silence in a meeting - even with a dumb question (see #1)

You’re probably your worst critic. 

We’re all much too wrapped up in ourselves to remember the dumb thing you said in that meeting last Tuesday 😅.

What's your best tip for shy developers to find their voice?",TEXT,Brian,Jenney,14660,14660,66,17,0,0,0.005661664392905866,,2024-10-14 08:39:17,https://www.linkedin.com/feed/update/urn:li:activity:7251617572641546241
urn:li:activity:7250521003137609729,"My podcast actually makes negative money.

I don't offer paid spots, sponsorships or money for shouting out products, people or services.

It's not that I'm against any of this at all. 

Last I checked, we live in a capitalist society.

The real reason I don't offer any advertisement slots is because I'm already promoting my own business, Parsity and since I'm not beholden to any particular brand, I can interview and say whatever the hell I want.

This weekend I'll be interviewing Geoffrey Huck to learn how shy developers can hack communication and learn the art of public speaking. Leadership is the natural progression for most software developers and yet, when it comes to public speaking, most of us have no freaking clue what to do or how to do it.

What are some questions you want me to ask him?",IMAGE,Brian,Jenney,9146,9146,64,15,1,0,0.008746993221080253,,2024-10-11 08:01:55,https://www.linkedin.com/feed/update/urn:li:activity:7250521003137609729
urn:li:activity:7250265616186531840,"A decade of brutal code reviews did not prepare me for what I’ve read on TikTok, IG and Reddit about coding.

Apparently: 

- no one should ever use JS. Like ever.
- AI is for sure taking over all our jobs... just you wait!
- learning to code is a waste of time. Be a wind turbine technician.
- You can make 1.5 mil a year as a CyberSecurity Engineer. I messed up.

If you’re looking for civil discourse or to learn anything useful, I would stay away.

Go old school.

Read a couple books by people who took their time to articulate their thoughts and actually research rather than compete to see who can make the most viral and shocking content.

Here’s a few I’ve read and would recommend:

𝗧𝗵𝗲 𝗖𝗼𝗱𝗶𝗻𝗴 𝗖𝗮𝗿𝗲𝗲𝗿 𝗛𝗮𝗻𝗱𝗯𝗼𝗼𝗸 - such good advice on the non-tech stuff.

𝗞𝗲𝗲𝗽 𝗖𝗮𝗹𝗺 𝗮𝗻𝗱 𝗖𝗼𝗱𝗲 𝗢𝗻 - I wish I had found this book earlier. The author lays out all the mistakes he made that are so common among developers and how to avoid them.

𝗧𝗵𝗲 𝗠𝗮𝗻𝗮𝗴𝗲𝗿'𝘀 𝗣𝗮𝘁𝗵: 𝗔 𝗚𝘂𝗶𝗱𝗲 𝗳𝗼𝗿 𝗧𝗲𝗰𝗵 𝗟𝗲𝗮𝗱𝗲𝗿𝘀 𝗡𝗮𝘃𝗶𝗴𝗮𝘁𝗶𝗻𝗴 𝗚𝗿𝗼𝘄𝘁𝗵 𝗮𝗻𝗱 𝗖𝗵𝗮𝗻𝗴𝗲 - the book I bought when I became a manager because I didn't know what the hell I was supposed to do.

𝗞𝘆𝗹𝗲 𝗦𝗶𝗺𝗽𝘀𝗼𝗻’𝘀 𝗬𝗗𝗞𝗝𝗦 𝘀𝗲𝗿𝗶𝗲𝘀 - duh.

𝗧𝗵𝗲 𝗣𝗵𝗼𝗲𝗻𝗶𝘅 𝗣𝗿𝗼𝗷𝗲𝗰𝘁 - learn SDLC and actually be entertained. This book is a great read whether or not you know anything about code.

Any good recommendations I should add to my list?",TEXT,Brian,Jenney,55846,55846,177,29,5,0,0.00377824732299538,,2024-10-10 15:07:06,https://www.linkedin.com/feed/update/urn:li:activity:7250265616186531840
urn:li:activity:7249793994208010247,"Most stressful scenarios you will encounter as a software developer:

- code you just deployed causing a critical error

- demoing some code that breaks apart in front of an audience - when it just worked on your machine

- notification from GitHub that your code review has 100+ comments

- getting a PagerDuty alert on a weekend about a component you aren’t familiar with

- cryptic messages to meet to chat with your manager with no agenda

- interviews

What else?",TEXT,Brian,Jenney,5159,5159,55,22,2,0,0.015313045163791433,,2024-10-09 07:53:02,https://www.linkedin.com/feed/update/urn:li:activity:7249793994208010247
urn:li:activity:7249463605690036228,"Let's call him Don.

First off, this guy was a genius.

I could tell because when we went out to eat on the first day of work with the CEO and CTO - this guy used his hands to eat a salad.

Next, he asked if he could go home early because he was tired.

He slept on the couch in the office in the middle of the day.

Only a genius can get away with shit like that and not get fired on the spot.

I was entering my 3rd year as a developer and thought of myself as mid-level at this point.

Wrong.

Don pair-programmed with me for the first 2 weeks on the job and I quickly learned just how junior I was.

Don wrote tests for the features we created using the library he authored for the framework we were using.

I had never written a test in my life.

Don had keyboard shortcuts to fly around his terminal and code editor.

I didn't have the ""time"" for that.

I just wanted things to ""work.""

Don didn't accept my ""make it wok by all means necessary"" style of work. He refused to work with me until I learned keyboard shortcuts for VS code to make pairing more enjoyable.

If I wrote a feature without a test, he would reject it.

When I asked for help, he wouldn't give me the answer but tell me where I could probably find the underlying issue.

We only worked together for 9 months but I can't think of a more impactful stint in my career. I learned the art of testing, the importance of learning your tools and how to balance getting things done with getting them done correctly.

Last I heard, he co-founded a multi-million dollar software company. 

I bet he's still eating salad with his hands.",TEXT,Brian,Jenney,12104,12104,135,20,5,0,0.013218770654329148,,2024-10-08 10:00:12,https://www.linkedin.com/feed/update/urn:li:activity:7249463605690036228
urn:li:activity:7249070525740711936,"We’ve all heard the myth: it takes 10,000 hours to master a skill. 

The reality is, you don’t need to become a master to be functional or effective.

In fact, research shows that 20 hours of focused learning can get you up and running with learning a new instrument, language or coding.

It’s not about grinding endlessly, it’s about the right strategy:

• build stuff you actually care about
• break things on purpose to see how NOT to do things
• get feedback on your work and adjust course when necessary

I had a conversation with Junaid Akhtar, content architect at Educative , about the science of learning to code. We discussed how beginners can fast-track their way into programming with just 20 hours of focused effort.

The link is in the comments.",TEXT,Brian,Jenney,9555,9555,102,10,10,0,0.012768184196755626,,2024-10-07 07:58:14,https://www.linkedin.com/feed/update/urn:li:activity:7249070525740711936
urn:li:activity:7247627778122997760,"Bootcamps love the MERN stack. 

Professional developers love the SERN stack.

Honestly, SQL is more intuitive than MongoDB and yet so many new developers don't learn it.

Here's a dead simple challenge you can copy and paste into ChatGPT to set up your first SQL database and learn in a hands-on way:

1. 𝗖𝗿𝗲𝗮𝘁𝗲 𝗮 𝗡𝗲𝗼𝗻𝗗𝗕 𝗔𝗰𝗰𝗼𝘂𝗻𝘁: Head to Neon, create a project, and access the SQL editor.
2. 𝗖𝗿𝗲𝗮𝘁𝗲 𝗧𝗮𝗯𝗹𝗲𝘀: Use ChatGPT to generate SQL commands for tables like users, orders, and products, then run them in NeonDB.
3. 𝗔𝗱𝗱 𝗦𝗮𝗺𝗽𝗹𝗲 𝗗𝗮𝘁𝗮: Prompt ChatGPT for SQL to insert sample data (100+ rows per table) and populate your database.
4. 𝗥𝘂𝗻 𝗕𝗮𝘀𝗶𝗰 𝗤𝘂𝗲𝗿𝗶𝗲𝘀: Start querying data with simple prompts like selecting usernames and emails from the users table.
5. 𝗝𝗼𝗶𝗻 𝗧𝗮𝗯𝗹𝗲𝘀: Use a LEFT JOIN to show all users and their orders, even if they haven’t placed one.
6. 𝗧𝗿𝘆 𝗔𝗱𝘃𝗮𝗻𝗰𝗲𝗱 𝗤𝘂𝗲𝗿𝗶𝗲𝘀: Challenge yourself—find all orders by a certain user or count how many orders each user has placed.

What are some good resources you've found for learning SQL?",TEXT,Brian,Jenney,10184,10184,72,24,6,0,0.010015710919088767,,2024-10-03 08:25:16,https://www.linkedin.com/feed/update/urn:li:activity:7247627778122997760
urn:li:activity:7246525531641274368,"You cannot simply be a like-able yet terrible coder and expect to get promoted (but I have seen it happen). 

The best way to get better at coding is to:

1. Write a lot of bad code.
2. Read good code and steal what makes sense (no, not by copy-pasting but ""stealing"" the patterns and styles of better coders).
3. Read up on common design patterns in your programming language and apply them to your work.
4. Look up design patterns for the framework you use. For example, if you use ReactJS (cuz of course you do) then look up popular ways to compose components, fetch data and construct large apps.

The sad reality is that many developers never make it past step 1. 

Don't do that. 

You're better than that.",TEXT,Brian,Jenney,26611,26611,104,23,1,0,0.004810040960505055,,2024-09-30 07:25:20,https://www.linkedin.com/feed/update/urn:li:activity:7246525531641274368
urn:li:activity:7245463369602785280,"The problem with developers in general and content creators specifically:  

We use too much anecdotal experience to draw wild conclusions. 

This creates an echo chamber online which makes you think that certain things are truer than they probably are:

- Most devs don’t work for big tech
- You’re more likely to work on legacy code than brand new features
- Designing a complex system will take weeks or months, not an hour with a whiteboard
- Flexible schedules can mean 4 hours one day and 14 the next
- Even the best developers fail interviews
- Your next interview is unlikely to include a whiteboard
- “Real developers” don’t use JS and yet it’s the most popular language in the world 🙄

To get an accurate pulse on what’s really happening in the dev community, 𝗜 𝗿𝗲𝗰𝗼𝗺𝗺𝗲𝗻𝗱 𝗰𝗵𝗲𝗰𝗸𝗶𝗻𝗴 𝗼𝘂𝘁 𝗦𝘁𝗮𝗰𝗸 𝗢𝘃𝗲𝗿𝗳𝗹𝗼𝘄’𝘀 𝘆𝗲𝗮𝗿𝗹𝘆 𝘀𝘂𝗿𝘃𝗲𝘆, looking at hiring trends in the industry and generally taking what we all say on here with a grain of salt.",TEXT,Brian,Jenney,12780,12780,60,9,1,0,0.005477308294209703,,2024-09-27 09:04:41,https://www.linkedin.com/feed/update/urn:li:activity:7245463369602785280
urn:li:activity:7245094445707091970,"One of my biggest struggles as an engineering manager was keeping my tech skills sharp.

I went from writing code for most of the day to:

- leading meetings
- JIRA management
- 1 on 1s
- sitting in on sales pitches
- obsessing over the images in my presentations (the right meme can really make or break it 😅)

Sitting through a 100 hour tutorial to type what some other bandicoot was typing just wasn't appealing at this stage. 

I didn't want to learn JavaScript anymore. I wanted something to stretch my skills.

CodeCrafters.io (YC S22) to the rescue.

One of my favorite services for preventing skill-rot is CodeCrafters. I started using it years ago to learn more about complex software like Redis, Docker and SQLite by building it from scratch.

If you’re over watch-and-type tutorials and want a real challenge, I can’t recommend them enough.",TEXT,Brian,Jenney,5901,5901,27,5,1,0,0.005592272496187087,,2024-09-26 08:38:43,https://www.linkedin.com/feed/update/urn:li:activity:7245094445707091970
urn:li:activity:7244392411307655168,"Can we all agree that snapshot tests are pointless 99% of the time?

They somehow sneak into our test suites with good intentions.

Inevitably they result in false alarms and are ignored.

Unit tests are concerned with confirming expected functionality. We make sure that clicking a button actually results in an event happening for example.

Now we have these pesky snapshots.

They take a pic (a snapshot if you will) of the DOM output and then compare the original code to the current output. If there’s a difference, we get a failed test.

Maybe you changed the button color from light-green to not-so-light green.

Whoops.

Used incorrectly, snapshots give us a false sense of security or get ignored entirely. 

They contribute to vanity test coverage metrics with no real benefit.

Am I way off base here? If you’ve used snapshots in a useful way I’d love to hear about it.",IMAGE,Brian,Jenney,13170,13170,27,22,1,0,0.0037965072133637054,,2024-09-24 10:09:05,https://www.linkedin.com/feed/update/urn:li:activity:7244392411307655168
urn:li:activity:7244004446437851136,"How old is too old to learn to code and change careers?

According to the internet - it’s 40 🙄

Imagine if Dicky Kitchen Jr had listened to those geniuses.

I met Dicky a couple years ago on Instagram. I enjoyed his content and what he was building. His journey from working in physical therapy to software engineer wasn’t short or straightforward.

But it did work.

If you’re serious about making a career switch into software then Dicky has a path you might find useful, no matter your age.

A link to our convo is in the comments.",TEXT,Brian,Jenney,37521,37521,89,38,3,0,0.0034647264198715386,,2024-09-23 08:27:27,https://www.linkedin.com/feed/update/urn:li:activity:7244004446437851136
urn:li:activity:7242925058602508289,"Before you make that TODO app, or watch a 100 hour YouTube video where you basically type what someone else types, try this:",VIDEO,Brian,Jenney,12282,4964,185,8,16,0,0.017016772512620095,,2024-09-20 08:58:20,https://www.linkedin.com/feed/update/urn:li:activity:7242925058602508289
urn:li:activity:7238041938392686592,"Something I've learned from speaking with a few hundred of you out there:

No one really has a ""traditional"" path into... anything.

Tech is not a magical bullet to solve your problems and changing careers into software is difficult. But it's possible.

I'm a little sick of the negativity I read online about coding and the fluffy advice that doesn't really help.

Join me and 👾 Aaron Cordova to 𝗯𝗿𝗲𝗮𝗸 𝗱𝗼𝘄𝗻 𝗵𝗼𝘄 𝘁𝗼 𝗮𝗰𝘁𝘂𝗮𝗹𝗹𝘆 𝗺𝗮𝗸𝗲 𝗮 𝘀𝘂𝗰𝗰𝗲𝘀𝘀𝗳𝘂𝗹 𝗰𝗮𝗿𝗲𝗲𝗿 𝗰𝗵𝗮𝗻𝗴𝗲 𝗶𝗻𝘁𝗼 𝘁𝗲𝗰𝗵 and learn about his path from rapper to New York City Transit worker to writing code at some of the most loved (and hated) tech companies on the planet.",VIDEO,Brian,Jenney,5619,1530,49,55,6,0,0.019576437088449902,,2024-09-18 14:55:53,https://www.linkedin.com/feed/update/urn:li:activity:7238041938392686592
urn:li:activity:7241808386047025152,"""You DoNt UndeRStanD hoW BaD the mArkEt is BrOooOooO!""

You're right. 
What do I know? 

Not like I got laid off and hired this year or learned to code at 30 or helped 100+ developers get hired over the last 10 years.

But maybe you're tired of hearing my advice.

I recently hosted 👾 Aaron Cordova on my podcast and he has a hell of story.

Aaron went from rapping on the streets of New York and working on the transit system to working at some of the biggest names in tech.

Career changers have unique challenges when it comes to breaking into tech and need a different strategy to be successful.

I'm hosting 𝗔 𝗡𝗼 𝗕𝗦 𝗚𝘂𝗶𝗱𝗲 𝗼𝗻 𝗕𝗿𝗲𝗮𝗸𝗶𝗻𝗴 𝗶𝗻𝘁𝗼 𝗧𝗲𝗰𝗵 𝗮𝘀 𝗮𝗻 𝗢𝘂𝘁𝘀𝗶𝗱𝗲𝗿 with Aaron tomorrow to chat about what you should be building, how you should be networking and interview strategies for people without CS degrees.

If you can't make it, please drop a question in the comments and I'll pass them along!",SHARE,Brian,Jenney,4894,4894,42,4,3,0,0.010012259910093992,,2024-09-17 07:01:05,https://www.linkedin.com/feed/update/urn:li:activity:7241808386047025152
urn:li:activity:7241471974147850240,"No one, and I mean no one, uses JS on the backend.

Except:

NASA
Netflix
Uber
LinkedIn
Trello
Walmart
PayPal

Seriously, don’t use JS on the backend, it’s a recipe for… disaster.",TEXT,Brian,Jenney,101519,101519,585,109,10,0,0.006934662476974753,,2024-09-16 08:44:18,https://www.linkedin.com/feed/update/urn:li:activity:7241471974147850240
urn:li:activity:7239653769263595523,"No one is going to pay you thousands of dollars to build a website.

But they might pay you to:

- improve SEO
- get more clients
- sell more products
- boost their conversion rates
- increase awareness of their brand

Sometimes, a website can do 1 or all of these things. 

It’s just about how you’re selling it.

Solutions > code.

If you’re looking for no nonsense advice about freelancing and the art of writing code for cold hard cash then you should really follow William Ray .",TEXT,Brian,Jenney,15172,15172,122,9,1,0,0.008700237279198523,,2024-09-11 08:19:24,https://www.linkedin.com/feed/update/urn:li:activity:7239653769263595523
urn:li:activity:7238938762062221313,"𝗡𝗲𝘄𝘀𝗳𝗹𝗮𝘀𝗵:

My podcast about learning to code and creating a solid career in tech is good, BUT

𝗜𝘁 𝘄𝗼𝗻'𝘁 𝗵𝗲𝗹𝗽 𝘆𝗼𝘂:

- finish that side project
- become a software developer
- figure out why that error on line 420 is crashing your TODO list app

𝗡𝗼𝘁 𝘁𝗼𝗱𝗮𝘆, 𝘁𝗼𝗺𝗼𝗿𝗿𝗼𝘄, 𝗼𝗿 𝗶𝗻 𝗮 𝗺𝗼𝗻𝘁𝗵'𝘀 𝘁𝗶𝗺𝗲.

𝗧𝗵𝗲 𝗼𝗻𝗹𝘆 𝘄𝗮𝘆 𝘁𝗼 𝘁𝘂𝗿𝗻 𝗶𝘁 𝗳𝗿𝗼𝗺 𝗮 𝗰𝗼𝗹𝗹𝗲𝗰𝘁𝗶𝗼𝗻 𝗼𝗳 𝘂𝘀𝗲𝗳𝘂𝗹 𝗸𝗻𝗼𝘄𝗹𝗲𝗱𝗴𝗲 𝗶𝗻𝘁𝗼 𝘁𝗵𝗲 𝗴𝗼𝗮𝗹 𝘆𝗼𝘂'𝗿𝗲 𝗰𝗵𝗮𝘀𝗶𝗻𝗴:

𝗔𝗰𝘁𝗶𝗼𝗻.

𝗜 𝗸𝗻𝗼𝘄 𝗯𝗲𝗰𝗮𝘂𝘀𝗲 𝗜 𝗹𝗲𝗮𝗿𝗻𝗲𝗱 𝘁𝗵𝗶𝘀 𝘁𝗵𝗲 𝗵𝗮𝗿𝗱 𝘄𝗮𝘆.

One summer I read an entire book on HTML (it was 11 years ago, please don’t judge me). I sat down in front of my computer to type some sweet HTML and realized I had no effin’ clue what to do.

Have you ever watched a tutorial from start to finish only to wonder what the hell you just built?

𝗡𝗼𝘄 𝗜 𝗮𝗹𝘄𝗮𝘆𝘀 𝘁𝗮𝗸𝗲 𝗮𝗰𝘁𝗶𝗼𝗻 𝘄𝗶𝘁𝗵 𝘁𝗵𝗲 𝗸𝗻𝗼𝘄𝗹𝗲𝗱𝗴𝗲 𝗜'𝗺 𝗰𝗿𝗮𝗺𝗺𝗶𝗻𝗴 𝗶𝗻𝘁𝗼 𝗺𝘆 𝗻𝗼𝗴𝗴𝗶𝗻.

• use a tutorial as a starting point and then extend, re-write or break a feature
• open the code editor and write out an example of an abstract concept like closure
• write comments next to code in a way that makes sense... to me at least
• record myself explaining a topic to see if I actually know what the hell I'm talking about",TEXT,Brian,Jenney,4837,4837,49,8,1,0,0.011990903452553235,,2024-09-09 08:58:13,https://www.linkedin.com/feed/update/urn:li:activity:7238938762062221313
urn:li:activity:7237860486656995329,"I’m not optimistic because I’m foolish or naive.

I’m optimistic because it’s the most practical strategy I’ve found to get through life and create luck.

The photo below is me 4 years ago, getting taken to the hospital in an ambulance on the second day of my new job with a heart condition.

I didn’t know if I would come home so I wanted my last picture to be me smiling.

I had done all the right things: 

- Quit alcohol
- Had an exercise routine
- Lost weight
- Wrote tests for my code even when I didn’t have to

And yet here I was - maybe about to die.

Plot twist: I Iived!

Could it happen again? 

Sure.

I have a couple options:

1. Stress everyday, take a bunch of heart pills and avoid strenuous activity
2. Resume life

I choose option 2. 

Your brain is a pattern-finding wizard. It will find “evidence” to support your assumptions.

Start looking for proof that things can and will get better and that life tends to incrementally improve and you aren’t the unluckiest person you know.

For me, this means limiting local news and social media and generally not hanging around people who always have drama and unfollowing accounts who push fear.",IMAGE,Brian,Jenney,9839,9839,145,29,1,0,0.017786360402479925,,2024-09-06 09:33:32,https://www.linkedin.com/feed/update/urn:li:activity:7237860486656995329
urn:li:activity:7237492492168769536,"Junior developers are inherently risky (in every industry, not just tech btw).

""𝘉𝘶𝘵... 𝘐 𝘢𝘮 𝘢 𝘫𝘶𝘯𝘪𝘰𝘳"", you say.

Yeah, I get it, I get it, just bare with me here.

The word ""junior"" is so subjective that it's nearly meaningless. 𝗪𝗵𝗮𝘁 𝗶𝘁 𝗯𝗮𝘀𝗶𝗰𝗮𝗹𝗹𝘆 𝗯𝗼𝗶𝗹𝘀 𝗱𝗼𝘄𝗻 𝘁𝗼 𝗶𝘀 𝘀𝗼𝗺𝗲𝗼𝗻𝗲 𝘄𝗵𝗼 𝗵𝗮𝘀 𝘀𝗼 𝗹𝗶𝘁𝘁𝗹𝗲 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 𝘁𝗵𝗮𝘁 𝘁𝗵𝗲𝘆 𝗰𝗮𝗻𝗻𝗼𝘁 𝗯𝗲 𝘁𝗿𝘂𝘀𝘁𝗲𝗱 𝘁𝗼 𝗱𝗼 𝗻𝗲𝗮𝗿𝗹𝘆 𝗮𝗻𝘆𝘁𝗵𝗶𝗻𝗴 𝗼𝗻 𝘁𝗵𝗲𝗶𝗿 𝗼𝘄𝗻.

• They need significant hand-holding for months on the job.
• They will take on the easy stuff and maybe break some things.
• They won't contribute much.

𝗛𝗲𝗿𝗲'𝘀 𝘁𝗵𝗲 𝘁𝗵𝗶𝗻𝗴: nearly every developer will be ""junior"" when they first join a company unless they are very senior.

You don't actually need to a be a mid level developer to be a safe hire. You just need to avoid the tell-tale signs that you are, in fact, a n00b.

Quite simply, stop down-playing yourself.

• 𝗥𝗲𝗺𝗼𝘃𝗲 𝗷𝘂𝗻𝗶𝗼𝗿, 𝗮𝘀𝗽𝗶𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 from your resume and LinkedIn.
• DON'T talk about ""the project from your school or bootcamp""
• 𝗗𝗢 𝗧𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝘁𝗵𝗲 𝗮𝗽𝗽 𝗼𝗿 𝘄𝗲𝗯𝘀𝗶𝘁𝗲 𝘆𝗼𝘂'𝗿𝗲 𝗹𝗮𝘂𝗻𝗰𝗵𝗶𝗻𝗴 - yes, you need to have a project to talk about.
• 𝗨𝘀𝗲 𝘀𝘁𝗿𝗼𝗻𝗴 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲 𝘁𝗼 𝘁𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝘆𝗼𝘂𝗿 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 and speak to the benefits of features you created. 
• Instead of ""created a full stack app with a laundry list of tech"" try ""migrated a JS app to Typescript to improve developer experience and velocity"".",TEXT,Brian,Jenney,359301,359301,571,63,23,0,0.0018285504354287909,,2024-09-05 09:11:16,https://www.linkedin.com/feed/update/urn:li:activity:7237492492168769536
urn:li:activity:7237138697131847683,"You ever feel like you’re basically coding the same few features over and over and over?

Sometimes your current role doesn’t prepare you for the next role.

𝗛𝗲𝗿𝗲 𝗮𝗿𝗲 𝗺𝘆 𝘁𝗼𝗽 𝟰 𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀 𝗳𝗼𝗿 𝗽𝗿𝗲𝘃𝗲𝗻𝘁𝗶𝗻𝗴 “𝘀𝗸𝗶𝗹𝗹-𝗿𝗼𝘁” 𝗮𝘀 𝗮 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿:

1. CodeCrafters.io (YC S22) - finally something for the mid → senior level developers out there to get their hands dirty. The GitHub workflow is 😘 👨‍🍳.
2. Scrimba - Some students at Parsity have been using this and I have to admit, it’s an amazing platform to learn front-end.
3. Coding Challenges - John Crickett 🦗has crafted some non-trivial projects to teach you complex software.
4. My site, 𝗝𝗮𝘃𝗮𝗦𝗰𝗿𝗶𝗽𝘁𝗣𝗿𝗼𝘀𝗔𝗽𝗽[𝗱𝗼𝘁]𝗰𝗼𝗺 - at some point, you don’t want to “learn React” anymore. 𝗜 𝗰𝗿𝗲𝗮𝘁𝗲𝗱 𝗰𝗵𝗮𝗹𝗹𝗲𝗻𝗴𝗲𝘀 𝗯𝗮𝘀𝗲𝗱 𝗼𝗻 𝗺𝘆 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 𝗮𝘀 𝗮 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝗼𝘃𝗲𝗿 𝘁𝗵𝗲 𝘆𝗲𝗮𝗿𝘀 including API migrations, deploying Lambdas, solving GitHub pipeline issues and creating NPM libraries.

I’ve used every single one of these services in the past year and I’m usually explicit that I’m not sponsored.

Well - can you believe CodeCrafters.io (YC S22) offered me a sponsorship code? 

I’m not gonna use it... for now.

I sincerely like all these products, mine included and think you should check them out.",TEXT,Brian,Jenney,19872,19872,125,5,9,0,0.006994766505636071,,2024-09-04 09:45:24,https://www.linkedin.com/feed/update/urn:li:activity:7237138697131847683
urn:li:activity:7236745316878667778,,VIDEO,Brian,Jenney,2681,1126,47,2,0,0,0.018276762402088774,,2024-09-03 07:42:15,https://www.linkedin.com/feed/update/urn:li:activity:7236745316878667778
urn:li:activity:7236742436859846656,"“𝘔𝘺 𝘤𝘰𝘥𝘦 𝘴𝘱𝘦𝘢𝘬𝘴 𝘧𝘰𝘳 𝘪𝘵𝘴𝘦𝘭𝘧”

“𝘐 𝘥𝘪𝘥𝘯’𝘵 𝘨𝘦𝘵 𝘪𝘯𝘵𝘰 𝘴𝘰𝘧𝘵𝘸𝘢𝘳𝘦 𝘵𝘰 𝘥𝘦𝘢𝘭 𝘸𝘪𝘵𝘩 𝘱𝘰𝘭𝘪𝘵𝘪𝘤𝘴”

“𝘐’𝘭𝘭 𝘴𝘰𝘭𝘷𝘦 𝘵𝘩𝘪𝘴 𝘭𝘢𝘵𝘦𝘳 𝘵𝘰𝘯𝘪𝘨𝘩𝘵 𝘰𝘯𝘤𝘦 𝘵𝘩𝘦 𝘬𝘪𝘥𝘴 𝘢𝘳𝘦 𝘢𝘴𝘭𝘦𝘦𝘱”

I won’t tell you how many of these quotes are directly from me (𝘩𝘪𝘯𝘵: 𝘪𝘵’𝘴 𝘮𝘰𝘳𝘦 𝘵𝘩𝘢𝘯 2 𝘢𝘯𝘥 𝘦𝘹𝘢𝘤𝘵𝘭𝘺 𝘦𝘲𝘶𝘢𝘭 𝘵𝘰 3)

Thinking like this was naive at best and hindered my career as a software developer at worst.

Turns out I’m not the only one.

I sat down with Dagna Bieda to speak about 𝘄𝗵𝘆 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿𝘀 𝗳𝗮𝗹𝗹 𝗶𝗻𝘁𝗼 𝘁𝗵𝗲𝘀𝗲 𝗺𝗶𝗻𝗱𝘀𝗲𝘁 “𝘁𝗿𝗮𝗽𝘀” as well as her own struggles with communication and how she had to refactor her brain and approach to her coding career to reach the next level.

Our convo took a very surprising turn towards the end. (𝙡𝙞𝙣𝙠 𝙩𝙤 𝙚𝙥𝙞𝙨𝙤𝙙𝙚 𝙞𝙣 𝙥𝙧𝙤𝙛𝙞𝙡𝙚)

Hope you enjoy.",IMAGE,Brian,Jenney,7938,7938,83,5,1,0,0.011211892164273117,,2024-09-03 07:30:49,https://www.linkedin.com/feed/update/urn:li:activity:7236742436859846656
urn:li:activity:7235285713192153088,"Worst way to spend your weekend?

Completing a take home coding project that was supposed to take 4 hours but really takes 2 full days.

I know some people like this interview format.

I am not one of them.

If you MUST participate in these kinds of interviews there are 2 ways you can stand out:

1. Write documentation
2. Write some unit tests

You don’t know how to write unit tests? Let’s fix that.

Grab this repo and make it get to 100% coverage to learn the basics of unit testing: https://lnkd.in/dh_bVgz9",TEXT,Brian,Jenney,12867,12867,116,15,5,0,0.010569674360767856,,2024-08-30 07:02:19,https://www.linkedin.com/feed/update/urn:li:activity:7235285713192153088
urn:li:activity:7235083322987552769,"500 15 minute conversations with developers around the world later and I’m convinced that most of us need a sympathetic ear as much as we need career and coding advice.

Here’s the thing: coding is fun.

It can also be:

- lonely
- stressful
- tedious
- confusing

Don’t wrap too much of your identity in the code you write. 

It can be a fickle beast. Sometimes I’m pretty damn good at slinging code. 

Sometimes I suck. 

So I hit the gym. Run around a lake. Read stuff. Write on here and Medium. I share what I think might help you on my podcast.

When one area drags me down, I use another to lift me up.

Outside of coding, what are some hobbies you’ve picked up?",TEXT,Brian,Jenney,4649,4649,45,13,1,0,0.012690901269090126,,2024-08-29 17:38:05,https://www.linkedin.com/feed/update/urn:li:activity:7235083322987552769
urn:li:activity:7234570728459616256,"Recipe for terrible 1 on 1’s:

Manager: “Anything to discuss this week?”

You: “Nah, I’m chilling”

Manager: “Nice. Talk to ya next time 👍”

1 on 1’s can devolve into weekly status updates, which is why I think a lot of people like to skip them. 

I asked 3 engineering leaders how have 1 on 1’s that don’t suck:

Nick Cosentino 👇

What you can do is talk about:

- 𝗧𝗵𝗲 𝗶𝗺𝗽𝗮𝗰𝘁 𝘆𝗼𝘂𝗿 𝘄𝗼𝗿𝗸 𝗶𝘀 𝗵𝗮𝘃𝗶𝗻𝗴
- 𝗣𝗼𝘀𝗶𝘁𝗶𝘃𝗲/𝗻𝗲𝗴𝗮𝘁𝗶𝘃𝗲 𝗶𝗻𝘁𝗲𝗿𝗮𝗰𝘁𝗶𝗼𝗻𝘀 with peers and partner teams so I can help offer guidance or follow up
- 𝗥𝗼𝗮𝗱𝗯𝗹𝗼𝗰𝗸𝘀, whether they are technical or with people
- 𝗖𝗮𝗿𝗲𝗲𝗿 𝗮𝘀𝗽𝗶𝗿𝗮𝘁𝗶𝗼𝗻𝘀 and whether or not you feel we’re aligned on career progression
- Your level of motivation, engagement, excitement, interest, learning opportunity etc… on your current project

This time is about YOU and as much as I would love to lead the charge on all of these things: You should take responsibility to do this as well.

Ken Corey 👇

Your plans, your dreams, your challenges, where you can improve.

- Talk about 𝘆𝗼𝘂𝗿 𝗴𝗼𝗮𝗹𝘀 𝗼𝗻 𝘁𝗵𝗲 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗰𝗮𝗿𝗲𝗲𝗿 𝗽𝗹𝗮𝗻, as well as your goals outside the career plan.
- Talk about how to progress (𝗮𝘀𝗸 𝗳𝗼𝗿 𝗳𝗲𝗲𝗱𝗯𝗮𝗰𝗸).
- Talk about 𝘂𝗽𝗰𝗼𝗺𝗶𝗻𝗴 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝗼𝗿 𝘀𝘂𝗴𝗴𝗲𝘀𝘁𝗶𝗼𝗻𝘀.
- Talk about challenges.
- Talk about managing up. Not all TL/EMs are comfortable with these meetings.

John Crickett 👇

Your 121 is your chance to 𝗴𝗲𝘁 𝗮𝘀 𝗺𝘂𝗰𝗵 𝘃𝗮𝗹𝘂𝗲 𝗮𝘀 𝗽𝗼𝘀𝘀𝗶𝗯𝗹𝗲 𝗳𝗿𝗼𝗺 𝘆𝗼𝘂𝗿 𝗺𝗮𝗻𝗮𝗴𝗲𝗿. Ask them for advice, mentoring and coaching. Ask them for help to achieve your career objectives. 𝗠𝗮𝗸𝗲 𝘀𝘂𝗿𝗲 𝘆𝗼𝘂 𝗱𝗿𝗶𝘃𝗲 𝘁𝗵𝗲 𝗮𝗴𝗲𝗻𝗱𝗮 𝗳𝗼𝗿 𝘆𝗼𝘂𝗿 𝗯𝗲𝗻𝗲𝗳𝗶𝘁.",TEXT,Brian,Jenney,45514,45514,104,17,3,0,0.0027244364371402205,,2024-08-28 07:41:13,https://www.linkedin.com/feed/update/urn:li:activity:7234570728459616256
urn:li:activity:7233898727084605440,"Ex-con, ex-cashier, ex-addict, ex-whatever.

I've interviewed so many amazing people over the last year and spoken to literally hundreds of you over the phone.

Recently 👾 Aaron Cordova reached out to share his story on the Develop Yourself podcast. 𝗔𝗮𝗿𝗼𝗻 𝘄𝗲𝗻𝘁 𝗳𝗿𝗼𝗺 𝗡𝗬𝗖 𝗧𝗿𝗮𝗻𝘀𝗶𝘁 𝗪𝗼𝗿𝗸𝗲𝗿 𝗮𝗻𝗱 𝗿𝗮𝗽𝗽𝗶𝗻𝗴 𝗼𝗻 𝘁𝗵𝗲 𝘀𝘁𝗿𝗲𝗲𝘁𝘀 𝗼𝗳 𝗡𝗲𝘄 𝗬𝗼𝗿𝗸 𝘁𝗼 𝘄𝗼𝗿𝗸𝗶𝗻𝗴 𝗮𝘁 𝘀𝗼𝗺𝗲 𝗼𝗳 𝘁𝗵𝗲 𝗯𝗶𝗴𝗴𝗲𝘀𝘁 𝗻𝗮𝗺𝗲𝘀 𝗶𝗻 𝘁𝗲𝗰𝗵, including Meta, Coinbase and Docker.

Aaron has nothing to sell you.

His story isn't really about tech or money, but that's a piece of it.

The real story is about refusing to settle, rising above your circumstances and creating options in life when you feel like you don't have any.

Aaron reached out to me because he wants to share his story in the hopes it will help others. 

He and I will be working to get a larger audience together because I know more people than we can reach on the podcast will benefit from hearing it.

Link in profile to check out the episode.",TEXT,Brian,Jenney,5300,5300,64,9,3,0,0.014339622641509434,,2024-08-26 11:10:55,https://www.linkedin.com/feed/update/urn:li:activity:7233898727084605440
urn:li:activity:7232424588524105728,"Shocking and not so shocking takeaways from the 2024 Stack Overflow Developer Survey:

1. Javascript is STILL the most popular programming language - take that haters
2. 𝗘𝘃𝗲𝗿𝘆𝗼𝗻𝗲 𝘂𝘀𝗲𝘀 𝗩𝗦 𝗖𝗼𝗱𝗲 - learn it like a pro.
3. Bootcamps love MERN - 𝗽𝗿𝗼𝗳𝗲𝘀𝘀𝗶𝗼𝗻𝗮𝗹𝘀 𝗹𝗼𝘃𝗲 𝗦𝗘𝗥𝗡. There’s never been a better time to learn SQL with offerings like Supabase that make it too easy to start.
4. 𝗙𝗿𝗼𝗻𝘁 𝗲𝗻𝗱 𝗱𝗲𝘃𝘀 𝗮𝗿𝗲 𝗱𝗶𝘀𝗮𝗽𝗽𝗲𝗮𝗿𝗶𝗻𝗴? With ReactJS on the server and the popularity of NextJS does this mean more people identify as full stack? 
5. 𝗙𝗲𝘄𝗲𝗿 𝗽𝗿𝗼𝗳𝗲𝘀𝘀𝗶𝗼𝗻𝗮𝗹 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿𝘀 𝘀𝗲𝗲 𝗔𝗜 𝗮𝘀 𝗮 𝘁𝗵𝗿𝗲𝗮𝘁 𝘁𝗼 𝘁𝗵𝗲𝗶𝗿 𝗷𝗼𝗯𝘀 than last year. A significantly higher percentage of students and people learning to code do see it as a threat.

What does it all mean?

As usual, reality is a bit different than social media: most developers don't work for FAANG, some of the most hated tech is also the most popular and AI still hasn't destroyed humanity... yet.",TEXT,Brian,Jenney,91134,91134,217,57,2,0,0.003028507472513003,,2024-08-22 09:33:13,https://www.linkedin.com/feed/update/urn:li:activity:7232424588524105728
urn:li:activity:7232029662187511809,"Developers universally hate deadlines.

Businesses love them. 

They NEED to know when to expect that button on the ""About Us"" page. It's going to be a game changer!

Learn how to estimate and deliver your work on time and you will be in a small class of developers.

I'm still trying to get there myself. 😅

There are entire books written on the magical art of estimation for software projects.

𝗛𝗲𝗿𝗲'𝘀 𝗵𝗼𝘄 𝗜'𝘃𝗲 𝗹𝗲𝗮𝗿𝗻𝗲𝗱 𝘁𝗼 𝘀𝘂𝗰𝗸 𝗺𝘂𝗰𝗵 𝗹𝗲𝘀𝘀 𝗮𝘁 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗶𝗼𝗻𝘀 𝗼𝘃𝗲𝗿 𝘁𝗵𝗲 𝘆𝗲𝗮𝗿𝘀:

1. 𝗪𝗿𝗶𝘁𝗲 𝗼𝘂𝘁 𝘁𝗵𝗲 𝘀𝘂𝗯-𝘁𝗮𝘀𝗸𝘀 needed for delivery of a feature and 𝗺𝗮𝗸𝗲 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗶𝗼𝗻𝘀 𝗶𝗻 𝗵𝗮𝗹𝗳 𝗱𝗮𝘆𝘀 for all tasks. This includes things like styling.
   
2. Each day, 𝗺𝗲𝗮𝘀𝘂𝗿𝗲 𝘆𝗼𝘂𝗿 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀 𝗮𝗴𝗮𝗶𝗻𝘀𝘁 𝘁𝗵𝗲 𝘀𝘂𝗯 𝘁𝗮𝘀𝗸𝘀 and see if you're on track or not.

3. Write the actual time next to your original estimation.

4. At the end of the project 𝘂𝘀𝗲 𝘁𝗵𝗲 𝗮𝗱𝗷𝘂𝘀𝘁𝗲𝗱 𝘁𝗶𝗺𝗲𝗹𝗶𝗻𝗲𝘀 𝗳𝗼𝗿 𝗲𝗮𝗰𝗵 𝘁𝗮𝘀𝗸 𝘁𝗼 𝗮𝗰𝗰𝘂𝗿𝗮𝘁𝗲𝗹𝘆 𝗳𝗶𝗴𝘂𝗿𝗲 𝗼𝘂𝘁 𝘁𝗵𝗲 𝘁𝗶𝗺𝗲 𝗳𝗼𝗿 𝘁𝗵𝗲 𝘀𝗶𝗺𝗶𝗹𝗮𝗿 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀.

𝗜𝗳 𝘆𝗼𝘂'𝗿𝗲 𝗮 𝗻𝗲𝘄 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝗼𝗿 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝘁𝗼 𝗰𝗼𝗱𝗲 𝘁𝗵𝗲𝗻 𝘂𝘀𝗲 𝘆𝗼𝘂𝗿 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝗮𝗻𝗱 𝗮 𝘁𝗮𝘀𝗸 𝗺𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁 𝘁𝗼𝗼𝗹 𝗹𝗶𝗸𝗲 𝗧𝗿𝗲𝗹𝗹𝗼 𝘁𝗼 𝗺𝗶𝗺𝗶𝗰 𝘁𝗵𝗶𝘀 𝗽𝗿𝗼𝗰𝗲𝘀𝘀.

This will help you understand the time commitment for your side project and when you can expect to complete it.",TEXT,Brian,Jenney,21678,21678,53,17,1,0,0.003275209890211274,,2024-08-21 07:23:56,https://www.linkedin.com/feed/update/urn:li:activity:7232029662187511809
urn:li:activity:7231338419505819648,"How old is too old to learn to code?

According to the internet, that age is 40.

I think that's silly.

I am fully aware that bias exists. Humans are... human. I also know that in the last 10 years, I've worked with amazing developers of all ages. On my first team, a couple of the devs were over 70. At a small startup in San Francisco, our senior was in his mid-50's.

I can't imagine living life based on taking the safest path. It would not only be boring but wildly unfulfilling.

This week I interviewed Parsity grad Nils Landsberg who learned to code at 44 and recently started a new role as a software developer after being a professor of music.

Wild story. Or is it?

Nils' path isn't that different than others who make a successful switch into tech.

• He leveraged his personal network
• He built software that solved a problem for someone else
• He stayed consistent

Simple? Maybe.
Easy? Of course not.

Link to listen in comments.",TEXT,Brian,Jenney,10126,10126,88,43,4,0,0.01333201659095398,,2024-08-19 09:37:10,https://www.linkedin.com/feed/update/urn:li:activity:7231338419505819648
urn:li:activity:7229630369275293696,"The reality of the advice you read on social media:

Nearly all of it will work, but not necessarily for you.

Here’s how you cut through the noise to pick out the gems in a sea of trash:

- Has the person achieved the outcome you want?
- Do you have anything in common with this person?
- Do they seem happy?

If the answer to all 3 is NO, maybe don’t take their advice.

Here's some people I take advice from that maybe you'll find helpful

John Crickett 
Alex Lau 
🌻 Anna Miller 
Ryan Talbert 
Eduardo Vedes ✨ 
Harley Ferguson 
Neo Kim
Nick Cosentino 
Zubin Pratap (my doppelgänger)",TEXT,Brian,Jenney,4692,4692,28,14,1,0,0.009164535379369138,,2024-08-14 16:30:00,https://www.linkedin.com/feed/update/urn:li:activity:7229630369275293696
urn:li:activity:7228912680705650688,"Besides being a professional yapper on LinkedIn, I also write code for cool startup that’s hiring (non-eng position)

Check it out below 👇",SHARE,Brian,Jenney,2287,2287,13,0,0,0,0.005684302579798863,,2024-08-12 16:58:09,https://www.linkedin.com/feed/update/urn:li:activity:7228912680705650688
urn:li:activity:7228769748447059968,"A few years ago I crashed an app by promoting the wrong branch to production after pretending I knew what was being asked from the lead developer.

𝘛𝘩𝘦 𝘯𝘦𝘹𝘵 𝘮𝘰𝘳𝘯𝘪𝘯𝘨 𝘐 𝘸𝘢𝘭𝘬𝘦𝘥 𝘪𝘯𝘵𝘰 𝘵𝘩𝘦 𝘰𝘧𝘧𝘪𝘤𝘦 𝘢𝘯𝘥 𝘥𝘦𝘤𝘪𝘥𝘦𝘥 𝘵𝘰 𝘨𝘦𝘵 𝘣𝘦𝘵𝘵𝘦𝘳 𝘢𝘵 𝘎𝘪𝘵 𝘢𝘯𝘥 𝘶𝘯𝘥𝘦𝘳𝘴𝘵𝘢𝘯𝘥 𝘰𝘶𝘳 𝘤𝘰𝘮𝘱𝘢𝘯𝘺'𝘴 𝘎𝘪𝘵 𝘧𝘭𝘰𝘸.

Before that, there was the triple-nested for loop that brought our real-time ordering system to a halt.

𝘐 𝘨𝘰𝘵 𝘢 𝘤𝘳𝘢𝘴𝘩 𝘤𝘰𝘶𝘳𝘴𝘦 𝘪𝘯 𝘉𝘪𝘨 𝘖 𝘵𝘩𝘢𝘵 𝘥𝘢𝘺 𝘢𝘯𝘥 𝘸𝘩𝘺 𝘤𝘰𝘥𝘦 𝘳𝘦𝘷𝘪𝘦𝘸𝘴 𝘢𝘳𝘦 𝘪𝘮𝘱𝘰𝘳𝘵𝘢𝘯𝘵.

How could I forget the Rails project that I updated that launched 1000 emails to every customer?

𝘈 𝘴𝘪𝘮𝘱𝘭𝘦 𝘶𝘯𝘪𝘵 𝘵𝘦𝘴𝘵 𝘮𝘪𝘨𝘩𝘵 𝘩𝘢𝘷𝘦 𝘤𝘢𝘶𝘨𝘩𝘵 𝘵𝘩𝘢𝘵 𝘰𝘯𝘦. 𝘖𝘳 𝘶𝘯𝘥𝘦𝘳𝘴𝘵𝘢𝘯𝘥𝘪𝘯𝘨 𝘩𝘰𝘸 𝘢𝘳𝘳𝘢𝘺 𝘦𝘯𝘶𝘮𝘴 𝘸𝘰𝘳𝘬. 😅

I've made a lot of dumb mistakes over the years. I thought I was going to be fired more than a few times. I also learned a lot.

At the core of these blunders was a lack of communication. I was embarrassed to admit what I didn't know and tried to hide my ignorance.

Bad move.

I sat down with Alex Lau, author of ""𝗞𝗲𝗲𝗽 𝗖𝗮𝗹𝗺 𝗮𝗻𝗱 𝗖𝗼𝗱𝗲 𝗢𝗻"" to discuss the biggest mistakes (so far) in our careers as software developers and the lessons we learned.

Don't judge us... too much.

Link in comments.",TEXT,Brian,Jenney,57098,57098,135,17,1,0,0.00267960348873866,,2024-08-12 07:30:12,https://www.linkedin.com/feed/update/urn:li:activity:7228769748447059968
urn:li:activity:7227704891417223168,"Creating a side project is draining.

Here's my cheat sheet so you'll never run out of side project inspiration.

4 easy ways to generate quality side project ideas:

1. 𝗦𝘁𝗲𝗮𝗹 𝗳𝗿𝗼𝗺 𝗼𝘁𝗵𝗲𝗿𝘀. Check out sites like WellFound to see what small startups and 1 person businesses are building for inspiration. If they're hiring that might be a good sign the idea has some value.
2. 𝗗𝗼𝗻’𝘁 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗵𝗼𝘂𝘀𝗲. 𝗔𝗱𝗱 𝗮 𝗯𝗿𝗶𝗰𝗸. Check out the feature requests or reviews for an app you’re using. What do people want? Maybe build that.
3. 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗔𝗣𝗜 on rapidAPI or use OpenAI (everyone’s doing it 😎) and think what you can build around it. For example, can you scrape a user’s top posts as a way to train GPT on their voice and content?
4. 𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗲 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗯𝗼𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝘁𝗲𝗱𝗶𝗼𝘂𝘀. Is there something at work or in your personal life that you do manually that could be automated? Spreadsheets are an easy target. Fix it for yourself and others.

You also don’t need to solve anything. 

A great side project really only has 1 metric for success: you learned something.",TEXT,Brian,Jenney,30327,30327,258,17,10,0,0.00939756652487882,,2024-08-09 08:58:50,https://www.linkedin.com/feed/update/urn:li:activity:7227704891417223168
urn:li:activity:7227319056956096514,"Well, this is kinda weird.

According to Stack Overflow's 2024 Survey, more respondents identify as students than front end developers.

What gives?

I don't think front end isn't dying, it's just less ""front end"" than it used to be.

Front-end basically translates to Javascript Developer in many places.

""𝘖𝘩, 𝘺𝘰𝘶 𝘬𝘯𝘰𝘸 𝘑𝘚? 𝘎𝘳𝘦𝘢𝘵, 𝘸𝘰𝘳𝘬 𝘰𝘯 𝘵𝘩𝘦 𝘕𝘰𝘥𝘦/𝘌𝘹𝘱𝘳𝘦𝘴𝘴 𝘢𝘱𝘱.""
""𝘙𝘶𝘩 𝘳𝘰𝘩, 𝘤𝘰𝘥𝘦 𝘱𝘪𝘱𝘦𝘭𝘪𝘯𝘦𝘴 𝘣𝘳𝘰𝘬𝘦𝘯 - 𝘤𝘢𝘯 𝘺𝘰𝘶 𝘚𝘚𝘏 𝘪𝘯𝘵𝘰 𝘵𝘩𝘦 𝘣𝘰𝘹 𝘢𝘯𝘥 𝘪𝘯𝘷𝘦𝘴𝘵𝘪𝘨𝘢𝘵𝘦?""
""𝘏𝘮𝘮, 𝘵𝘩𝘢𝘵 𝘲𝘶𝘦𝘳𝘺 𝘪𝘴 𝘴𝘭𝘰𝘸. 𝘊𝘢𝘯 𝘺𝘰𝘶 𝘳𝘦𝘧𝘢𝘤𝘵𝘰𝘳?""
""𝘞𝘦 𝘯𝘦𝘦𝘥 𝘢 𝘓𝘢𝘮𝘣𝘥𝘢 𝘧𝘶𝘯𝘤𝘵𝘪𝘰𝘯 𝘧𝘰𝘳 𝘵𝘩𝘪𝘴 𝘮𝘪𝘨𝘳𝘢𝘵𝘪𝘰𝘯. 𝘊𝘢𝘯 𝘺𝘰𝘶 𝘵𝘳𝘢𝘯𝘴𝘭𝘢𝘵𝘦 𝘵𝘩𝘪𝘴 𝘰𝘭𝘥 𝘗𝘏𝘗 𝘤𝘰𝘥𝘦 𝘵𝘰 𝘕𝘰𝘥𝘦?""

You - 🙃

Oh and while you're at it.... ""𝘤𝘦𝘯𝘵𝘦𝘳 𝘵𝘩𝘦 𝘦𝘧 𝘰𝘶𝘵 𝘵𝘩𝘪𝘴 𝘥𝘪𝘷""

Personally, if I was super front end focused I would begin exploring fullstack JS frameworks like NextJS, Remix or at least getting familiar with Node/Express and SQL.

𝗦𝗶𝗻𝗰𝗲 𝗜 𝗹𝗶𝗸𝗲 𝘆𝗼𝘂 𝗮𝗻𝗱 𝘆𝗼𝘂'𝗿𝗲 𝗽𝗿𝗼𝗯𝗮𝗯𝗹𝘆 𝗮𝗯𝗼𝘃𝗲 𝗮𝘃𝗲𝗿𝗮𝗴𝗲 𝗶𝗻𝘁𝗲𝗹𝗹𝗶𝗴𝗲𝗻𝗰𝗲, 𝗜 𝘄𝗮𝗻𝘁 𝘁𝗼 𝗴𝗶𝘃𝗲 𝘆𝗼𝘂 𝗮 𝗡𝗼𝗱𝗲/𝗘𝘅𝗽𝗿𝗲𝘀𝘀 𝘀𝘁𝗮𝗿𝘁𝗲𝗿 𝗸𝗶𝘁 𝗶𝗻 𝘁𝗵𝗲 𝗰𝗼𝗺𝗺𝗲𝗻𝘁𝘀.",IMAGE,Brian,Jenney,16069,16069,102,9,3,0,0.007094405376812496,,2024-08-08 07:25:40,https://www.linkedin.com/feed/update/urn:li:activity:7227319056956096514
urn:li:activity:7226952669423132672,"All side projects are not created equal.

I asked 3 of your favorite LinkedIn tech creators what kind of side project you should be making to be more hire-able.

Here's what they said:

Nick Cosentino 👇
As a hiring manager, I am personally not looking for people that launched a million dollar app with thousands of downloads -- but that’s super cool if you did that.

At least from an interview perspective, 𝗜 𝗹𝗼𝗼𝗸 𝗳𝗼𝗿 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘁𝗵𝗮𝘁 𝘀𝗵𝗼𝘄 𝗺𝗲 𝘆𝗼𝘂 𝘄𝗲𝗿𝗲 𝘁𝗿𝘆𝗶𝗻𝗴 𝘁𝗵𝗶𝗻𝗴𝘀 𝗼𝘂𝘁 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴. 𝗜𝘁 𝘄𝗼𝘂𝗹𝗱 𝗯𝗲 𝗴𝗿𝗲𝗮𝘁 𝘁𝗼 𝗵𝗲𝗮𝗿 𝘄𝗵𝘆 𝘆𝗼𝘂 𝗽𝗶𝗰𝗸𝗲𝗱 𝘀𝗼𝗺𝗲 𝘁𝗲𝗰𝗵𝗻𝗼𝗹𝗼𝗴𝗶𝗲𝘀, 𝘄𝗵𝗮𝘁 𝘆𝗼𝘂 𝗹𝗲𝗮𝗿𝗻𝗲𝗱, why you went back to rewrite part of it, etc… I’m excited to see that you were trying to build things, struggled a bit, and had some awesome learning experiences that you can reflect on.


Mauro Accorinti 👇
If you’re looking to create a project that’s sole purpose is to help you land a job, I’d say it should check three boxes. 

This project should help you:

✅ Get noticed and raise your chances of getting the first interview
✅ Showcase your way of thinking and how you work through a problem
✅ Learn new skills, libraries or technologies which challenge you in some way.

Finally, it should help you get an interview! So choose a project that you find interesting, is a bit challenging and 𝗯𝘂𝗶𝗹𝗱 𝗶𝘁 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰! Talk about it, show your work, share around the github repo and 𝗴𝗲𝘁 𝗳𝗲𝗲𝗱𝗯𝗮𝗰𝗸 even. Use the project as an opportunity to put yourself top of mind for people looking to hire.


John Crickett 👇
The ideal side project to enhance your chances of getting hired is 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗿𝗲𝗮𝗹, 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝘁𝗵𝗮𝘁 𝗶𝘀 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 𝗿𝗲𝗮𝗹 𝘃𝗮𝗹𝘂𝗲 𝗮𝗻𝗱 𝗯𝗲𝗶𝗻𝗴 𝘂𝘀𝗲𝗱 𝗯𝘆 𝗽𝗲𝗼𝗽𝗹𝗲 𝘁𝗼 𝘀𝗼𝗹𝘃𝗲 𝘁𝗵𝗲𝗶𝗿 𝗽𝗿𝗼𝗯𝗹𝗲𝗺𝘀. 

𝗧𝗵𝗲 𝘀𝗲𝗰𝗼𝗻𝗱 𝗯𝗲𝘀𝘁 𝗼𝗽𝘁𝗶𝗼𝗻 𝗶𝘀 𝘁𝗼 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗰𝗹𝗼𝗻𝗲 𝗼𝗳 𝘀𝗼𝗺𝗲 𝗿𝗲𝗮𝗹-𝘄𝗼𝗿𝗹𝗱 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲, i.e. the projects from Coding Challenges. Both options show you can see a project through and build something without following a tutorial.",TEXT,Brian,Jenney,21547,21547,100,12,15,0,0.005894091984963104,,2024-08-07 07:09:46,https://www.linkedin.com/feed/update/urn:li:activity:7226952669423132672
urn:li:activity:7226608741494796288,"Imagine trying to get in shape watching fitness videos on YouTube. This is what many developers end up doing.

If you want to learn about promises, closures and 𝚝𝚑𝚒𝚜 then you need to get your hands dirty.

Watching videos or reading can teach you what to do, but without action, the knowledge is worthless.

So yes, read books, watch videos, buy that course.

Then put it into action.

Open up your code editor and write your own example of the concept you learned.

- 𝗣𝗿𝗼𝗺𝗶𝘀𝗲-𝗶𝗳𝘆 𝗮 𝘁𝗶𝗺𝗲𝗼𝘂𝘁.
- Use closure to 𝗶𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁 𝗮 𝗰𝘂𝗿𝗿𝗶𝗲𝗱 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻.
- 𝗨𝘀𝗲 𝗮𝗽𝗽𝗹𝘆 𝗮𝗻𝗱 𝗰𝗮𝗹𝗹 𝘁𝗼 𝗶𝗻𝘃𝗼𝗸𝗲 𝗮 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 with a variable number of arguments.

It doesn’t have to be pretty or even practical.

It just has to lead you to those “aha” moments. 

This is where stuff starts to click.",TEXT,Brian,Jenney,7185,7185,73,22,2,0,0.01350034794711204,,2024-08-06 08:23:07,https://www.linkedin.com/feed/update/urn:li:activity:7226608741494796288
urn:li:activity:7225147897166659585,"The recipe for an amazing side project when you don’t know what to do:

1. 𝗣𝗶𝗰𝗸 𝗮𝗻 𝗔𝗣𝗜 - OpenAI, Binance, RapidAPI are the first places I’d check.
2. 𝗧𝗵𝗿𝗼𝘄 𝘁𝗵𝗶𝗻𝗴𝘀 𝗮𝘁 𝘁𝗵𝗲 𝘄𝗮𝗹𝗹 - what are the features of this API you can build something around? Perhaps a stock tracker that integrates with OpenAI to give targeted trading advice?
3. 𝗠𝗨𝗣 - what is required to 𝗯𝘂𝗶𝗹𝗱 𝘁𝗵𝗲 𝗺𝗶𝗻𝗶𝗺𝗮𝗹𝗹𝘆 𝘂𝘀𝗮𝗯𝗹𝗲 𝗽𝗿𝗼𝗱𝘂𝗰𝘁? Pick 1 or 2 core features.
4. 𝗦𝗸𝗲𝘁𝗰𝗵 - a white piece of paper and pen will do. 𝗗𝗿𝗮𝘄 𝗼𝘂𝘁 𝘁𝗵𝗲 𝗺𝗮𝗶𝗻 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 𝗼𝗳 𝘁𝗵𝗲 𝗮𝗽𝗽. 𝗔𝘀𝗸 “𝗮𝗻𝗱 𝘁𝗵𝗲𝗻 𝘄𝗵𝗮𝘁?” For example, they visit your site, and then what? They click on a button and then what?
5. 𝗣𝗶𝗰𝗸 𝟭 𝗼𝗿 𝟮 𝗻𝗲𝘄 𝘁𝗲𝗰𝗵𝗻𝗼𝗹𝗼𝗴𝗶𝗲𝘀 you want to learn and use them. Maybe this is your chance to learn TypeScript or Cobol. Whatevs.
6. 𝗗𝗲𝗽𝗹𝗼𝘆 𝗶𝘁 𝗮𝗻𝗱 𝗯𝘂𝘆 𝗮 𝗱𝗼𝗺𝗮𝗶𝗻 on Route53 (or whatever) for like 15 bucks. It will look pro.

Get frustrated. Pull out your hair (I don’t have this problem) and learn more than any tutorial can teach you.

***

𝘐 𝘸𝘳𝘪𝘵𝘦 𝘴𝘵𝘶𝘧𝘧 𝘧𝘰𝘳 𝘦𝘢𝘳𝘭𝘺 𝘤𝘢𝘳𝘦𝘦𝘳 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴 𝘦𝘷𝘦𝘳𝘺 𝘸𝘦𝘦𝘬𝘦𝘯𝘥. 𝘠𝘰𝘶 𝘤𝘢𝘯 𝘴𝘪𝘨𝘯 𝘶𝘱 𝘢𝘵 𝘵𝘩𝘦 Parsity 𝘴𝘪𝘵𝘦 𝘢𝘵 𝘗𝘢𝘳𝘴𝘪𝘵𝘺[𝘥𝘰𝘵]𝘪𝘰",TEXT,Brian,Jenney,15598,15598,152,20,14,0,0.011924605718681883,,2024-08-02 07:38:15,https://www.linkedin.com/feed/update/urn:li:activity:7225147897166659585
urn:li:activity:7224777291363401729,"Seriously, stop with the certificates.

No one cares.

If you are a dev ops engineer then by all means, get AWS certs or whatever your team requires.

For the rest of you JavaScript developers out there - just stop.

Learning how to deploy, roll back and automate code going from your machine out to the world is an actual skill.

You can 𝗹𝗲𝗮𝗿𝗻 𝘁𝗵𝗲 𝗯𝗮𝘀𝗶𝗰𝘀 𝗯𝘆 𝘂𝘀𝗶𝗻𝗴 𝘁𝗼𝗼𝗹𝘀 𝗹𝗶𝗸𝗲 𝗚𝗶𝘁𝗛𝘂𝗯 𝗮𝗰𝘁𝗶𝗼𝗻𝘀 𝘁𝗼 𝘁𝗿𝗶𝗴𝗴𝗲𝗿 𝗮 𝗯𝘂𝗶𝗹𝗱 𝗮𝗻𝗱 𝗱𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁 𝗼𝗳 𝘆𝗼𝘂𝗿 𝗰𝗼𝗱𝗲 𝘁𝗼 𝗮 𝗰𝗹𝗼𝘂𝗱 𝘀𝗲𝗿𝘃𝗶𝗰𝗲 𝗽𝗿𝗼𝘃𝗶𝗱𝗲𝗿 𝗹𝗶𝗸𝗲 𝗔𝗪𝗦. Think through how you would rollback the code if an error happened.

- How will you monitor the deployment?
- What the hell does a ""rollback"" even mean?
- What git branching strategies make sense for your team? 𝗛𝗼𝘄 𝗮𝗯𝗼𝘂𝘁 𝗳𝗼𝗿 𝗮 𝘁𝗲𝗮𝗺 𝗼𝗳 𝟭 𝗶𝗳 𝘆𝗼𝘂'𝗿𝗲 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝘁𝗼 𝗰𝗼𝗱𝗲?

Googling those 3 questions should lead you down some interesting rabbit holes.",TEXT,Brian,Jenney,96606,96606,310,43,6,0,0.003716125292424901,,2024-08-01 07:05:36,https://www.linkedin.com/feed/update/urn:li:activity:7224777291363401729
urn:li:activity:7223693118171213825,"William Ray didn't take my advice and it worked out pretty damn well for him.

Years ago, William slid into my DMs after I posted about my struggles with addiction and crime.

I waited 8 years to share this part of my life online. I was scared what others might think. I still am honestly.

I projected these fears on Will. I told him to play it safe.

He didn't.

Will now has a successful YouTube channel, a freelancing business and I even got him to sit down and chat with me on the 𝗗𝗲𝘃𝗲𝗹𝗼𝗽 𝗬𝗼𝘂𝗿𝘀𝗲𝗹𝗳 𝗣𝗼𝗱𝗰𝗮𝘀𝘁 where 𝘄𝗲 𝘁𝗮𝗹𝗸 𝗮𝗯𝗼𝘂𝘁 𝗮𝗱𝗱𝗶𝗰𝘁𝗶𝗼𝗻, 𝗰𝗿𝗶𝗺𝗲, 𝗰𝗼𝗱𝗶𝗻𝗴 𝗯𝗼𝗼𝘁𝗰𝗮𝗺𝗽𝘀 𝗮𝗻𝗱 𝗳𝗿𝗲𝗲𝗹𝗮𝗻𝗰𝗶𝗻𝗴 𝗮𝘀 𝗮 𝗰𝗼𝗱𝗲𝗿.

If you're not following him, you should. He has an inspiring story and he's one of the few freelance developers online that gives away practical advice about making your first dollar as a coder without a 9-5.

If you're hiring, snatch him up. 𝘏𝘦'𝘴 𝘢 𝘝𝘶𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘣𝘶𝘵 𝘸𝘦 𝘸𝘰𝘯'𝘵 𝘩𝘰𝘭𝘥 𝘵𝘩𝘢𝘵 𝘢𝘨𝘢𝘪𝘯𝘴𝘵 𝘩𝘪𝘮 😉.

https://lnkd.in/eCANr8tB",TEXT,Brian,Jenney,11599,11599,82,16,1,0,0.008535218553323563,,2024-07-29 07:17:29,https://www.linkedin.com/feed/update/urn:li:activity:7223693118171213825
urn:li:activity:7221921496489766915,"You wonder, “𝘈𝘮 𝘐 𝘴𝘶𝘱𝘱𝘰𝘴𝘦𝘥 𝘵𝘰 𝘬𝘯𝘰𝘸 𝘵𝘩𝘪𝘴?”

- A new JS framework comes out.
- The coding pattern you used for years becomes antiquated. 
- Some term gets thrown around in a meeting you’ve never heard.

As a software developer, you will come face to face with the limits of your knowledge on a regular basis. 

An apex developer once told me to “𝘦𝘹𝘱𝘰𝘴𝘦 𝘺𝘰𝘶𝘳 𝘪𝘨𝘯𝘰𝘳𝘢𝘯𝘤𝘦, 𝘪𝘵’𝘴 𝘵𝘩𝘦 𝘰𝘯𝘭𝘺 𝘸𝘢𝘺 𝘺𝘰𝘶’𝘭𝘭 𝘭𝘦𝘢𝘳𝘯.”

This was after I nodded my head through a marathon pairing session going over a particularly complex unit testing setup. I had never written a single unit test up to this point.

I was too embarrassed to admit I was out of my depth. 

Bring up those things you don’t understand. 

Ideally, in a public setting so others can benefit. I guarantee your team mates are silently thanking you.",TEXT,Brian,Jenney,5906,5906,63,7,2,0,0.012190992211310531,,2024-07-24 09:57:41,https://www.linkedin.com/feed/update/urn:li:activity:7221921496489766915
urn:li:activity:7221188030861066243,"What does one of the top 1% career coaches on UpWork think about my career advice? 😅

I sat down with Megan Elizabeth Dias to get schooled on the tech job market in 2024 and what she's learned from working with hundreds of software developers at different stages in their careers.

- why you might want to 𝗿𝗲-𝘁𝗵𝗶𝗻𝗸 𝘂𝘀𝗶𝗻𝗴 𝘁𝗵𝗲 ""𝗢𝗽𝗲𝗻 𝘁𝗼 𝗪𝗼𝗿𝗸"" 𝗯𝗮𝗻𝗻𝗲𝗿
- 𝘀𝗵𝗮𝗿𝗶𝗻𝗴 𝘆𝗼𝘂𝗿 𝗚𝗶𝘁𝗛𝘂𝗯 𝗽𝗿𝗼𝗳𝗶𝗹𝗲 and when NOT to
- the do's and dont's of 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰
- why 𝗽𝗶𝘁𝘆 𝗽𝗼𝘀𝘁𝘀 probably aren't helping your case 😬

You can listen to it here: https://lnkd.in/dw9ucb72

I always like to add the disclaimer that these opinions are... opinions. Your mileage may vary. We can only tell you what we've seen work and not work.

As always - I hope you find it helpful.",TEXT,Brian,Jenney,4158,4158,36,5,1,0,0.010101010101010102,,2024-07-22 09:23:09,https://www.linkedin.com/feed/update/urn:li:activity:7221188030861066243
urn:li:activity:7220148884159807488,"3 lessons I learned after getting laid off, hired, quitting and hired again in the last couple months!

1. 𝗦𝘁𝗮𝗯𝗶𝗹𝗶𝘁𝘆 𝗶𝘀 𝗮 𝗺𝘆𝘁𝗵. Can you believe that US workers actually have longer tenures now?! That being said, nothing is truly stable. I got the axe with a lot of smart peeps at a big fortune 100 company. Nothing personal, just business.
   
2. (𝗚𝗼𝗼𝗱) 𝗥𝗲𝗰𝗿𝘂𝗶𝘁𝗲𝗿𝘀 𝗿𝗼𝗰𝗸. I worked with some great recruiters (no I won't share their info without their consent) who helped me find opportunities quickly. They get more hate than they deserve on this platform.
   
3. 𝗧𝗿𝗮𝘃𝗲𝗹 𝗼𝘂𝘁𝘀𝗶𝗱𝗲 𝘁𝗵𝗲 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 𝗯𝘂𝗯𝗯𝗹𝗲. I love LinkedIn because maybe I'm a corporate shill. For my job search, I looked outside LI for the most part. Acquaintances, the site formerly known as Hired and Wellfound were places I had success.

I know 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 𝗶𝘀 𝘀𝗸𝗲𝘄𝗲𝗱 𝘁𝗼𝘄𝗮𝗿𝗱𝘀 𝗲𝘅𝘁𝗿𝗲𝗺𝗲𝘀. You either read about the person who filled 1000 applications with zero response or the dude who got accepted to Google or founded their next startup.

The reality is somewhere in the middle.

I break down the lessons that are fresh in my mind from this recent job search with some action you can take: https://lnkd.in/gjXeNh-y

Always hope you find it helpful.",TEXT,Brian,Jenney,19019,19019,111,6,0,0,0.006151742993848257,,2024-07-19 12:33:57,https://www.linkedin.com/feed/update/urn:li:activity:7220148884159807488
urn:li:activity:7219352034779512832,"LinkedIn or Twitter fame is a silly goal if you’re building in public to land a role.

Your real goal is to demonstrate technical depth and showcase your work.

You want the right eyes on your profile. You don’t want sympathy for the 1000th rejection you’ve had (or maybe you do, I dunno actually)

Instead of fishing for likes, try writing about:

- a hairy bug you squished
- your deployment strategy
- how you’re handling QA
- why some obscure library is really helpful
- your take on React Server Components

If you’re really feeling brave, post a code snippet, seek feedback and watch how anyone who ever wrote a line of code becomes an expert on how you can optimize a for loop 😅

If you're sick of trying to figure out the LinkedIn ""game"" on your own and feeling stuck - check out John Crickett's upcoming program for building a brand on LinkedIn. He's a guy I s̶t̶e̶a̶l̶ learn from all the time",TEXT,Brian,Jenney,23472,23472,166,20,4,0,0.008094751192910702,,2024-07-17 07:47:34,https://www.linkedin.com/feed/update/urn:li:activity:7219352034779512832
urn:li:activity:7219009049151877121,"Is copy/pasting really so bad?

Honestly, it’s how I’ve survived over the years as a developer.

Every new workplace where I went and every contract I completed, I took note of what the smarter developers were doing.

- what books had they read?
- I read their pull requests, even when I wasn’t the reviewer.
- I copied their styles for writing tests, React components and backend code.
- I asked how they investigated and debugged critical issues.
- I imitated their mannerisms and studied how they spoke in meetings.

I’ve been lucky. I copied from the right people at some amazing companies and worked with developers who I truly think might be genius.

You don’t have to get lucky though.

Nowadays, through LinkedIn, open source and the University of YouTube, you have the ability to learn from other amazing developers and copy what makes sense to you.

𝘐 𝘨𝘰𝘵 𝘵𝘰 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸 𝘰𝘯𝘦 𝘰𝘧 𝘮𝘺 𝘧𝘢𝘷𝘰𝘳𝘪𝘵𝘦 𝘠𝘰𝘶𝘛𝘶𝘣𝘦 𝘱𝘳𝘰𝘧𝘦𝘴𝘴𝘰𝘳𝘴 𝘳𝘦𝘤𝘦𝘯𝘵𝘭𝘺, Jack 🤔 Herrington 𝘰𝘯 𝘵𝘩𝘦 𝘋𝘦𝘷𝘦𝘭𝘰𝘱 𝘠𝘰𝘶𝘳𝘴𝘦𝘭𝘧 𝘗𝘰𝘥𝘤𝘢𝘴𝘵 (𝘭𝘪𝘯𝘬 𝘪𝘯 𝘱𝘳𝘰𝘧𝘪𝘭𝘦 😉)",TEXT,Brian,Jenney,15826,15826,71,18,1,0,0.005686844433211172,,2024-07-16 09:04:39,https://www.linkedin.com/feed/update/urn:li:activity:7219009049151877121
urn:li:activity:7218634891528134659,"""𝘛𝘩𝘪𝘴 𝘪𝘴 𝘢 𝘵𝘦𝘳𝘳𝘪𝘣𝘭𝘦 𝘵𝘢𝘬𝘦 𝘰𝘯 𝘵𝘩𝘦 𝘫𝘰𝘣 𝘮𝘢𝘳𝘬𝘦𝘵. 𝘠𝘰𝘶 𝘰𝘣𝘷𝘪𝘰𝘶𝘴𝘭𝘺 𝘥𝘰𝘯'𝘵 𝘬𝘯𝘰𝘸 𝘸𝘩𝘢𝘵 𝘺𝘰𝘶'𝘳𝘦 𝘵𝘢𝘭𝘬𝘪𝘯𝘨 𝘢𝘣𝘰𝘶𝘵.""

Maybe getting on YouTube wasn't a great idea.

I recently dropped a video with some advice I think might be helpful for people trying to break into tech and it received more negative comments than any other video I've done.

𝗜𝘁'𝘀 𝗯𝗼𝗿𝗶𝗻𝗴 𝘀𝘁𝘂𝗳𝗳 𝗵𝗼𝗻𝗲𝘀𝘁𝗹𝘆: tips for your resume, LinkedIn, GitHub and how to get more experience when you have none:

- 𝗱𝗼𝗻'𝘁 𝘀𝗵𝗮𝗿𝗲 𝘆𝗼𝘂𝗿 𝗚𝗶𝘁𝗛𝘂𝗯 𝗶𝗳 𝘁𝗵𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝗱𝗼𝗻'𝘁 𝗹𝗼𝗼𝗸 𝗴𝗼𝗼𝗱 and you don't have to OR create some things you're proud of
- 𝗿𝗲𝗺𝗼𝘃𝗲 𝗮𝗻𝘆 𝗺𝗲𝗻𝘁𝗶𝗼𝗻𝘀 𝗼𝗳 ""𝗮𝘀𝗽𝗶𝗿𝗶𝗻𝗴"" 𝗼𝗿 ""𝗷𝘂𝗻𝗶𝗼𝗿"" from your profile
- no experience? get some by 𝗯𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝗮 𝘀𝗶𝘁𝗲 𝗳𝗼𝗿 𝗳𝗿𝗲𝗲 (𝗼𝗿 𝗮 𝗿𝗲𝗰𝗼𝗺𝗺𝗲𝗻𝗱𝗮𝘁𝗶𝗼𝗻) if you have to
-  understand your timeline will be different from others


I'm beginning to think some people have a problem for every solution.",TEXT,Brian,Jenney,43988,43988,70,28,0,0,0.0022278803309993636,,2024-07-15 08:17:53,https://www.linkedin.com/feed/update/urn:li:activity:7218634891528134659
urn:li:activity:7217526060370808832,"Front end development stopped being easy a while ago.

It’s a lot less:

- Move this a few px to the right.
 -Make this button a little greener.
 - Sprinkle a little JS to submit this form.
- Translate this design to HTML and CSS.

It’s a lot more:

- Decrease the initial page load!
- Oh, you know JS? Can you help debug this lambda function written in NodeJS?
- SSG vs CSR vs SSR.
- Who’s on-call to investigate the code pipeline being broken?!
- Move this a few px to the right 😉.

LinkedIn hates videos but I like 'em. 

If you're interested in React Server Components (RSCs) check this out 👇",VIDEO,Brian,Jenney,11957,4643,148,19,4,0,0.014301246131972903,,2024-07-12 06:51:47,https://www.linkedin.com/feed/update/urn:li:activity:7217526060370808832
urn:li:activity:7217157136299040768,"4 developers I mentor or graduated from Parsity recently got hired. Now the real work begins:

- Exploring a new codebase
- Finding areas to make impact
- Learning the engineering culture and the boatload of jargon (CI/CD, TDD, SDLC, story points, sprints) 
- Figuring out JIRA and the team's flavor of agile
- Using git… but like, for real this time
- Doing on-call 👹

I’m beginning to think this is the area where developers need the most support. 

The job search is stressful for sure but it makes up such a small portion of the developer life-cycle. You won’t be spending your days optimizing algorithms or manipulating palindromes.

The part after the interview is when the real work begins.

If you’re a recently hired developer, what are some areas where you wish you had more knowledge?",TEXT,Brian,Jenney,17080,17080,113,19,1,0,0.00778688524590164,,2024-07-11 06:25:49,https://www.linkedin.com/feed/update/urn:li:activity:7217157136299040768
urn:li:activity:7216525896097124352,"What you thought the interview was going to be:

- traverse this tree
- link this list... but backwards!
- optimize Djikstra
- buy and sell these stocks!

What you got:

- why do you want to work here?
- tell me about a time when...
- how many duplicates in this string?
- any questions for me?

Tomorrow I want to go over some strategies to do before/after/during the interview for non-FAANG companies. 

This is based on my experience doing over 100 interviews, bombing too many to count, getting on site to your most loved (or most hated) companies and speaking with over 500 developers across the globe.

I hope you find it useful and I'm not even selling anything! 

Will record and send in my newsletter which you can find at Parsity[dot]io 😎",EVENT,Brian,Jenney,10001,10001,43,5,3,0,0.005099490050994901,,2024-07-09 12:37:30,https://www.linkedin.com/feed/update/urn:li:activity:7216525896097124352
urn:li:activity:7216065652346769408,"My tech interview 10 years ago:

- Why do you want to work here?
- Y u no have CS degree?
- LeetCode easy or coding trivia
- In person lunch to make sure you’re not crazy
- 💰

My most recent tech interviews:

- Pair programming with screen share
- Automated code challenge (LeetCode medium+)
- Take home assignment that takes way too long
- Tell me about a technically complex project you did recently…
- Design some wildly complex system neither of us know how to build 🙄
- Let’s have 12 rounds spread out over 2 months because we don’t trust ourselves
- 😅

Interviews are a game and they are winnable. 

What’s great about tech interviews is that they’re standardized for the most part. The small startup in SF will use a similar format to the tech company in Austin.

Use this to your advantage and make sure you know your audience, research by any means necessary and maybe just cheat if all else fails.

Just kidding… or am I?

I sat down with the interview champion, Bhupinder Singh to get his takes on how to beat the interview, creating portfolios for bootcamp grads that don't suck and standing out as an early career developer. 

You can listen here
https://lnkd.in/gCPnQw-H",TEXT,Brian,Jenney,24677,24677,77,12,1,0,0.0036471208007456337,,2024-07-08 06:08:39,https://www.linkedin.com/feed/update/urn:li:activity:7216065652346769408
urn:li:activity:7214995890095153152,"Unit tests are a waste of time.

Instead of taking minutes to write a test you can just:

- write your code
- manually replicate all the scenarios you want to test
- pray for the best and have your QA team ensure it all works

Now that it works, don't touch it! 😅

𝗪𝗵𝗲𝗻 𝗱𝗼𝗻𝗲 𝗰𝗼𝗿𝗿𝗲𝗰𝘁𝗹𝘆:

- tests enable refactoring with confidence
- confirm edge cases
- document the ACTUAL functionality (I know your docs suck) 🤫

Oddly enough, most bootcamps skip any mention of unit testing even though most dev teams write loads of tests.

Follow along with the super short video below to write your first unit test with Jest and learn the basics of testing.",VIDEO,Brian,Jenney,12413,4783,158,17,12,0,0.015064851365503907,,2024-07-05 07:17:48,https://www.linkedin.com/feed/update/urn:li:activity:7214995890095153152
urn:li:activity:7213532867325308928,"This is me at 29.

Drunk, overweight and criminal.

Now, I'm 40.

Sober, 25 pounds lighter and a hell of a lot happier.

Here's a breakdown of what I learned along the way:

𝗠𝗼𝗱𝗲𝗿𝗮𝘁𝗶𝗼𝗻 𝗶𝘀 𝗮 𝗺𝘆𝘁𝗵.

- Getting sober, getting in shape and learning to code took more effort than I imagined. Way more. Sometimes you can work smarter and sometimes you just need to work harder.

𝗥𝗼𝘂𝘁𝗶𝗻𝗲𝘀 𝗮𝗿𝗲𝗻’𝘁 𝗯𝗼𝗿𝗶𝗻𝗴 - 𝘁𝗵𝗲𝘆 𝗮𝗿𝗲 𝘁𝗵𝗲 𝗸𝗲𝘆 𝘁𝗼 𝗳𝗿𝗲𝗲𝗱𝗼𝗺.

- I wake up and do the same damn thing most days. My routine is my rock in a chaotic world. It’s how I make time when there is none.

𝗕𝗮𝗱 𝗹𝘂𝗰𝗸 𝗶𝘀 𝗰𝗼𝗻𝘁𝗮𝗴𝗶𝗼𝘂𝘀. 𝗦𝗼 𝗶𝘀 𝗴𝗼𝗼𝗱 𝗹𝘂𝗰𝗸. 

- I stay away from negative people, social media accounts and news. Pessimists are rampant and they’re often right. Optimists are happy and often successful.",IMAGE,Brian,Jenney,26094,26094,249,47,0,0,0.01134360389361539,,2024-07-01 06:25:56,https://www.linkedin.com/feed/update/urn:li:activity:7213532867325308928
urn:li:activity:7212465424255344641,"Stuck on what to build for your next side project?

Here’s the process I’ve been using for years to learn everything from Typescript to AWS Lambdas:

1. 𝗣𝗶𝗰𝗸 𝗮𝗻 𝗔𝗣𝗜 - this is important, you need some external data or functionality in order to build something interesting or you’ll be mostly stuck with TODO or clone apps
    - 𝗨𝘀𝗲 𝗣𝗼𝘀𝘁𝗺𝗮𝗻 or some other http client to test the API and make sure it’s worthwhile
    - If the API is not free, 𝗰𝗼𝗻𝘀𝗶𝗱𝗲𝗿 𝗵𝗼𝘄 𝘆𝗼𝘂 𝗺𝗶𝗴𝗵𝘁 𝗹𝗲𝘃𝗲𝗿𝗮𝗴𝗲 𝗰𝗮𝗰𝗵𝗶𝗻𝗴 to limit requests
2. 𝗦𝗰𝗮𝗳𝗳𝗼𝗹𝗱 𝗼𝘂𝘁 𝘁𝗵𝗲 𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲 of the app - what is the first page a user lands on? What happens when they click a button? Where is data stored?
3. Begin building using the new technology/language you want to learn

𝗬𝗼𝘂 𝘄𝗶𝗹𝗹 𝗴𝗲𝘁 𝘀𝘁𝘂𝗰𝗸.

This is kinda what you want.

Google, ChatGPT and Stack Overflow through roadblocks. This will be a messy affair but you will learn a ton.",TEXT,Brian,Jenney,11903,11903,92,16,4,0,0.009409392590103335,,2024-06-28 07:42:38,https://www.linkedin.com/feed/update/urn:li:activity:7212465424255344641
urn:li:activity:7212190269708861441,"Help!

I have a podcast where I talk about learning to code, career development and technical advice for early career developers.

Here's the thing: it's been a decade since I first learned to code.

Right now, I'm struggling with running a business and my career direction as a technical person in people management. These are exciting problems to solve but they're much different than what I assume can benefit my audience.

If you're reading this, chances are you're my target demographic and you might even be good looking to boot!

𝗣𝗹𝗲𝗮𝘀𝗲 𝗹𝗲𝗮𝘃𝗲 𝗮 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝘆𝗼𝘂 𝘁𝗵𝗶𝗻𝗸 𝗜 𝘀𝗵𝗼𝘂𝗹𝗱 𝗮𝗻𝘀𝘄𝗲𝗿 𝗼𝗻 𝘁𝗵𝗲 𝘀𝗵𝗼𝘄 𝗮𝗻𝗱 𝗶𝗳 𝗜 𝗰𝗵𝗼𝗼𝘀𝗲 𝗶𝘁 - 𝗜'𝗹𝗹 𝘀𝗵𝗼𝘂𝘁 𝘆𝗼𝘂 𝗼𝘂𝘁! (if you wanna remain anonymous just use a 😎 emoji)",IMAGE,Brian,Jenney,4602,4602,37,11,0,0,0.010430247718383311,,2024-06-27 13:29:16,https://www.linkedin.com/feed/update/urn:li:activity:7212190269708861441
urn:li:activity:7211726722436595712,"6 services I've used to improve my skills as a software engineer.

Anything out there I missed?",VIDEO,Brian,Jenney,9673,3219,96,7,10,0,0.011682001447327613,,2024-06-26 06:47:18,https://www.linkedin.com/feed/update/urn:li:activity:7211726722436595712
urn:li:activity:7211393789599305728,"5 of my biggest regrets about my coding career(so far):

1. 𝗦𝘁𝗶𝗰𝗸𝗶𝗻𝗴 𝘁𝗼 𝗝𝗦 𝗳𝗼𝗿 𝘁𝗼𝗼 𝗹𝗼𝗻𝗴. It’s easy to get started with and a highly employable language. Learning Rust has opened my eyes to how easy I’ve had it working with such a high level language.
2. 𝗕𝗲𝗶𝗻𝗴 𝘁𝗼𝗼 𝗴𝗼𝗼𝗱 𝗳𝗼𝗿 𝗖𝗦𝗦. I took some kind of sick pride in not being very skilled at CSS. If you’re working on the front end - you need to have some respect for it. Users expect and depend on accessible, decent-looking sites.
3. 𝗟𝗲𝘁𝘁𝗶𝗻𝗴 𝗺𝘆 𝘄𝗼𝗿𝗸 𝘀𝗽𝗲𝗮𝗸 𝗳𝗼𝗿 𝗶𝘁𝘀𝗲𝗹𝗳. Naive at best. This was really an excuse to cover up the fact I was scared and insecure to speak up or share ideas. When I started speaking, my career really accelerated.
4. 𝗡𝗼𝘁 𝘁𝗮𝗸𝗶𝗻𝗴 𝗼𝗽𝘁𝗶𝗰𝘀 𝘀𝗲𝗿𝗶𝗼𝘂𝘀𝗹𝘆. No one would call me a fashion icon. 𝗜 𝘄𝗲𝗮𝗿 𝘀𝗶𝗹𝗹𝘆 𝗻𝗲𝗼𝗻 𝘀𝘄𝗲𝗮𝘁𝘀𝗵𝗶𝗿𝘁𝘀 and don’t take myself too seriously. This works well in developer circles but 𝘁𝗵𝗲 𝗷𝗼𝗸𝗲 𝗱𝗼𝗲𝘀𝗻’𝘁 𝘁𝗿𝗮𝗻𝘀𝗹𝗮𝘁𝗲 𝘄𝗲𝗹𝗹 𝘁𝗼 𝗽𝗲𝗼𝗽𝗹𝗲 𝗼𝘂𝘁𝘀𝗶𝗱𝗲 𝘁𝗲𝗰𝗵. Every book I’ve read on the subject of impressing others gives this advice: 𝗱𝗿𝗲𝘀𝘀 𝗮 𝗹𝗶𝘁𝘁𝗹𝗲 𝗻𝗶𝗰𝗲𝗿 𝘁𝗵𝗮𝗻 𝘁𝗵𝗲 𝗽𝗲𝗼𝗽𝗹𝗲 𝗶𝗻 𝘆𝗼𝘂𝗿 𝗴𝗿𝗼𝘂𝗽 to give an air of authority. I’m trying this right now - will let you know how it goes.
5. 𝗕𝗲𝗶𝗻𝗴 𝗮 𝗰𝗼𝗱𝗲𝗿. Writing code is cool. Understanding business problems and finding ways to make businesses more money through code is cooler. 𝗨𝗻𝗱𝗲𝗿𝘀𝘁𝗮𝗻𝗱𝗶𝗻𝗴 𝘁𝗵𝗶𝘀 𝘄𝗼𝘂𝗹𝗱’𝘃𝗲 𝘀𝗮𝘃𝗲𝗱 𝗺𝗲 𝗳𝗿𝗼𝗺 𝗮 𝗳𝗲𝘄 𝗳𝗮𝗶𝗹𝗲𝗱 𝗯𝘂𝘀𝗶𝗻𝗲𝘀𝘀𝗲𝘀 and given me more direction on where to spend my energy as a manager and coder.

I’ll have many more regrets in the future but that’s what makes life interesting right?

Right? 😅",TEXT,Brian,Jenney,15010,15010,171,22,1,0,0.012924716855429714,,2024-06-25 08:44:20,https://www.linkedin.com/feed/update/urn:li:activity:7211393789599305728
urn:li:activity:7211002063919403008,"Everyone is telling you to just do freelance as a web dev. If only it were that simple. 

I've done quite a lot of contract work over the years without ever using UpWork, Fiverr or any freelance site.

A few students at Parsity have supplemented their own experience with freelance jobs. When I ask them about their approach, I see a lot similarities with what has worked for me:

1. 𝗦𝘁𝗮𝗿𝘁 𝗹𝗼𝗰𝗮𝗹. Find a friend, business or organization that needs a site. If you can't think of one, 𝗱𝗼 𝗮 𝗚𝗼𝗼𝗴𝗹𝗲 𝘀𝗲𝗮𝗿𝗰𝗵 𝗳𝗼𝗿 𝗯𝗿𝗶𝗰𝗸 𝗮𝗻𝗱 𝗺𝗼𝗿𝘁𝗮𝗿 𝗯𝘂𝘀𝗶𝗻𝗲𝘀𝘀𝗲𝘀 like child care centers, dentists or podiatrists and check out their sites. If they don't exist or if they suck - 𝗰𝗮𝗹𝗹 𝘁𝗵𝗲𝗺 𝗮𝗻𝗱 𝗺𝗮𝗸𝗲 𝘁𝗵𝗲𝗺 𝗮𝗻 𝗼𝗳𝗳𝗲𝗿.
   
2. 𝗦𝗲𝗹𝗹 𝘁𝗵𝗲 𝘀𝗼𝗹𝘂𝘁𝗶𝗼𝗻, 𝗻𝗼𝘁 𝘁𝗵𝗲 𝘁𝗲𝗰𝗵. Businesses like money. 𝗛𝗼𝘄 𝗰𝗮𝗻 𝘆𝗼𝘂 𝘂𝘀𝗲 𝘆𝗼𝘂𝗿 𝘀𝗸𝗶𝗹𝗹𝘀 𝗮𝘀 𝗮 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝘁𝗼 𝗯𝗿𝗶𝗻𝗴 𝘁𝗵𝗲𝗺 𝗺𝗼𝗿𝗲 𝗰𝘂𝘀𝘁𝗼𝗺𝗲𝗿𝘀? Will a new site do that? Can you improve the layout or content? Can you add functionality like appointment booking or payment processing?
   
3. 𝗚𝗲𝘁 𝗽𝗮𝗶𝗱 𝗶𝗻 𝗿𝗲𝗳𝗲𝗿𝗿𝗮𝗹𝘀. When you're starting off, it might be hard to gain trust or have the confidence to charge 1k for a 3 -5 page site. 𝗕𝘂𝗶𝗹𝗱 𝗳𝗼𝗿 𝗳𝗿𝗲𝗲 𝗶𝗻 𝗲𝘅𝗰𝗵𝗮𝗻𝗴𝗲 𝗳𝗼𝗿 𝗮 𝘀𝗶𝗻𝗰𝗲𝗿𝗲 𝗿𝗲𝗰𝗼𝗺𝗺𝗲𝗻𝗱𝗮𝘁𝗶𝗼𝗻. Then never work for free again.
   
One summer, as a 37 year old senior software engineer, I did 100 cold calls for my buddy's business so I could learn sales.

It was draining, uncomfortable and I dreaded it. 

I learned a ton.

If you don't have experience, you got to get it somehow.",TEXT,Brian,Jenney,11692,11692,109,21,8,0,0.011802942182689019,,2024-06-24 06:47:45,https://www.linkedin.com/feed/update/urn:li:activity:7211002063919403008
urn:li:activity:7210330249199255554,"Outside of FAANG interviews, I have NEVER been asked to traverse a tree or reverse a linked list.

I did however once get asked to create a snake game with HTML, CSS and JS. I'm not sure how related it was to the role but it was pretty fun. 😅

Because I like you and you're probably a nerd if you're reading this - I've created a partially done version of the snake game for you to complete.

It's missing functionality within the the TODOs in the comments. If you figure out the problem and post it - please tag me!

https://lnkd.in/gbvu3gV6",IMAGE,Brian,Jenney,13147,13147,69,23,1,0,0.007073857153723283,,2024-06-22 10:18:12,https://www.linkedin.com/feed/update/urn:li:activity:7210330249199255554
urn:li:activity:7209629445219913729,"I'm not teaching my kids how to code.

Not because I think that AI will take all the jobs or that the industry is too volatile. I think the exact opposite actually.

The reason I'm not teaching them to code is simply because they have other interests.

I enjoy this career and highly recommend it. I also don't have a lot to compare it to.

𝗢𝘃𝗲𝗿 𝗮 𝗱𝗲𝗰𝗮𝗱𝗲 𝗮𝗴𝗼 𝗺𝘆 𝗹𝗶𝗳𝗲 𝘄𝗮𝘀 𝗶𝗻 𝗮 𝘁𝗮𝗶𝗹𝘀𝗽𝗶𝗻. I was addicted, unhappy and barely getting by. It feels like a lifetime has passed since then.

My oldest son just graduated high school and I thought about the advice I'd give him if he DID want to pursue a career in software. It's not much different than the advice I've told him about pursuing a design career:

1. 𝗙𝗶𝗻𝗱 𝘀𝗼𝗺𝗲𝗼𝗻𝗲 𝘄𝗵𝗼 𝗵𝗮𝘀 ""𝗺𝗮𝗱𝗲 𝗶𝘁"" 𝗮𝗻𝗱 𝗴𝗲𝘁 𝘁𝗵𝗲𝗶𝗿 𝗮𝗱𝘃𝗶𝗰𝗲/𝗺𝗲𝗻𝘁𝗼𝗿𝘀𝗵𝗶𝗽. Pay them or work for free so you're both invested.
2. 𝗗𝗼 𝘀𝗼𝗺𝗲 𝗳𝗿𝗲𝗲 𝘄𝗼𝗿𝗸 for someone else and get recommendations.
3. 𝗙𝗶𝗻𝗱 𝗽𝗲𝗼𝗽𝗹𝗲 𝘄𝗵𝗼 𝗮𝗿𝗲 𝘁𝗿𝘆𝗶𝗻𝗴 𝘁𝗼 𝗱𝗼 𝘄𝗵𝗮𝘁 𝘆𝗼𝘂 𝗮𝗿𝗲 doing and steal what works for them.
4. 𝗦𝗵𝗮𝗿𝗲 𝘄𝗵𝗮𝘁 𝘆𝗼𝘂'𝗿𝗲 𝘄𝗼𝗿𝗸𝗶𝗻𝗴 𝗼𝗻 in public to attract people who can offer guidance or opportunity.
5. 𝗟𝗲𝗮𝗿𝗻 𝘁𝗵𝗲 𝗮𝗿𝘁 𝗼𝗳 𝘀𝗲𝗹𝗹𝗶𝗻𝗴 𝗮𝗻𝗱 𝗵𝗼𝘄 𝘁𝗼 𝘀𝗽𝗲𝗮𝗸 𝗹𝗶𝗸𝗲 𝗮𝗻 𝗮𝘂𝘁𝗵𝗼𝗿𝗶𝘁𝘆. Read books on this stuff, it's learnable and can only help no matter what you do.

I break down the advice I'd give him or anyone looking to break into software in this episode here: https://lnkd.in/g-2g4qEe and I hope it's helpful.",IMAGE,Brian,Jenney,24987,24987,186,23,1,0,0.008404370272541721,,2024-06-20 11:53:28,https://www.linkedin.com/feed/update/urn:li:activity:7209629445219913729
urn:li:activity:7209270665051271168,You won't get better at React/JS/TS/whatevs from watching someone else type. You might get better by doing this however 👇,VIDEO,Brian,Jenney,8444,2788,95,9,3,0,0.012671719564187589,,2024-06-19 12:07:48,https://www.linkedin.com/feed/update/urn:li:activity:7209270665051271168
urn:li:activity:7208912746719903744,"The job search can feel unrewarding, draining and shake what little confidence you have in yourself.

It’s a game of both skill and chance.

You can be absolutely qualified and still “fail”.

Rejection is rarely personal, it’s an inevitable consequence of many factors:

- 𝗥𝗲𝘀𝘂𝗺𝗲 𝗾𝘂𝗮𝗹𝗶𝘁𝘆 𝗶𝘀 𝘀𝘂𝗯𝗷𝗲𝗰𝘁𝗶𝘃𝗲 (ask 5 people to look at your resume and get 5 different opinions)

- Some 𝗰𝗼𝗺𝗽𝗮𝗻𝗶𝗲𝘀 𝗵𝗶𝗿𝗲 𝗶𝗻𝘁𝗲𝗿𝗻𝗮𝗹 𝗰𝗮𝗻𝗱𝗶𝗱𝗮𝘁𝗲𝘀 but open roles to the public with 0 intention of hiring

- 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿𝗶𝗻𝗴 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗰𝗮𝗻 𝗯𝗲 𝗯𝗶𝗮𝘀𝗲𝗱 in favor of a specific answer even when presented with working (or even better) alternatives

So what does this mean?

- Expect failure and learn from it.
- Try your hardest not to take it personally.

Whatever you do, please do not stop playing the game.

You only have to win once.",TEXT,Brian,Jenney,7751,7751,88,6,1,0,0.012256483034447168,,2024-06-18 12:36:18,https://www.linkedin.com/feed/update/urn:li:activity:7208912746719903744
urn:li:activity:7208499870192603139,"I bombed the interview so hard, I considered just walking out.

In my second round at the Google onsite 7 years ago, my interviewer was visibly frustrated. I was bumbling through a tree traversal problem using a for loop 🙄.

""𝘛𝘩𝘪𝘴 𝘪𝘴 𝘸𝘩𝘺 𝘸𝘦 𝘥𝘰𝘯'𝘵 𝘶𝘴𝘶𝘢𝘭𝘭𝘺 𝘩𝘪𝘳𝘦 𝘴𝘦𝘭𝘧-𝘵𝘢𝘶𝘨𝘩𝘵 𝘥𝘦𝘷𝘴"", he said before he took over and showed me how he would've approached the problem.

Let me be clear: this guy was an ass hat of the highest degree.

He also exposed a major gap in my coding knowledge.

I went on to spend lots of money on programs, books and courses to learn data structures and algorithms. This helped me pass a ton more interviews but also increased my confidence.

𝗛𝗲𝗿𝗲'𝘀 𝘁𝗵𝗲 𝘁𝗵𝗶𝗻𝗴 𝘁𝗵𝗼𝘂𝗴𝗵:

99% of the technical interview advice you read is for the top 1% of companies.

I just left the interview circuit and have spoken with 500 developers over the last 18 months. I also completed around 100 interviews over the last 10 years.

Your next interview is much more likely to revolve around building a React component, talking about your past experiences and coding challenges that will involve arrays or strings rather than trees.

I talk about how to prepare for the interviews for the 99% of companies outside FAANG here: https://lnkd.in/gRqHXib6",TEXT,Brian,Jenney,2873799,2873801,1228,123,14,0,0.00047498102685678435,,2024-06-17 09:04:56,https://www.linkedin.com/feed/update/urn:li:activity:7208499870192603139
urn:li:activity:7207387406784733184,"When I learned about this debugging ""trick"" it changed the way I investigated issues in my JS code.

It's odd that I see so few people using this method but hopefully it makes your life a little easier as you crank out bugs.",VIDEO,Brian,Jenney,5705,2055,63,15,0,0,0.013672217353198948,,2024-06-14 07:24:24,https://www.linkedin.com/feed/update/urn:li:activity:7207387406784733184
urn:li:activity:7207029362993295363,"You want to build an amazing side project but you don’t know where to start.

❌ TODO app?
❌ Clone of that other app that you use?
❌ Tutorial project?

When I’m not sure what I want to build, I do this:

- 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝘁𝗵𝗲 𝗱𝗮𝘁𝗮 - what API can you use which may have some interesting information?
- 𝗨𝘀𝗲 𝗮 𝘁𝗼𝗼𝗹 𝗹𝗶𝗸𝗲 𝗣𝗼𝘀𝘁𝗺𝗮𝗻 𝘁𝗼 𝗲𝗻𝘀𝘂𝗿𝗲 𝘁𝗵𝗲 𝗔𝗣𝗜 𝗶𝘀 𝘄𝗼𝗿𝘁𝗵𝘄𝗵𝗶𝗹𝗲 and accessible
- 𝗪𝗵𝗮𝘁 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 𝗰𝗮𝗻 𝘆𝗼𝘂 𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁 𝗮𝗿𝗼𝘂𝗻𝗱 𝘁𝗵𝗲 𝗔𝗣𝗜? For example, a real time stock API could be used to trigger an alert to a user when it dips below a certain threshold
- Figure out the 𝗺𝗶𝗻𝗶𝗺𝗮𝗹 𝗮𝗺𝗼𝘂𝗻𝘁 𝗼𝗳 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀
- 𝗪𝗵𝗮𝘁 𝗶𝘀 𝘁𝗵𝗲 𝘂𝘀𝗲𝗿 𝗳𝗹𝗼𝘄? What happens when a user goes to your app? What is the feature they interact with and how is the data surfaced?
- Pick a combination of new and familiar technologies
- Get stuck, read the docs and 𝗯𝘂𝗶𝗹𝗱 𝘆𝗼𝘂𝗿 𝘄𝗮𝘆 𝗼𝘂𝘁 𝗼𝗳 𝘁𝗵𝗲 𝗵𝗼𝗹𝗲 𝘆𝗼𝘂’𝘃𝗲 𝗱𝘂𝗴 😅
- Gain more practical knowledge than a 100 hour course could ever offer you",TEXT,Brian,Jenney,11299,11299,132,22,6,0,0.014160545180989468,,2024-06-13 07:41:40,https://www.linkedin.com/feed/update/urn:li:activity:7207029362993295363
urn:li:activity:7206328329593888769,"I got paid a total of 0 dollars from doing 500 calls with software developers over the last 18 months.

It was a great investment.

I learned about what many of you are struggling with, met some amazing people, got some of you unstuck and a few of you even became customers of mine.

As much as I’d like to continue these calls, I know there’s a better way to reach more people and I just don’t know how to do it yet.

What do you suggest?",IMAGE,Brian,Jenney,21423,21423,76,27,0,0,0.004807916725015171,,2024-06-11 09:16:00,https://www.linkedin.com/feed/update/urn:li:activity:7206328329593888769
urn:li:activity:7205954993273643009,"The problem with 99% of the technical interview advice you read is that it applies to the top 1% of companies out there.

I spoke with over 500 developers in the last couple years and now own an online coding school, Parsity where we’ve rolled out mock interviews which reflect the reality of the non-tech job market.

𝗛𝗲𝗿𝗲’𝘀 𝟰 𝘁𝘆𝗽𝗲𝘀 𝗼𝗳 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗜 𝘀𝗲𝗲 𝗼𝘃𝗲𝗿-𝗿𝗲𝗽𝗿𝗲𝘀𝗲𝗻𝘁𝗲𝗱 𝗳𝗼𝗿 𝘄𝗲𝗯 𝗱𝗲𝘃 𝗿𝗼𝗹𝗲𝘀:

- build a React component that fetches data
- JS trivia including closure, 𝚕𝚎𝚝 vs 𝚌𝚘𝚗𝚜𝚝, event loop and 𝚝𝚑𝚒𝚜
- take home assignment that’s supposed to take 2 hours but is really a full day 😅
- code challenges using 2 pointers, sliding window and array manipulation

I’ve also met developers who accepted offers after no technical screening at all! This has happened to me at least twice.

While you’re pounding LeetCode, don’t forget to have some answers in your back pocket for questions like “𝘵𝘦𝘭𝘭 𝘮𝘦 𝘢𝘣𝘰𝘶𝘵 𝘺𝘰𝘶𝘳𝘴𝘦𝘭𝘧?” or “𝘸𝘩𝘺 𝘥𝘰 𝘺𝘰𝘶 𝘸𝘢𝘯𝘵 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘩𝘦𝘳𝘦?”

Also - when in doubt, just say ""𝘐'𝘥 𝘶𝘴𝘦 𝘢 𝘩𝘢𝘴𝘩 𝘮𝘢𝘱 𝘵𝘰 𝘴𝘱𝘦𝘦𝘥 𝘶𝘱 𝘵𝘩𝘦 𝘳𝘶𝘯 𝘵𝘪𝘮𝘦!"" You'll probably be right 47% of the time 🤷.

Good luck out there.",TEXT,Brian,Jenney,17726,17726,95,21,3,0,0.006713302493512355,,2024-06-10 08:32:30,https://www.linkedin.com/feed/update/urn:li:activity:7205954993273643009
urn:li:activity:7204539407033335811,"Grinding LeetCode !== Learning DSA

Most of your interviews won't involve trees, recursion or a whiteboard. You should still learn these things.

Here's how I went from zero to 🌲 in O(n).

I write to developers once per week about career, coding and sucking less at software: https://lnkd.in/gmEZY7K8",VIDEO,Brian,Jenney,29603,13249,211,14,9,0,0.007904604263081445,,2024-06-06 10:47:28,https://www.linkedin.com/feed/update/urn:li:activity:7204539407033335811
urn:li:activity:7204494058562437123,"The interview started before you made it to the interview.

You turn on the camera to get prepared for the technical screening.

You spend 15 minutes on “tell me about yourself” and the interviewer is too polite to cut you off.

𝗡𝗼𝘄 𝘁𝗵𝗲 𝗥𝗘𝗔𝗟 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗯𝗲𝗴𝗶𝗻𝘀.

- You studied how to detect palindromes and common DSA.
- The problem is to create a React component 😐
- You didn’t set up VS Code so you bumble around and run 𝚌𝚛𝚎𝚊𝚝𝚎-𝚗𝚎𝚡𝚝-𝚊𝚙𝚙 to get something to begin.
- In the remaining 30 minutes you struggle with your system settings to disable Co-Pilot  and write some decent code but can’t quite get the last piece of the puzzle.
- With 5 minutes left, the interviewer invites you to ask any questions but you don't have one... 😬

𝗧𝗿𝘆 𝘁𝗵𝗶𝘀 𝗶𝗻𝘀𝘁𝗲𝗮𝗱:

- 𝗔𝘀𝗸 𝘄𝗵𝗮𝘁 𝘆𝗼𝘂 𝘀𝗵𝗼𝘂𝗹𝗱 𝗽𝗿𝗲𝗽𝗮𝗿𝗲 𝗯𝗲𝗳𝗼𝗿𝗲 𝘁𝗵𝗲 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 and what kind of problem you will be asked
- 𝗨𝘀𝗲 𝗖𝗼𝗱𝗲𝗣𝗲𝗻 𝗼𝗿 𝗖𝗼𝗱𝗲𝗦𝗮𝗻𝗱𝗯𝗼𝘅 to quickly scaffold an environment
- 𝗞𝗲𝗲𝗽 𝘁𝗵𝗲 𝗰𝗵𝗶𝘁-𝗰𝗵𝗮𝘁 𝘁𝗼 𝗮 𝗺𝗶𝗻𝗶𝗺𝘂𝗺 during a tech screen to get to the real problem
- 𝗛𝗮𝘃𝗲 𝗮 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝗼𝗿 𝟮 prepared to ask when it’s over
- Do some pushups or a walk around the block to 𝗿𝗲𝗹𝗲𝗮𝘀𝗲 𝘀𝗼𝗺𝗲 𝗻𝗲𝗿𝘃𝗼𝘂𝘀 𝗲𝗻𝗲𝗿𝗴𝘆.

Good luck.

I write to who want to accelerate their careers once per week here: https://lnkd.in/gmEZY7K8",TEXT,Brian,Jenney,8610,8610,76,8,2,0,0.009988385598141697,,2024-06-06 07:47:16,https://www.linkedin.com/feed/update/urn:li:activity:7204494058562437123
urn:li:activity:7203811513592168450,"There is a limit to the return on your technical ability.

I don't think every developer needs to be a mini-influencer but learning how to communicate your ideas is a suspiciously underrated skill in tech.

Public speaking goes from a nice-to-have to a must-have the higher up the engineering ladder you climb.

You don't have to wait to start practicing this skill. I break down 3 tactics I used to go from shy, quiet developer to a less-shy, vocal developer.",ARTICLE,Brian,Jenney,3251,3251,25,5,1,0,0.009535527529990772,,2024-06-04 10:35:05,https://www.linkedin.com/feed/update/urn:li:activity:7203811513592168450
urn:li:activity:7203780857063510018,"After nearly 4 years at Clorox, I was laid off.

The same month I was laid off, I secured an offer at a new company.

Here's 3 lessons from getting laid off and hired in the same month:

1. 𝗕𝗲𝗵𝗮𝘃𝗶𝗼𝗿𝗮𝗹 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗮𝗿𝗲 𝗲𝗾𝘂𝗮𝗹𝗹𝘆 𝗶𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 𝗮𝘀 𝗧𝗲𝗰𝗵𝗻𝗶𝗰𝗮𝗹 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀: Between coding challenges and take home assignments, I prepared a list of technical stories from my work experience, to answer the most common behavioral questions that I've been asked over and over again.
   
2. 𝗦𝘁𝗮𝗯𝗶𝗹𝗶𝘁𝘆 𝗶𝘀 𝗮 𝗺𝘆𝘁𝗵. Our entire org got axed at a big, stable, non-tech company. There is no where to hide nowadays. Tech is not the only industry affected by layoffs and economic instability.
   
3. 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 ≠ 𝗿𝗲𝗮𝗹𝗶𝘁𝘆. Most of my opportunities came from outside LinkedIn. Some of my co-workers were hired shortly after being laid off and they never use Linkedin. I cannot speak for everyone. What I can say is that with 10 years in the tech market, I had access to a network to help me access opportunities, that's the power of building a network you can tap into.
   
At the end of the day, the pessimists are often right but the optimists are often successful.

There are a lot of other lessons I’ve learned over the last 10 years working in software and I’ll be sharing some of the major takeaways at an upcoming webinar hosted by Code Career Mastery .

RSVP here 👉 https://bit.ly/44XRLKN

Hope to see you there.",TEXT,Brian,Jenney,49587,49587,221,26,4,0,0.005061810555185835,,2024-06-04 08:33:16,https://www.linkedin.com/feed/update/urn:li:activity:7203780857063510018
urn:li:activity:7203392450386624512,"🙄 As much as we like to dunk on recruiters, they can be your best resource on the job hunt.

I interviewed David Roberts, a software developer turned recruiter turned career coach. He schooled me on why most of us, especially bootcamp grads, are going about LinkedIn, GitHub profiles and  job searching in the wrong way.

David breaks down how to stand out as a developer on the job market, thoughts on “free work” and learning how to “sell” yourself.

You can check it out here: https://lnkd.in/gpzTfxMQ",IMAGE,Brian,Jenney,18237,18237,119,23,8,0,0.008225037012666556,,2024-06-03 06:49:52,https://www.linkedin.com/feed/update/urn:li:activity:7203392450386624512
urn:li:activity:7202333831591284737,"You don’t have a problem learning to code. 

You have a time management issue.

Instead of spending marathon sessions where you cram on the weekend, try this:

- 𝗦𝘁𝗿𝗮𝘁𝗲𝗴𝗶𝘇𝗲 - use a decision matrix to identify the most important task you can do
- 𝗣𝗹𝗮𝗻 - tackle the most important thing in the morning
- 𝗦𝗮𝗰𝗿𝗶𝗳𝗶𝗰𝗲 - open your phone and check your activity - something’s gotta give
- 𝗦𝗽𝗿𝗶𝗻𝘁 - humans aren’t robots… yet. Take short pauses to reflect and correct your course

30 mins a day > 6 hours on your day off

consistency > intensity",IMAGE,Brian,Jenney,5534,5534,56,13,0,0,0.012468377303939284,,2024-05-31 08:43:18,https://www.linkedin.com/feed/update/urn:li:activity:7202333831591284737
urn:li:activity:7201982845081329665,"I break down the 4 lessons I learned about starting a 5 figure side business as a software developer on this week's episode of Develop Yourself Podcast (link in bio).

Most people trying to start their own business focus on:

- landing page
- offer creation
- website
- email sequences
- social media

When they skipped an important step:

- have a skill or product to solve a problem

I've started more than a few failed businesses and finally had some success in the last couple years. 

This business is mostly on maintenance mode since I've taken over ownership of Parsity (as the chart shows) but I think there are some lessons you might find helpful if you're thinking of trying on your entrepreneurship hat.",TEXT,Brian,Jenney,2476,2476,26,8,0,0,0.013731825525040387,,2024-05-30 09:28:36,https://www.linkedin.com/feed/update/urn:li:activity:7201982845081329665
urn:li:activity:7201615514253602816,"My poor Git skills didn't really bite me until 3 years into my career.

I had just been hired as a developer for a cool tech startup. I volunteered to handle a code release, just like I've recommended in previous posts. 

The lead developer was off that night and told me his process to merge a small change from one branch to production.

Simple, I thought.

He scribbled his Git work flow on a whiteboard in a small office while I tried to hide my anxiety. It was so much different than any flow I'd used. 𝗜 𝘄𝗮𝘀 𝗰𝗼𝗻𝗳𝘂𝘀𝗲𝗱 𝗯𝘂𝘁 𝗱𝗶𝗱𝗻'𝘁 𝘄𝗮𝗻𝘁 𝘁𝗼 𝗮𝗱𝗺𝗶𝘁 𝗶𝘁.

I wrote down the process step by step in my notebook as if it was some secret spell.

That night I merged something into production successfully.

One problem:

It wasn't the right code 😬.

My manager saved me that morning and we reverted my changes and merged the correct code.

I was painfully embarrassed. I also knew it was time for me to actually understand how to use Git.

Here are a few things which helped me get Git before I got got... 🧐

- use 𝚘𝚑𝚖𝚢𝚣𝚜𝚑 to 𝗺𝗮𝗸𝗲 𝗺𝘆 𝘁𝗲𝗿𝗺𝗶𝗻𝗮𝗹 𝗺𝗼𝗿𝗲 𝗚𝗶𝘁-𝗳𝗿𝗶𝗲𝗻𝗱𝗹𝘆
- 𝗮𝗱𝗱 𝗮𝗹𝗶𝗮𝘀 𝗰𝗼𝗺𝗺𝗮𝗻𝗱𝘀 so I could type things like 𝚐𝚌𝚘 instead of 𝚐𝚒𝚝 𝚌𝚑𝚎𝚌𝚔𝚘𝚞𝚝
- learn how to 𝗶𝗻𝘃𝗲𝘀𝘁𝗶𝗴𝗮𝘁𝗲 𝗰𝗵𝗮𝗻𝗴𝗲𝘀 within a branch with 𝚐𝚒𝚝 𝚕𝚘𝚐
- 𝗯𝗶𝗻𝗮𝗿𝘆 𝘀𝗲𝗮𝗿𝗰𝗵 𝗺𝘆 𝗰𝗼𝗺𝗺𝗶𝘁𝘀 to see where I introduced a bug using 𝚐𝚒𝚝 𝚋𝚒𝚜𝚎𝚌𝚝
- 𝗰𝗵𝗲𝗰𝗸𝗼𝘂𝘁 𝗰𝗵𝗮𝗻𝗴𝗲𝘀 𝗳𝗿𝗼𝗺 𝗮 𝘀𝗶𝗻𝗴𝗹𝗲 𝗳𝗶𝗹𝗲 on a different branch 𝚐𝚒𝚝 𝚌𝚑𝚎𝚌𝚔𝚘𝚞𝚝 <𝚋𝚛𝚊𝚗𝚌𝚑> -- 𝚙𝚊𝚝𝚑/𝚝𝚘/𝚏𝚒𝚕𝚎
- understand how to 𝗿𝗲𝘃𝗲𝗿𝘁 𝗮 𝗿𝗲𝘃𝗲𝗿𝘁 𝚐𝚒𝚝 𝚛𝚎𝚟𝚎𝚛𝚝 <𝚌𝚘𝚖𝚖𝚒𝚝-𝚑𝚊𝚜𝚑-𝚏𝚛𝚘𝚖-𝚘𝚛𝚒𝚐𝚒𝚗𝚊𝚕-𝚛𝚎𝚟𝚎𝚛𝚝>
- 𝗼𝗻𝗹𝘆 𝗺𝗲𝗿𝗴𝗲 𝗰𝗲𝗿𝘁𝗮𝗶𝗻 𝗰𝗼𝗺𝗺𝗶𝘁𝘀 into a branch with 𝚌𝚑𝚎𝚛𝚛𝚢-𝚙𝚒𝚌𝚔

My major flaw is that I was too concerned with memorizing a particular set of commands to achieve something. There are at 𝚗 different ways to get the same outcome with Git.

I now like to start with a simple question: ""𝘞𝘩𝘢𝘵 𝘢𝘮 𝘐 𝘵𝘳𝘺𝘪𝘯𝘨 𝘵𝘰 𝘥𝘰?"" and work backwards from there.",TEXT,Brian,Jenney,14639,14639,161,23,3,0,0.01277409659129722,,2024-05-29 09:08:58,https://www.linkedin.com/feed/update/urn:li:activity:7201615514253602816
urn:li:activity:7200895246665146368,"Could there be a worse time to learn to code?

I was 2 months sober, working a full time job while doing ride share on the side and had 2 kids at home.

I had negative time.

𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝘁𝗼 𝗰𝗼𝗱𝗲 𝘁𝗮𝘂𝗴𝗵𝘁 𝗺𝗲 𝘁𝗵𝗲 𝟮𝗻𝗱 𝗺𝗼𝘀𝘁 𝗶𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 𝘀𝗸𝗶𝗹𝗹 𝗜 𝘄𝗼𝘂𝗹𝗱 𝗻𝗲𝗲𝗱 𝘁𝗼 𝗯𝗲𝗰𝗼𝗺𝗲 𝗮 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿: time management.

It really just boiled down to:

1. 𝗣𝗹𝗮𝗻 𝗼𝘂𝘁 𝘄𝗵𝗮𝘁 𝘁𝗼 𝗱𝗼 (𝘦𝘹: 𝘵𝘰𝘮𝘰𝘳𝘳𝘰𝘸 - 𝘧𝘪𝘯𝘪𝘴𝘩 𝘴𝘦𝘤𝘵𝘪𝘰𝘯 1 𝘰𝘧 Colt Steele'𝘴 𝘜𝘥𝘦𝘮𝘺 𝘤𝘰𝘶𝘳𝘴𝘦)
2. No cold plunge. No meditation. No daily affirmation. 𝗪𝗼𝗿𝗸 𝗳𝗶𝗿𝘀𝘁 𝘁𝗵𝗶𝗻𝗴 before my kids yell at me for pancakes.
3. 𝗠𝗮𝗸𝗲 𝗮 𝗱𝗲𝗰𝗶𝘀𝗶𝗼𝗻 𝗺𝗮𝘁𝗿𝗶𝘅 to see what is the single most important thing I can do. (𝘦𝘹: 𝘤𝘳𝘦𝘢𝘵𝘦 4 𝘴𝘲𝘶𝘢𝘳𝘦𝘴 𝘰𝘯 𝘢 𝘱𝘢𝘱𝘦𝘳. 𝙄𝙢𝙥𝙤𝙧𝙩𝙖𝙣𝙩/𝙪𝙧𝙜𝙚𝙣𝙩, 𝘪𝘮𝘱𝘰𝘳𝘵𝘢𝘯𝘵/𝘯𝘰𝘯-𝘶𝘳𝘨𝘦𝘯𝘵, 𝘯𝘰𝘵 𝘪𝘮𝘱𝘰𝘳𝘵𝘢𝘯𝘵/𝘯𝘰𝘵-𝘶𝘳𝘨𝘦𝘯𝘵, 𝘯𝘰𝘵 𝘪𝘮𝘱𝘰𝘳𝘵𝘢𝘯𝘵/𝘶𝘳𝘨𝘦𝘯𝘵)
4. 𝗠𝗮𝗸𝗲 𝗮 𝘀𝗮𝗰𝗿𝗶𝗳𝗶𝗰𝗲. I spent hours a day watching tv. I gave up binge-watching when I learned to code. For you, maybe you have to cut down on sports or harassing strangers online or whatever.

Happy Memorial Day 🫡 🇺🇸",TEXT,Brian,Jenney,8137,8137,78,18,0,0,0.011797959936094385,,2024-05-27 09:26:52,https://www.linkedin.com/feed/update/urn:li:activity:7200895246665146368
urn:li:activity:7199448204629716995,"You’re right, whiteboard interviews are unfair, biased and don't resemble the kind of work you do on a daily basis.

Now what?

Do you limit yourself to companies that don’t ask these types of questions?

Sure. I tried this for a while myself.

𝗬𝗼𝘂 𝗰𝗼𝘂𝗹𝗱 𝗮𝗹𝘀𝗼 𝗹𝗲𝗮𝗿𝗻 𝘀𝗼𝗺𝗲 𝗼𝗳 𝘁𝗵𝗲 𝗺𝗼𝘀𝘁 𝗰𝗼𝗺𝗺𝗼𝗻 𝗱𝗮𝘁𝗮 𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲𝘀 𝗮𝗻𝗱 𝗮𝗹𝗴𝗼𝗿𝗶𝘁𝗵𝗺𝘀 𝗮𝘁 𝘁𝗵𝗲 𝗨𝗻𝗶𝘃𝗲𝗿𝘀𝗶𝘁𝘆 𝗼𝗳 𝗬𝗼𝘂𝗧𝘂𝗯𝗲. Or if you’re a masochist, a book perhaps.

As a developer you ARE going to encounter these types of interviews. Why not give yourself a shot at actually passing them?

Want to get started?

- trees/tries
- linked lists
- graphs
- stacks/queues
- binary search
- merge sort
- quick sort

𝗜𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁 𝘁𝗵𝗲𝘀𝗲 𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲𝘀 𝗮𝗻𝗱 𝗮𝗹𝗴𝗼𝗿𝗶𝘁𝗵𝗺𝘀 𝗳𝗿𝗼𝗺 𝘀𝗰𝗿𝗮𝘁𝗰𝗵. Find the Big O time for the most common operations (eg.  what is the time complexity for searching a BST? How about inserting into a linked list?).

Great, now you can still turn down these white board interviews. But because you want to, not because you have to.",TEXT,Brian,Jenney,10876,10876,26,7,1,0,0.003126149319602795,,2024-05-23 09:36:51,https://www.linkedin.com/feed/update/urn:li:activity:7199448204629716995
urn:li:activity:7199080917921902594,"Eat / code / sleep is not a process for progress, it’s a recipe for burnout.

I’ve seen some of you trying out this method and I’ve yet to see it work.

Hell, I tried it myself.

It led to:

- anxiety
- less enthusiasm for my work
- decreased quality of thought

Counter-intuitively, the more I tried to cram in material or optimize my schedule, the less progress I was making.

It was frustrating.

For me, having a non-negotiable work out routine forced me to detach from work.

Few things can interrupt my workout besides a sick kid or a critical bug at work.

This is where I clear my mind and often where I come up with my best ideas. 

Getting in shape was honestly a side effect of this routine and perhaps the best “hack” I’ve discovered for keeping me sane in a fairly stressful occupation.",TEXT,Brian,Jenney,4645,4645,48,5,2,0,0.011840688912809472,,2024-05-22 09:17:23,https://www.linkedin.com/feed/update/urn:li:activity:7199080917921902594
urn:li:activity:7196913986578100224,"I got laid off at the end of March. I just verbally accepted an offer yesterday.

Here are some themes I noticed throughout my job searches, including this one:

• 𝗪𝗼𝗿𝗸𝗶𝗻𝗴 𝘄𝗶𝘁𝗵 𝗿𝗲𝗰𝗿𝘂𝗶𝘁𝗲𝗿𝘀 𝗶𝘀 𝗸𝗲𝘆. All my interviews came from recruiters - basically none from cold applying.
• 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 𝗲𝗮𝘀𝘆 𝗮𝗽𝗽𝗹𝘆 𝗶𝘀 𝗹𝗶𝗸𝗲 𝗽𝗹𝗮𝘆𝗶𝗻𝗴 𝘁𝗵𝗲 𝗹𝗼𝘁𝘁𝗼. It's unlikely to work but you can only win if you play.
• 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝘄𝗲𝗿𝗲 𝗮 𝗺𝗶𝘅 𝗼𝗳 𝗰𝗼𝗱𝗲 𝗰𝗵𝗮𝗹𝗹𝗲𝗻𝗴𝗲𝘀 𝗮𝗻𝗱 𝘀𝘁𝗼𝗿𝗶𝗲𝘀 to prove I knew my stuff. Very little DSA.
  
  𝘛𝘩𝘦𝘴𝘦 𝘲𝘶𝘦𝘴𝘵𝘪𝘰𝘯𝘴 𝘢𝘭𝘸𝘢𝘺𝘴 𝘤𝘰𝘮𝘦 𝘶𝘱:
  
  - Tell me about an Interesting project you worked on and your role.
  - How would you handle conflict/deadlines?
  - Tell me about a process/improvement you led.
  
• 𝗚𝗹𝗮𝘀𝘀𝗱𝗼𝗼𝗿, 𝗥𝗲𝗱𝗱𝗶𝘁 𝗮𝗻𝗱 𝗕𝗹𝗶𝗻𝗱 can really improve your chances of nailing an interview (𝘳𝘦𝘴𝘦𝘢𝘳𝘤𝘩 𝘱𝘳𝘦𝘷𝘪𝘰𝘶𝘴 𝘲𝘶𝘦𝘴𝘵𝘪𝘰𝘯𝘴)
• Writing down the 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝘃𝗮𝗹𝘂𝗲𝘀 𝗮𝗻𝗱 𝗶𝗻𝘀𝗲𝗿𝘁𝗶𝗻𝗴 𝘁𝗵𝗲𝗺 𝗶𝗻𝘁𝗼 𝘁𝗵𝗲 𝗰𝗼𝗻𝘃𝗼 is helpful
• Doing 𝗺𝗼𝗰𝗸 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗵𝗲𝗹𝗽𝗲𝗱 𝗺𝗲 𝗴𝗲𝘁 𝗼𝘃𝗲𝗿 𝗺𝘆 𝗻𝗲𝗿𝘃𝗲𝘀 (𝘐 𝘭𝘪𝘬𝘦 𝘗𝘳𝘢𝘮𝘱[𝘥𝘰𝘵]𝘤𝘰𝘮 - 𝘵𝘩𝘦𝘺 𝘴𝘩𝘰𝘶𝘭𝘥 𝘩𝘰𝘯𝘦𝘴𝘵𝘭𝘺 𝘴𝘱𝘰𝘯𝘴𝘰𝘳 𝘮𝘦 𝘢𝘵 𝘵𝘩𝘪𝘴 𝘱𝘰𝘪𝘯𝘵)

Yes, I realize I have 25k+ followers and nearly a decade of experience. This makes my path different than yours. 

𝗠𝘆 𝘀𝘁𝗿𝗮𝘁𝗲𝗴𝘆 𝗵𝗮𝘀𝗻'𝘁 𝗰𝗵𝗮𝗻𝗴𝗲𝗱 𝗺𝘂𝗰𝗵 𝗼𝘃𝗲𝗿 𝘁𝗵𝗲 𝘆𝗲𝗮𝗿𝘀. The big difference is that my interviews now focus less on coding skills than they used to but I did crush a CodeSignal or 2 😎.

In case you're wondering - NO I was not part of any tech layoff. This was a marketing dept layoff and the reason I did not write about it is because I'm kinda sick of the layoff talk 🙄.

Oh yeah - thank you to my previous corporate overlords. Learned a ton and met really great people. I can only pray that my efforts incrementally increased shareholder value 🫡",TEXT,Brian,Jenney,68761,68761,424,46,15,0,0.0070534169078402004,,2024-05-16 09:46:46,https://www.linkedin.com/feed/update/urn:li:activity:7196913986578100224
urn:li:activity:7196535871054008321,"I don’t hate tutorials, I just don't like how most of you are using them. 

You’re probably making a lot of the same mistakes I did:

- Passive watching
- Falling down every rabbit hole
- No practical application

You watch a 10 hour video, sit down to code and realize you have no f*ckin clue what to do.

You hate to see it and I’ve been there.

I use this method:

- 𝗟𝗲𝗮𝗿𝗻 𝗷𝘂𝘀𝘁 𝗲𝗻𝗼𝘂𝗴𝗵 from your tutorial to begin writing some code
- 𝗕𝘂𝗺𝗯𝗹𝗲 𝘆𝗼𝘂𝗿 𝘄𝗮𝘆 𝘁𝗵𝗿𝗼𝘂𝗴𝗵 to get something you can interact with
- Reach the limit of your technical depth and 𝗴𝗲𝘁 𝘀𝘁𝘂𝗰𝗸
- 𝗦𝘁𝗼𝗽 𝗰𝗼𝗱𝗶𝗻𝗴 𝗮𝗻𝗱 𝗿𝗲-𝘃𝗶𝘀𝗶𝘁 𝘁𝗵𝗲 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 and build up some more knowledge for the next piece of your app

Repeat.",TEXT,Brian,Jenney,13754,13754,80,22,0,0,0.007416024429256944,,2024-05-15 08:44:16,https://www.linkedin.com/feed/update/urn:li:activity:7196535871054008321
urn:li:activity:7196183023761989632,"4 little letters almost got me fired.

LGTM.

Looks good to me.

Later that day, I got a cryptic Slack message from the lead developer. 

""𝘉𝘳𝘪𝘢𝘯, 𝘸𝘦 𝘯𝘦𝘦𝘥 𝘵𝘰 𝘤𝘩𝘢𝘵""

😬 💗 📈

Turns out the code I had barely reviewed blew up and was going to delay the feature from being released.

Whoops.

I was embarrassed and a little surprised - I mean, it wasn’t like 𝗜 wrote the code.

Either way, he was right. 𝗜 𝗵𝗮𝗱 𝗳𝗮𝗶𝗹𝗲𝗱 𝘁𝗼 𝗱𝗼 𝘁𝗵𝗲 𝗯𝗮𝗿𝗲 𝗺𝗶𝗻𝗶𝗺𝘂𝗺.

I resolved to become the best damn code reviewer on the team that day.

A year later, during my annual review, my manager told me that my peers were complimenting my reviews. I had prevented errors from slipping through and suggested solutions which led to more maintainable code.

𝗜 𝗯𝗮𝘀𝗶𝗰𝗮𝗹𝗹𝘆 𝗷𝘂𝘀𝘁 𝗰𝗼𝗽𝗶𝗲𝗱 𝘄𝗵𝗮𝘁 𝗼𝘂𝗿 𝗹𝗲𝗮𝗱 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝘄𝗮𝘀 𝗱𝗼𝗶𝗻𝗴:

1. Block off time in the morning to do the review
2. Understand the work being done by reading the ticket associated with the PR
3. Run code locally before looking at the code
4. Read the code and ask questions or suggest improvements
5. Use Loom or a screen share to discuss details or schedule a pair session if needed

This was a slow and often tedious process. 𝗜 𝗰𝗮𝗻 𝗮𝗹𝗿𝗲𝗮𝗱𝘆 𝘀𝗲𝗲 𝗺𝗮𝗻𝘆 𝗼𝗳 𝘆𝗼𝘂 𝗿𝗼𝗹𝗹𝗶𝗻𝗴 𝘆𝗼𝘂𝗿 𝗲𝘆𝗲𝘀.

𝘊𝘐/𝘊𝘋!
𝘗𝘢𝘪𝘳 𝘱𝘳𝘰𝘨𝘳𝘢𝘮!
𝘚𝘮𝘢𝘭𝘭 𝘤𝘰𝘮𝘮𝘪𝘵𝘴!

Yes. Correct. Also - I still stand by this process.",TEXT,Brian,Jenney,834650,834650,2289,128,57,0,0.002964116695620919,,2024-05-14 09:22:11,https://www.linkedin.com/feed/update/urn:li:activity:7196183023761989632
urn:li:activity:7195816831251623937,"𝘏𝘰𝘸 𝘮𝘰𝘴𝘵 𝘴𝘶𝘤𝘤𝘦𝘴𝘴𝘧𝘶𝘭 𝘣𝘰𝘰𝘵𝘤𝘢𝘮𝘱 𝘨𝘳𝘢𝘥𝘴 𝘰𝘱𝘦𝘳𝘢𝘵𝘦:

- Makes coding and learning a routine
- Applies consistently and broadly
- Has 1 or 2 complex side projects
- Re-calibrates their approach when needed
- Has faith that opportunity will present itself

𝘞𝘩𝘺 𝘮𝘰𝘴𝘵 𝘣𝘰𝘰𝘵𝘤𝘢𝘮𝘱 𝘨𝘳𝘢𝘥𝘴 𝘧𝘢𝘪𝘭:

- Applies to only junior roles
- Tutorial
- Tutorial
- Tutorial
- Relies on motivation instead of routine
- Doesn’t get hired in 3 months
- 𝘎𝘪𝘷𝘦𝘴 𝘶𝘱",TEXT,Brian,Jenney,7989,7989,71,23,0,0,0.011766178495431217,,2024-05-13 09:07:04,https://www.linkedin.com/feed/update/urn:li:activity:7195816831251623937
urn:li:activity:7194369764574580736,"Here's how I'm actually doing my job search:

𝗦𝗲𝗮𝗿𝗰𝗵𝗶𝗻𝗴:
- 10% LinkedIn easy apply (you gotta play the lotto)
- Hired a resume writer and updated my LI profile with keywords
- Apply directly through the company site after finding them on Otta or Wellfound
- DM recruiters and hiring managers for positions I really want

𝗦𝘁𝘂𝗱𝘆𝗶𝗻𝗴:
- Use Pramp[dot]com for interview practice (LI hates links)
- Read Alex Xu books on Sys Design
- AlgoExpert for DSA practice or my own app (JavascriptProsApp[dot]com)
- Create scripts for behavioral questions (why freestyle it?)

𝗨𝗽-𝗦𝗸𝗶𝗹𝗹𝗶𝗻𝗴:
- Build sh*t using technology I should know better like Docker, TypeScript, AWS and a little Rust just in case

TLDR - a combination of mass applying, targeted applying and interview prep for non-FAANG roles. 

So far so good. It also doesn't hurt having 25k followers and 10 years experience so I'm not pretending that this flow will work for everyone.

Hope that's helpful.",TEXT,Brian,Jenney,14228,14228,103,24,1,0,0.008996345234748383,,2024-05-09 09:16:56,https://www.linkedin.com/feed/update/urn:li:activity:7194369764574580736
urn:li:activity:7194042345250512896,"Unit tests are a waste of time.

Instead of taking minutes to write a test you can just:

- write your code
- manually replicate all the scenarios you want to test
- pray for the best and have your QA team ensure it all works

Now that it works, don't touch it! 😅

When done correctly:

- tests enable refactoring with confidence
- confirm edge cases
- document the ACTUAL functionality (I know your docs suck) 🤫

Oddly enough, most bootcamps skip any mention of unit testing even though most dev teams write loads of tests. Not Parsity tho 😉

Because you're probably smart and maybe even good looking - I have a repo for you to get your hands dirty with the basics of Jest and Unit Testing.

𝘚𝘶𝘱𝘦𝘳 𝘴𝘦𝘤𝘳𝘦𝘵 𝘶𝘯𝘪𝘵 𝘵𝘦𝘴𝘵𝘪𝘯𝘨 𝘳𝘦𝘱𝘰 𝘧𝘰𝘳 𝘣𝘦𝘵𝘵𝘦𝘳 𝘵𝘩𝘢𝘯 𝘢𝘷𝘦𝘳𝘢𝘨𝘦 𝘭𝘰𝘰𝘬𝘪𝘯𝘨 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴 👇
https://lnkd.in/dh_bVgz9",TEXT,Brian,Jenney,28162,28162,78,16,3,0,0.0034443576450536185,,2024-05-08 11:35:53,https://www.linkedin.com/feed/update/urn:li:activity:7194042345250512896
urn:li:activity:7193282825939308546,"𝘊𝘰𝘥𝘦 𝘴𝘩𝘰𝘶𝘭𝘥 𝘢𝘭𝘸𝘢𝘺𝘴 𝘧𝘰𝘭𝘭𝘰𝘸 𝘋𝘙𝘠 𝘱𝘳𝘪𝘯𝘤𝘪𝘱𝘭𝘦𝘴!

Except, maybe your abstraction is more clever than useful in this case.

𝘛𝘋𝘋 𝘰𝘳 𝘥𝘪𝘦!

Or you know, TaDD (test after development is done). Or, perhaps manual QA can be enough.

𝘛𝘺𝘱𝘦𝘚𝘤𝘳𝘪𝘱𝘵 𝘪𝘴 𝘵𝘩𝘦 𝘰𝘯𝘭𝘺 𝘤𝘩𝘰𝘪𝘤𝘦 𝘧𝘰𝘳 𝘴𝘦𝘳𝘪𝘰𝘶𝘴 𝘑𝘚 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴!

But maybe it’s overkill for this simple UI app. Or just use JSDoc annotations.

Be careful falling into dogmatic, knee-jerk responses when it comes to writing software. One thing I’ve learned is that there are exceptions to the rules we accept as coding law.

***

I sat down with your favorite TypeScript Wizard Ryan Talbert and learned what he really thinks about JavaScript, TypeScript and his wild origin story. You can check it out in the comments 👇",TEXT,Brian,Jenney,17197,17197,71,18,1,0,0.0052334709542362036,,2024-05-06 09:17:50,https://www.linkedin.com/feed/update/urn:li:activity:7193282825939308546
urn:li:activity:7191835658225647616,"He created a full stack app that worked pretty well. It even looked nice.

But when I asked how it worked…

Oof.

𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. Too many people fall into the trap of looking at a tutorial, following along with the instructor and typing what they type. 

𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app. 
𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery

It’s an enticing trap and it may even fool someone into hiring you. 

90% of my side projects have never had users or been deployed. I made janky apps and sites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack.

Every side project doesn’t need to be a masterpiece. Leverage them to learn what you won’t at work or what you would like to work on next.

𝘐𝘧 𝘺𝘰𝘶 𝘸𝘢𝘯𝘵 𝘮𝘺 𝘴𝘵𝘦𝘱 𝘣𝘺 𝘴𝘵𝘦𝘱 𝘨𝘶𝘪𝘥𝘦 𝘰𝘯 𝘤𝘳𝘦𝘢𝘵𝘪𝘯𝘨 𝘢 𝘴𝘰𝘭𝘪𝘥 𝘴𝘪𝘥𝘦 𝘱𝘳𝘰𝘫𝘦𝘤𝘵 𝘺𝘰𝘶 𝘤𝘢𝘯 𝘨𝘳𝘢𝘣 𝘪𝘵 𝘩𝘦𝘳𝘦:

https://lnkd.in/gEzeRC9F

𝘛𝘪𝘳𝘦𝘥 𝘰𝘧 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭𝘴? 𝘊𝘩𝘦𝘤𝘬 𝘵𝘩𝘪𝘴 𝘰𝘶𝘵:

https://lnkd.in/gpqEgqny",TEXT,Brian,Jenney,20836,20836,106,24,0,0,0.006239201382223075,,2024-05-02 09:27:18,https://www.linkedin.com/feed/update/urn:li:activity:7191835658225647616
urn:li:activity:7191099996136443904,"You’re having trouble coming up with solutions to problems as a software developer because you’re re-inventing the wheel.

As a junior developer, there are zero problems you will encounter that haven’t been solved a dozen times over. There are tried and true approaches for that feature you’re working on.

But you don’t know what you don’t know.

Here’s where I’d start:

- 𝗹𝗼𝗼𝗸 𝘂𝗽 𝗺𝗲𝘁𝗮-𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝗽𝗮𝘁𝘁𝗲𝗿𝗻𝘀 - the general design patterns that dominate the field
- 𝗳𝗮𝗺𝗶𝗹𝗶𝗮𝗿𝗶𝘇𝗲 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 𝘄𝗶𝘁𝗵 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲-𝘀𝗽𝗲𝗰𝗶𝗳𝗶𝗰 𝗽𝗮𝘁𝘁𝗲𝗿𝗻𝘀 - like the module pattern in JS
- 𝗿𝗲𝗮𝗱 𝘂𝗽 𝗼𝗻 𝗳𝗿𝗮𝗺𝗲𝘄𝗼𝗿𝗸 𝗽𝗮𝘁𝘁𝗲𝗿𝗻𝘀 like presenter/container and HOCs for ReactJS

You’ll begin to notice that much of the code you write either fits into a larger pattern or implements smaller patterns. You’ll be a more confident and efficient developer because of it.

𝘞𝘩𝘢𝘵 𝘢𝘳𝘦 𝘴𝘰𝘮𝘦 𝘤𝘰𝘮𝘮𝘰𝘯 𝘱𝘢𝘵𝘵𝘦𝘳𝘯𝘴 𝘺𝘰𝘶 𝘩𝘢𝘷𝘦 𝘦𝘯𝘤𝘰𝘶𝘯𝘵𝘦𝘳𝘦𝘥 𝘵𝘩𝘢𝘵 𝘸𝘰𝘶𝘭𝘥’𝘷𝘦 𝘴𝘢𝘷𝘦𝘥 𝘵𝘩𝘦 𝘺𝘰𝘶𝘯𝘨𝘦𝘳 𝘺𝘰𝘶?",TEXT,Brian,Jenney,4201,4201,47,2,2,0,0.012139966674601285,,2024-04-30 08:44:03,https://www.linkedin.com/feed/update/urn:li:activity:7191099996136443904
urn:li:activity:7190738316160319489,"A few months ago, I wrote about a developer who bombed a mock interview because he tried to use a ReactJS API during a vanilla JS challenge.

I suggested he learn the fundamentals of JS before touching React.

Now, I’m not so sure.

𝗛𝗼𝘄 𝗺𝘂𝗰𝗵 𝗝𝗦 𝗱𝗼 𝘆𝗼𝘂 𝗿𝗲𝗮𝗹𝗹𝘆 𝗻𝗲𝗲𝗱 𝘁𝗼 𝗸𝗻𝗼𝘄 𝗻𝗼𝘄𝗮𝗱𝗮𝘆𝘀?

Most roles for JS developers depend on a strong knowledge of the layer above JS. Companies want ReactJS, NextJS and Angular developers (the other 5 are looking for Vue developers 😉).

Is it still worth having a strong grasp on: 

- prototypal inheritance
- closure
- type coercion
- scope/hoisting

I realize you still need some clue about these concepts but perhaps much less than I previously thought.

Is there anything so wrong with being a framework developer? It appears to be a lucrative career path. Genuinely curious.",TEXT,Brian,Jenney,11695,11695,60,37,0,0,0.008294142796066694,,2024-04-29 08:46:51,https://www.linkedin.com/feed/update/urn:li:activity:7190738316160319489
urn:li:activity:7189657446359953409,"I'm not that smart but I know 2 things pretty well:

1. Coding
2. Getting in shape

I've talked enough about coding.

Here are 3.5 tips to help you get in shape, lose weight and spite your ex. Or get healthy. Whatever.

I got into the best shape of my life at 37 using these methods:

1. 𝗪𝗲𝗶𝗴𝗵 𝗼𝘂𝘁 𝘆𝗼𝘂𝗿 𝗲𝗳𝗳𝗶𝗻' 𝗳𝗼𝗼𝗱.

That cup of rice was never a cup. Track you calorie intake with MyFitnessPal and make sure you aren't eating double the calories you think you are.

2. 𝗡𝗼𝘁𝗵𝗶𝗻𝗴 𝗶𝘀 𝗼𝗳𝗳 𝗹𝗶𝗺𝗶𝘁𝘀

𝘕𝘰 𝘤𝘢𝘳𝘣𝘴! 
𝘊𝘢𝘯'𝘵 𝘦𝘢𝘵 𝘢𝘧𝘵𝘦𝘳 6 𝘗𝘔. 
𝘌𝘢𝘵 𝘰𝘯𝘭𝘺 𝘨𝘳𝘢𝘴𝘴-𝘧𝘦𝘥 𝘴𝘲𝘶𝘪𝘳𝘳𝘦𝘭𝘴!

Eff all that. Eat what you want (within reason) and just be in a caloric deficit. Basically, eat a couple hundred fewer calories than you need to maintain your weight.

You can figure out your maintenance calories from step 1 or try out a TDEE calculator.

3. 𝗙𝗮𝗶𝗹 𝘆𝗼𝘂𝗿 𝘄𝗮𝘆 𝘁𝗼 𝗴𝗿𝗼𝘄𝘁𝗵

Lift until your muscle fails to lift anymore.

Over 15 reps? Add weight.
Under 10 reps? Remove weight.

No gym? Do 100 burpees every other day and 300 squats twice a week.

You're gonna see your muscles grow.

3.5 𝗦𝘁𝗼𝗽 𝗰𝗼𝗺𝗽𝗮𝗿𝗶𝗻𝗴

Your body will grow within its limits. Your genetics play a part in how your body will look but losing weight is a matter of calories going in and calories going out.

Don't over-complicate it.",TEXT,Brian,Jenney,32730,32730,117,38,0,0,0.0047357164680721054,,2024-04-26 09:11:52,https://www.linkedin.com/feed/update/urn:li:activity:7189657446359953409
urn:li:activity:7189291701511835648,"No 90 day plan.

No manager feedback.

You think you're doing well but the team is silently frustrated.

Your notice to leave the team comes out of the blue... to you at least.

Your manager isn't some sadistic bastard. In most cases at least. The reason they didn't confront you or offer feedback is because they are human. They just want to focus on their work and avoid conflict.

It's not right, but it's reality.

On day 1, you should set some practical milestones with your team lead or manager. 𝗪𝗵𝗮𝘁 𝗱𝗼𝗲𝘀 𝘀𝘂𝗰𝗰𝗲𝘀𝘀 𝗳𝗼𝗿 𝘆𝗼𝘂 𝗹𝗼𝗼𝗸 𝗹𝗶𝗸𝗲 in the first month or two on the job?

𝗜𝗳 𝘁𝗵𝗲𝘆 𝗱𝗼𝗻'𝘁 𝗴𝗶𝘃𝗲 𝘆𝗼𝘂 𝗮 𝗽𝗹𝗮𝗻, 𝗺𝗮𝗸𝗲 𝗼𝗻𝗲 yourself and present it to them.

For a junior developer it might look like this:

𝗗𝗮𝘆𝘀 𝟭 - 𝟯𝟬: Get all repos running locally on your machine and understand code review and deployment processes. Get at least 2 small features into production.

𝗗𝗮𝘆𝘀 𝟯𝟬 - 𝟲𝟬: Participate in an on-call rotation and learn process for critical incidents. Understand the full software development lifecycle. Be able to fix small bugs with little help.

𝗗𝗮𝘆𝘀 𝟲𝟬 - 𝟵𝟬: Take on a mid-level difficulty feature and deploy to production. Contribute to technical discussions.

Once you're aligned on what success looks like, it's no longer a guessing game and you have proof that you are where you should be or have an idea about where you need to improve.",TEXT,Brian,Jenney,6249,6249,64,0,1,0,0.010401664266282605,,2024-04-25 08:58:32,https://www.linkedin.com/feed/update/urn:li:activity:7189291701511835648
urn:li:activity:7188938151007068160,"“𝘐𝘵’𝘴 𝘩𝘢𝘳𝘥 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘴𝘪𝘯𝘤𝘦 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘳𝘦𝘢𝘭𝘭𝘺 𝘬𝘯𝘰𝘸 𝘵𝘩𝘦 𝘣𝘢𝘴𝘪𝘤𝘴 𝘰𝘧 𝘑𝘢𝘷𝘢𝘚𝘤𝘳𝘪𝘱𝘵”.

A co-worker told me this early in my career at a small start up.

It stung to hear. He was also right.

I resolved to suck less at JS.

I learned the basics including promises, closure, async/await, 𝚝𝚑𝚒𝚜 and design patterns. I went through all the Kyle Simpson books. I made janky apps to internalize the information. I gained knowledge and confidence.

Luckily Ryan Talbert can save you some of the pain I felt and accelerate your knowledge with JS with his recently published book you can check out below.

I bought this book and have found it really useful. I wish it was around when I first started writing JS and ReactJS professionally.

This is not a sponsored post btw. I just like this book and figured you might too.",ARTICLE,Brian,Jenney,5177,5177,59,10,1,0,0.013521344407958278,,2024-04-24 09:33:39,https://www.linkedin.com/feed/update/urn:li:activity:7188938151007068160
urn:li:activity:7188568858964770817,"Nothing is quite as embarrassing as code you wrote blowing up in production and someone asking you “𝘩𝘦𝘺 𝘩𝘰𝘸’𝘴 𝘵𝘩𝘪𝘴 𝘴𝘶𝘱𝘱𝘰𝘴𝘦𝘥 𝘵𝘰 𝘸𝘰𝘳𝘬?” and you respond “𝘐 𝘥𝘰𝘯’𝘵 𝘬𝘯𝘰𝘸, 𝘮𝘺 𝘱𝘦𝘵 𝘳𝘰𝘣𝘰𝘵 𝘸𝘳𝘰𝘵𝘦 𝘪𝘵” 😬

This happened to me.

I ripped off some code for my first project at work that crashed shortly after the release. I couldn’t explain how it worked - only that it was supposed to. 😬 ^ 10

I still copy and paste code from AI tools or Stack Overflow. Now, I make sure that I understand and refactor the code to make it my own for when it inevitably needs to change.

𝗜𝗳 𝘆𝗼𝘂’𝗿𝗲 𝗯𝗹𝗶𝗻𝗱𝗹𝘆 𝗰𝗼𝗽𝘆/𝗽𝗮𝘀𝘁𝗶𝗻𝗴 𝗰𝗼𝗱𝗲 from AI tools or Stack Overflow that you can not explain then 𝘆𝗼𝘂 𝗻𝗲𝗲𝗱 𝘁𝗼 𝘀𝗲𝗲𝗸 𝗵𝗲𝗹𝗽 𝗳𝗼𝗿 𝘆𝗼𝘂𝗿 𝗰𝗼𝗻𝗱𝗶𝘁𝗶𝗼𝗻.

The disease is also the cure:

Your AI overlord can explain its code and if you’re in the beginning stages of your dev career then you should re-write what you’ve been given to make it your own.

Add a test or 2 to prove it works (link in comments cuz I like you)

Hopefully this saves you a little pain in the future.",TEXT,Brian,Jenney,3710,3710,36,6,2,0,0.011859838274932614,,2024-04-23 09:06:13,https://www.linkedin.com/feed/update/urn:li:activity:7188568858964770817
urn:li:activity:7188204548505702401,"Vanessa Vun did everything wrong and still got hired:

- 𝗺𝗮𝘀𝘀 𝗮𝗽𝗽𝗹𝗶𝗲𝗱 using the pray and spray approach
- went the 𝘀𝗲𝗹𝗳-𝘁𝗮𝘂𝗴𝗵𝘁 route with the 𝗠𝗘𝗥𝗡 stack (I mean who still uses JS amirite 🤷)
- did not stay 30 years old 🤦🏻‍♀️

Despite all this, she’s now a software engineer.

Crazy, I know.

It’s almost as if there’s more than 1 way to skin a cat, or land a job in software or do things.

I had the pleasure of speaking with Vanessa last week and she breaks down how she went from clinical lab scientist to software engineer in her 30’s using a practical approach.

If you're not following her, I mean I would.",TEXT,Brian,Jenney,6940,6940,80,10,3,0,0.01340057636887608,,2024-04-22 08:58:34,https://www.linkedin.com/feed/update/urn:li:activity:7188204548505702401
urn:li:activity:7187096693249568768,"I’ve gained quite a lot more followers on here so I figure it’s time to out myself again:

12 years ago I was addicted to drinking and drugs and living a criminal lifestyle.

After an intervention, I promised to quit, unsure if I would actually be able to do it for more than a week (10 years later and I’m going strong 💪)

I noticed I had a lot of time on my hands now with none of my terrible outlets available.

I found Codecademy.com and wrote my first line of code. I was hooked (notice a theme here?)

I fell ass backwards into a full-stack role after building janky websites for a year.

Switched companies 4 times, took on contracts, taught at bootcamps and bought a ton of courses.

I Made lots of embarrassing mistakes.

Kept building stuff.

Sucked less each year.

I’ll be honest - I don’t like sharing much about my checkered past. It’s a distant memory at this point but I also know a lot of people reading this may be going through their own struggles. Maybe it’s strong drugs… maybe it’s video games.

Obviously you have to want to change. You need desire and most importantly, direction. 

Here’s what worked for me:

- exercising daily

- finding a replacement relapse when triggered (e.g. I eat a ton of sweets when I want to do… other stuff)

- find a hobby to fill in the time (for me it was coding, for you maybe reading or puzzles)

- schedule events on days you would normally do stupid things (I watched a ton of awful movies on Thursday and Friday nights in movie theaters to pass the time)

- tell everyone you quit - you’ll feel a lot more embarrassed if you fail and therefore incentivized to succeed

I sincerely hope that helps.",TEXT,Brian,Jenney,12227,12227,173,17,2,0,0.0157029524822115,,2024-04-19 07:36:21,https://www.linkedin.com/feed/update/urn:li:activity:7187096693249568768
urn:li:activity:7186033201201479682,"Turns out that the scariest thing about Devin AI isn't the fact it will be replacing dev jobs anytime (too) soon.

The scary thing is that we collectively fell for it.

A YouTuber just revealed the truth behind the Devin AI demo that scared developers and kicked off a new wave of fear and hype around AI.

𝗢𝗻𝗲 𝗽𝗿𝗼𝗯𝗹𝗲𝗺: turns out that the demo was edited, exaggerated and deceptive.

Devin fished for a simple contract project, added some bugs and took hours to do a task that a much more senior developer completed in about 30 minutes.

𝘔𝘢𝘺𝘣𝘦 𝘋𝘦𝘷𝘪𝘯 𝘢𝘤𝘵𝘶𝘢𝘭𝘭𝘺 𝘪𝘴 𝘮𝘰𝘳𝘦 𝘭𝘪𝘬𝘦 𝘢 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘵𝘩𝘢𝘯 𝘐 𝘵𝘩𝘰𝘶𝘨𝘩𝘵? 🤔

Also, maybe, just maybe - we should be a tad more skeptical of outrageous claims and read past the headline before spreading the kind of fear-bait which the internet loves.


PS - I still think Devin is pretty damn cool and the marketing team probably achieved their goals with this one. I'm sure we're at least 6 months away from the AI takeover 😉",TEXT,Brian,Jenney,5703,5703,41,21,2,0,0.01122216377345257,,2024-04-16 09:10:25,https://www.linkedin.com/feed/update/urn:li:activity:7186033201201479682
urn:li:activity:7185672375873482752,"Look, no one can tell you how long it’s going to take to get hired.

One thing I’ve learned from working with dozens of developers last year and having literally hundreds of conversations with many of you here is that 𝘁𝗵𝗲𝗿𝗲 𝗶𝘀 𝗻𝗼 𝘀𝗶𝗻𝗴𝗹𝗲 𝗽𝗮𝘁𝗵 𝘁𝗼𝘄𝗮𝗿𝗱𝘀 𝘁𝗵𝗮𝘁 𝗳𝗶𝗿𝘀𝘁 𝗷𝗼𝗯.

My favorite myths:

𝗜𝘁’𝘀 𝗡𝗢𝗧 𝗮 𝗻𝘂𝗺𝗯𝗲𝗿𝘀 𝗴𝗮𝗺𝗲… well, except that sometimes it kind of is. One of my mentees has a wife who sent his resume to tons of companies. He rarely uses LI and has had more interviews than others who have more experience.

𝗬𝗼𝘂 𝗠𝗨𝗦𝗧 𝗹𝗲𝗮𝗿𝗻 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰. Nothing wrong with that. It takes courage and it’s certainly a strategy I’ve seen work. I’ve also never done it and most of the mentees I work with who have been recently hired haven’t either.

𝗜𝗳 𝘆𝗼𝘂 𝗹𝗲𝗮𝗿𝗻 [𝘅] 𝘆𝗼𝘂 𝘄𝗶𝗹𝗹 𝗯𝗲 𝗺𝗼𝗿𝗲 𝗵𝗶𝗿𝗲-𝗮𝗯𝗹𝗲. This is how Swiss-Army knife developers are born. They start with JS. Then Python. Next, Go. How bout Rust? These are all great languages but just piling on technologies isn’t a recipe for being more hire-able.

The most successful mentees I’ve worked with are persistent, practically optimistic, work on side projects and adjust their strategy when something is not working.",TEXT,Brian,Jenney,35355,35355,61,4,2,0,0.001895064347334182,,2024-04-15 09:16:37,https://www.linkedin.com/feed/update/urn:li:activity:7185672375873482752
urn:li:activity:7184956566079451136,"This is the kind of project I love to see. 

Pranav Bindra took a suggestion I made on my podcast and ran with it to create something useful by leveraging AI that might help some of you nerds on the job hunt.

Well done 👏",SHARE,Brian,Jenney,3975,3975,45,2,0,0,0.011823899371069183,,2024-04-13 09:52:15,https://www.linkedin.com/feed/update/urn:li:activity:7184956566079451136
urn:li:activity:7184588391479398400,"Nearly a decade ago I started my first day as a developer. I knew HTML, CSS, Jquery and a little AngularJS.

The tech stack at the job included C#, SQL, DB2 and Apex. 😅

The night before the first day, I was barely able to sleep.

𝗪𝗼𝘂𝗹𝗱 𝗜 𝗯𝗲 𝗳𝗼𝘂𝗻𝗱 𝗼𝘂𝘁 𝗮𝘀 𝗮 𝗳𝗮𝗸𝗲 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝗮𝗻𝗱 𝗳𝗶𝗿𝗲𝗱 𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝗹𝘆?

Would they give me a task I couldn’t figure out?

𝗛𝗼𝘄 𝗹𝗼𝗻𝗴 𝗯𝗲𝗳𝗼𝗿𝗲 𝘁𝗵𝗲𝘆 𝗿𝗲𝗮𝗹𝗶𝘇𝗲𝗱 𝘁𝗵𝗲𝘆 𝗺𝗮𝗱𝗲 𝗮𝗻 𝗲𝗿𝗿𝗼𝗿 𝗶𝗻 𝘁𝗵𝗲𝗶𝗿 𝗵𝗶𝗿𝗶𝗻𝗴 𝗽𝗿𝗼𝗰𝗲𝘀𝘀?

Well, I never got “found out” and took on more than a few tasks I couldn’t figure out… yet.

If you recently started a new position or are about to, you may be feeling a lot of the same emotions.

Here are some ways I get over my anxiety:

- 𝗺𝗮𝗸𝗲 𝗮 𝟯𝟬/𝟲𝟬/𝟵𝟬 𝗱𝗮𝘆 𝗽𝗹𝗮𝗻 which usually includes delivering a small feature
- immediately 𝗲𝘅𝗽𝗹𝗼𝗿𝗲 𝘁𝗵𝗲 𝗰𝗼𝗱𝗲𝗯𝗮𝘀𝗲 and identify areas I just don’t understand
- 𝗮𝘀𝗸 𝗮 𝗯𝘂𝗻𝗰𝗵 𝗼𝗳 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀 𝘄𝗵𝗶𝗹𝗲 𝗜’𝗺 𝘀𝘁𝗶𝗹𝗹 𝗻𝗲𝘄 enough that no one will judge me
- take notes
- realize I’m here to 𝗱𝗼 𝗺𝗼𝗿𝗲 𝘄𝗮𝘁𝗰𝗵𝗶𝗻𝗴 𝘁𝗵𝗮𝗻 𝗱𝗼𝗶𝗻𝗴 during my first month

So if you just got hired, congrats! 

I also know it can be just as stressful as the interview process. Maybe worse.

What’s your tips for people just starting a new dev position?",TEXT,Brian,Jenney,22482,22482,150,21,3,0,0.00773952495329597,,2024-04-12 09:29:15,https://www.linkedin.com/feed/update/urn:li:activity:7184588391479398400
urn:li:activity:7183497722325336065,"Quintessential junior dev move:

Wasting hours solving a problem a co-worker could’ve helped you figure out in minutes.

No, this is not a long term solution to becoming an effective developer.

Also:

You are ultimately judged on the work you complete. When you bump your head against your technical depth, acknowledge it and ask for help.

But for Jeebus sake please don’t just say “I can’t figure out [𝘹]”

Try this:

- I’m having an issue with [𝘵𝘩𝘪𝘴 𝘴𝘱𝘦𝘤𝘪𝘧𝘪𝘤 𝘱𝘳𝘰𝘣𝘭𝘦𝘮]
- I’ve tried [𝘺] but it’s not working in the way I expect which is [𝘵𝘩𝘪𝘴 𝘸𝘢𝘺]
- [𝘔𝘢𝘺𝘣𝘦 𝘢𝘥𝘥 𝘢 𝘤𝘰𝘥𝘦 𝘴𝘢𝘮𝘱𝘭𝘦, 𝘣𝘶𝘨 𝘵𝘳𝘢𝘤𝘦 𝘰𝘳 𝘥𝘰𝘤𝘶𝘮𝘦𝘯𝘵𝘢𝘵𝘪𝘰𝘯] 
- Is anyone available to take a look with me sometime today or point me in the right direction?

Don’t let your ego get in the way of progress.",TEXT,Brian,Jenney,81240,81240,360,35,15,0,0.005046774987690792,,2024-04-09 09:15:19,https://www.linkedin.com/feed/update/urn:li:activity:7183497722325336065
urn:li:activity:7183143532130435072,"There’s too much to learn.

- A new framework to replace the old one that you just learned.
- Obscure algorithms from dudes with too many letters in their last name.
- Everyone is switching to AI/ML now? Should you learn Python?

While you can’t JUST stick to the basics, if you chase every shiny new technology you will become a Swiss Army Knife developer. You can do a little of everything… poorly.

Instead, identify mega vs micro trends in software development:

- Recent mega trends include K8s, NextJS, Serverless and TypeScript.
- Micro trends might include tRPC, edge computing and PWA. 
- Use side projects to gain experience with technologies that make up mega trends and keep your skills relevant. 

Gamble a bit with the micro trends. 

If you’re lucky, some of them will become mega trends and you’ll be first in line to take advantage.",TEXT,Brian,Jenney,8957,8957,70,9,3,0,0.00915485095456068,,2024-04-08 09:47:54,https://www.linkedin.com/feed/update/urn:li:activity:7183143532130435072
urn:li:activity:7182417009874288640,"Podcast is surpassing 10k downloads a month. My boring advice is getting some traction.

I've interviewed some amazing people who are much smarter than me.

Who should I beg to come on the show to talk about code stuff and self-improvement stuff? 

If you're learning to code - what do you want to hear about?",IMAGE,Brian,Jenney,8756,8756,109,27,0,0,0.015532206486980357,,2024-04-06 09:40:57,https://www.linkedin.com/feed/update/urn:li:activity:7182417009874288640
urn:li:activity:7182046620186730496,"Creating a side project is draining.

Here's my cheat sheet so you'll never run out of side project inspiration.

4 easy ways to generate quality side project ideas:

1. 𝗦𝘁𝗲𝗮𝗹 𝗳𝗿𝗼𝗺 𝗼𝘁𝗵𝗲𝗿𝘀. Check out sites like Acquire.com and WellFound to see what small startups and 1 person businesses are building for inspiration.
2. 𝗗𝗼𝗻’𝘁 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗵𝗼𝘂𝘀𝗲. 𝗔𝗱𝗱 𝗮 𝗯𝗿𝗶𝗰𝗸. Check out the feature requests or reviews for an app you’re already using. What do people want? Maybe build that.
3. 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗔𝗣𝗜 on rapidAPI or use OpenAI (everyone’s doing it 😎) and think what you can build around it. For example, can you scrape a user’s top posts as a way to train GPT on their voice and content?
4. 𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗲 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗯𝗼𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝘁𝗲𝗱𝗶𝗼𝘂𝘀. Is there something at work or in your personal life that you do manually that could be automated? Spreadsheets are an easy target. Fix it for yourself and others.

You also don’t need to solve anything. 

A great side project really only has 1 metric for success: you learned something.",TEXT,Brian,Jenney,24921,24921,166,14,15,0,0.00782472613458529,,2024-04-05 09:09:10,https://www.linkedin.com/feed/update/urn:li:activity:7182046620186730496
urn:li:activity:7181294435895320577,"Friendly reminder that you don’t need to start your own business or have a side hustle if you don’t want to.

I’ve been hustling since I was 10 years old. 

- car washes
- painting houses
- selling mixtapes
- crime 🤫 

As an adult, my side projects give me energy and purpose. Coding is my hobby and profession. It doesn’t have to be yours though.

Despite what you’ve read and perhaps against my own advice, there is nothing wrong with going to work and then closing your laptop.

I’ve met some amazing developers who don’t touch code on the weekends.",TEXT,Brian,Jenney,11653,11653,93,12,1,0,0.009096370033467777,,2024-04-03 07:20:15,https://www.linkedin.com/feed/update/urn:li:activity:7181294435895320577
urn:li:activity:7180605456711663616,"We get it, networking is important.

But what the hell does that mean? Especially on a platform like LinkedIn?

Well, I can certainly tell you what it’s not:

- DMs to strangers asking them to look at your resume or for a job (𝘴𝘦𝘳𝘪𝘰𝘶𝘴𝘭𝘺, 𝘵𝘳𝘺 𝘢 𝘲𝘶𝘪𝘤𝘬 𝘤𝘰𝘮𝘱𝘭𝘪𝘮𝘦𝘯𝘵 𝘣𝘦𝘧𝘰𝘳𝘦 𝘨𝘦𝘵𝘵𝘪𝘯𝘨 𝘳𝘪𝘨𝘩𝘵 𝘵𝘰 𝘵𝘩𝘦 𝘢𝘴𝘬)
- Posts romanticizing a string of rejections (𝘦.𝘨. 𝘑𝘶𝘴𝘵 𝘣𝘰𝘮𝘣𝘦𝘥 𝘮𝘺 101𝘵𝘩 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸. 𝘞𝘩𝘰 𝘤𝘢𝘯 𝘳𝘦𝘧𝘦𝘳 𝘮𝘦 𝘵𝘰 𝘣𝘰𝘮𝘣 𝘵𝘩𝘦 102𝘳𝘥)
- Messages to connections you’ve never spoken to asking for referrals 🥲

So what do you do?

- Genuine engagement with other people by commenting on their posts (𝘢𝘨𝘳𝘦𝘦?)
- DMs where you give first (𝘢 𝘭𝘪𝘯𝘬 𝘵𝘰 𝘢 𝘩𝘦𝘭𝘱𝘧𝘶𝘭 𝘢𝘳𝘵𝘪𝘤𝘭𝘦 𝘧𝘰𝘳 𝘦𝘹𝘢𝘮𝘱𝘭𝘦)
- Posts that share what you’re learning (𝘢𝘯𝘥 𝘴𝘵𝘳𝘶𝘨𝘨𝘭𝘪𝘯𝘨 𝘸𝘪𝘵𝘩)",TEXT,Brian,Jenney,8489,8489,87,23,4,0,0.01342914359759689,,2024-04-01 09:42:30,https://www.linkedin.com/feed/update/urn:li:activity:7180605456711663616
urn:li:activity:7179497939101233153,"What is the 1 thing that separates developers who get hired vs those who don’t?

I’ve thought about this a lot, especially as I’m now the owner of a coding bootcamp.

I’ve seen too many success stories (and failures) from unlikely people.

- The guy who could barely complete a for-loop? Hired before the bootcamp ended.
- The woman with a CS degree? Nearly a year and 100’s of applications for her to get a break.

There is very little rhyme, reason or “hack” I can confidently suggest.

Except this:

𝗚𝗿𝗶𝘁 𝗮𝗻𝗱 𝗰𝗼𝗻𝘀𝗶𝘀𝘁𝗲𝗻𝗰𝘆 𝗪𝗜𝗟𝗟 𝗴𝗲𝘁 𝘆𝗼𝘂 𝘁𝗼 𝘁𝗵𝗲 𝗳𝗶𝗻𝗶𝘀𝗵 𝗹𝗶𝗻e. The surest way towards failure is to quit. Most people will choose this route.

𝗗𝗼𝗻’𝘁 𝗹𝗲𝘁 𝘆𝗼𝘂𝗿 𝘀𝗸𝗶𝗹𝗹𝘀 𝗮𝘁𝗿𝗼𝗽𝗵𝘆. Build stuff or do LeetCode or Odin Project. Do something where your hands are on a keyboard making code do stuff.

𝗡𝗼𝘁 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀? Maybe work on that.

𝗚𝗲𝘁𝘁𝗶𝗻𝗴 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗮𝗻𝗱 𝗳𝗮𝗶𝗹𝗶𝗻𝗴? Good. Work on that.

Good luck out there!",TEXT,Brian,Jenney,59005,59005,162,26,3,0,0.0032370138123887808,,2024-03-29 08:21:37,https://www.linkedin.com/feed/update/urn:li:activity:7179497939101233153
urn:li:activity:7178782008100233218,"Honestly, a lot of software development is just writing:

- JIRA tickets
- System design documents
- README docs
- Presentations
- Emails to the guy in marketing about why the button isn't working
- Explaining why that NPM package is breaking the build over Slack or Teams
- Medium articles on why TypeScript sucks or why Rust is faster than language [x] 🙄

We work with humans just as much as we work on code.",TEXT,Brian,Jenney,39337,39337,352,32,9,0,0.009990594097160434,,2024-03-27 08:56:46,https://www.linkedin.com/feed/update/urn:li:activity:7178782008100233218
urn:li:activity:7178421446963081216,"❌ Get a job you love and you’ll never work a day in your life.

Look, I love to write code and mentor people.

But there’s so much more to software development than writing code and pair-programming.

Some of the non-sexy stuff you’ll do as a developer:

- meetings
- meetings to prepare for other meetings
- on-call shifts
- writing documentation
- maintaining legacy code
- demo days
- researching poorly documented 3rd party APIs
- translating technical limitations to non-coders

Coding is my hobby and profession. At the end of the day, it’s a job and I try not to wrap too much of my identity into it. It can be incredibly fulfilling and it can also be a chore.

What'd I miss here?",TEXT,Brian,Jenney,19543,19543,156,28,4,0,0.009619812720667247,,2024-03-26 09:04:01,https://www.linkedin.com/feed/update/urn:li:activity:7178421446963081216
urn:li:activity:7178062436967571458,"My biggest networking hack has been hosting a podcast.

I've met some of your favorite LinkedIn influencers (hit me up btw 😉) and people in software who are miles ahead of me.

One problem though:

These super stars have already ""made it"".

Most of my audience is in that messy stage between learning to code and getting hired. 

Who is telling that story?

If you're waiting until you've ""made it"" then we've missed the most important part of your journey.

This week, I sat down with a current Parsity student Levy Dowell to discuss 

- how he juggles work, life and studying
- why exercise and coding are more related than you think
- what he wishes he knew before starting a program  
- some advice for those deciding between the self-taught and bootcamp route

Link in comments.",TEXT,Brian,Jenney,4746,4746,54,10,0,0,0.0134850400337126,,2024-03-25 09:17:26,https://www.linkedin.com/feed/update/urn:li:activity:7178062436967571458
urn:li:activity:7176611482468581376,"Stability is a myth.

Which is one of the reasons I'm glad I'm grateful for the community I've made both on LinkedIn and at work.

[insert mass-layoff speech here, thank corporate overlords 🙇]

With a little more time on my hands, I’m excited to partner with 🌻 Anna Miller and 🚀 Nate Hobi to be part of Code Career Mastery a 6-month mentorship for mid-level SWE to help them make their next big move while introducing more curriculum to Parsity to help developers with technical interviews and AFTER they get hired.

I’m excited for this partnership because I believe in being in the driver's seat of your career. Tech moves fast and the market can be unforgiving.

Becoming a partner allows me to offer additional resources for SWE who looking for their next move - whether it be more money, better team culture, your next technical challenge or an opportunity to move into a more senior role.

I've helped more than a few of you out there to land a new role, next role or pass an interview. Now I want to do more.

I’ll also be a guest speaker, sharing on the topic of Building Influence as a SWE.

See you there 👋🏼",TEXT,Brian,Jenney,7872,7872,72,10,3,0,0.010797764227642276,,2024-03-21 09:11:52,https://www.linkedin.com/feed/update/urn:li:activity:7176611482468581376
urn:li:activity:7176256882255306753,"Something odd I’ve noticed about low performing software engineers:

They work really hard.

I would know. I’ve been one.

The irony is that working harder is rarely the solution. Here’s why I was not making progress despite putting in long hours:

𝗟𝗮𝗰𝗸 𝗼𝗳 𝗙𝗼𝗰𝘂𝘀: Hard work without direction led to wasted effort. I needed to understand what the priorities were and work on tasks that brought the most value or learning leverage.

𝗙𝗲𝗮𝗿 𝗼𝗳 𝗔𝘀𝗸𝗶𝗻𝗴 𝗳𝗼𝗿 𝗛𝗲𝗹𝗽: Many devs, myself included, have been guilty of this. You think asking for help is a sign of weakness, but in reality, it's more efficient than getting rate-limited on Chat Gippity or staring at a blank screen.

𝗡𝗼𝘁 𝗜𝗻𝘃𝗲𝘀𝘁𝗶𝗻𝗴 𝗶𝗻 𝗦𝗸𝗶𝗹𝗹 𝗗𝗲𝘃𝗲𝗹𝗼𝗽𝗺𝗲𝗻𝘁: Tech changes fast. If you're not learning, you're falling behind. Putting in the hours at work on the same tasks over and over has diminishing returns. Invest time in up-skilling.

If you find yourself in a cycle of hard work but low performance, take a step back and evaluate. 

You might just find that a slight change in approach can lead to significant improvements.",TEXT,Brian,Jenney,23939,23939,137,26,2,0,0.00689251848448139,,2024-03-20 09:42:49,https://www.linkedin.com/feed/update/urn:li:activity:7176256882255306753
urn:li:activity:7175882257335791616,"You cannot cheat time in the saddle.

Too many of the developers I speak to want to play it safe. I tried this too.

Goes something like this:

✅ Take on work you know exactly how to handle
✅ ""LGTM"" on another code review
✅ Stay silent in meetings
❌ Wonder why you don't get promoted

Here’s the thing: you’re going to make mistakes. I cannot promise your experience will be like mine.

I’ve blown up production a few times. I deleted the column without a back up. I pretended to understand and f*cked things up.

I learned a lot, got yelled at a few times and embarrassed too many times to count. Now I can share my takeaways with mentees and team mates (minus the yelling).

I’m not saying to be careless, I’m just saying you will have to get used to the idea of failure if you want to grow.",TEXT,Brian,Jenney,6882,6882,68,20,2,0,0.013077593722755012,,2024-03-19 08:54:11,https://www.linkedin.com/feed/update/urn:li:activity:7175882257335791616
urn:li:activity:7175540449934245888,"White board interviews are biased, outdated and you will never use any DSA in ""real life"" as a developer.

Right?

Except:

- 𝘀𝗼𝗺𝗲𝘁𝗶𝗺𝗲𝘀 𝗶𝘁'𝘀 𝗲𝗮𝘀𝗶𝗲𝗿 𝘁𝗼 𝘂𝘀𝗲 𝗿𝗲𝗰𝘂𝗿𝘀𝗶𝗼𝗻 than an iterative solution
- 𝘁𝗿𝗲𝗲𝘀 𝗮𝗿𝗲 𝗲𝘃𝗲𝗿𝘆𝘄𝗵𝗲𝗿𝗲 from the database you're using to the DOM you're butchering
- 𝘂𝗻𝗱𝗲𝗿𝘀𝘁𝗮𝗻𝗱𝗶𝗻𝗴 𝘀𝗼𝗺𝗲 𝗯𝗮𝘀𝗶𝗰 𝗕𝗶𝗴 𝗢 might prevent you from writing that triple nested loop that crashes when you finally get some users

Why limit yourself to companies that don't ask DSA?

𝗬𝗼𝘂 𝗱𝗼𝗻'𝘁 𝗻𝗲𝗲𝗱 𝘁𝗼 𝗽𝗼𝘂𝗻𝗱 𝟱𝟬𝟬 𝗟𝗲𝗲𝘁𝗖𝗼𝗱𝗲 𝗽𝗿𝗼𝗯𝗹𝗲𝗺𝘀 𝗲𝗶𝘁𝗵𝗲𝗿.

- build some basic structures from scratch
- ask Chat GPT what their practical usage might be
- learn a handful of algos which dominate software and then when to apply them",TEXT,Brian,Jenney,5919,5919,55,17,0,0,0.012164216928535226,,2024-03-18 10:15:58,https://www.linkedin.com/feed/update/urn:li:activity:7175540449934245888
urn:li:activity:7174442191157702656,"2 minutes into the interview and I already knew I failed.

I politely told my interviewer, ""𝘐 𝘥𝘰𝘯'𝘵 𝘵𝘩𝘪𝘯𝘬 𝘪𝘵'𝘴 𝘸𝘰𝘳𝘵𝘩 𝘮𝘰𝘷𝘪𝘯𝘨 𝘧𝘰𝘳𝘸𝘢𝘳𝘥 𝘢𝘯𝘥 𝘐 𝘥𝘰𝘯'𝘵 𝘸𝘢𝘯𝘵 𝘵𝘰 𝘸𝘢𝘴𝘵𝘦 𝘺𝘰𝘶𝘳 𝘵𝘪𝘮𝘦""

He was a bit shocked and even encouraged me to try. So I did.

The problem required recursion. I had no freaking clue where to start. So I quit on the spot. 😢

I made an oath that day to learn how to leverage recursion for silly-ass toy problems in interviews. This time... it was personal.

Honestly, they don't have to be intimidating and I'm going to show you a recipe I use to construct the majority of recursive solutions along with a practical example that is NOT fibonacci.",VIDEO,Brian,Jenney,11658,3798,131,19,5,0,0.013295591010464916,,2024-03-15 09:31:53,https://www.linkedin.com/feed/update/urn:li:activity:7174442191157702656
urn:li:activity:7173715129526546437,"As a junior developer, most advice will probably work for you. You just haven’t stuck with it long enough to see any results.

Or  worse - you’re consistent and STILL don’t see any results.

You may have a different problem. 

𝗬𝗼𝘂 𝗺𝗮𝘆 𝗻𝗲𝗲𝗱 𝗺𝗼𝗿𝗲 𝘃𝗼𝗹𝘂𝗺𝗲. 

Lemme explain:

Around 10 years ago I got sober and started working out.

I saw zero results from my diet and exercise routine despite being consistent. It was deflating but I’m also a stubborn SOB.

I broke down and paid for an online coach and 𝗜 𝗴𝗼𝘁 𝗯𝗲𝘁𝘁𝗲𝗿 𝗿𝗲𝘀𝘂𝗹𝘁𝘀 𝗶𝗻 𝟵𝟬 𝗱𝗮𝘆𝘀 𝘁𝗵𝗮𝗻 𝗜 𝗵𝗮𝗱 𝗶𝗻 𝘁𝗵𝗲 𝗽𝗿𝗲𝘃𝗶𝗼𝘂𝘀 𝟳 𝘆𝗲𝗮𝗿𝘀.

What changed?

He cut my calorie intake and increased my workout intensity by a factor of wtf. I went from 30 mins a day of bumbling around in the gym to doing sets of a 100 burpees at a time.

My body responded.

Apply this approach to your job search or learning to code or getting in shape.

Consistency > Intensity but < Consistency + Intensity",TEXT,Brian,Jenney,14063,14063,77,12,6,0,0.006755315366564744,,2024-03-13 09:22:48,https://www.linkedin.com/feed/update/urn:li:activity:7173715129526546437
urn:li:activity:7173381981760577537,"A decade of brutal code reviews did not prepare me for the hate I've received on TikTok, IG and Reddit for my coding opinions.

If you’re looking for civil discourse or to learn anything useful, I might stay away.

Go old school.

Read a couple books by people who took their time to articulate their thoughts and actually research rather than compete to see who can make the most viral and shocking content.

Here’s a few I’ve read and would recommend:

- The Coding Career Handbook https://lnkd.in/geszM2C2
- The Manager's Path: A Guide for Tech Leaders Navigating Growth and Change https://lnkd.in/gzUzmKx2
- Kyle Simpson’s YDKJS series https://lnkd.in/gzAnyJHv
- The Art of Refactoring https://lnkd.in/gmNYnS9s
- The Phoenix Project https://lnkd.in/gF4Vp2Ux",UNKNOWN,Brian,Jenney,33096,33096,117,24,4,0,0.004381194102006285,,2024-03-12 11:27:56,https://www.linkedin.com/feed/update/urn:li:activity:7173381981760577537
urn:li:activity:7172972628540960769,"I've bombed more interviews than I've beaten.

Here's a few mistakes I've made over the years:

- Only studying DSA (data structures and algorithms)
- Not asking ahead of time what questions will be asked
- Not researching on the company
- Not setting up my dev environment

Dicky Kitchen Jr is a dude I met through IG who is on his coding journey and suggested we do a mock interview.

He agreed to be my v̶i̶c̶t̶i̶m̶ participant.

We treated it like a real deal technical screening and based on what I've learned from my own experiences, interviewing others for multiple companies and speaking with hundreds of you out there - 𝗜 𝘁𝗵𝗶𝗻𝗸 𝘁𝗵𝗶𝘀 𝗶𝘀 𝗽𝗿𝗲𝘁𝘁𝘆 𝗿𝗲𝗽𝗿𝗲𝘀𝗲𝗻𝘁𝗮𝘁𝗶𝘃𝗲 𝗼𝗳 𝘄𝗵𝗮𝘁 𝘆𝗼𝘂 𝘄𝗶𝗹𝗹 𝗲𝗻𝗰𝗼𝘂𝗻𝘁𝗲𝗿.

Because you're probably awesome and I like you, I want to give you some material to help you prepare and beat your next interview. Check it out here:

https://lnkd.in/dvq9yG9N",UNKNOWN,Brian,Jenney,28593,28593,82,5,2,0,0.003112649949288287,,2024-03-11 08:50:31,https://www.linkedin.com/feed/update/urn:li:activity:7172972628540960769
urn:li:activity:7171906368021381120,"When you turn 40 in tech, you really only have 2 options:

1. Start a newsletter
2. Start a podcast

I did both 😅.

Honestly, when I took over Parsity, it came with a podcast. At first I was nervous about it. I have mostly hidden behind a screen, typing bro-etry on LI.

Since I’ve started, it’s become one of my favorite mediums for sharing what I’ve learned and I’ve met so many great people because of it. 

This week, I got a chance to speak on a few different podcasts on opposite ends of the dev career spectrum:

- For early career devs - Eric Winkelspecht who hosts 𝘚𝘦𝘭𝘧 𝘛𝘢𝘶𝘨𝘩𝘵 𝘋𝘦𝘷𝘴
- For early career managers - Nick Cosentino who hosts 𝘋𝘶𝘥𝘦, 𝘞𝘩𝘦𝘳𝘦'𝘴 𝘔𝘺 𝘊𝘰𝘥𝘦

Next week, I’ll be dropping a couple episodes I know will help many of you on the interview grind along with some free resources to study for the non-DSA interview.

Shout out to m̶y̶ ̶v̶i̶c̶t̶i̶m̶ Dicky Kitchen Jr who did this intense mock interview with me!

𝗜’𝗱 𝗹𝗼𝘃𝗲 𝘁𝗼 𝗵𝗲𝗮𝗿 𝘆𝗼𝘂𝗿 𝗶𝗱𝗲𝗮𝘀 𝗳𝗼𝗿 𝘄𝗵𝗼 𝗜 𝘀𝗵𝗼𝘂𝗹𝗱 𝘁𝗿𝘆 𝘁𝗼 𝘀𝗽𝗲𝗮𝗸 𝘁𝗼 𝗻𝗲𝘅𝘁 𝗮𝗻𝗱 𝘁𝗼𝗽𝗶𝗰𝘀 𝘁𝗵𝗮𝘁 𝘄𝗶𝗹𝗹 𝗵𝗲𝗹𝗽 𝘁𝗵𝗼𝘀𝗲 𝗷𝘂𝘀𝘁 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝘀𝘁𝗮𝗿𝘁𝗲𝗱 𝗶𝗻 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲.",UNKNOWN,Brian,Jenney,8879,8879,74,16,1,0,0.010248901903367497,,2024-03-08 08:51:41,https://www.linkedin.com/feed/update/urn:li:activity:7171906368021381120
urn:li:activity:7171189894717927426,"No one’s going to look at your portfolio.

You should still be building projects.

The real value of that Weather App, Movie Finder or Chat Bot isn’t that it’s unique or styled like a pro.

The real value is that it teaches you how to build and deploy an application.

It gives you something to talk about when they ask you to “𝘛𝘦𝘭𝘭 𝘮𝘦 𝘢𝘣𝘰𝘶𝘵 𝘢𝘯 𝘪𝘯𝘵𝘦𝘳𝘦𝘴𝘵𝘪𝘯𝘨 𝘱𝘳𝘰𝘫𝘦𝘤𝘵 𝘺𝘰𝘶’𝘷𝘦 𝘸𝘰𝘳𝘬𝘦𝘥 𝘰𝘯”

So before you get caught up in the shade of green you’re going to use for that nav bar, consider what you really want to learn. 

I might suggest:

- 𝗔𝗪𝗦 (dynamo DB, Lambdas, S3)
- 𝗩𝗲𝗿𝗰𝗲𝗹 (edge functions, streaming)
- 𝗔𝗜 (integrate Dall-E or OpenAI)
- 𝗔𝘂𝘁𝗵 (OAuth, Okta, roll-your-own with roles)

Think what will make a good story and work backwards from there.",UNKNOWN,Brian,Jenney,19677,19677,159,27,7,0,0.009808405752909487,,2024-03-06 09:21:06,https://www.linkedin.com/feed/update/urn:li:activity:7171189894717927426
urn:li:activity:7170836675756052480,"These things will ruin you as a software developer:

- Being too smart for frameworks 🙄
- Avoiding data structures and algorithms
- Refusing to ask for help
- Online debates about why someone is dumb for using a certain stack/language

Avoid as many of these as possible.",UNKNOWN,Brian,Jenney,10332,10332,105,21,3,0,0.01248548199767712,,2024-03-05 10:13:43,https://www.linkedin.com/feed/update/urn:li:activity:7170836675756052480
urn:li:activity:7170432341604069376,"
According to Reddit, YouTube and too many influencers online:

- AI is the end of developers
- No one can get hired

Give up, hide in a bunker and maybe do drop-shipping. Or invest in Crypto.

I am over the fear-mongering online regarding AI and the job market for developers. 

The reality:

- It's tough to get the first job and the market is weird for everyone right now
- AI is NOT taking your coding job for the foreseeable future

Let's explore how you should be using AI and WHEN to incorporate it into your workflow as a developer.

https://lnkd.in/gZaeADBA

👆 𝙏𝙝𝙚𝙧𝙚'𝙨 𝙖𝙡𝙨𝙤 𝙖 𝙉𝙤𝙙𝙚/𝙀𝙭𝙥𝙧𝙚𝙨𝙨 𝘼𝙄 𝙨𝙩𝙖𝙧𝙩𝙚𝙧 𝙥𝙧𝙤𝙟𝙚𝙘𝙩 𝙞𝙣 𝙩𝙝𝙚 𝙨𝙝𝙤𝙬 𝙣𝙤𝙩𝙚𝙨 𝙞𝙛 𝙩𝙝𝙖𝙩'𝙨 𝙮𝙤𝙪𝙧 𝙩𝙝𝙞𝙣𝙜",IMAGE,Brian,Jenney,3116,3116,34,5,0,0,0.01251604621309371,,2024-03-04 07:48:31,https://www.linkedin.com/feed/update/urn:li:activity:7170432341604069376
urn:li:activity:7169383727167459328,"Worst way to spend your weekend?

Completing a take home coding project that was supposed to take 4 hours but really takes 2 full days.

If you MUST participate in these kinds of interviews there are 2 ways you can stand out:

1. Write documentation
2. Write some unit tests

You don’t know how to write unit tests? Let’s fix that.

I break down why you should be writing them and how to get started this podcast - 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗴𝗿𝗮𝗯 𝘁𝗵𝗲 𝗨𝗻𝗶𝘁 𝗧𝗲𝘀𝘁 𝗚𝘂𝗶𝗱𝗲 𝗶𝗻 𝘁𝗵𝗲 𝘀𝗵𝗼𝘄 𝗻𝗼𝘁𝗲𝘀 𝗵𝗲𝗿𝗲 👉 https://lnkd.in/ghn_kr63",UNKNOWN,Brian,Jenney,5962,5962,54,9,0,0,0.010566923851056693,,2024-03-01 10:12:56,https://www.linkedin.com/feed/update/urn:li:activity:7169383727167459328
urn:li:activity:7169014305760247808,"This quote from Vercel's AI night is no doubt going to ruffle some feathers.

I would agree... except, I'd probably include us JS devs too 😅.

Every company has basically been mandated to incorporate AI. We've seen some pretty ham-fisted approaches but also some amazing benefits. As a developer, I use Co-Pilot and ChatGippity daily. 

It's the new normal.

Knowing how to work with and leverage current APIs/models will set you apart from prompt engineers. 

For this reason, you should probably spend 10 bucks for some tokens on the Open AI dev platform and experiment with integrating it into your next side project.

I'm excited to incorporate more AI/NextJS/Typescript into Parsity's curriculum and since I'm feeling nice, I even have an 𝗔𝗜 𝘀𝘁𝗮𝗿𝘁𝗲𝗿 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘄𝗵𝗶𝗰𝗵 𝗹𝗲𝘃𝗲𝗿𝗮𝗴𝗲𝘀 𝗢𝗽𝗲𝗻𝗔𝗜 𝗮𝗻𝗱 𝗡𝗼𝗱𝗲/𝗘𝘅𝗽𝗿𝗲𝘀𝘀 𝘁𝗼 𝗴𝗲𝘁 𝘆𝗼𝘂𝗿 𝗵𝗮𝗻𝗱𝘀 𝗱𝗶𝗿𝘁𝘆 👇

Check it out here => https://lnkd.in/gxajBHtz 🤖",IMAGE,Brian,Jenney,9335,9335,101,13,7,0,0.012961971076593465,,2024-02-29 09:16:29,https://www.linkedin.com/feed/update/urn:li:activity:7169014305760247808
urn:li:activity:7168682708649410560,"Eat code sleep is not a process for progress, it’s a recipe for burnout.

I’ve seen some of you trying out this method and I’ve yet to see it work.

Hell, I tried it myself.

It led to:

- anxiety
- less enthusiasm for my work
- decreased quality of thought

Counter-intuitively, the more I tried to cram in material or optimize my schedule, the less progress I was making.

It was frustrating.

For me, having a non-negotiable workout routine forced me to detach from work.

Few things can interrupt my workout besides a sick kid or a critical bug at work.

This is where I clear my mind and where I come up with my best ideas.

Getting in shape was honestly a side effect of this routine and perhaps the best “hack” I’ve discovered for keeping me sane during stressful periods.",UNKNOWN,Brian,Jenney,4466,4466,50,8,2,0,0.013434841021047918,,2024-02-28 11:24:55,https://www.linkedin.com/feed/update/urn:li:activity:7168682708649410560
urn:li:activity:7168286513049419776,"I don’t have a problem with tutorials. 

I do have a problem with the way most of you are using them however. You’re probably making a lot of the same mistakes I did:

- Passive watching
- Falling down every rabbit hole
- Confusing completion with understanding
- No practical application

𝗬𝗼𝘂 𝘄𝗮𝘁𝗰𝗵 𝗮 𝟭𝟬 𝗵𝗼𝘂𝗿 𝘃𝗶𝗱𝗲𝗼, 𝘀𝗶𝘁 𝗱𝗼𝘄𝗻 𝘁𝗼 𝗰𝗼𝗱𝗲 𝗮𝗻𝗱 𝗿𝗲𝗮𝗹𝗶𝘇𝗲 𝘆𝗼𝘂 𝗵𝗮𝘃𝗲 𝗻𝗼 𝗳*𝗰𝗸𝗶𝗻 𝗰𝗹𝘂𝗲 𝘄𝗵𝗮𝘁 𝘁𝗼 𝗱𝗼.

You hate to see it and I’ve been there.

I use this method:

- 𝗟𝗲𝗮𝗿𝗻 𝗷𝘂𝘀𝘁 𝗲𝗻𝗼𝘂𝗴𝗵 from your tutorial to begin writing some code
- Bumble your way through to 𝗯𝘂𝗶𝗹𝗱 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗶𝗻𝘁𝗲𝗿𝗮𝗰𝘁 𝘄𝗶𝘁𝗵
- 𝗥𝗲𝗮𝗰𝗵 𝘁𝗵𝗲 𝗹𝗶𝗺𝗶𝘁 𝗼𝗳 𝘆𝗼𝘂𝗿 𝘁𝗲𝗰𝗵𝗻𝗶𝗰𝗮𝗹 𝗱𝗲𝗽𝘁𝗵 and get stuck
- Stop coding and re-visit the tutorial and 𝗯𝘂𝗶𝗹𝗱 𝘂𝗽 𝘀𝗼𝗺𝗲 𝗺𝗼𝗿𝗲 𝗸𝗻𝗼𝘄𝗹𝗲𝗱𝗴𝗲 for the next piece of your app

Repeat.",UNKNOWN,Brian,Jenney,15636,15636,134,21,7,0,0.010360706062931695,,2024-02-27 09:27:49,https://www.linkedin.com/feed/update/urn:li:activity:7168286513049419776
urn:li:activity:7167894230202343424,"I asked former Parsity grad Ryan Passer an interesting question:

""𝘋𝘰 𝘺𝘰𝘶 𝘩𝘢𝘷𝘦 𝘵𝘰 𝘭𝘪𝘬𝘦 𝘤𝘰𝘥𝘪𝘯𝘨 𝘵𝘰 𝘣𝘦 𝘴𝘶𝘤𝘤𝘦𝘴𝘴𝘧𝘶𝘭 𝘢𝘵 𝘪𝘵?""

I can tell you that I have not met a developer who I admired who did not find some joy in their work. 

𝗔 𝗹𝗶𝘁𝘁𝗹𝗲 𝗼𝘃𝗲𝗿 𝟳𝟬% 𝗼𝗳 𝗽𝗿𝗼𝗳𝗲𝘀𝘀𝗶𝗼𝗻𝗮𝗹 𝗰𝗼𝗱𝗲𝗿𝘀 𝗮𝗹𝘀𝗼 𝘄𝗿𝗶𝘁𝗲 𝗰𝗼𝗱𝗲 𝗳𝗼𝗿 𝗮 𝗵𝗼𝗯𝗯𝘆 according to Stack Overflow's yearly developer survey 🤷.

In this episode, Ryan Passer shares his opinions and advice for up and coming developers including:

- his journey from marketer to Parsity to full stack software engineer
- his unusual (𝘣𝘶𝘵 𝘯𝘰𝘵 𝘳𝘦𝘢𝘭𝘭𝘺) interview experience
- 𝗸𝗲𝗲𝗽𝗶𝗻𝗴 𝗺𝗼𝘁𝗶𝘃𝗮𝘁𝗲𝗱 while learning to code
- side projects
- hot takes on technology trends
- 𝘄𝗵𝘆 𝘆𝗼𝘂 𝘀𝗵𝗼𝘂𝗹𝗱 𝗽𝗿𝗼𝗯𝗮𝗯𝗹𝘆 𝗯𝗲 𝗮 𝗳𝘂𝗹𝗹 𝘀𝘁𝗮𝗰𝗸 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝗲𝗻𝗴𝗶𝗻𝗲𝗲𝗿 in today's market


𝙇𝙞𝙨𝙩𝙚𝙣 𝙝𝙚𝙧𝙚 👉 https://lnkd.in/gNbar8AD",UNKNOWN,Brian,Jenney,2852,2852,33,4,0,0,0.012973352033660589,,2024-02-26 07:15:29,https://www.linkedin.com/feed/update/urn:li:activity:7167894230202343424
urn:li:activity:7167205568791662592,"Before taking over ownership of Parsity I had a pretty cool project/product that is now gifted to all Parsity grads.

𝗜𝘁'𝘀 𝗻𝗼𝘁 𝗮 𝗰𝗼𝘂𝗿𝘀𝗲.

I don't really know what to call it honestly.

Someone described it as a ""field guide for software developers"". 

Basically, I thought about all the generic issues that web developers will likely deal with and created projects to reflect those challenges.

- Troubleshooting GitHub actions pipelines
- Fixing a Lambda on AWS 
- Migrating APIs
- Improving Core Web Vitals
- Diving into a new codebase
- Creating an NPM library

Check it out! There are some free and not-so-free challenges on there javascriptprosapp.com
",UNKNOWN,Brian,Jenney,6180,6180,56,8,4,0,0.011003236245954692,,2024-02-24 09:40:22,https://www.linkedin.com/feed/update/urn:li:activity:7167205568791662592
urn:li:activity:7166832230269407232,"Sometimes I feel like a fake engineering manager but that’s ok. 

Before this, I was a fake senior software engineer and before that I was pretending to be a developer.

At each new stage, there’s a little voice in my head reminding me why I shouldn’t be in my position.

I peruse LinkedIn and compare myself to others.

Terrible habit.

I know it will happen again and I’m prepared.

Here’s how I get over that little voice in my head:

- 𝗳𝗶𝗻𝗱 𝗮𝗻 𝗮𝘃𝗮𝘁𝗮𝗿 - who do I want to be like?
- what do they know that I don’t?
- 𝗰𝗿𝗲𝗮𝘁𝗲 𝗮 𝗰𝗵𝗲𝗰𝗸𝗹𝗶𝘀𝘁 with the items from the previous step
- 𝗳𝗶𝗻𝗱 𝗺𝗲𝗻𝘁𝗼𝗿𝘀 𝗼𝗿 𝗯𝗼𝗼𝗸𝘀 or both to bring me closer to the avatar
- 𝗰𝗵𝗲𝗰𝗸 𝗶𝘁𝗲𝗺𝘀 𝗼𝗳𝗳 𝘁𝗵𝗲 𝗹𝗶𝘀t and prove to myself that I’m where I need to be

Rinse and repeat for each promotion, new company or new role.

I break down some non-fluffy advice here: https://lnkd.in/gt6AJcUx",UNKNOWN,Brian,Jenney,9378,9378,69,16,3,0,0.009383663894220516,,2024-02-23 09:09:39,https://www.linkedin.com/feed/update/urn:li:activity:7166832230269407232
urn:li:activity:7166107221989294080,"There is a valuable skill that will set you apart from most developers. It will go from a nice to have to a requirement if you want to move into leadership:

Public speaking.

If you’re like me, maybe you think you can just hide in your code hole and never speak.

I tried this method for a few years and it sorta worked.

I didn’t get fired. 

I also couldn’t get promoted or make much of an impact.

Now, as an engineering manager, my job is a lot of coding but it’s also a lot of speaking. To get over my fear I did a few things:

1. Write down questions to ask during meetings 
2. Volunteer for a lunch and learn
3. Explain my code over a video using Loom (I made so many videos I’ve never shared)
4. Make a commitment to be the first to break the silence in a meeting - even with a dumb question (see #1)

You’re probably your worst critic. 

We’re all much too wrapped up in ourselves to remember the dumb thing you said in that meeting last Tuesday.",UNKNOWN,Brian,Jenney,27675,27675,161,41,4,0,0.007443541102077687,,2024-02-21 09:09:01,https://www.linkedin.com/feed/update/urn:li:activity:7166107221989294080
urn:li:activity:7165378462139052032,"Turn off the tutorial. 

Open the code editor.

You’re going to learn a hell of a lot more from:

- getting stuck
- reading the documentation
- realizing the docs suck
- getting rate limited on Chat GPT
- throwing everything at the wall
- finally figuring it out
- feeling like a genius… for a few minutes

as opposed to:

- typing what another person has typed

John Crickett would probably agree. I sat down with the code challenge King to talk about:

• how he'd be learning to code if he was starting over
• how he got into tech
• his approach to social media 
• how he blew up on multiple platforms
• AI and jobs

Check it out here: https://lnkd.in/gDqsPWXv
",VIDEO,Brian,Jenney,14517,14517,71,10,8,0,0.00613074326651512,,2024-02-19 08:40:28,https://www.linkedin.com/feed/update/urn:li:activity:7165378462139052032
urn:li:activity:7164301478705266690,"LinkedIn or Twitter fame is a silly goal if you’re building in public to land a role.

The real power of learning in public is:

- demonstrating technical depth
- showcasing your work
- learning how to articulate your thoughts on technical subjects

As owner of Parsity I've encouraged more students to use LinkedIn, not to become mini-influencers but to get used to explaining the concepts they're learning and make connections outside of our program.

I know it's not comfortable or easy and most won't do it. That's ok. I get it and there's more than 1 way to skin a cat (the cat being getting hired 🤔 🐈).

A few students I see writing on a regular basis include:

Stephen Swaringin 
Spencer Willis 

Check 'em out.

Also - if you have writer's block, grab my LinkedIn templates to get your noggin' joggin' 👉 https://lnkd.in/gQiYrQd9",UNKNOWN,Brian,Jenney,11740,11740,66,13,2,0,0.006899488926746167,,2024-02-16 08:56:26,https://www.linkedin.com/feed/update/urn:li:activity:7164301478705266690
urn:li:activity:7163579750081376256,"So apparently, there is a tutorial out there teaching people how to use Git. 

One big issue - the example they show includes opening a PR against everyone's favorite NodeJS framework: Express.js

I got quite a bit of hate when 𝗜 𝘀𝘂𝗴𝗴𝗲𝘀𝘁𝗲𝗱 𝘆𝗼𝘂 𝗗𝗢𝗡'𝗧 𝗰𝗼𝗻𝘁𝗿𝗶𝗯𝘂𝘁𝗲 𝘁𝗼 𝗼𝗽𝗲𝗻 𝘀𝗼𝘂𝗿𝗰𝗲.

I stand by my statement.

With this important nuance: 

𝗬𝗼𝘂 𝗱𝗼𝗻'𝘁 𝗛𝗔𝗩𝗘 𝘁𝗼 𝗰𝗼𝗻𝘁𝗿𝗶𝗯𝘂𝘁𝗲 𝘁𝗼 𝗼𝗽𝗲𝗻 𝘀𝗼𝘂𝗿𝗰𝗲 as a way to stand out. If you actually want to contribute - then you should.

You can also:

- clone down a project
- run it locally
- try to extend or break a small feature
- learn a lot and never open a PR

Garbage PRs that serve no purpose will do nothing but harm your reputation and if they mistakenly get merged, imagine how many nerds will cry that day. 

Lose/Lose.",IMAGE,Brian,Jenney,10891,10891,46,8,1,0,0.005050041318519879,,2024-02-14 09:13:25,https://www.linkedin.com/feed/update/urn:li:activity:7163579750081376256
urn:li:activity:7162902637632311297,"Hosting the Develop Yourself Podcast was honestly never my intention. 

You see, I inherited this podcast once I took over Parsity.

It's become one of the most enjoyable parts of my week. I've met engineering leaders including one of my favorite authors and people who I follow on social media that I respect.

𝗧𝗵𝗲 𝗽𝗼𝗶𝗻𝘁 𝗼𝗳 𝘁𝗵𝗲 𝗽𝗼𝗱𝗰𝗮𝘀𝘁 𝗶𝘀 𝘁𝗼 𝗵𝗲𝗹𝗽 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿𝘀 𝗮𝗻𝗱 𝗰𝗮𝗿𝗲𝗲𝗿 𝗰𝗵𝗮𝗻𝗴𝗲𝗿𝘀 𝗹𝗲𝗮𝗿𝗻 𝗺𝗼𝗿𝗲 𝗮𝗯𝗼𝘂𝘁 𝘁𝗵𝗲𝗶𝗿 𝗰𝗿𝗮𝗳𝘁 𝗮𝗻𝗱 𝗳𝗶𝗻𝗱 𝗮 𝗾𝘂𝗶𝗰𝗸𝗲𝗿 𝗽𝗮𝘁𝗵 𝗳𝗿𝗼𝗺 𝟬 -> 𝗵𝗶𝗿𝗲𝗱 𝗮𝗻𝗱 𝗳𝗿𝗼𝗺 𝗵𝗶𝗿𝗲𝗱 -> 𝗻𝗲𝘅𝘁 𝗰𝗮𝗿𝗲𝗲𝗿 𝗹𝗲𝘃𝗲𝗹.

Some of my favorite guests are people earlier in their career since they have recently lived through that difficult stage that many of you are currently experiencing.

This week I spoke with Nathan Drake, former Parsity grad and learn how he got hired, dipped his toe into entrepreneurship and takeaways from the job search after graduating a bootcamp.

𝘞𝘢𝘪𝘵 𝘵𝘪𝘭 𝘺𝘰𝘶 𝘴𝘦𝘦 𝘸𝘩𝘰 𝘐 𝘨𝘰𝘵 𝘧𝘰𝘳 𝘯𝘦𝘹𝘵 𝘸𝘦𝘦𝘬... 😉",UNKNOWN,Brian,Jenney,2812,2812,27,1,1,0,0.010312944523470839,,2024-02-12 12:23:11,https://www.linkedin.com/feed/update/urn:li:activity:7162902637632311297
urn:li:activity:7162840158529081345,"I don't want to paint a picture of the job market for developers as roses and rainbows right now. 

It's tough to get hired. It's always been difficult to get that first job. Also: 

- A few former mentees just landed their first job 🍾
- A couple acquaintances are taking on job number 2 🤫

I'm sick of the nonstop fear-peddling. It's just not helpful. 

There are things we can control and things we cannot. If it's any consolation - everyone is finding it difficult to find a job. Not just devs. 📈

Continue to work on what you know makes sense for you and maybe unfollow the people that are pumping your head full of negativity.

Some people I follow that help early career developers with landing a job are:

🌻 Anna Miller
Rod H. Danan
David Roberts. 
",UNKNOWN,Brian,Jenney,29697,29697,164,23,5,0,0.006465299525204566,,2024-02-12 08:47:51,https://www.linkedin.com/feed/update/urn:li:activity:7162840158529081345
urn:li:activity:7161403703181156352,"Coding interview hacks that have nothing do with coding:

1. 𝗖𝗵𝗲𝗰𝗸 𝗚𝗹𝗮𝘀𝘀𝗱𝗼𝗼𝗿 𝗼𝗿 𝗧𝗲𝗮𝗺𝗕𝗹𝗶𝗻𝗱 for previous questions from interviews
2. 𝗦𝘁𝗮𝗹𝗸 𝘆𝗼𝘂𝗿 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝗲𝗿𝘀 𝗼𝗻 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 - not like in a creepy way though. Are they involved in some communities that you’re part of? Maybe slip that into the convo (again, non-creepy please)
3. 𝗝𝘂𝘀𝘁 𝘀𝘁𝗿𝗮𝗶𝗴𝗵𝘁 𝘂𝗽 𝗮𝘀𝗸 what the interview will be…

This week I’ve spoken with a few developers, including a Parsity student who is getting ready for an interview. Their recruiter didn’t tell them what kind though 😅.

There’s too much to study and too much at stake to risk. You HAVE to ask.

Just say this:

“𝘛𝘰 𝘮𝘢𝘬𝘦 𝘴𝘶𝘳𝘦 𝘐’𝘮 𝘸𝘦𝘭𝘭 𝘱𝘳𝘦𝘱𝘢𝘳𝘦𝘥 𝘧𝘰𝘳 𝘵𝘩𝘦 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸, 𝘤𝘢𝘯 𝘺𝘰𝘶 𝘭𝘦𝘵 𝘮𝘦 𝘬𝘯𝘰𝘸 𝘸𝘩𝘢𝘵 𝘵𝘩𝘪𝘴 𝘸𝘪𝘭𝘭 𝘦𝘯𝘵𝘢𝘪𝘭? 𝘞𝘪𝘭𝘭 𝘵𝘩𝘪𝘴 𝘣𝘦 𝘢 𝘵𝘦𝘤𝘩𝘯𝘪𝘤𝘢𝘭 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸, 𝘢 𝘤𝘰𝘥𝘪𝘯𝘨 𝘤𝘩𝘢𝘭𝘭𝘦𝘯𝘨𝘦 𝘰𝘳 𝘤𝘰𝘯𝘷𝘦𝘳𝘴𝘢𝘵𝘪𝘰𝘯𝘢𝘭?”

Good luck out there 🤲",UNKNOWN,Brian,Jenney,23481,23481,102,25,6,0,0.005664153996848516,,2024-02-08 09:19:51,https://www.linkedin.com/feed/update/urn:li:activity:7161403703181156352
urn:li:activity:7161084195484688387,"There's nothing wrong with being average.

As an average developer you will:

- get work done in a timely manner
- write maintainable code
- get promoted every once in a while

For many of you, being average is your current goal and that's fine. 

BUT, if you want to be a super star on a team, there's 1 trait I've noticed in developers I admire and it's been true for every team where I've worked.

I break down this trait and how I've copied it to become a slightly above average developer.",ARTICLE,Brian,Jenney,11323,11323,81,4,1,0,0.007595160293208514,,2024-02-07 12:13:44,https://www.linkedin.com/feed/update/urn:li:activity:7161084195484688387
urn:li:activity:7160709484774903808,"I’ve gone from struggling junior developer to struggling engineering manager over the last 10 years and that little voice in my head has been present for the entire time.

“𝘛𝘩𝘦𝘺’𝘳𝘦 𝘨𝘰𝘯𝘯𝘢 𝘧𝘪𝘯𝘥 𝘺𝘰𝘶 𝘰𝘶𝘵”

It’s lot quieter than when I started but it's never left. I’ve come to accept it and seen its patterns.

Promotion?
- Voice gets louder.

Accomplishment?
- Voice gets quieter.

New job?
- Deafeningly loud.

Solve an LC hard in 30 minutes?
- 🤐

The feeling that you’re just not quite good enough may in fact be true. 

Be objective. 

Write out your weaknesses. Write out your strengths. 

Where is the gap between who you want to be and who you are currently and what will it take to get there?",UNKNOWN,Brian,Jenney,30239,30239,231,16,4,0,0.008300539038989384,,2024-02-06 11:23:56,https://www.linkedin.com/feed/update/urn:li:activity:7160709484774903808
urn:li:activity:7160315837994696705,"The dirty secret about a lot of the ""tech"" influencers you're taking advice from:

Many have never written code for a living and yet they'll tell you how bad or good the market is, why JS sucks and why I'm an idiot for saying you should learn HTML and CSS.... seriously.

I have a lot of opinions on how you should get that first job, what to learn and why you should be creating side projects. 

𝗔 𝘀𝗶𝗻𝗴𝗹𝗲 𝗲𝘃𝗲𝗻𝘁 𝗹𝗮𝘀𝘁 𝘆𝗲𝗮𝗿 𝗴𝗮𝘃𝗲 𝗺𝗲 𝗮 𝘂𝗻𝗶𝗾𝘂𝗲 𝗽𝗲𝗿𝘀𝗽𝗲𝗰𝘁𝗶𝘃𝗲 𝗼𝗻 𝘁𝗵𝗲 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝗹𝗮𝗻𝗱𝘀𝗰𝗮𝗽𝗲: 

Kyle Simpson reposted me and nearly a thousand followers flocked to my page. Hundreds began scheduling free 15 minute chats with me and I was totally un-prepared 😅.

[𝘊𝘩𝘦𝘤𝘬 𝘰𝘶𝘵 𝘩𝘪𝘴 𝘱𝘰𝘥𝘤𝘢𝘴𝘵 𝘸𝘪𝘵𝘩 𝘮𝘦 - 𝘪𝘵'𝘴 𝘰𝘯𝘦 𝘰𝘧 𝘮𝘺 𝘧𝘢𝘷𝘰𝘳𝘪𝘵𝘦 𝘰𝘯𝘦𝘴 𝘴𝘰 𝘧𝘢𝘳]

𝗦𝗼 𝗳𝗮𝗿 𝗜'𝘃𝗲 𝘀𝗽𝗼𝗸𝗲𝗻 𝘁𝗼 𝗮 𝗹𝗶𝘁𝘁𝗹𝗲 𝗼𝘃𝗲𝗿 𝟱𝟬𝟬 𝗼𝗳 𝘆𝗼𝘂. The guy who got out of prison who's learning to code to the senior at Amazon that feels like he's been lucky his whole career and too many bootcamp grads to count.

I share the themes in these conversations and the advice I've given to the most recurring questions like:

1. What to build for a side project?
2. Why does my LinkedIn suck?
3. Feeling like an impostor and a practical approach to quiet that voice down

𝗟𝗶𝘀𝘁𝗲𝗻 𝗵𝗲𝗿𝗲: https://lnkd.in/dEV2dW9U",UNKNOWN,Brian,Jenney,12613,12613,59,18,1,0,0.006184095774201221,,2024-02-05 09:45:11,https://www.linkedin.com/feed/update/urn:li:activity:7160315837994696705
urn:li:activity:7159223589039132673,"Here's the awful debugging process I used to use:

1. Add a console log in the code
2. Add more logs
3. Add more logs
4. Add more logs
5. Refresh 100 times
6. Cry a little

For debugging FE apps, a 𝚍𝚎𝚋𝚞𝚐𝚐𝚎𝚛 statement can save you a lot of headache. Pause execution and walk through the code line by line or step into a function to see what's happening. 

Also logging with 𝚌𝚘𝚗𝚜𝚘𝚕𝚎.𝚕𝚘𝚐({𝚜𝚘𝚖𝚎𝚅𝚊𝚛})can at least make it a bit easier to see what you're inspecting.

𝗙𝗼𝗿 𝗡𝗼𝗱𝗲/𝗘𝘅𝗽𝗿𝗲𝘀𝘀 𝗮𝗽𝗽𝘀 𝗵𝗼𝘄𝗲𝘃𝗲𝗿, 𝘁𝗵𝗲𝗿𝗲'𝘀 𝗮 𝗹𝗶𝘁𝘁𝗹𝗲 𝗺𝗼𝗿𝗲 𝘀𝗲𝘁 𝘂𝗽 𝗶𝗻𝘃𝗼𝗹𝘃𝗲𝗱. If you're using VS Code (cuz of course you are) you can set breakpoints in the code and run in debug mode to pause like you would in the browser.

I walk through it in the video below.",VIDEO,Brian,Jenney,12769,12769,100,10,9,0,0.009319445532148172,,2024-02-02 09:19:25,https://www.linkedin.com/feed/update/urn:li:activity:7159223589039132673
urn:li:activity:7158871892253171712,"5 Biggest mistakes of my coding career?

1. Not learning the fundamentals before diving into frameworks
2. Refusing to admit when I didn’t know something
3. Only taking on tasks I knew I could finish
4. Not understanding how engineering relates to business goals
5. Staying silent 🤐

That last one hurt me the most.

I thought I was playing it safe by taking on easy tickets. I nodded my head during estimation sessions and gave bland status updates. I never shared my ideas during meetings.

I just wanted to blend in.

It was the most dangerous thing I could’ve done.

They say the tallest blade of grass is the first to get cut.

Yeah, I guess. It’s also the one growing the fastest.

Companies need average developers more than they’d like to admit. But, if career trajectory and increased hire-ability is your goal, then playing it safe is your greatest threat.",UNKNOWN,Brian,Jenney,17441,17441,148,13,4,0,0.009460466716358007,,2024-02-01 09:36:14,https://www.linkedin.com/feed/update/urn:li:activity:7158871892253171712
urn:li:activity:7158141676874604544,"Some of my most hated advice for junior developers or bootcamp grads is to ""𝘫𝘶𝘴𝘵 𝘤𝘰𝘯𝘵𝘳𝘪𝘣𝘶𝘵𝘦 𝘵𝘰 𝘰𝘱𝘦𝘯 𝘴𝘰𝘶𝘳𝘤𝘦"".

𝗪𝗶𝗹𝗹 𝗶𝘁 𝗺𝗮𝗸𝗲 𝘆𝗼𝘂 𝘀𝘁𝗮𝗻𝗱 𝗼𝘂𝘁? 𝘔𝘢𝘺𝘣𝘦. (I think a lot of you over-estimate just how involved your average software developer is in the coding community).

𝗪𝗶𝗹𝗹 𝘆𝗼𝘂 𝗽𝘂𝗹𝗹 𝘆𝗼𝘂𝗿 𝗵𝗮𝗶𝗿 𝗼𝘂𝘁 𝘁𝗿𝘆𝗶𝗻𝗴 𝘁𝗼 𝗳𝗶𝗴𝘂𝗿𝗲 𝗼𝘂𝘁 𝗵𝗼𝘄 𝘁𝗼 𝗴𝗲𝘁 𝘆𝗼𝘂𝗿 𝗰𝗵𝗮𝗻𝗴𝗲 𝗺𝗲𝗿𝗴𝗲𝗱 𝘁𝗼 𝗮𝗻𝘆 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘁𝗵𝗮𝘁 𝘄𝗼𝘂𝗹𝗱 𝗮𝗰𝘁𝘂𝗮𝗹𝗹𝘆 𝗶𝗺𝗽𝗿𝗲𝘀𝘀 𝗽𝗲𝗼𝗽𝗹𝗲? Absolutely.

𝗔𝗿𝗲 𝘁𝗵𝗲𝘆 𝘀𝘁𝗶𝗹𝗹 𝘄𝗼𝗿𝘁𝗵 𝗲𝘅𝗽𝗹𝗼𝗿𝗶𝗻𝗴? For sure.

Open source is a beautiful thing. We stand on the shoulders of tech giants... for free. It's crazy that software like React, NextJS, Serverless and the 1.3 million NPM packages you need to scaffold a simple front end app are available on the web 😅.

That being said, it's not a great place for junior devs to start:

- overwhelming complexity
- high bar for entry
- lack of guidance

Instead, try this

- clone down a popular project
- try to get it working locally
- extend some functionality
- hit a debugger statement that you’ve added

This gives you the benefit of exploring open source and what it’s like to interact with a production-grade codebase instead of fishing around the 420 open issues only to fix a typo in the README 😅 or overwhelm the maintainers with more code to dig through (for free).",UNKNOWN,Brian,Jenney,13403,13403,111,14,2,0,0.00947549056181452,,2024-01-30 09:29:01,https://www.linkedin.com/feed/update/urn:li:activity:7158141676874604544
urn:li:activity:7157767546614517760,"So much coding “content” boils down to some dude in a laptop typing fast af in the dark with a hood on his head.

Or maybe some bald dude with a blue background telling you about JS… so cringe.

As I was scrolling and trolling on IG, I was shocked to see someone actually breaking down tough concepts like the event loop, closure and hoisting. Ya’ know, practical stuff that actually might help you learn.

No hot takes. No click bait. Just helpful JS stuff.

David Rogers sat down with me and breaks down how he learned to code without a bootcamp, landed his first job and the difficulties of working in tech.

If your timeline is full of fear-mongers, anxiety-pushers and big bald heads, give him a follow maybe.",IMAGE,Brian,Jenney,3906,3906,45,9,1,0,0.01408090117767537,,2024-01-29 08:35:40,https://www.linkedin.com/feed/update/urn:li:activity:7157767546614517760
urn:li:activity:7156677967807406080,"Worst way to spend your weekend?

Completing a take home coding project that was supposed to take 4 hours but really takes 2 full days.

If you MUST participate in these kinds of interviews there are 2 ways you can stand out:

1. Write documentation
2. Write some unit tests

You don’t know how to write unit tests? Let’s fix that.

Grab this repo and make it get to 100% coverage to learn the basics of unit testing: https://lnkd.in/dh_bVgz9",UNKNOWN,Brian,Jenney,27940,27940,142,30,2,0,0.006227630637079456,,2024-01-26 08:12:33,https://www.linkedin.com/feed/update/urn:li:activity:7156677967807406080
urn:li:activity:7156327042853048321,"We've seen enough highlight reels from last year. Here were my biggest blunders in 2023:

1. 𝗖𝗼𝗱𝗶𝗻𝗴 𝘄𝗮𝘆 𝘁𝗼𝗼 𝗺𝘂𝗰𝗵 𝗮𝘀 𝗮 𝗺𝗮𝗻𝗮𝗴𝗲𝗿. I fell into my comfort zone instead of improving our processes and expanding my knowledge of our other systems.
2. 𝗡𝗼𝘁 𝗽𝗹𝗮𝘆𝗶𝗻𝗴 𝗽𝗼𝗹𝗶𝘁𝗶𝗰𝘀. Like it or not, presentations and publicizing your teams' work are important.
3. 𝗙𝗼𝗰𝘂𝘀𝗶𝗻𝗴 𝗼𝗻 𝘁𝗵𝗲 𝘄𝗿𝗼𝗻𝗴 𝗺𝗲𝘁𝗿𝗶𝗰𝘀. I chased likes for too long on social media. They don't equal cash or genuine engagement. At work I focused on arbitrary Lighthouse scores which didn't move the needle for the business.

There were many more 😅 but these stuck out to me as areas where I need to improve going forward.

Let’s see what I break in 2024!",UNKNOWN,Brian,Jenney,3636,3636,29,1,0,0,0.00825082508250825,,2024-01-25 08:55:38,https://www.linkedin.com/feed/update/urn:li:activity:7156327042853048321
urn:li:activity:7155956086628306945,"I had 500 15 minute conversations with developers from all over the world in the last 18 months.

Here are my takeaways:

- 𝗶𝗺𝗽𝗼𝘀𝘁𝗼𝗿 𝘀𝘆𝗻𝗱𝗿𝗼𝗺𝗲 𝗶𝘀 𝗽𝗿𝗲𝘃𝗮𝗹𝗲𝗻𝘁 𝗮𝗻𝗱 𝗿𝗮𝗺𝗽𝗮𝗻𝘁 at all levels (shocker)
- most junior developers need to optimize their resumes to show 𝗶𝗺𝗽𝗮𝗰𝘁 𝗼𝘃𝗲𝗿 𝗶𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁𝗮𝘁𝗶𝗼𝗻
- 𝗽𝗶𝗰𝗸𝗶𝗻𝗴 𝗮 𝗴𝗼𝗼𝗱 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰t is something most developers want to do but don’t know where to start (just follow John Crickett and steal his projects or maybe Odin Project)
- 𝗻𝗲𝘁𝘄𝗼𝗿𝗸𝗶𝗻𝗴, 𝗰𝗼𝗹𝗱 𝗮𝗽𝗽𝗹𝘆𝗶𝗻𝗴 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰 𝗔𝗟𝗟 𝘄𝗼𝗿𝗸 - the trick is sticking to one long enough to see results
- 𝗟𝗶𝗻𝗸𝗲𝗱𝗜𝗻 𝗮𝗻𝗱 𝗫 𝗵𝗮𝘃𝗲 𝗮𝘄𝗲𝘀𝗼𝗺𝗲 𝗰𝗼𝗺𝗺𝘂𝗻𝗶𝘁𝗶𝗲𝘀 despite what anyone says to the contrary

I was personally shocked to hear just how many of us don’t feel good or smart enough. I do believe that some self-assessment is healthy and useful. 

I also believe that working remotely with cloudy expectations creates an environment for negative assessments to fester.

𝗜𝗳 𝗶𝘁’𝘀 𝗮𝗻𝘆 𝗰𝗼𝗻𝘀𝗼𝗹𝗮𝘁𝗶𝗼𝗻, 𝗸𝗻𝗼𝘄 𝘁𝗵𝗮𝘁 𝗯𝗮𝘀𝗶𝗰𝗮𝗹𝗹𝘆 𝗲𝘃𝗲𝗿𝘆𝗼𝗻𝗲 𝗜’𝘃𝗲 𝘀𝗽𝗼𝗸𝗲𝗻 𝘁𝗼, 𝗳𝗿𝗼𝗺 𝘁𝗵𝗲 𝘀𝗲𝗻𝗶𝗼𝗿 𝗮𝘁 𝗔𝗺𝗮𝘇𝗼𝗻 𝘁𝗼 𝘁𝗵𝗲 𝗷𝘂𝗻𝗶𝗼𝗿 𝘄𝗵𝗼 𝗷𝘂𝘀𝘁 𝗴𝗼𝘁 𝗵𝗶𝗿𝗲𝗱 𝗳𝗲𝗲𝗹𝘀 𝗹𝗶𝗸𝗲 𝘁𝗵𝗲𝗿𝗲 𝗶𝘀 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗺𝗶𝘀𝘀𝗶𝗻𝗴 𝗳𝗿𝗼𝗺 𝘁𝗵𝗲𝗶𝗿 𝘁𝗼𝗼𝗹 𝗯𝗲𝗹𝘁.",IMAGE,Brian,Jenney,10642,10642,119,21,0,0,0.013155421913174216,,2024-01-24 08:17:01,https://www.linkedin.com/feed/update/urn:li:activity:7155956086628306945
urn:li:activity:7155601374536187904,"Write code for long enough and you’ll see every sacred cow get slaughtered:

𝗧𝗗𝗗 𝗼𝗿 𝗗𝗶𝗲! - except there are  teams that have <1 test and deliver safely (manual QA anyone?)

𝗧𝘆𝗽𝗲𝘀𝗰𝗿𝗶𝗽𝘁 𝗶𝘀 𝘁𝗵𝗲 𝗢𝗡𝗟𝗬 𝗰𝗵𝗼𝗶𝗰𝗲 𝗳𝗼𝗿 𝗺𝗼𝗱𝗲𝗿𝗻 𝘄𝗲𝗯 𝗮𝗽𝗽𝘀 - unless maybe your team prefers JSDoc. Or better yet, you don’t want or need types to solve a problem you didn’t even know you had.

𝗣𝗮𝗶𝗿 𝗣𝗿𝗼𝗴𝗿𝗮𝗺𝗺𝗶𝗻𝗴 𝗳𝗼𝗿 𝗯𝗲𝘁𝘁𝗲𝗿 𝗰𝗼𝗱𝗲 𝗾𝘂𝗮𝗹𝗶𝘁𝘆! - but sometimes, it can be a slow and lop-sided affair where you just watch someone else type

𝗖𝗜/𝗖𝗗 𝗶𝘀 𝗮 𝗺𝘂𝘀𝘁! - except when your project involves highly complex or safety-critical systems where manual reviews are essential. CI/CD might introduce more risks than benefits.

𝗠𝗶𝗰𝗿𝗼𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀 𝗳𝗼𝗿 𝘀𝗰𝗮𝗹𝗮𝗯𝗶𝗹𝗶𝘁𝘆 𝗮𝗻𝗱 𝗳𝗹𝗲𝘅𝗶𝗯𝗶𝗹𝗶𝘁𝘆! - unless you're dealing with a small application where the overhead of managing 420 of services just doesn’t make sense.

I was naive and arrogant enough at one point to assume there was THE way to do something based on some article or bald dude with a blue background on LI.

Hate those types amirite?

I still think there are patterns that tend to work better than others and in the absence of time or to decrease risk - it’s best to pick a tried and true approach. 

𝗧𝗵𝗮𝘁 𝗯𝗲𝗶𝗻𝗴 𝘀𝗮𝗶𝗱, 𝗶𝗳 𝘆𝗼𝘂 𝗰𝗮𝗻’𝘁 𝗮𝗿𝗴𝘂𝗲 𝗳𝗼𝗿 𝗯𝗼𝘁𝗵 𝘀𝗶𝗱𝗲𝘀 𝗼𝗳 𝗮𝗻 𝗮𝗿𝗴𝘂𝗺𝗲𝗻𝘁, 𝘆𝗼𝘂 𝗺𝗮𝘆 𝗻𝗼𝘁 𝘂𝗻𝗱𝗲𝗿𝘀𝘁𝗮𝗻𝗱 𝗶𝘁 𝘄𝗲𝗹𝗹 𝗲𝗻𝗼𝘂𝗴𝗵 𝘁𝗼 𝗮𝗿𝗴𝘂𝗲 𝗳𝗼𝗿 𝗲𝗶𝘁𝗵𝗲𝗿.",UNKNOWN,Brian,Jenney,13483,13483,93,50,6,0,0.011050953051991396,,2024-01-23 09:18:27,https://www.linkedin.com/feed/update/urn:li:activity:7155601374536187904
urn:li:activity:7155236339934773248,"Let me save you 90 hours of watch time from the Udemy Course you bought at the beginning of the year.

Between tutorial hell and your own side project is 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗽𝘂𝗿𝗴𝗮𝘁𝗼𝗿𝘆.

The awkward phase when you’re not quite ready to create a complex side project but aren’t getting much out of following along with a video.

Here’s how you limit your stay here:

- 𝗗𝗼𝗻’𝘁 𝗲𝗾𝘂𝗮𝘁𝗲 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀 𝘄𝗶𝘁𝗵 𝗰𝗼𝗺𝗽𝗹𝗲𝘁𝗶𝗼𝗻 - there is no Gold Star for finishing a 100 hour course
- Gain enough knowledge to be dangerous
- 𝗘𝘅𝘁𝗲𝗻𝗱, 𝗯𝗿𝗲𝗮𝗸 𝗼𝗿 𝗿𝗲-𝘄𝗿𝗶𝘁𝗲 𝗮 𝗳𝗲𝗮𝘁𝘂𝗿𝗲 from the tutorial
- Write detailed comments about what is happening in the code and why

Now you have a project that is similar to the tutorial but NOT exactly like it and  you’ve removed the training wheels from your learning exercise.

I break down a method I call the 𝗰𝗮𝘁𝗲𝗿𝗽𝗶𝗹𝗹𝗮𝗿 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝘀𝘁𝗿𝗮𝘁𝗲𝗴𝘆™️ to learn fast af in the comments.",UNKNOWN,Brian,Jenney,15639,15639,105,12,7,0,0.007928895709444338,,2024-01-22 08:46:03,https://www.linkedin.com/feed/update/urn:li:activity:7155236339934773248
urn:li:activity:7153787160171560960,"2 safe bets for what to learn in 2024 as a full stack software engineer:

1. NextJS/Vercel (𝘥𝘶𝘩)
2. Rust

I’d go all in on Rust.

𝗠𝘆 𝗯𝗲𝘁 𝗶𝘀 𝘁𝗵𝗮𝘁 𝗶𝘁 𝗾𝘂𝗶𝗰𝗸𝗹𝘆 𝗯𝗲𝗰𝗼𝗺𝗲𝘀 𝗮 𝗺𝗲𝗴𝗮-𝘁𝗿𝗲𝗻𝗱 in software development. Microsoft is re-writing core Windows libraries with it. AWS also announced that its SDK for Rust is now ready for production.

Their are about 128 articles explaining the benefits of 𝗥𝘂𝘀𝘁 𝗳𝗼𝗿 𝘀𝗮𝘃𝗶𝗻𝗴 𝗼𝗻 𝗶𝗻𝗳𝗿𝗮𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲 𝗰𝗼𝘀𝘁𝘀. As companies become more cost-conscious I’m betting we’ll see more adoption.

Here’s the thing - Rust is a major departure from dev-centric programming languages like Python and JavaScript. 𝗧𝗵𝗲 𝗹𝗲𝗮𝗿𝗻𝗶𝗻𝗴 𝗰𝘂𝗿𝘃𝗲 𝗶𝘀 𝘀𝘁𝗲𝗲𝗽. 𝗠𝗮𝘆𝗯𝗲 𝘁𝗼𝗼 𝘀𝘁𝗲𝗲𝗽.

I think this means opportunity for you.

𝗟𝗲𝗮𝗿𝗻 𝘁𝗵𝗲 𝗵𝗮𝗿𝗱 𝘀𝘁𝘂𝗳𝗳 𝘄𝗵𝗶𝗹𝗲 𝗲𝘃𝗲𝗿𝘆𝗼𝗻𝗲 𝗶𝘀 𝗿𝘂𝘀𝗵𝗶𝗻𝗴 𝘁𝗼 𝗯𝗲 𝗮 𝗽𝗿𝗼𝗺𝗽𝘁-𝗲𝗻𝗴𝗶𝗻𝗲𝗲𝗿. 

Re-write your Node/Express API with Rust and deploy it as an AWS lambda, be at the start of the next mega-trend.",UNKNOWN,Brian,Jenney,63237,63237,208,48,11,0,0.004222211679870962,,2024-01-18 08:56:12,https://www.linkedin.com/feed/update/urn:li:activity:7153787160171560960
urn:li:activity:7153423201056780289,"Don't let the fear of looking dumb paralyze you.

You'll be forever haunted by ""𝘞𝘩𝘺 𝘥𝘪𝘥𝘯’𝘵 𝘐 𝘢𝘴𝘬 𝘵𝘩𝘢𝘵?""

The most talented developers I’ve worked with are the first to admit when they don’t know something.

Take it from me (𝘸𝘩𝘰’𝘴 𝘴𝘵𝘪𝘭𝘭 𝘳𝘦𝘤𝘰𝘷𝘦𝘳𝘪𝘯𝘨 𝘧𝘳𝘰𝘮 𝘵𝘩𝘪𝘴 𝘴𝘺𝘯𝘥𝘳𝘰𝘮𝘦):

- People aren’t as smart as you think
- Someone else wants to ask that question too, but they’re just as nervous
- If you pretend to understand and don’t - you’ll be exposed sooner or later
- Get comfortable being uncomfortable

You don't need to know everything to be successful as a developer.

You do need to get used to exposing your ignorance in a field that is as wide as it is deep.",UNKNOWN,Brian,Jenney,6410,6410,83,21,5,0,0.017004680187207487,,2024-01-17 08:45:29,https://www.linkedin.com/feed/update/urn:li:activity:7153423201056780289
urn:li:activity:7153061093890813953,"Your next technical interview might not be so technical at all.

What I’ve learned from working with dozens of developers last year on the interview grind, is that in addition to having canned answers for explaining:
 
- closure
- promises
- the difference between bind, call and apply

𝗬𝗼𝘂 𝘄𝗮𝗻𝘁 𝘁𝗼 𝗵𝗮𝘃𝗲 𝗮𝗻𝘀𝘄𝗲𝗿𝘀 𝗳𝗼𝗿 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀 𝗹𝗶𝗸𝗲:

- tell me about a challenging project you’ve worked on
- how do you resolve conflicts with team mates?
- here’s a website we made, how can we improve it (how do you measure the performance of a webpage basically?)
- how do you handle tight deadlines?
- what’s your debugging process?
- why do you want to work here?

What’s a good (or terrible), non-technical question you’ve been asked in an interview?",UNKNOWN,Brian,Jenney,11279,11279,92,19,4,0,0.010195939356325916,,2024-01-16 08:54:37,https://www.linkedin.com/feed/update/urn:li:activity:7153061093890813953
urn:li:activity:7152688403967295488,"“𝘊𝘢𝘳𝘦𝘦𝘳 𝘤𝘩𝘢𝘯𝘨𝘦 𝘪𝘴 𝘢 𝘤𝘰𝘮𝘱𝘭𝘦𝘵𝘦𝘭𝘺 𝘥𝘪𝘧𝘧𝘦𝘳𝘦𝘯𝘵 𝘨𝘢𝘮𝘦 𝘧𝘳𝘰𝘮 𝘭𝘦𝘢𝘳𝘯𝘪𝘯𝘨 𝘵𝘰 𝘤𝘰𝘥𝘦. 𝘓𝘦𝘢𝘳𝘯𝘪𝘯𝘨 𝘵𝘰 𝘤𝘰𝘥𝘦 𝘪𝘴 𝘵𝘩𝘦 𝘰𝘣𝘷𝘪𝘰𝘶𝘴 𝘱𝘢𝘳𝘵.𝘐𝘵'𝘴 𝘵𝘩𝘦 𝘵𝘪𝘤𝘬𝘦𝘵 𝘵𝘰 𝘵𝘩𝘦 𝘥𝘢𝘯𝘤𝘦.” - 𝘡𝘶𝘣𝘪𝘯

I sat down with Zubin Pratap, a former lawyer who switched careers into tech at 37 then got hired at Google and now mentors developers in addition to being a full time software engineer.

Zubin breaks down: 

- the reality of switching careers and why the tech industry isn’t as unique as I thought
- how he beat the Google interview
- his controversial take on the education business
- why you need to ruthlessly prune your social media following

Link in comments.",VIDEO,Brian,Jenney,4902,4902,51,12,2,0,0.013259893920848633,,2024-01-15 07:59:32,https://www.linkedin.com/feed/update/urn:li:activity:7152688403967295488
urn:li:activity:7151992660340232192,"Terminal commands saved our internship program yesterday. Here's enough Vim to be dangerous:

𝗢𝗽𝗲𝗻 𝗮 𝗳𝗶𝗹𝗲: 𝚟𝚒𝚖 𝚏𝚒𝚕𝚎𝚗𝚊𝚖𝚎
𝗘𝘅𝗶𝘁 𝗩𝗶𝗺: Press Esc then type :𝚚 and press Enter (If you've made changes, add an exclamation mark to force quit without saving: :𝚚!)
𝗦𝗮𝘃𝗲 𝗰𝗵𝗮𝗻𝗴𝗲𝘀: Press Esc then type :𝚠 and press Enter
𝗦𝗮𝘃𝗲 𝗮𝗻𝗱 𝗲𝘅𝗶𝘁: Press Esc then type :𝚠𝚚 or 𝚉𝚉 and press Enter
𝚒: Enter insert mode to 𝘀𝘁𝗮𝗿𝘁 𝗲𝗱𝗶𝘁𝗶𝗻𝗴 𝘁𝗲𝘅𝘁
𝚡 𝗗𝗲𝗹𝗲𝘁𝗲 𝘁𝗵𝗲 𝗰𝗵𝗮𝗿𝗮𝗰𝘁𝗲𝗿 under the cursor
𝚍𝚍: 𝗗𝗲𝗹𝗲𝘁𝗲 𝘁𝗵𝗲 𝘄𝗵𝗼𝗹𝗲 𝗹𝗶𝗻𝗲
𝚞: 𝗨𝗻𝗱𝗼
𝙲𝚝𝚛𝚕 + 𝚛: 𝗥𝗲𝗱𝗼

Yesterday I had to SSH into an server instance on AWS to figure out how to deploy some code that Parsity grads have been working on through an internship.

I realized how often I've had to do tasks like this to troubleshoot issues on remote servers. It can be stressful. Without knowing some basic terminal commands, it's really stressful.

Our grads jumped into this codebase made by contractors who we have no contact with.

Ruh roh.

𝗜 𝘄𝗼𝗻𝗱𝗲𝗿𝗲𝗱 𝗵𝗼𝘄 𝘁𝗵𝗲 𝗰𝗼𝗱𝗲 𝘄𝗮𝘀 𝗯𝗲𝗶𝗻𝗴 𝗱𝗲𝗽𝗹𝗼𝘆𝗲𝗱 𝘁𝗼 𝘁𝗵𝗲 𝘀𝗲𝗿𝘃𝗲𝗿. Turns out, the original developer would SSH into the box, pull down the code from GitHub and then restart the server manually.

No judgment... except of course I am.

The only way I figured that out was to investigate their bash history by doing:

𝚌𝚊𝚝 ~/.𝚋𝚊𝚜𝚑_𝚑𝚒𝚜𝚝𝚘𝚛𝚢

Now I could see the evil genius at work here and why our app was crashing. I made a code change on the fly and the work our grads created was now LIVE.

𝘖𝘩 𝘺𝘦𝘢𝘩, 𝘥𝘰𝘯'𝘵 𝘥𝘦𝘱𝘭𝘰𝘺 𝘰𝘯 𝘍𝘳𝘪𝘥𝘢𝘺𝘴.

𝗧𝗟𝗗𝗥; learn some terminal commands. Learn some vim. It won't suck and you'll look way cooler when you're at the coffee shop working on that SAAS app.",UNKNOWN,Brian,Jenney,7065,7065,55,14,0,0,0.009766454352441613,,2024-01-13 09:56:02,https://www.linkedin.com/feed/update/urn:li:activity:7151992660340232192
urn:li:activity:7151619954801295360,"I’ve gone too far down the YouTube tech rabbit hole.

Apparently:

- coding is a waste of time
- you can learn JS in 100 minutes
- no one is hiring
- cyber security is the only safe bet
- JS sucks - learn Python!
- Python sucks - learn JS!
- AI will replace everyone in 420 days

𝗠𝗲𝗮𝗻𝘄𝗵𝗶𝗹𝗲, 𝗶𝗻 𝘁𝗵𝗲 𝗿𝗲𝗮𝗹 𝘄𝗼𝗿𝗹𝗱:

- developers are getting hired
- interviews still suck
- MERN/SERN is boring and popular
- I’ve been learning JS for 10 years… I messed up apparently

YouTube/IG/X/LinkedIn ≠ Real life",UNKNOWN,Brian,Jenney,14502,14502,202,27,6,0,0.016204661426010205,,2024-01-12 09:42:38,https://www.linkedin.com/feed/update/urn:li:activity:7151619954801295360
urn:li:activity:7151297452803809280,"𝘞𝘢𝘪𝘵, 𝘺𝘰𝘶'𝘳𝘦 𝘣𝘭𝘢𝘤𝘬?

I have an interesting background: I'm half black, never really met my white family and get mistaken for everything except for what I am, which has led to so many interesting conversations over the years 😅

Anywho, 𝗜'𝗹𝗹 𝗯𝗲 𝘀𝗽𝗲𝗮𝗸𝗶𝗻𝗴 𝗮𝘁 𝘁𝗵𝗲 𝗡𝗮𝘁𝗶𝗼𝗻𝗮𝗹 𝗦𝗼𝗰𝗶𝗲𝘁𝘆 𝗼𝗳 𝗕𝗹𝗮𝗰𝗸 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿𝘀 this evening in case you were wondering how me and my bald head got invited. 

Obviously, everyone is welcome and I'm looking forward to hearing from the other speakers (one of whom I've been following on X for a while now) as well as talking about all the mistakes I've made in my career... and some of the stuff I got right along the way.",UNKNOWN,Brian,Jenney,3132,3132,31,7,0,0,0.012132822477650063,,2024-01-11 12:06:02,https://www.linkedin.com/feed/update/urn:li:activity:7151297452803809280
urn:li:activity:7151239024110657536,"Last year I helped over a dozen software engineers land their first role or their next one.

Here’s what I learned:

- 𝗡𝗲𝘁𝘄𝗼𝗿𝗸𝗶𝗻𝗴 𝘄𝗼𝗿𝗸𝘀. 𝗖𝗼𝗹𝗱 𝗮𝗽𝗽𝗹𝘆𝗶𝗻𝗴 𝘄𝗼𝗿𝗸𝘀. Do both.
- 𝗕𝗲𝗶𝗻𝗴 𝗹𝗶𝗸𝗲-𝗮𝗯𝗹𝗲 𝗶𝘀 𝗺𝗼𝗿𝗲 𝗶𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 𝘁𝗵𝗮𝗻 𝘆𝗼𝘂 𝘁𝗵𝗶𝗻𝗸. Do some mock interviews or record yourself solving a problem. Would you hire you?
- 𝗝𝘂𝗻𝗶𝗼𝗿 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿𝘀 𝗔𝗥𝗘 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝗵𝗶𝗿𝗲𝗱 but less companies are explicitly recruiting for them.
- 𝗦𝗻𝗲𝗮𝗸 𝗶𝗻 𝘁𝗵𝗿𝗼𝘂𝗴𝗵 𝗮𝗻𝗼𝘁𝗵𝗲𝗿 𝗱𝗼𝗼𝗿. QA, DevOps and Product can be a better fit and leverage your coding skills.
- 𝗗𝗦𝗔 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗮𝗿𝗲 𝗹𝗲𝘀𝘀 𝗹𝗶𝗸𝗲𝗹𝘆 𝘁𝗵𝗮𝗻 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗰𝗵𝗮𝗹𝗹𝗲𝗻𝗴𝗲𝘀. You still need basic DSA skills but don't study 500 LC problems. Learn the most common structures and approaches. (𝘐 𝘩𝘢𝘷𝘦 𝘢𝘯 𝘢𝘳𝘵𝘪𝘤𝘭𝘦 𝘰𝘯 𝘵𝘩𝘪𝘴 😎)

𝗧𝗵𝗲 𝗺𝗼𝘀𝘁 𝗶𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 𝘁𝗵𝗶𝗻𝗴 𝗜 𝘁𝗼𝗼𝗸 𝗮𝘄𝗮𝘆 𝗳𝗿𝗼𝗺 𝘄𝗼𝗿𝗸𝗶𝗻𝗴 𝘄𝗶𝘁𝗵 𝘀𝗼 𝗺𝗮𝗻𝘆 𝗼𝗳 𝘆𝗼𝘂:

Your timeline will be different than someone else’s. Luck plays an important role. To be lucky you must be consistent.",UNKNOWN,Brian,Jenney,14551,14551,211,17,5,0,0.016012645179025498,,2024-01-11 08:00:48,https://www.linkedin.com/feed/update/urn:li:activity:7151239024110657536
urn:li:activity:7150148193874288640,"The 3 worst parts about being a software engineer:

1. 𝗕𝗲𝗶𝗻𝗴 𝗼𝗻 𝗰𝗮𝗹𝗹 - why does no one talk about this one? When something breaks at 3am on Sunday you may be first in line to figure it out.
2. 𝗞𝗲𝗲𝗽 𝘂𝗽 𝗼𝗿 𝗴𝗲𝘁 𝗹𝗲𝗳𝘁 𝗯𝗲𝗵𝗶𝗻𝗱. Tech moves fast but your company doesn't. Fair or not, you will need to keep up somehow with mega-trends in the industry.
3. 𝗦𝘁𝗿𝗲𝘀𝘀. Deadlines, high expectations and the potential to cause catastrophes from deploying code. (𝘴𝘦𝘦 𝘪𝘵𝘦𝘮 1).

To be clear, I still love what I do and so do most devs I know. Between the big bags, flexible schedules and unlimited PTO you hear about is also... reality.

Anything you'd add?",UNKNOWN,Brian,Jenney,7568,7568,51,20,1,0,0.009513742071881607,,2024-01-08 07:52:22,https://www.linkedin.com/feed/update/urn:li:activity:7150148193874288640
urn:li:activity:7149084732448804864,"You’ll never “know” JS.

It’s ok, that’s what it makes it fun… I think 🤔

Did you know there’s a not-so-secret committee that reviews new proposals for JS features and decides if they will be adopted or not?

They’re called TC39 and they're one of the reasons you'll never ""know"" JS.

Check out this weird experimental feature, 𝚑𝚊𝚌𝚔-𝚙𝚒𝚙𝚎-𝚘𝚙𝚎𝚛𝚊𝚝𝚘𝚛 which might become a thing in the future but you can use right now with the power of 𝚋𝚊𝚋𝚎𝚕.",VIDEO,Brian,Jenney,4697,4697,61,4,0,0,0.013838620395997446,,2024-01-05 09:19:33,https://www.linkedin.com/feed/update/urn:li:activity:7149084732448804864
urn:li:activity:7148689851716878336,"I’ve told you not to use the term “passionate developer” in your profile.

I still think you need to be one.

In the short time I’ve been coding, web dev and JS has gone through an incredible amount of changes. 

I started with JQuery, AngularJS and ES5. I even wrote some JScript (look it up).

Since then we’ve collectively had to learn:

• ReactJS
• Serverless
• GraphQL
• TypeScript
• ES6/7/8/9/10/11…
• NextJS
• Webpack
• Jest
🥵

If you don’t find some intrinsic joy in coding, I imagine it’s tough to keep up.

Am I off base here? Do you need to enjoy coding to be good at it?",UNKNOWN,Brian,Jenney,8767,8767,80,32,1,0,0.012889243754990305,,2024-01-04 07:29:26,https://www.linkedin.com/feed/update/urn:li:activity:7148689851716878336
urn:li:activity:7148346212247654402,"𝗠𝘆 𝘁𝗲𝗰𝗵 𝘀𝘁𝗮𝗰𝗸 𝗳𝗼𝗿 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝗶𝗻 𝟮𝟬𝟮𝟯:

Create-React-App
GraphQL
Cypress
AWS
CSS Modules

𝗠𝘆 𝘁𝗲𝗰𝗵 𝘀𝘁𝗮𝗰𝗸 𝗳𝗼𝗿 𝗺𝘆 𝗻𝗲𝘅𝘁 𝗳𝗮𝗶𝗹𝗲𝗱 𝘀𝘁𝗮𝗿𝘁𝘂𝗽 𝗶𝗱𝗲𝗮 𝗶𝗻 𝟮𝟬𝟮𝟰:

Typescript
NextJS
tRPC
Playwright
Vercel
Edge Functions
OpenAI API

What are you building with this year?",UNKNOWN,Brian,Jenney,5766,5766,58,23,0,0,0.01404786680541103,,2024-01-03 08:50:08,https://www.linkedin.com/feed/update/urn:li:activity:7148346212247654402
urn:li:activity:7147967081869684736,"A while ago, I wrote that create-react-app is dead and boy did some people get upset.

Lemme double down...

NextJS is our future as React devs. Ignore it at your own peril.

There are really only 2 trends I am watching in 2024 as a web dev:

1. NextJS
2. AI

AI is gonna AI. I’m not on the existential crisis team… yet.

I do see a proliferation of “AI” startups which basically wrap around OpenAI’s API. 

For this reason, I think you should spend 10 bucks for some tokens on the Open AI dev platform and experiment with fine tuning and working with their API.

Since I like you, I’ve done some of the heavy lifting for you and you can 𝗰𝗵𝗲𝗰𝗸 𝗼𝘂𝘁 𝗺𝘆 𝗔𝗜 𝘀𝘁𝗮𝗿𝘁𝗲𝗿 𝗸𝗶𝘁 𝘂𝘀𝗶𝗻𝗴 𝗡𝗼𝗱𝗲/𝗘𝘅𝗽𝗿𝗲𝘀𝘀 𝗮𝗻𝗱 𝘁𝗵𝗲 𝗢𝗽𝗲𝗻𝗔𝗜 𝗔𝗣𝗜 𝗶𝗻 𝘁𝗵𝗲 𝗰𝗼𝗺𝗺𝗲𝗻𝘁𝘀 𝗯𝗲𝗹𝗼𝘄.

If you use this to make a startup that destroys humanity please don’t forget to credit me and mail me a box of donuts or something.",UNKNOWN,Brian,Jenney,16599,16599,149,29,3,0,0.010904271341647087,,2024-01-02 07:53:38,https://www.linkedin.com/feed/update/urn:li:activity:7147967081869684736
urn:li:activity:7146145521089327104,"We get it, networking is important.

But what the hell does that mean? Especially on a platform like LinkedIn?

Well, I can certainly tell you what it’s not:

- DMs to strangers asking to look at your resume

- Posts romanticizing a string of rejections

- Messages to connections you’ve never spoken to, asking for referrals

So what do you do?

- Genuine engagement with other people by commenting on their posts

- DMs where you give first (a link to a helpful article for example)

- Posts that share what you’re learning (and struggling with)

I break down a strategy to build and grow on LinkedIn without becoming a mini-influencer you can listen to here: 

https://lnkd.in/gjR-AEtk",VIDEO,Brian,Jenney,6553,6553,89,18,3,0,0.01678620479169846,,2023-12-28 06:39:45,https://www.linkedin.com/feed/update/urn:li:activity:7146145521089327104
urn:li:activity:7145805558749511680,"I’ll turn 40 in a couple days.

This last decade started off pretty rough for me. Here’s the timeline:

𝗘𝗮𝗿𝗹𝘆 𝟯𝟬𝘀
- Friend dies, his brother (and my business partner) sentenced to prison
- Had new baby - a boy 🐣
- Quit dabbling in the streets and got a legal job
- Mom and girlfriend do an intervention. Got sober cold turkey 🦃
- Drive Lyft/Uber and meet software engineers
- Hmm, I’m bored lemme try coding to pass time 👨‍💻
- Switch addictions to coding and candy
- Learn HTML/CSS/Jquery - first coding job is C#, SQL and AngularJS 🙄

𝗠𝗶𝗱 𝟯𝟬'𝘀
- One more kid - a daughter this time 🐣
- Got kinda fat from candy and started working out
- Finally get a six pack at 37 💪
- Job hop, get monies and learn from smart people and make many mistakes
- Buy a few investment properties 🏡

𝗟𝗮𝘁𝗲 𝟯𝟬'𝘀
- Move into management role as a software engineer
- Start writing on LI about code stuff
- Heart issue almost kills me - consequence of past life
- Start business coaching developers and make first dollars online
- Purchase first business 😬

I don’t have many lessons to share here.

I’m an average person with an above average tolerance for rejection. I’m a stubborn SOB and probably have some unresolved addictive traits which have helped me in certain aspects of life.

I’m naive enough to try a lot of things and expect they will work out for me.

I’m happily dissatisfied with my progress so far.

I share some of these unglamorous parts of my life online because I distinctly remember feeling very alone in the early stages of this transformation. If you’re reading this and going through a rough period I hope you feel a little less alone and realize that there is another life on the other side. It's all possible.

There’s more of us out there than you realize and most just don’t talk about it online. 

You got this.",UNKNOWN,Brian,Jenney,27136,27136,366,39,1,0,0.014961674528301886,,2023-12-27 08:09:30,https://www.linkedin.com/feed/update/urn:li:activity:7145805558749511680
urn:li:activity:7143632860405481472,"6 services I've used to improve my skills as a software engineer:

1. AlgoExpert - finally someone made a 𝘀𝗼𝗹𝗶𝗱 𝗼𝗳𝗳𝗲𝗿𝗶𝗻𝗴 𝗳𝗼𝗿 𝘁𝗵𝗲 𝗝𝗦 𝗮𝗻𝗱 𝗥𝗲𝗮𝗰𝘁𝗝𝗦 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 with practical exercises
2. 𝗖𝗼𝗱𝗲𝗖𝗿𝗮𝗳𝘁𝗲𝗿𝘀.𝗶𝗼 - I like this site so much. You 𝗯𝘂𝗶𝗹𝗱 𝗰𝗼𝗺𝗽𝗹𝗲𝘅 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝘁𝗵𝗮𝘁 𝗽𝗮𝘀𝘀𝗲𝘀 tests to see if it works. Addictive.
3. 𝗞𝗶𝗻𝗱𝗹𝗲 - 𝗜 𝗿𝗲𝗮𝗱 𝗯𝗼𝗼𝗸𝘀 𝗳𝗿𝗼𝗺 𝘀𝗺𝗮𝗿𝘁𝗲𝗿 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿𝘀. I won’t give you a listicle here, there are plenty out there already. (𝘖𝘬 𝘧𝘪𝘯𝘦 - 𝘊𝘭𝘦𝘢𝘯 𝘊𝘰𝘥𝘦 𝘪𝘯 𝘑𝘚, 𝘠𝘋𝘒𝘑𝘚 𝘚𝘦𝘳𝘪𝘦𝘴, 𝘗𝘩𝘰𝘦𝘯𝘪𝘹 𝘗𝘳𝘰𝘫𝘦𝘤𝘵)
4. Plato  - when I became a manager I was overwhelmed. I needed 𝗺𝗲𝗻𝘁𝗼𝗿𝘀𝗵𝗶𝗽 and they provided some of the best I could’ve asked for.
5. ByteByteGo - 𝘀𝘆𝘀𝘁𝗲𝗺 𝗱𝗲𝘀𝗶𝗴𝗻 is where it’s at. As coding can increasingly be handled by AI tools, it’s more important than ever to understand the bigger picture.
6. Taro (YC S22) - there aren’t a lot of resources out there for mid and senior level devs. Taro fills in the gap here with 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗰𝗮𝗿𝗲𝗲𝗿 𝗮𝗱𝘃𝗶𝗰𝗲 that I steal from time to time 🤫

Honorable mention to John Crickett who is a person not a service BUT 𝗵𝗲 𝗰𝗿𝗲𝗮𝘁𝗲𝘀 𝗿𝗲𝗮𝗹𝗹𝘆 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝗰𝗼𝗱𝗶𝗻𝗴 𝗰𝗵𝗮𝗹𝗹𝗲𝗻𝗴𝗲𝘀 which you should totally be taking advantage of.

Here's 2 𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀 𝗜 𝗰𝗮𝗻'𝘁 𝘃𝗼𝘂𝗰𝗵 𝗳𝗼𝗿 𝗽𝗲𝗿𝘀𝗼𝗻𝗮𝗹𝗹𝘆 but have heard nothing but good things about

1. Scrimba
2. Frontend Masters

No one paid me to write this.

I just use these tools and think they’re super lit! Not mid. No cap! (𝘺𝘦𝘴 𝘐'𝘮 𝘵𝘶𝘳𝘯𝘪𝘯𝘨 40 𝘴𝘰𝘰𝘯)

Anything out there I missed?",UNKNOWN,Brian,Jenney,78426,78426,333,35,28,0,0.005049345880192793,,2023-12-21 08:29:34,https://www.linkedin.com/feed/update/urn:li:activity:7143632860405481472
urn:li:activity:7143292939710914561,"How do you get better at JavaScript and ReactJS?

Build stuff 🙄

Not specific enough? Try this:

Here are the subjects I struggled with the most and how I learned them through practice:

- 𝘗𝘳𝘰𝘮𝘪𝘴𝘦𝘴 - implement 𝙿𝚛𝚘𝚖𝚒𝚜𝚎.𝚊𝚕𝚕 or promise-ify a timeout
- 𝘊𝘭𝘰𝘴𝘶𝘳𝘦 - create a function that returns another function that can only be called 1 time
- 𝘛𝘩𝘪𝘴 - implement 𝚋𝚒𝚗𝚍 and 𝚌𝚊𝚕𝚕 from scratch by leveraging 𝚊𝚙𝚙𝚕𝚢
- 𝘙𝘦𝘤𝘶𝘳𝘴𝘪𝘰𝘯 - make a function that searches a deeply nested object for a value
- 𝘞𝘦𝘣𝘱𝘢𝘤𝘬 - 𝚗𝚙𝚖 𝚎𝚓𝚎𝚌𝚝 create-react-app and analyze the bundle size
- 𝘙𝘦𝘥𝘶𝘹 - study the observer pattern and add Redux to a small app using Ducks architecture (look it up 😎)

If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge.",UNKNOWN,Brian,Jenney,30695,30695,239,17,2,0,0.008405277732529729,,2023-12-20 09:57:25,https://www.linkedin.com/feed/update/urn:li:activity:7143292939710914561
urn:li:activity:7142921469096841216,"Your goals might suck.

Now let's make them suck less:

❌ Get hired 
✅ Apply to 5 jobs a day and go to 1 meetup a week

❌Scale your business to 6 figures 
✅ Book 10 new leads per day

❌Six pack abs 
✅ Figure out your TDEE (look it up) and eat 80% of that

❌Learn DSA 
✅ Build 6 most commonly used data structures from scratch

❌Learn Rust 
✅ Re-build your Node/Express app with Rust

Goals are great. Stacking habits to reach those goals make them more likely to become reality.",UNKNOWN,Brian,Jenney,10403,10403,132,16,4,0,0.014611169854849563,,2023-12-19 09:05:24,https://www.linkedin.com/feed/update/urn:li:activity:7142921469096841216
urn:li:activity:7142550411365789696,"CTO enters the Slack channel for devs only.

Ruh roh.

“𝘖𝘶𝘳 𝘢𝘱𝘱 𝘪𝘴𝘯’𝘵 𝘸𝘰𝘳𝘬𝘪𝘯𝘨 𝘢𝘴 𝘦𝘹𝘱𝘦𝘤𝘵𝘦𝘥. 𝘊𝘢𝘯 𝘴𝘰𝘮𝘦𝘰𝘯𝘦 𝘵𝘢𝘬𝘦 𝘢 𝘭𝘰𝘰𝘬?”

It was around 12:30AM on a Thursday and I was the only developer on call at this time. I decided to do what any good developer would do at this time and REST:

𝗥eproduce the bug locally. 
𝗘xamine the source code. 
𝗦et breakpoints. 
𝗧est the fix.

I go over this method to find and fix bugs which I hope helps you create a repeatable process you can use for debugging and how it actually got me promoted along + a short video for debugging.

Listen here 👉 https://lnkd.in/gN2gW-_8",UNKNOWN,Brian,Jenney,11619,11619,84,13,3,0,0.008606592649969876,,2023-12-18 08:32:30,https://www.linkedin.com/feed/update/urn:li:activity:7142550411365789696
urn:li:activity:7141467883083116546,"Let me supercharge your debugging process by 420%.

I remember scratching my bald head a few years ago at work while trying to debug a Node/Express API with my manager. We had an important demo that day and something was breaking.

No pressure 😅.

We added no less than 69 console logs in the code with no luck.

Luckily, a smart nerd on the team showed us this method which I'm shocked more of you aren't using. Maybe you're like me and didn't know it existed within VS Code.

Here's a short video of me breaking down how to debug a Node/Express app using breakpoints just like you might do in your front end code.

I mean, you are using 𝚍𝚎𝚋𝚞𝚐𝚐𝚎𝚛 in your JS code right? Right?!

Hope it saves you a little hair.",VIDEO,Brian,Jenney,35818,35818,244,18,28,0,0.008096487799430454,,2023-12-15 08:50:48,https://www.linkedin.com/feed/update/urn:li:activity:7141467883083116546
urn:li:activity:7140738096152625153,"Not using this software design pattern can cost you.

How much exactly?

Well - a few months ago a software engineer on here wrote that his team was doing a 6 month refactor to replace a js library for dates that had been deprecated.

Oops.

To think, if they only used this pattern they could've saved about 5.5 months of time.",ARTICLE,Brian,Jenney,5577,5577,39,2,2,0,0.0077102384794692485,,2023-12-13 08:36:14,https://www.linkedin.com/feed/update/urn:li:activity:7140738096152625153
urn:li:activity:7140429737734078464,"If you’re reading this post, I’ve made some assumptions about you:

1. You’re a software engineer
2. You have above average intelligence
3. You probably look pretty good (don’t tell HR)

I’ve given a lot of advice and now I want yours, you good looking nerd.

I recently became the owner of a coding bootcamp, Parsity .

Updating the curriculum to include NextJS and Typescript (coming soon) was the fun part, now the real work begins.

I know the power of a bootcamp is not just in the knowledge transfer but in getting people hire-able.

I’m working on a LinkedIn course that is short, sweet and super actionable to help grads avoid most of the mistakes I’ve seen. 

𝗪𝗵𝗮𝘁 𝗱𝗼 𝘆𝗼𝘂 𝘁𝗵𝗶𝗻𝗸 𝗜 𝘀𝗵𝗼𝘂𝗹𝗱 𝗳𝗼𝗰𝘂𝘀 𝗼𝗻 𝗳𝗼𝗿 𝗻𝗲𝘄 𝗴𝗿𝗮𝗱𝘀?

- Internships

𝘖𝘙

- Curating open source opportunities

What’s your take?",UNKNOWN,Brian,Jenney,11925,11925,92,56,6,0,0.012914046121593291,,2023-12-12 12:19:28,https://www.linkedin.com/feed/update/urn:li:activity:7140429737734078464
urn:li:activity:7139990536186195968,"What does Erik Andersen really think about the junior developer job market and learning in public?

Do I agree with him? 

I sat down with the world’s happiest engineer and chatted about: 

- why LinkedIn is better than X
- how to actually get hired in tech
- gaining experience as a developer when you have none
- his hot takes on coding bootcamps and the developer job market 🥵

I may not agree with all his views but I respect the hell out of him for keeping it real and taking time in between being a tech lead, YouTube content creator and one of my favorite people on LinkedIn to talk with us and you give the kind of practical advice you don’t find often enough.

Check out his YouTube channel ""The Junior Jobs Podcast"" and listen to our convo below.

👉 https://lnkd.in/gSC_D9HN 👈",IMAGE,Brian,Jenney,2479,2479,39,5,4,0,0.01936264622831787,,2023-12-11 06:58:25,https://www.linkedin.com/feed/update/urn:li:activity:7139990536186195968
urn:li:activity:7139022531633565696,"While most LinkedIn influencers are selling courses, SAAS apps or bootcamps (I’ve done all 3 don’t hate me 😅) Victor Moreno has launched a kids book on coding.

It actually looks really good too.",UNKNOWN,Brian,Jenney,3368,3368,36,3,1,0,0.011876484560570071,,2023-12-08 15:02:26,https://www.linkedin.com/feed/update/urn:li:activity:7139022531633565696
urn:li:activity:7138954727043604480,"Learn to code and b̶e̶c̶o̶m̶e̶ ̶a̶ ̶s̶o̶f̶t̶w̶a̶r̶e̶ ̶e̶n̶g̶i̶n̶e̶e̶r̶

• become a product manager
• start your own business
• do data analysis
• become a technical writer
• do DevOps
• try QA
• do whatever the hell else you want

Coding is a foundational skill. It can be a destination in itself or the key to another door.",UNKNOWN,Brian,Jenney,54795,54795,688,36,55,0,0.01421662560452596,,2023-12-08 10:33:41,https://www.linkedin.com/feed/update/urn:li:activity:7138954727043604480
urn:li:activity:7138559434850537473,"Are you a JavaScript developer or a ReactJS developer?

Your job probably depends on you being a solid ReactJS developer.

Unfortunately, those same skills don’t necessarily translate to being a proficient JavaScript developer.

Last year I did a mock interview with a person who tried to use 𝚞𝚜𝚎𝚂𝚝𝚊𝚝𝚎 while solving a problem that required a pub-sub implementation. Here’s the thing, we were using Vanilla JS. No frameworks or anything. 🥲

I give a challenge to most of the mentees I’ve worked with in the past and I’m going to share with you.

Nothing ground breaking.

- Create a form with a button that submits some data to an API and shows a success message on the screen for a couple seconds. Maybe you’ll find this easy. 

Good.

Maybe this will be a reminder to practice your JS skills along with whatever framework you’re currently using.

Also good.

Check it out in comments below.",UNKNOWN,Brian,Jenney,56871,56871,314,24,10,0,0.006119111673788047,,2023-12-07 08:31:43,https://www.linkedin.com/feed/update/urn:li:activity:7138559434850537473
urn:li:activity:7137846730078781440,"What is the 1 thing that separates developers who get hired vs those who don’t?

I’ve thought about this a lot, especially as I’m now the owner of a coding bootcamp.

I’ve seen too many success stories (and failures) from unlikely people.

- The guy who could barely complete a for-loop? Hired before the bootcamp ended.
- The woman with a CS degree? Nearly a year and 100’s of applications for her to get a break.

There is very little rhyme, reason or “hack” I can confidently suggest.

Except this:

Grit and consistency WILL get you to the finish line. 𝗧𝗵𝗲 𝘀𝘂𝗿𝗲𝘀𝘁 𝘄𝗮𝘆 𝘁𝗼 𝗳𝗮𝗶𝗹 𝗶𝘀 𝘁𝗼 𝗾𝘂𝗶𝘁. Most people will choose this route.

𝗗𝗼𝗻’𝘁 𝗹𝗲𝘁 𝘆𝗼𝘂𝗿 𝘀𝗸𝗶𝗹𝗹𝘀 𝗮𝘁𝗿𝗼𝗽𝗵𝘆. Build stuff or do LeetCode or Odin Project. Do something where your hands are on a keyboard making code do stuff.

𝗡𝗼𝘁 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀? Maybe work on that. Focus on your resume, networking and the volume of applications.

𝗚𝗲𝘁𝘁𝗶𝗻𝗴 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗮𝗻𝗱 𝗳𝗮𝗶𝗹𝗶𝗻𝗴? This is actually a more straightforward obstacle to overcome. Try Colt Steele's DSA course on Udemy or Codewars or whatever other courses are out there.

Fail. Learn. Iterate.",UNKNOWN,Brian,Jenney,9003,9003,99,18,3,0,0.013328890369876709,,2023-12-05 09:19:13,https://www.linkedin.com/feed/update/urn:li:activity:7137846730078781440
urn:li:activity:7137478274405830658,"I wrote to Kyle Simpson about a week ago. I asked him if he'd be a guest on my podcast and I honestly never expected to get this response:

...

“I’d be happy to appear on your podcast” 😎

Wait, what?

Holy sh*t, I’m going to be interviewing my idol? 

So many intruding thoughts:

- 𝘐 𝘴𝘵𝘪𝘭𝘭 𝘥𝘰𝘯’𝘵 𝘬𝘯𝘰𝘸 𝘑𝘚.
- 𝘞𝘩𝘢𝘵 𝘪𝘧 𝘩𝘦 𝘳𝘦𝘢𝘥𝘴 𝘮𝘺 𝘰𝘭𝘥 𝘱𝘰𝘴𝘵𝘴 𝘢𝘯𝘥 𝘵𝘩𝘦𝘯 𝘣𝘢𝘪𝘭𝘴?
- 𝘈𝘮 𝘐 𝘴𝘮𝘢𝘳𝘵 𝘦𝘯𝘰𝘶𝘨𝘩 𝘵𝘰 𝘢𝘴𝘬 𝘩𝘪𝘮 𝘢𝘯𝘺𝘵𝘩𝘪𝘯𝘨?
- 𝘞𝘪𝘭𝘭 𝘩𝘦 𝘲𝘶𝘪𝘻 𝘮𝘦 𝘰𝘯 𝘤𝘭𝘰𝘴𝘶𝘳𝘦?

😬

I’m a bit neurotic if it wasn’t clear.

You can check out our conversation below. 𝗞𝘆𝗹𝗲 𝗯𝗿𝗲𝗮𝗸𝘀 𝗱𝗼𝘄𝗻 𝗵𝗶𝘀 𝗷𝗼𝘂𝗿𝗻𝗲𝘆 𝗶𝗻𝘁𝗼 𝗰𝗼𝗱𝗶𝗻𝗴, the 𝗽𝗿𝗼𝘀 𝗮𝗻𝗱 𝗰𝗼𝗻𝘀 𝗼𝗳 𝘀𝗼𝗰𝗶𝗮𝗹 𝗺𝗲𝗱𝗶𝗮 𝗳𝗮𝗺𝗲, 𝗵𝗼𝘄 𝗵𝗲 𝗺𝗶𝗴𝗵𝘁 𝗹𝗲𝗮𝗿𝗻 𝗝𝗦 𝗻𝗼𝘄𝗮𝗱𝗮𝘆𝘀, his interview experience and a 𝘀𝘂𝗿𝗽𝗿𝗶𝘀𝗶𝗻𝗴 𝘁𝗮𝗸𝗲 𝗼𝗻 𝗝𝗦 𝗳𝗿𝗮𝗺𝗲𝘄𝗼𝗿𝗸𝘀 that caught me off guard.

𝗜𝗳 𝘆𝗼𝘂’𝗿𝗲 𝗮 𝗵𝗶𝗿𝗶𝗻𝗴 𝗺𝗮𝗻𝗮𝗴𝗲𝗿 𝗹𝗼𝗼𝗸𝗶𝗻𝗴 𝘁𝗼 𝘀𝗻𝗮𝘁𝗰𝗵 𝘂𝗽 𝗠𝗿 𝗦𝗶𝗺𝗽𝘀𝗼𝗻, he shares what his dream role might entail as well 😉.

𝗧𝗵𝗲 𝗺𝗮𝗶𝗻 𝘁𝗮𝗸𝗲𝗮𝘄𝗮𝘆 𝗜 𝗴𝗼𝘁 𝗳𝗿𝗼𝗺 𝘁𝗵𝗶𝘀 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗶𝘀 𝘁𝗵𝗮𝘁 𝗞𝘆𝗹𝗲 𝗶𝘀 𝘁𝗿𝘂𝗹𝘆 𝘄𝗵𝗼 𝗵𝗲 𝘀𝗮𝘆𝘀 𝗵𝗲 𝗶𝘀 - a human-centric technologist and not in some corny, superficial way. He took time to chat with me in the hopes it will help others who may be on a similar journey and offered a candid glimpse into his own career and struggles.

My one regret is that I did not ask him about his majestic beard routine. Maybe next time...

Listen here:",EXTERNAL_VIDEO,Brian,Jenney,19616,19616,740,18,147,0,0.0461358075040783,,2023-12-04 08:40:19,https://www.linkedin.com/feed/update/urn:li:activity:7137478274405830658
urn:li:activity:7135635106387423233,"Before you take my advice, let me be clear:

I will only ever give you suggestions based on my own experience or what I’ve seen work for others.

Will it work for you?

Perhaps.

As a junior developer, almost any advice can be helpful.

Your problems are fairly generic at this stage and what you mostly need is direction.

As a team lead or senior, more context is needed to deliver useful advice and you have to be pickier with what advice you accept.

The reasons I post on here are two-fold:

1. I have received considerable help from strangers online and I feel it’s only right to give back

2. I have a business and attract potential students through posting

I’ll continue to give you spicy, and not-so-spicy advice because I want to see you win the game.

I encourage you to take what makes sense and ignore what doesn’t.",UNKNOWN,Brian,Jenney,9157,9157,96,10,0,0,0.0115758436169051,,2023-11-29 06:52:09,https://www.linkedin.com/feed/update/urn:li:activity:7135635106387423233
urn:li:activity:7134942314292015104,"If you're a junior developer or recent bootcamp grad preparing for interviews - don't fall into the LeetCode rabbit hole.

You're more likely to encounter:

- JS trivia
- String and Array manipulation problems
- Frequency counters
- Build a React component that fetches data
- Tell me about a project you worked on

Instead of:

- Traverse this tree in O(n) 🧐",UNKNOWN,Brian,Jenney,80659,80659,412,27,14,0,0.005616236253858838,,2023-11-27 08:42:16,https://www.linkedin.com/feed/update/urn:li:activity:7134942314292015104
urn:li:activity:7132444287987830785,"Like many of you, I follow Erik Andersen and get a lot of value from what he posts, even though I'm not looking for a job.

A little over a year ago I chatted with him to get his advice on LinkedIn, content creation and how to help junior developers.

Who would've thought I'd be chatting with him on his podcast a year later? We tackle some practical, no-nonsense ways for you (yes you!) to stand out on your team as a developer, negotiate and different career paths to explore within software.",UNKNOWN,Brian,Jenney,3973,3973,35,2,0,0,0.00931286181726655,,2023-11-20 11:22:28,https://www.linkedin.com/feed/update/urn:li:activity:7132444287987830785
urn:li:activity:7131327805920874496,"Humans suck at predictions.

Lemme make some anyway.

Here’s what I think is in store for devs in 2024:

1. 𝗡𝗲𝘅𝘁𝗝𝗦 𝘄𝗶𝗹𝗹 𝗲𝘅𝗽𝗼𝗻𝗲𝗻𝘁𝗶𝗮𝗹𝗹𝘆 𝗴𝗿𝗼𝘄 𝗶𝗻 𝗽𝗼𝗽𝘂𝗹𝗮𝗿𝗶𝘁𝘆 and front end devs will need to get more comfortable with server side stuff like API’s and Server Components as well as Vercel (more on that below).
2. 𝗔𝗜 𝘄𝗶𝗹𝗹 𝗱𝗼𝗺𝗶𝗻𝗮𝘁𝗲 𝗯𝘂𝘁 𝗻𝗼𝘁 𝗶𝗻 𝘁𝗵𝗲 𝘄𝗮𝘆 𝘆𝗼𝘂 𝘁𝗵𝗶𝗻𝗸. More “AI” startups will sprout up that leverage AI rather than creating AI models. Google leaked a memo that lends itself to this prediction. The money is in products that use AI; not better and faster models.
3. 𝗪𝗵𝗶𝘁𝗲𝗯𝗼𝗮𝗿𝗱 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 𝗱𝗲𝗰𝗹𝗶𝗻𝗲 as cheating increases and hiring in non-tech sectors ramps up. Debugging and pair programming interviews continue to rise as well as system design that is more client-side focused. Follow Ricardo A. Morales who is one of the few people tackling FE Sys Design.
4. 𝗖𝗹𝗼𝘂𝗱 𝗦𝗲𝗿𝘃𝗶𝗰𝗲 𝗣𝗿𝗼𝘃𝗶𝗱𝗲𝗿 𝘄𝗮𝗿𝘀. NextJS is a pain to deploy outside Vercel at the moment (if you want their cool features). I think AWS will begin to offer more NextJS specific tooling to retain their market share and Vercel will need to think of ways to keep customers on their platform.

What do I know? I’ve been trying to figure out a good pointing system for years now. 

I’ll bet you 5 bucks at least 2 of these trends will be… trending.

How wrong am I?",UNKNOWN,Brian,Jenney,5750,5750,56,20,2,0,0.013565217391304348,,2023-11-17 09:22:05,https://www.linkedin.com/feed/update/urn:li:activity:7131327805920874496
urn:li:activity:7130952767807913984,"Most developers would benefit more from reading “How to Win Friends and Influence People” than “Cracking the Coding Interview”.

Here's the thing: 

Technical skills can get your foot in the door.

Soft skills open the rest of the house.

Knowing how to 𝗻𝗮𝘃𝗶𝗴𝗮𝘁𝗲 𝗵𝘂𝗺𝗮𝗻 𝗱𝘆𝗻𝗮𝗺𝗶𝗰𝘀, empathize and connect, 𝗮𝗿𝘁𝗶𝗰𝘂𝗹𝗮𝘁𝗲 𝘆𝗼𝘂𝗿 𝘁𝗵𝗼𝘂𝗴𝗵𝘁𝘀 and influence others – these are the tools that build careers better than learning another programming language.

They're learnable for the most part.

𝗦𝗽𝗲𝗮𝗸 𝗶𝗻𝘁𝗼 𝗮 𝗰𝗮𝗺𝗲𝗿𝗮 at home and explain something you learned. 𝗩𝗼𝗹𝘂𝗻𝘁𝗲𝗲𝗿 𝗳𝗼𝗿 𝗮 𝗱𝗲𝗺𝗼 at work. Write something online. 

I get it, you're a shy developer so 𝘀𝘁𝗮𝗿𝘁 𝘀𝗺𝗮𝗹𝗹 𝗯𝘆 𝗮𝘀𝗸𝗶𝗻𝗴 𝗮 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝗱𝘂𝗿𝗶𝗻𝗴 𝗮 𝗺𝗲𝗲𝘁𝗶𝗻𝗴.

𝘈𝘭𝘴𝘰 - 𝘳𝘦𝘢𝘥 𝘛𝘩𝘦 𝘗𝘩𝘰𝘦𝘯𝘪𝘹 𝘗𝘳𝘰𝘫𝘦𝘤𝘵 𝘪𝘧 𝘺𝘰𝘶’𝘳𝘦 𝘭𝘰𝘰𝘬𝘪𝘯𝘨 𝘧𝘰𝘳 𝘴𝘰𝘮𝘦 𝘯𝘰𝘯-𝘥𝘳𝘺 𝘤𝘰𝘥𝘪𝘯𝘨 𝘬𝘯𝘰𝘸𝘭𝘦𝘥𝘨𝘦 𝘵𝘩𝘢𝘵 𝘺𝘰𝘶 𝘥𝘪𝘥𝘯’𝘵 𝘨𝘦𝘵 𝘪𝘯 𝘤𝘰𝘭𝘭𝘦𝘨𝘦 😉.",UNKNOWN,Brian,Jenney,18892,18892,143,27,1,0,0.009051450349354223,,2023-11-16 08:25:15,https://www.linkedin.com/feed/update/urn:li:activity:7130952767807913984
urn:li:activity:7130595501837598720,"Git really doesn’t have to be that complicated:

- 𝗰𝗼𝗺𝗺𝗶𝘁 your work 𝚐𝚒𝚝 𝚊𝚍𝚍 . 𝚐𝚒𝚝 𝚌𝚘𝚖𝚖𝚒𝚝 -𝚖 “𝚜𝚘𝚖𝚎 𝚐𝚘𝚘𝚍 𝚖𝚎𝚜𝚜𝚊𝚐𝚎” 𝚐𝚒𝚝 𝚙𝚞𝚜𝚑

- uh oh, got work 𝗜 𝗱𝗼𝗻’𝘁 𝘄𝗮𝗻𝗻𝗮 𝗰𝗼𝗺𝗺𝗶𝘁 𝗿𝗶𝗴𝗵𝘁 𝗻𝗼𝘄 𝚐𝚒𝚝 𝚜𝚝𝚊𝚜𝚑 

- now I want to 𝗴𝗲𝘁 𝘁𝗵𝗮𝘁 𝗰𝗼𝗱𝗲 𝗯𝗮𝗰𝗸 𝚐𝚒𝚝 𝚜𝚝𝚊𝚜𝚑 𝚙𝚘𝚙

- double uh oh - 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗱𝗼𝗲𝘀 𝗻𝗼𝘁 𝘄𝗼𝗿𝗸 𝗯𝗲𝗰𝗮𝘂𝘀𝗲 𝗼𝗳 𝗮𝗻 𝗼𝗹𝗱 𝗰𝗼𝗺𝗺𝗶𝘁 𝚐𝚒𝚝 𝚕𝚘𝚐 to find the issue then 𝚐𝚒𝚝 𝚛𝚎𝚟𝚎𝚛𝚝 <𝚌𝚘𝚖𝚖𝚒𝚝 𝚑𝚊𝚜𝚑>

- on second thought let’s 𝗮𝗱𝗱 𝗯𝗮𝗰𝗸 𝗶𝗻 𝘁𝗵𝗮𝘁 𝗰𝗼𝗺𝗺𝗶𝘁 𝘆𝗼𝘂 𝗿𝗲𝘃𝗲𝗿𝘁𝗲𝗱 𝚐𝚒𝚝 𝚕𝚘𝚐 to find the revert commit hash and 𝚐𝚒𝚝 𝚛𝚎𝚟𝚎𝚛𝚝 <𝚛𝚎𝚟𝚎𝚛𝚝 𝚌𝚘𝚖𝚖𝚒𝚝 𝚑𝚊𝚜𝚑>

- 𝘀𝘄𝗶𝘁𝗰𝗵 𝗯𝗮𝗰𝗸 𝘁𝗼 𝗯𝗿𝗮𝗻𝗰𝗵 I was just working on 𝚐𝚒𝚝 𝚌𝚑𝚎𝚌𝚔𝚘𝚞𝚝 -

- 𝘂𝗻𝗱𝗼 𝗮𝗹𝗹 𝘁𝗵𝗲 𝗷𝘂𝗻𝗸 𝗰𝗼𝗱𝗲 I wrote 𝚐𝚒𝚝 𝚌𝚑𝚎𝚌𝚔𝚘𝚞𝚝 .

- 𝗜 𝗼𝗻𝗹𝘆 𝘄𝗮𝗻𝘁 𝘁𝗵𝗮𝘁 𝗼𝗻𝗲 𝗳𝗶𝗹𝗲 from my other branch 𝚐𝚒𝚝 𝚌𝚑𝚎𝚌𝚔𝚘𝚞𝚝 <𝚋𝚛𝚊𝚗𝚌𝚑_𝚗𝚊𝚖𝚎> — ./𝚙𝚊𝚝𝚑/𝚝𝚘/𝚏𝚒𝚕𝚎

- 𝘀𝗼 𝗺𝗮𝗻𝘆 𝗰𝗼𝗻𝗳𝗹𝗶𝗰𝘁𝘀 find all <<<< then fix conflicts, test your branch and commit that sh*t

I’ve been using some version of this flow for nearly a decade to push my work, find and revert changes and triage critical incidents. 

Any git moves you’d add here? (don’t say rebase, don’t say rebase 😅)",UNKNOWN,Brian,Jenney,72409,72409,257,68,21,0,0.004778411523429408,,2023-11-15 09:11:12,https://www.linkedin.com/feed/update/urn:li:activity:7130595501837598720
urn:li:activity:7130314399881256961,"60+ people asked me to do my own podcast in the last day.

So I recorded one. 

It’s about 5:30 seconds long. 

It’s all about the 3 strategies I use to land a job during a recession. 

It’ll be released tomorrow at 9:05AM EST in replacement of my text based newsletter! 

Subscribe now if you’re in the market and want an almost guaranteed way to succeed in this environment. 

Link in comments. 

#code #jobs #softwareengineering",UNKNOWN,Brian,Jenney,0,0,27,3,3,0,0,"#code ,#jobs ,#softwareengineering",2023-11-14 14:56:37,https://www.linkedin.com/feed/update/urn:li:activity:7130314399881256961
urn:li:activity:7129866550785802241,"One way to ensure you don't grow as a developer:

- take on tasks you are 100% sure you will finish

Instead:

- take on tasks just outside of your comfort zone
- google what you don’t know
- ask for help

Grow your confidence by force.",UNKNOWN,Brian,Jenney,21117,21117,235,29,11,0,0.013022683146280249,,2023-11-13 08:29:43,https://www.linkedin.com/feed/update/urn:li:activity:7129866550785802241
urn:li:activity:7128778505001074689,"Let me save you 90 hours of watch time from the Udemy Course you're going to buy this weekend.

Between tutorial hell and your own side project is tutorial purgatory.

The awkward phase when you’re not quite ready to create a complex side project but aren’t getting much out of following along with a video.

Here’s how you limit your stay here:

- 𝗗𝗼𝗻’𝘁 𝗲𝗾𝘂𝗮𝘁𝗲 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀 𝘄𝗶𝘁𝗵 𝗰𝗼𝗺𝗽𝗹𝗲𝘁𝗶𝗼𝗻 - there is no Gold Star for finishing a 100 hour course
- Gain enough knowledge to be dangerous
- 𝗘𝘅𝘁𝗲𝗻𝗱, 𝗯𝗿𝗲𝗮𝗸 𝗼𝗿 𝗿𝗲-𝘄𝗿𝗶𝘁𝗲 𝗮 𝗳𝗲𝗮𝘁𝘂𝗿𝗲 from the tutorial
- Write detailed comments about what is happening in the code and why

Now you have a project that is similar to the tutorial but NOT exactly like it and  you’ve removed the training wheels from your learning exercise.",UNKNOWN,Brian,Jenney,42873,42873,123,15,2,0,0.0032654584470412614,,2023-11-10 08:48:35,https://www.linkedin.com/feed/update/urn:li:activity:7128778505001074689
urn:li:activity:7128414034604781568,"""𝘉𝘶𝘵 𝘮𝘺 𝘧𝘳𝘪𝘦𝘯𝘥 𝘨𝘰𝘵 𝘩𝘪𝘳𝘦𝘥 𝘣𝘦𝘤𝘢𝘶𝘴𝘦 𝘰𝘧 𝘵𝘩𝘦𝘪𝘳 𝘱𝘰𝘳𝘵𝘧𝘰𝘭𝘪𝘰!""

That's great for them. I would still caution the majority of developers from spending too much time on a site that:

1. 𝗡𝗼 𝗼𝗻𝗲 𝘄𝗶𝗹𝗹 𝗿𝗲𝗮𝗹𝗹𝘆 𝗹𝗼𝗼𝗸 𝗮𝘁
2. 𝗕𝗲𝗰𝗼𝗺𝗲𝘀 𝗶𝗺𝗺𝗲𝗱𝗶𝗮𝘁𝗲𝗹𝘆 𝗶𝗿𝗿𝗲𝗹𝗲𝘃𝗮𝗻𝘁 𝗮𝗳𝘁𝗲𝗿 𝘆𝗼𝘂𝗿 𝗳𝗶𝗿𝘀𝘁 𝗷𝗼𝗯 𝗮𝘀 𝗮 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿
3. 𝗧𝗮𝗸𝗲𝘀 𝘁𝗶𝗺𝗲 𝗮𝘄𝗮𝘆 𝗳𝗿𝗼𝗺 𝗽𝗿𝗲𝗽𝗮𝗿𝗶𝗻𝗴 𝗳𝗼𝗿 𝘁𝗲𝗰𝗵𝗻𝗶𝗰𝗮𝗹 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀

You've heard it's the golden ticket for junior devs to land a dream job. But let's be real: your portfolio probably won't be the reason you get hired.

If you are hell bent on creating a portfolio please:

1. 𝗠𝗮𝗸𝗲 𝗶𝘁 𝗿𝗲𝘀𝗽𝗼𝗻𝘀𝗶𝘃𝗲
2. 𝗨𝘀𝗲 𝗮 𝘁𝗲𝗺𝗽𝗹𝗮𝘁𝗲 or learn some design (or have GPT style it for you 😉)
3. 𝗖𝗹𝗲𝗮𝗻 𝘁𝗵𝗲 𝗰𝗼𝗻𝘀𝗼𝗹𝗲 from all those logs you added",UNKNOWN,Brian,Jenney,10055,10055,85,16,2,0,0.010243659870711089,,2023-11-09 08:20:33,https://www.linkedin.com/feed/update/urn:li:activity:7128414034604781568
urn:li:activity:7127695205935288320,"5 phases of a developer’s career:

1. I got hired! My work is done!
2. I know nothing. I’m an awful developer and a burden on this team, the company and the world at large.
3. Can’t believe I solved that problem and delivered that feature. Perhaps I’m not the absolute worst developer in the entire universe.
4. I should be paid more. Time to grind DSA and system design.
5. I got hired! My work is done!

Which stage are you in?",UNKNOWN,Brian,Jenney,16171,16171,134,50,3,0,0.011563910704347289,,2023-11-07 09:31:47,https://www.linkedin.com/feed/update/urn:li:activity:7127695205935288320
urn:li:activity:7127329139144937472,"Your idea of the 10x developer is all wrong.

It’s not a coding robot pumping out ten times as much code as us regular flesh bags.

They’re not producing code that is wildly more efficient or faster than the average developer either.

- Great developers magnify the power of the team.
- They take on tasks with more leverage to have greater impact.
- They mentor, document and create patterns for others to leverage.

Their greatest contribution might not include writing any code at all.

If your goal is to be a mega-hyperbole-super-senior software engineer, you need to take a step back from writing better and better code and start thinking “𝘏𝘰𝘸 𝘤𝘢𝘯 𝘐 𝘮𝘢𝘬𝘦 𝘸𝘰𝘳𝘬𝘪𝘯𝘨 𝘰𝘯 𝘵𝘩𝘪𝘴 𝘵𝘦𝘢𝘮 𝘢𝘯𝘥 𝘰𝘶𝘳 𝘱𝘳𝘰𝘥𝘶𝘤𝘵 𝘣𝘦𝘵𝘵𝘦𝘳?”

- Can the deployment process be improved?
- Are code reviews useful?
- How can we ship code faster with less bugs?

These kinds of questions will lead you down rabbit holes that lead to more interesting problems to solve and make you the kind of developer who stands out on your team.",UNKNOWN,Brian,Jenney,8415,8415,72,12,0,0,0.009982174688057042,,2023-11-06 08:41:07,https://www.linkedin.com/feed/update/urn:li:activity:7127329139144937472
urn:li:activity:7126236176021155840,"You should be learning in public.

But let's be honest:

- You're nervous to create a post
- You feel like you don't know enough
- You're afraid of coming across like a cringe influencer with a blue background surrounding their big, bald head...

Or something like that.

First off, you're over-thinking it and no one really cares that much about what you're going to post.

We're here to scroll and troll 😎.

BUT - there is 𝗮 𝘄𝗮𝘆 𝘁𝗼 𝗴𝗮𝗶𝗻 𝗳𝗼𝗹𝗹𝗼𝘄𝗲𝗿𝘀, 𝗺𝗮𝗸𝗲 𝗴𝗲𝗻𝘂𝗶𝗻𝗲 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝗻𝗱 𝗻𝗲𝘁𝘄𝗼𝗿𝗸 𝘄𝗶𝘁𝗵𝗼𝘂𝘁 𝗲𝘃𝗲𝗿 𝗽𝗼𝘀𝘁𝗶𝗻𝗴. Check out this video where I go over a strategy that has worked for me to make some really great connections, business deals and even some friendships on LinkedIn.",VIDEO,Brian,Jenney,7961,7961,95,13,1,0,0.013691747267931164,,2023-11-03 08:59:59,https://www.linkedin.com/feed/update/urn:li:activity:7126236176021155840
urn:li:activity:7125872869057732608,"Listening to too many influencers on LinkedIn will get you stuck in a learning loop.

Goes a little something like this:

- Tech bro with a blue background tells you about hawt technology 🔥
- You, a little insecure about your own skills, think this is THE way to get noticed
- You buy a course or a book or go down a YouTube rabbit hole

Repeat this a few times and you will be a sub-par developer in many technologies instead of good at a couple. 😅 ♾️

Instead:

- Focus on your core skills and identify trends in the local and global market (hint: ReactJS ain’t going away)
- Resist the urge to add more tools to your tool belt early on
- Focus on getting interviews and learning from your failures or successes
- Use a side project to reinforce your current skills and incrementally add new technologies",UNKNOWN,Brian,Jenney,6650,6650,81,10,1,0,0.013834586466165413,,2023-11-02 09:00:34,https://www.linkedin.com/feed/update/urn:li:activity:7125872869057732608
urn:li:activity:7125477091562721282,"I have a confession:

I never really wanted to become a talking head on LinkedIn. I actually just wanted to promote my mentorship program and share the advice I wish I’d been given earlier in my career. Maybe people will find this stuff helpful I figured.

20k followers, hundreds of coffee chats and a dozen podcasts later and I now see writing on here has been one of the best decisions I ever made.

I’ve met too many amazing people to count and even made some real friends.

I also sold some products…. so there’s that too.

Well, now I can finally reveal the next chapter in this twisty story:

I am now the owner of Parsity. What started as a DM on LinkedIn from the owner, Aaron Hayslip, turned into a partnership and finally an offer to take over the ownership.

I’ll be honest, I’m a little scared.

I’m also excited for what’s next. 

Massive curriculum updates, more community engagement and partnerships and so many Slack emojis 😎. I’m honored to take Parsity to the next level with Aaron’s guidance and the amazing program he’s built up.

I can’t wait to indoctrinate, I mean educate, many more developers with a program I’m proud to be part of.",UNKNOWN,Brian,Jenney,5843,5843,110,18,0,0,0.02190655485195961,,2023-11-01 06:57:21,https://www.linkedin.com/feed/update/urn:li:activity:7125477091562721282
urn:li:activity:7124783683818950656,"It’s OK to self-reject. But most of you are doing way too much of it.

If you meet 50% of the requirements and are within 1 - 2 years of the desired YOE you must apply.

If you meet 100% of the requirements and have all the YOE, you’re probably over-qualified.",UNKNOWN,Brian,Jenney,13644,13644,127,18,4,0,0.010920551158018177,,2023-10-30 08:51:11,https://www.linkedin.com/feed/update/urn:li:activity:7124783683818950656
urn:li:activity:7123723702071934976,"I bet 50% of you are not using these dead simple keyboard shortcuts in VS Code.

I've pair programmed with enough of you to know that this video may be more helpful than another 420 hour Udemy course on the parts of Javascript you though you knew but kinda don't but are going to...

Hope it's helpful.

Any shortcuts I missed?",VIDEO,Brian,Jenney,8942,8942,103,7,12,0,0.013643480205770522,,2023-10-27 10:43:32,https://www.linkedin.com/feed/update/urn:li:activity:7123723702071934976
urn:li:activity:7123327941333155841,"Perhaps I’ve fooled you.

You see my title or follower count and make some assumptions.

Just to be clear, I still:

- get very nervous about public speaking
- google the difference between slice and splice
- fail interviews
- feel like I should know more than I do
- buy courses that I never finish

Luckily, I have the benefit of history to give me confidence. In between my mistakes and fumbles, I’ve actually done some cool stuff.

That doesn’t mean I’m immune to my own insecurities. I’ve just learned to ignore them better.",UNKNOWN,Brian,Jenney,8255,8255,155,17,3,0,0.021199273167777106,,2023-10-26 08:28:02,https://www.linkedin.com/feed/update/urn:li:activity:7123327941333155841
urn:li:activity:7122244304210706432,"Am I... average?

In reality, amazing teams are made up of mostly ""average"" developers. Not teams of ninjas/rockstars/wizards/elves 🧝‍♂️

As an average developer there’s still a lot of room to make impact outside being the highest technical authority.

As a very non-rockstar coder, here are some things I’ve done over the years which helped me stand out:

- start an engineering book club
- volunteer for on-call
- onboard junior members
- create a PR template to streamline the code review process
- offer to assist with others’ work
- actually talk during pointing sessions and clarify tasks instead of just nodding my head

Of course, getting work done in a timely manner and not significantly adding to the number of bugs in our backlog didn’t hurt either. 

Let me be clear, you cannot be technically incompetent, start a book club and expect to get recognized and promoted… BUT you also don’t need to wait until you understand JS on a Kyle Simpson level to offer your insight, suggest changes and speak up.",UNKNOWN,Brian,Jenney,27903,27903,84,18,1,0,0.003691359352040999,,2023-10-23 08:49:44,https://www.linkedin.com/feed/update/urn:li:activity:7122244304210706432
urn:li:activity:7120082946685890560,"Creating a side project is draining.

Here's my cheat sheet so you'll never run out of side project inspiration.

4 easy ways to generate quality side project ideas:

1. 𝗦𝘁𝗲𝗮𝗹 𝗳𝗿𝗼𝗺 𝗼𝘁𝗵𝗲𝗿𝘀. Check out sites like Acquire[dot]com and WellFound[dot]com to see what small startups and 1 person businesses are building. Build something similar.
2. 𝗗𝗼𝗻’𝘁 𝗯𝘂𝗶𝗹𝗱 𝗮 𝗵𝗼𝘂𝘀𝗲. 𝗔𝗱𝗱 𝗮 𝗯𝗿𝗶𝗰𝗸. Check out the feature requests or reviews for an app you’re using. What do people want? Maybe build that.
3. 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗔𝗣𝗜 on rapidAPI or use OpenAI (everyone’s doing it 😎) and think what you can build around it. For example, can you scrape a user’s top posts as a way to train GPT on their voice and content?
4. 𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗲 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗯𝗼𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝘁𝗲𝗱𝗶𝗼𝘂𝘀. Is there something at work or in your personal life that you do manually that could be automated? Spreadsheets are an easy target. Fix it for yourself and others.

You also don’t need to solve anything. A great side project really only has 1 metric for success: you learned something.",UNKNOWN,Brian,Jenney,34524,34524,325,24,13,0,0.01048545939056888,,2023-10-17 09:36:53,https://www.linkedin.com/feed/update/urn:li:activity:7120082946685890560
urn:li:activity:7119717343127117824,"I’ve spoken with about 500 developers in the last 12 months. I won’t be doing any more 15 minute chats in the foreseeable future.

But the truth is, most beginners ask the same 3 questions:

- What’s wrong with my resume?
- What should I build for a side project?
- How do I get hired?

So I want to answer them for free:

1. 𝗬𝗼𝘂𝗿 𝗿𝗲𝘀𝘂𝗺𝗲 𝗶𝘀 𝗽𝗿𝗼𝗯𝗮𝗯𝗹𝘆 𝗮𝘃𝗲𝗿𝗮𝗴𝗲 𝗮𝗻𝗱 𝘀𝗼𝘂𝗻𝗱𝘀 𝗹𝗶𝗸𝗲 𝗺𝗮𝗻𝘆 𝗼𝘁𝗵𝗲𝗿𝘀. Remove any mention of junior or aspiring and use this framework: did [x] using [y] which led to [z]. Think from the recruiter’s perspective: 𝗗𝗼 𝘆𝗼𝘂 𝘀𝗼𝘂𝗻𝗱 𝗹𝗶𝗸𝗲 𝗮 𝗿𝗶𝘀𝗸 𝘁𝗼 𝗵𝗶𝗿𝗲? Make yourself less risky and don’t tell them everything. Why do they need to know your last job was at a french fry shop? Lead with your developer experience or technical projects.
   
2. 𝗦𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘀𝗵𝗼𝘂𝗹𝗱 𝘁𝗲𝗮𝗰𝗵 𝘆𝗼𝘂 𝘀𝗼𝗺𝗲𝘁𝗵𝗶𝗻𝗴 𝗻𝗲𝘄 or keep your skills sharp if you’re not working. Really, they should be enjoyable. They’re an alternative to grinding away at toy problems and expose you to challenges which you can give yourself. Want to understand how to implement role-based authentication or get your hands dirty with Serverless? Build it out. Also follow John Crickett , he has a ton of cool projects to make.
   
3. Now here’s the hard part and the truth no one wants to hear: 𝗴𝗲𝘁𝘁𝗶𝗻𝗴 𝗵𝗶𝗿𝗲𝗱 𝗶𝘀 𝗮 𝗴𝗮𝗺𝗲 𝗼𝗳 𝘀𝗸𝗶𝗹𝗹 𝗮𝗻𝗱 𝗹𝘂𝗰𝗸. If there is one trait that I see in successful grads, it is their consistency. They just didn’t stop. They outlasted their fears, insecurities and the fear mongers. They changed what didn’t work and picked a strategy. Mass apply or network or do both. Then don’t stop.",UNKNOWN,Brian,Jenney,52485,52485,340,32,20,0,0.007468800609698009,,2023-10-16 09:35:29,https://www.linkedin.com/feed/update/urn:li:activity:7119717343127117824
urn:li:activity:7118658458123464704,"A few areas where most devs struggle after they are hired: 
 
1. Code quality 
2. Git 
3. Estimations 
 
It's not all about getting your code to run. 
 
Like it or not, you will be judged on whether or not you delivered working code on time. 
 
I'm not a fan of estimates. Humans naturally suck at them. When I mentor developers who were recently hired, I show them this tactic I've used to 𝗿𝗲𝘁𝗿𝗼𝗮𝗰𝘁𝗶𝘃𝗲𝗹𝘆 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗲 their work and suck a bit less.  
 
Hope you find it useful.",VIDEO,Brian,Jenney,8723,8723,78,11,5,0,0.010776109136764874,,2023-10-13 11:08:40,https://www.linkedin.com/feed/update/urn:li:activity:7118658458123464704
urn:li:activity:7117496233539026944,"Someone called me a ""cringe tech influencer"" 😢.

It's OK though, I've been called worse.

In addition to being a talking head on LinkedIn, I also manage a stellar team of software engineers at The Clorox Company. 

""𝘞𝘢𝘪𝘵, 𝘭𝘪𝘬𝘦 𝘵𝘩𝘦 𝘣𝘭𝘦𝘢𝘤𝘩 𝘤𝘰𝘮𝘱𝘢𝘯𝘺?""

Yeah, same one. 

In addition to bleach, they also have a number of e-commerce sites which my team supports. 

ReactJS, GraphQL, AWS, Adobe Commerce Cloud and NextJS. Ya know, cool kid stuff.

Today I'll get the chance to share how we've been an integral part of Clorox's digital transformation, our front end architecture, the mistakes we've made and the successes we've had at Meet Magento New York 2023.",UNKNOWN,Brian,Jenney,7596,7596,96,20,0,0,0.015271195365982097,,2023-10-10 06:22:26,https://www.linkedin.com/feed/update/urn:li:activity:7117496233539026944
urn:li:activity:7116093352067952640,"I bet 50% of you are still using 420 console logs to debug your buggy code 🐞.

There's a better way.

Check out my debugging walkthrough below to learn how to investigate and debug unexpected features in your JS apps.",VIDEO,Brian,Jenney,30685,30685,216,27,20,0,0.008570963011243278,,2023-10-06 09:27:45,https://www.linkedin.com/feed/update/urn:li:activity:7116093352067952640
urn:li:activity:7115720837546078208,"A co-worker called me out at a small start up some years ago.

“𝘐𝘵’𝘴 𝘩𝘢𝘳𝘥 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘴𝘪𝘯𝘤𝘦 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘳𝘦𝘢𝘭𝘭𝘺 𝘬𝘯𝘰𝘸 𝘵𝘩𝘦 𝘣𝘢𝘴𝘪𝘤𝘴 𝘰𝘧 𝘑𝘢𝘷𝘢𝘚𝘤𝘳𝘪𝘱𝘵”.

It stung to hear that. He was also right.

I was not junior either. 

I had been using AngularJS for a couple years. (don't judge me) 

𝗧𝗵𝗲 𝗽𝗿𝗼𝗯𝗹𝗲𝗺: I’d become a framework developer. I knew how to use AngularJS but didn’t understand the JS behind it.

I resolved to suck less at JS.

I went back to the basics including:
 
- promises
- async/await
- 𝚝𝚑𝚒𝚜
- design patterns

I went through all the Kyle Simpson books. I made janky apps to internalize the information. I gained knowledge and confidence.

Understanding the fundamentals provides a lot of benefits:

- frameworks become less magical
- you start seeing patterns everywhere
- less learning curve when switching between technologies
- libraries become more read-able

Frameworks are great. You need to know them. Just don’t build your house on a shaky foundation.",UNKNOWN,Brian,Jenney,45104,45104,475,47,13,0,0.011861475700603051,,2023-10-05 08:40:45,https://www.linkedin.com/feed/update/urn:li:activity:7115720837546078208
urn:li:activity:7115005206278406145,"Sometimes I feel like a fake engineering manager but that’s ok. 

Before this, I was a fake senior software engineer and before that I was pretending to be a developer.

At each new stage, there’s a little voice in my head reminding me why I shouldn’t be in my position.

I peruse LinkedIn and compare myself to others.

Terrible habit.

I know it will happen again and I’m prepared.

Here’s how I get over that little voice in my head:

- 𝗳𝗶𝗻𝗱 𝗮𝗻 𝗮𝘃𝗮𝘁𝗮𝗿 - who do I want to be like?
- what do they know that I don’t?
- 𝗰𝗿𝗲𝗮𝘁𝗲 𝗮 𝗰𝗵𝗲𝗰𝗸𝗹𝗶𝘀𝘁 with the items from the previous step
- 𝗳𝗶𝗻𝗱 𝗺𝗲𝗻𝘁𝗼𝗿𝘀 𝗼𝗿 𝗯𝗼𝗼𝗸𝘀 or both to bring me closer to the avatar
- 𝗰𝗵𝗲𝗰𝗸 𝗶𝘁𝗲𝗺𝘀 𝗼𝗳𝗳 𝘁𝗵𝗲 𝗹𝗶𝘀𝘁 and prove to myself that I’m where I need to be

Rinse and repeat for each promotion, new company or new role.",UNKNOWN,Brian,Jenney,9399,9399,95,13,3,0,0.011809766996488988,,2023-10-03 09:11:55,https://www.linkedin.com/feed/update/urn:li:activity:7115005206278406145
urn:li:activity:7114640993747881986,"450 conversation with developers later and I’m convinced that most of us need a sympathetic ear as much as we need career and coding advice.

Here’s the thing: coding is fun.

It can also be:

- lonely
- stressful
- tedious
- confusing

Don’t wrap too much of your identity in the code you write. It can be a fickle beast. Sometimes I’m pretty damn good at slinging code. Sometimes I suck. 

So I hit the gym. Run around a lake. Read stuff. Write on here and in my newsletter (you better have signed up, seriously wtf).

This way when one area drags me down, I use another to lift me up.

Outside of coding, what are some hobbies you’ve picked up?",UNKNOWN,Brian,Jenney,11706,11706,110,24,2,0,0.011617973688706646,,2023-10-02 09:21:44,https://www.linkedin.com/feed/update/urn:li:activity:7114640993747881986
urn:li:activity:7113563029048332288,"Someone said my videos were too long... they have a good point.

I can't really dive into RSC in 60 seconds but this should be enough to get your noggin' joggin'.",VIDEO,Brian,Jenney,6503,6503,61,4,2,0,0.0103029371059511,,2023-09-29 09:47:35,https://www.linkedin.com/feed/update/urn:li:activity:7113563029048332288
urn:li:activity:7113186725153161217,"Some uncomfortable truths for software engineers:

- You, not your company, is ultimately responsible for your growth as a developer
- You may be really good at writing code but if you’re an asshat, you will have a hard time getting promoted
- Shipping code fast is better than shipping code perfect
- Say something in a meeting… anything. A bad idea to kick off a conversation is better than silence
- If you didn't negotiate your salary - you left money on the table
- The business doesn't care about your refactoring efforts… do it anyways
- Your first job will validate you - your second will get you paid
- Switching jobs is the easiest way to increase your salary
- Stability is a myth - don't put all your eggs in one basket

What would you add?",UNKNOWN,Brian,Jenney,53933,53933,377,51,13,0,0.008176811970407729,,2023-09-28 08:59:24,https://www.linkedin.com/feed/update/urn:li:activity:7113186725153161217
urn:li:activity:7112472940939542528,"There’s too much to learn.

A new framework to replace the old one that you just learned.

Obscure algorithms from dudes with too many letters in their last name.

Everyone is switching to AI/ML now? Should you learn Python?

While you can’t JUST stick to the basics, if you chase every shiny new technology you will become a Swiss Army Knife developer. You can do a little of everything… poorly.

Instead:

- 𝗜𝗱𝗲𝗻𝘁𝗶𝗳𝘆 𝗺𝗲𝗴𝗮 𝘃𝘀 𝗺𝗶𝗰𝗿𝗼 𝘁𝗿𝗲𝗻𝗱𝘀 in software development:
- Recent mega trends include Docker, NextJS, Serverless and TypeScript
- Micro trends might include tRPC, Rust and Nuxt
- Use side projects to gain experience with technologies that make up mega trends and keep your skills relevant
- 𝗚𝗮𝗺𝗯𝗹𝗲 𝗮 𝗯𝗶𝘁 𝘄𝗶𝘁𝗵 𝘁𝗵𝗲 𝗺𝗶𝗰𝗿𝗼 𝘁𝗿𝗲𝗻𝗱𝘀

If you’re lucky, some of them will become mega trends and you’ll be first in line to take advantage.",UNKNOWN,Brian,Jenney,11897,11897,131,16,5,0,0.012776330167269059,,2023-09-26 09:32:14,https://www.linkedin.com/feed/update/urn:li:activity:7112472940939542528
urn:li:activity:7112103876434046976,"Is copy/pasting really so bad?

Honestly, it’s how I’ve survived over the years as a developer.

Every new workplace where I went and every contract I completed, I took note of what the smarter developers were doing.

- what books have they read?
- how do they write their pull requests?
- I copied their styles for writing tests, React components and backend code.
- I asked how they investigated and debugged critical issues.
- I imitated their mannerisms and studied how they spoke in meetings.

I’ve been lucky. I copied from the right people at some amazing companies and worked with developers who I truly think might be genius.

You don’t have to get lucky though.

Nowadays, through the University of YouTube, you have the ability to learn from other amazing developers and copy what makes sense to you.

A few professors at UYT who I’ve learned from recently include:

- The Primeagen
- Theo from Pinglabs
- Blue Collar Coder

Anyone else you’d suggest?",UNKNOWN,Brian,Jenney,13776,13776,104,20,5,0,0.009364111498257839,,2023-09-25 09:03:41,https://www.linkedin.com/feed/update/urn:li:activity:7112103876434046976
urn:li:activity:7111018680880140289,"One of my most embarrassing interviews happened a few years ago. It was so bad, I actually ended it early.

The interviewer gave me a medium level LeetCode problem. It could have been solved recursively or with dynamic programming.

Just 1 problem...

I didn't know how to approach either solution 🥲

Within 10 minutes, I politely suggested we just end the interview. He was very kind and encouraged me to keep trying. He gave me hints. But there was no use. Why waste both our times?

Since then I've spent around 10k learning DSA. I'm better than I was and I've passed (and failed) many interviews since. In the video below I walk through a DP approach to solving that same question I bombed. Hopefully you find it useful.",VIDEO,Brian,Jenney,12412,12412,115,7,4,0,0.01015146632291331,,2023-09-22 09:17:57,https://www.linkedin.com/feed/update/urn:li:activity:7111018680880140289
urn:li:activity:7110305365426110464,"There's just not enough time.

You want to finish the Udemy course, grind LeetCode, learn TypeScript and workout to spite your ex. 

I get it.

One of my mentees asked me how I juggle being a father of 3, running a side business, a full time job and keeping a consistent work out routine.

Easy - I just neglect my children. 😅

It’s actually a fairly simple process I’ve been using for years to create time where there is none which I share in the article below along with a video on how to make better estimates as a software developer. Hope it's helpful.",ARTICLE,Brian,Jenney,11727,11727,135,14,2,0,0.012876268440351326,,2023-09-20 09:59:54,https://www.linkedin.com/feed/update/urn:li:activity:7110305365426110464
urn:li:activity:7109926565668425728,"The job market for developers doesn’t suck.

It’s just less piping hot.

And expectations have risen.

So yes, getting that first role is difficult and more luck is involved than many would like to admit.

A mentee of mine had that same issue last year and I suggested we pivot into searching for QA roles.

Here’s what he did:
- 𝘚𝘵𝘶𝘥𝘪𝘦𝘥 𝘊𝘺𝘱𝘳𝘦𝘴𝘴 𝘢𝘯𝘥 𝘚𝘦𝘭𝘦𝘯𝘪𝘶𝘮
- 𝘗𝘳𝘢𝘤𝘵𝘪𝘤𝘦𝘥 𝘸𝘳𝘪𝘵𝘪𝘯𝘨 𝘢𝘶𝘵𝘰𝘮𝘢𝘵𝘦𝘥 𝘵𝘦𝘴𝘵𝘴 𝘢𝘯𝘥 𝘸𝘦𝘣 𝘴𝘤𝘳𝘢𝘱𝘦𝘳𝘴
- 𝘜𝘱𝘥𝘢𝘵𝘦𝘥 𝘩𝘪𝘴 𝘳𝘦𝘴𝘶𝘮𝘦 𝘵𝘰 𝘳𝘦𝘧𝘭𝘦𝘤𝘵 𝘳𝘦𝘭𝘦𝘷𝘢𝘯𝘵 𝘘𝘈 𝘱𝘳𝘰𝘫𝘦𝘤𝘵𝘴 𝘧𝘳𝘰𝘮 𝘵𝘩𝘦 𝘱𝘳𝘦𝘷𝘪𝘰𝘶𝘴 𝘴𝘵𝘦𝘱
- 𝘈𝘱𝘱𝘭𝘪𝘦𝘥 𝘢 𝘭𝘰𝘵

(𝘭𝘪𝘯𝘬 𝘪𝘯 𝘱𝘳𝘰𝘧𝘪𝘭𝘦 𝘵𝘰 𝘨𝘳𝘢𝘣 𝘴𝘰𝘮𝘦 𝘧𝘳𝘦𝘦 𝘮𝘢𝘵𝘦𝘳𝘪𝘢𝘭 𝘵𝘰 𝘭𝘦𝘢𝘳𝘯 𝘵𝘦𝘴𝘵𝘪𝘯𝘨 😉)

He landed a role at a tech company shortly after as a QA automation engineer where he wrote code for end to end test suites.

There’s more to the tech-o-sphere than ReactJS. There’s DevOps, QA, product, data, sales... 

Don’t limit yourself to what your bootcamp taught you",UNKNOWN,Brian,Jenney,19838,19838,185,26,7,0,0.01098901098901099,,2023-09-19 08:56:18,https://www.linkedin.com/feed/update/urn:li:activity:7109926565668425728
urn:li:activity:7109578957385056256,"The dirty secret about coding interviews:

No one knows what the hell they’re doing.

We all think we have THE way to find the right candidates.

I’ve spoken with many of you who are devastated after failing an interview. You believe this is a signal that you are not talented and lack fundamental skills.

It may be true.

It also could be that: 

- Your interviewer is not equipped to determine your ability
- They are biased from their own experience and ONLY looking for solutions which they are familiar with and understand
- They don’t know closures very well or how to explain promises to a 5 year old either
- They’re just having a bad day… 🥲

There is less formal training for interviews than you might imagine. Especially at non-tech companies and startups.

Lord knows I’ve failed more than my fair share of interviews. It hurts. I also know it’s a winnable game. Learn from the loss and keep playing.",UNKNOWN,Brian,Jenney,16122,16122,177,12,4,0,0.011971219451680932,,2023-09-18 10:08:25,https://www.linkedin.com/feed/update/urn:li:activity:7109578957385056256
urn:li:activity:7108491733780353024,"What the hell is RSC?

Developers love acronyms and RSC is one you'll want to be familiar with. React Server Components are React Components... but rendered on the server. Duh. This means data fetching and bundling is done on the server to compose the component and it is sent to the client fully rendered. 

𝗧𝗵𝗶𝘀 𝗴𝗶𝘃𝗲𝘀 𝘁𝗵𝗲𝗺 𝘀𝗼𝗺𝗲 𝘀𝘂𝗽𝗲𝗿 𝗽𝗼𝘄𝗲𝗿𝘀:

- reduced bundle size
- database connections and other server-y stuff
- improved SEO

𝗔𝗻𝗱 𝘀𝗼𝗺𝗲 𝗴𝗼𝘁𝗰𝗵𝗮𝘀:

- no Window or browser APIs
- can't use React hooks

This video explores a few differences you might find useful as you explore them on your own.",VIDEO,Brian,Jenney,5415,5415,62,7,1,0,0.012927054478301015,,2023-09-15 10:54:00,https://www.linkedin.com/feed/update/urn:li:activity:7108491733780353024
urn:li:activity:7108113645363949569,"The recipe for an amazing side project when you don’t know what to do:

1. 🤖 𝗣𝗶𝗰𝗸 𝗮𝗻 𝗔𝗣𝗜 - OpenAI, Binance, RapidAPI and Govt APIs are the first places I’d check.
2. 🧠 𝗜𝗱𝗲𝗮𝘁𝗲 - what are the features of this API you can build something around? Perhaps a stock tracker that integrates with OpenAI to give targeted trading advice.
3. 🩹𝗠𝗨𝗣 - what is required to build the minimally usable product? Pick 1 or 2 core features.
4. ✍️ 𝗦𝗸𝗲𝘁𝗰𝗵 - a white piece of paper and pen will do. Draw out the main features of the app. Ask “and then what?” For example, they visit your site and then what? They click on a button and then what?
5. ✨ 𝗣𝗶𝗰𝗸 𝟭 𝗼𝗿 𝟮 𝗻𝗲𝘄 𝘁𝗲𝗰𝗵𝗻𝗼𝗹𝗼𝗴𝗶𝗲𝘀 you want to learn and use them. Maybe this is your chance to learn TypeScript or COBOL. Whatevs.
6. 🚀 𝗗𝗲𝗽𝗹𝗼𝘆 𝗶𝘁 and buy a domain on Route53 (or whatever) for like 15 bucks. It will look pro.

Get frustrated. Pull out your hair (I don’t have this problem) and learn more than any tutorial can teach you.",UNKNOWN,Brian,Jenney,10634,10634,129,10,9,0,0.01391762271957871,,2023-09-14 09:18:50,https://www.linkedin.com/feed/update/urn:li:activity:7108113645363949569
urn:li:activity:7107765452449206272,"I became an engineering manager a couple years ago and I’ve seen all your resumes. 

They go something like this:

- “𝘗𝘢𝘴𝘴𝘪𝘰𝘯𝘢𝘵𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘢𝘯𝘥 𝘢𝘴𝘱𝘪𝘳𝘪𝘯𝘨 𝘤𝘰𝘥𝘦𝘳 𝘭𝘰𝘰𝘬𝘪𝘯𝘨 𝘧𝘰𝘳 𝘧𝘪𝘳𝘴𝘵 𝘳𝘰𝘭𝘦 𝘪𝘯 𝘵𝘦𝘤𝘩”
- “𝘉𝘶𝘪𝘭𝘵 𝘵𝘩𝘪𝘴 [𝘵𝘩𝘪𝘯𝘨] 𝘶𝘴𝘪𝘯𝘨 𝘵𝘩𝘪𝘴 [𝘵𝘦𝘤𝘩𝘯𝘰𝘭𝘰𝘨𝘺]”
- Github link to site that I put in mobile view immediately. And it breaks 😅

Last week, some members of the Not Another Course community (link in profile 😉) and I pair programmed one member’s resume.

He got an interview the next week.

𝗛𝗲𝗿𝗲’𝘀 𝘁𝗵𝗲 𝗧𝗟𝗗𝗥;

- 𝗱𝗲-𝗿𝗶𝘀𝗸 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 - no one wants to take a chance on someone and recruiters have even less incentive to do so. Sell yourself as a developer. Remove junior. Remove aspiring.
- 𝘁𝗵𝗲 𝗽𝗼𝘄𝗲𝗿 𝘀𝗲𝗻𝘁𝗲𝗻𝗰𝗲 𝘁𝗲𝗺𝗽𝗹𝗮𝘁𝗲 - [role] on [x] with [y] which led to [z] - “led development on unit testing suite using Jest and React-Testing-Library which led to increased stability for code releases and a 50% decrease in bugs”
- 𝘂𝘀𝗲 𝗯𝗼𝗹𝗱 𝗳𝗼𝗿𝗺𝗮𝘁𝘁𝗶𝗻𝗴 𝗳𝗼𝗿 𝘁𝗵𝗲 𝗴𝗼𝗼𝗱 𝘀𝘁𝘂𝗳𝗳 - it’s easy to gloss over a resume when you have 100 to go through so lead their eyes where you want them to go
- 𝗼𝗻𝗹𝘆 𝗶𝗻𝗰𝗹𝘂𝗱𝗲 𝗹𝗶𝗻𝗸𝘀 𝘁𝗼 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀 𝘆𝗼𝘂 𝗿𝗲𝗮𝗹𝗹𝘆 𝘄𝗮𝗻𝘁 𝗽𝗲𝗼𝗽𝗹𝗲 𝘁𝗼 𝘀𝗲𝗲 - if you don’t have one then build one or just don’t add it. The risk is higher than the reward in many cases
- 𝗮𝗱𝗱 𝘀𝗼𝗺𝗲 𝗾𝘂𝗶𝗿𝗸 - a little humor can go a long way and can make you stand out in a sea of resumes that sounds basically the same

There’s more for sure but this should improve 99% of the resumes I’ve come across.",UNKNOWN,Brian,Jenney,62761,62761,418,44,39,0,0.007982664393492774,,2023-09-13 10:39:18,https://www.linkedin.com/feed/update/urn:li:activity:7107765452449206272
urn:li:activity:7107386056022327296,"Popular open source repo Turbo went from TS → JS and developers are furious.

𝘑𝘢𝘷𝘢𝘴𝘤𝘳𝘪𝘱𝘵 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴 𝘢𝘳𝘦𝘯’𝘵 “𝘳𝘦𝘢𝘭” 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴.

𝘛𝘺𝘱𝘦𝘚𝘤𝘳𝘪𝘱𝘵 𝘪𝘴 𝘶𝘴𝘦𝘭𝘦𝘴𝘴. 𝘐𝘵 𝘸𝘢𝘴 𝘰𝘯𝘭𝘺 𝘮𝘢𝘥𝘦 𝘧𝘰𝘳 𝘊# 𝘥𝘦𝘷𝘴 𝘵𝘰 𝘸𝘳𝘪𝘵𝘦 𝘤𝘭𝘪𝘦𝘯𝘵 𝘴𝘪𝘥𝘦 𝘤𝘰𝘥𝘦.

These debates and low blows aren’t helping anyone.

Truth be told - I don’t love TypeScript... yet.

I won’t ignore it however. You shouldn’t either. It’s a mega-trend in software, like Serverless, SPA and React.

It’s more than just JS with types but that’s a fine place to start.

𝗛𝗲𝗿𝗲’𝘀 𝗵𝗼𝘄 𝗜 𝗴𝗼𝘁 𝘀𝘁𝗮𝗿𝘁𝗲𝗱 𝘄𝗶𝘁𝗵 𝘁𝘆𝗽𝗲𝘀 𝗶𝗻 𝗝𝗦:

- add JSdoc notation to an existing app - a nice warm up for TypeScript and thinking in types
- convert a small existing project to use TS and figure out how the TS config works
- start a new project with TS and restrict the use of 𝚊𝚗𝚢 types 😉 with a linter
- refactor previous code to use advanced features like unions, generics and 𝚘𝚖𝚒𝚝

I’m what I’d consider a TS n00b. For those learning, how did you start?",UNKNOWN,Brian,Jenney,5909,5909,33,14,2,0,0.008292435268234895,,2023-09-12 09:33:16,https://www.linkedin.com/feed/update/urn:li:activity:7107386056022327296
urn:li:activity:7107018206778658816,"The most talented developers I’ve met in real life are NOT on LinkedIn, X or Medium.

Like 99% of the people reading this - they’re here to scroll and troll.

What does that mean for you?

Take our advice with a grain of salt.

We may be the most vocal developers but it doesn’t mean we are the best to listen to. Myself included.

Ask yourself these 3 questions before blindly following what some talking head posts on a social media platform:

1. Does this person seem happy?
2. Do I want to be anything like them?
3. Do their actions support their claims?

If the answer to all 3 is no. Maybe don’t follow their advice.",UNKNOWN,Brian,Jenney,7263,7263,75,9,1,0,0.011703152967093488,,2023-09-11 08:50:57,https://www.linkedin.com/feed/update/urn:li:activity:7107018206778658816
urn:li:activity:7105956118459293696,"Check out the video below to check out some debugging techniques I guarantee most of you aren't using that beats the hell out of using 142 console logs.

𝘽𝙪𝙩 𝙛𝙞𝙧𝙨𝙩, 𝙖 𝙙𝙚𝙗𝙪𝙜𝙜𝙞𝙣𝙜 𝙣𝙞𝙜𝙝𝙩𝙢𝙖𝙧𝙚 𝙄 𝙚𝙣𝙘𝙤𝙪𝙣𝙩𝙚𝙧𝙚𝙙 𝙮𝙚𝙖𝙧𝙨 𝙖𝙜𝙤:

By 12AM we knew something was wrong with the migration.

Our line charts were no longer displaying data. The realtime word cloud was frozen. Half the widgets for our data intensive application just weren't working.

I had volunteered to be on call during this migration. I wanted to stand out. It was gonna be a cake walk they told me. Nothing major. Easy. Breezy.

Oops.

The Director of Engineering Slacked me just after midnight and asked me to investigate. My anxiety went 📈

Here's what I did: 

1. 𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝘁𝗲 𝘁𝗵𝗲 𝗯𝘂𝗴 locally
2. 𝗡𝗮𝗿𝗿𝗼𝘄 𝗱𝗼𝘄𝗻 𝘁𝗵𝗲 𝘀𝘂𝗿𝗳𝗮𝗰𝗲 𝗮𝗿𝗲𝗮 (what files seemed to be the culprit?)
3. 𝗔𝗱𝗱 𝗱𝗲𝗯𝘂𝗴𝗴𝗲𝗿 𝘀𝘁𝗮𝘁𝗲𝗺𝗲𝗻𝘁𝘀 to pause execution near the site of the issue
4. 𝗦𝘁𝗲𝗽 𝘁𝗵𝗿𝗼𝘂𝗴𝗵 𝘁𝗵𝗲 𝗰𝗼𝗱𝗲 𝗹𝗶𝗻𝗲 𝗯𝘆 𝗹𝗶𝗻𝗲 to see exactly where things went wrong
5. 𝗙𝗶𝘅 𝘁𝗵𝗲 𝗼𝗳𝗳𝗲𝗻𝗱𝗶𝗻𝗴 𝗰𝗼𝗱𝗲 and write up a suggestion on how to avoid in the future

Hope this helps you debug your buggy-ass code.",VIDEO,Brian,Jenney,13245,13245,123,15,9,0,0.011098527746319366,,2023-09-08 11:09:47,https://www.linkedin.com/feed/update/urn:li:activity:7105956118459293696
urn:li:activity:7105572361621413888,"They told you don't need Redux.

𝘛𝘩𝘦𝘳𝘦'𝘴 𝘵𝘰𝘰 𝘮𝘶𝘤𝘩 𝘣𝘰𝘪𝘭𝘦𝘳𝘱𝘭𝘢𝘵𝘦!
𝘜𝘴𝘦 𝘵𝘩𝘪𝘴 𝘭𝘪𝘣𝘳𝘢𝘳𝘺! 𝘐𝘵’𝘴 𝘸𝘢𝘺 𝘣𝘦𝘵𝘵𝘦𝘳!
My least favorite one: ""𝘑𝘶𝘴𝘵 𝘶𝘴𝘦 𝘊𝘰𝘯𝘵𝘦𝘹𝘵! ""

With around 8.2 million downloads just last week, there’s a pretty high chance the next company you join will leverage this library.

So stop being scared of it.

Try learning these concepts/tools:

- observer pattern
- Functional Programming basics
- Ducks pattern
- Redux DevTools extension

And when you're ready to get your hands dirty with some old (and new school) Redux check out my e-com React App Challenge here 👇

https://lnkd.in/gqnbpDCH",UNKNOWN,Brian,Jenney,18332,18332,135,23,4,0,0.008837006327732926,,2023-09-07 09:36:08,https://www.linkedin.com/feed/update/urn:li:activity:7105572361621413888
urn:li:activity:7105217842928631809,"I used to take pride in the fact I was not good at CSS.

As if this made me a “real” developer.

What a fool I was.

I know JS is moving at a breakneck pace lately with major changes in React, NextJS, NodeJS and whatever framework is trying to replace ReduxJS today 🙄

CSS has been quietly keeping up and introducing a ton of cool new features.

- Container queries (media queries based on the parent container)
- Nested rules (goodbye Sass!)
- Scoped CSS (basically native css modules)

There’s a lot more that I have yet to experiment with but it’s an exciting time to re-introduce yourself to CSS.",UNKNOWN,Brian,Jenney,12351,12351,173,37,4,0,0.01732653226459396,,2023-09-06 09:12:31,https://www.linkedin.com/feed/update/urn:li:activity:7105217842928631809
urn:li:activity:7104825093406564352,"A mentee of mine asked me a great question last week:

“𝘞𝘩𝘢𝘵 𝘪𝘴 𝘢 𝘱𝘳𝘢𝘤𝘵𝘪𝘤𝘢𝘭 𝘵𝘩𝘪𝘯𝘨 𝘐 𝘤𝘢𝘯 𝘥𝘰 𝘵𝘰 𝘨𝘦𝘵 𝘤𝘭𝘰𝘴𝘦𝘳 𝘵𝘰 𝘴𝘦𝘯𝘪𝘰𝘳 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳?”

I thought about what worked for me and others I’ve seen over the years.

What was one thing they all had in common?
I mean, they all wrote above average code.
They took ownership of large areas of the codebase.

𝗕𝘂𝘁 𝘄𝗵𝗮𝘁 𝘄𝗮𝘀 𝟭 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗮𝗹 𝘀𝗸𝗶𝗹𝗹 𝘁𝗵𝗲𝘆 𝗮𝗹𝗹 𝘀𝗵𝗮𝗿𝗲𝗱?

❌ Understanding closure?
❌ Command of recursion?
❌ Writing code in Vim? Or Emacs 😮?
✅ Debugging.

When sh*t hits the fan, the seniors are the first to get called.

They understand how the different systems are orchestrated.

They keep cool (or at least fake it) under pressure.

They have a fix and insight into the origin of the issue and how to avoid it in the future.

𝗧𝗵𝗮𝘁 𝗯𝗲𝗶𝗻𝗴 𝘀𝗮𝗶𝗱, 𝘆𝗼𝘂 𝗰𝗮𝗻𝗻𝗼𝘁 𝗰𝗵𝗲𝗮𝘁 𝘁𝗶𝗺𝗲.

You don’t have to take the long route though.

Volunteer for an on-call rotation, look up the fix your team mate created for a bug that you don't quite understand and raise your hand when a fire happens. 𝗦𝗲𝗲𝗸 𝗼𝘂𝘁 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲𝘀 𝗶𝗻𝘀𝘁𝗲𝗮𝗱 𝗼𝗳 𝘄𝗮𝗶𝘁𝗶𝗻𝗴 𝗳𝗼𝗿 𝘁𝗵𝗲𝗺 𝘁𝗼 𝗵𝗮𝗽𝗽𝗲𝗻 𝘁𝗼 𝘆𝗼𝘂 as a way to accelerate your journey.",UNKNOWN,Brian,Jenney,6788,6788,60,13,1,0,0.010901591043017089,,2023-09-05 07:51:42,https://www.linkedin.com/feed/update/urn:li:activity:7104825093406564352
urn:li:activity:7103412836659286019,"You probably don't need another course. 

BUT - if you're going to take advantage of Labor Day sales 🇺🇸 here are 5 services I think are worth the money:

1. 𝗔𝗹𝗴𝗼𝗘𝘅𝗽𝗲𝗿𝘁/𝗙𝗿𝗼𝗻𝘁𝗘𝗻𝗱𝗘𝘅𝗽𝗲𝗿𝘁 - there are few FE focused offerings out there and this one is solid AF
2. 𝗖𝗼𝗱𝗲𝗖𝗿𝗮𝗳𝘁𝗲𝗿𝘀 - advanced challenges for software developers. I really like the workflow here which involves pushing to a repo where automated tests run to see if your project works
3. 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝗖𝗮𝗸𝗲 - this was my intro to algos and data structures and really helped me develop a mental model for attacking these kinds of problems
4. 𝗧𝗮𝗿𝗼 - the insight and practical advice from mid -> senior -> leadership engineers is filling a massive gap for developers who have moved past junior and want to know what it takes to get to the next level
5. 𝗡𝗼𝘁 𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗖𝗼𝘂𝗿𝘀𝗲 - My own offering. A learning library with community support. Build complex stuff with JS as well as interview prep. (spoiler: no Labor Day Sale 🥲)

𝘏𝘰𝘯𝘰𝘳𝘢𝘣𝘭𝘦 𝘮𝘦𝘯𝘵𝘪𝘰𝘯 𝘵𝘰 𝘍𝘳𝘰𝘯𝘵𝘌𝘯𝘥𝘔𝘢𝘴𝘵𝘦𝘳𝘴 𝘢𝘯𝘥 𝘚𝘤𝘳𝘪𝘮𝘣𝘢. 𝘐 𝘩𝘢𝘷𝘦 𝘯𝘰𝘵 𝘱𝘶𝘳𝘤𝘩𝘢𝘴𝘦𝘥 (𝘺𝘦𝘵) 𝘣𝘶𝘵 𝘐 𝘩𝘦𝘢𝘳 𝘯𝘰𝘵𝘩𝘪𝘯𝘨 𝘣𝘶𝘵 𝘨𝘰𝘰𝘥 𝘵𝘩𝘪𝘯𝘨𝘴 𝘢𝘣𝘰𝘶𝘵 𝘵𝘩𝘦𝘴𝘦 𝘴𝘦𝘳𝘷𝘪𝘤𝘦𝘴.

Now excuse me as I buy another Udemy course that I'll get to... later 😉.",UNKNOWN,Brian,Jenney,20041,20041,78,12,3,0,0.004640487001646624,,2023-09-01 09:53:53,https://www.linkedin.com/feed/update/urn:li:activity:7103412836659286019
urn:li:activity:7103041420369817600,"Here's how I've seen most successful coding bootcamp grads operate:

- Makes coding and learning a routine
- Applies consistently and broadly
- Has 1 or 2 complex side projects
- Re-calibrates their approach when needed
- De-risks themselves by using strong language in their profile and resume
- Is practically optimistic that opportunity will present itself

Why most bootcamp grads fail:

- Relies on motivation instead of routine
- Applies to only junior roles
- Highlights their ""junior-ness""
- Tutorial
- Tutorial
- Tutorial
- Doesn’t get hired in 3 months
- 𝘎𝘪𝘷𝘦𝘴 𝘶𝘱",UNKNOWN,Brian,Jenney,12813,12813,102,11,3,0,0.009053305236868805,,2023-08-31 08:58:04,https://www.linkedin.com/feed/update/urn:li:activity:7103041420369817600
urn:li:activity:7102691470171656192,"I've worked with a lot of amazing junior developers so far in my career. 
 
Here’s what made them stand out: 
 
- 𝙩𝙝𝙚𝙮 𝙖𝙧𝙚 𝙥𝙧𝙤𝙖𝙘𝙩𝙞𝙫𝙚 - they seek out work to complete and pair with others without being asked. Oh, the pipeline blew up? They don't know the fix but are still investigating it. 
- 𝙩𝙝𝙚𝙮 𝙬𝙧𝙞𝙩𝙚 𝙩𝙝𝙤𝙧𝙤𝙪𝙜𝙝 𝙋𝙍𝙨 - screenshots and before and after pics for UI changes - videos for bonus points! The best PRs have taught me something about a feature or approach I was not familiar with. 
- 𝙩𝙝𝙚𝙮 𝙜𝙤𝙩 𝙜𝙪𝙩𝙨 - they volunteer to take on the tough stuff. They work on tickets just outside their comfort zone, get stuck, freak out and ask for help when needed 
- 𝙩𝙝𝙚𝙮 𝙖𝙧𝙚 𝙘𝙪𝙧𝙞𝙤𝙪𝙨 - how does HotPotatoService work? Why are there so many tests? Why are there none 😮? They assume good intentions and ask why decisions were made... often we learn we don't have a reason 😅 
 
Anything you've seen juniors on your team do that makes you go 😮?",UNKNOWN,Brian,Jenney,10568,10568,137,13,4,0,0.01457229371688115,,2023-08-30 10:33:06,https://www.linkedin.com/feed/update/urn:li:activity:7102691470171656192
urn:li:activity:7102311502409347072,"5 things the gym can teach you about coding: 
 
1. 𝗚𝗿𝗼𝘄𝘁𝗵 𝗺𝗶𝗻𝗱𝘀𝗲𝘁. Our body, like our mind, is not fixed or as limited as we believe. 
2. 𝗛𝘂𝗺𝗶𝗹𝗶𝘁𝘆. There is always somebody better than you. Learning a new programming language or lifting a larger weight will keep you humble. 
3. 𝗗𝗲𝗹𝗮𝘆𝗲𝗱 𝗴𝗿𝗮𝘁𝗶𝗳𝗶𝗰𝗮𝘁𝗶𝗼𝗻. If you stick with either endeavor you will see long-term benefits and fulfillment. 
4. 𝗡𝗼 𝗼𝗻𝗲 𝗶𝘀 𝗷𝘂𝗱𝗴𝗶𝗻𝗴 𝘆𝗼𝘂 (as much as you think). People are focused on themselves, not you. We’re all looking in the actual mirror or the proverbial mirror at ourselves. 
5. 𝗔𝗴𝗲 𝗹𝗶𝗺𝗶𝘁𝘀 𝗱𝗼𝗻’𝘁 𝗲𝘅𝗶𝘀𝘁. Despite what you think - the gym, like the software industry is not controlled by 20 somethings and as long as you’re breathing, it's a good time to get in shape or learn a new skill. 
 
For all you gym rat coders out there, what are some similarities I missed?",UNKNOWN,Brian,Jenney,10018,10018,135,37,5,0,0.017668197244959074,,2023-08-29 08:59:14,https://www.linkedin.com/feed/update/urn:li:activity:7102311502409347072
urn:li:activity:7100874625810640896,"You should be learning in public.

But let's be honest:

- You're nervous to create a post
- You feel like you don't know enough
- You're afraid of coming across like a cringe influencer with a blue background surrounding their big, bald head

Or something like that.

First off, you're over-thinking it and no one really cares that much about what you're going to post.

We're here to scroll and troll 😎.

BUT - there is 𝗮 𝘄𝗮𝘆 𝘁𝗼 𝗴𝗮𝗶𝗻 𝗳𝗼𝗹𝗹𝗼𝘄𝗲𝗿𝘀, 𝗺𝗮𝗸𝗲 𝗴𝗲𝗻𝘂𝗶𝗻𝗲 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝗻𝗱 𝗻𝗲𝘁𝘄𝗼𝗿𝗸 𝘄𝗶𝘁𝗵𝗼𝘂𝘁 𝗲𝘃𝗲𝗿 𝗽𝗼𝘀𝘁𝗶𝗻𝗴. Check out this video where I go over a strategy that has worked for me to make some really great connections, business deals and even some friendships on LinkedIn.",VIDEO,Brian,Jenney,10839,10839,125,16,3,0,0.013285358427899253,,2023-08-25 09:35:18,https://www.linkedin.com/feed/update/urn:li:activity:7100874625810640896
urn:li:activity:7100499507829735424,"17k followers and 1.5 million impressions on LinkedIn and I’ve barely had a “viral” post. 
 
Here are a few lessons I’ve learned along the way: 
 
- 𝗕𝗲 𝗰𝗼𝗻𝘀𝗶𝘀𝘁𝗲𝗻𝘁 - LinkedIn rewards it and your audience will reward you 
- Commenting on posts from larger accounts can grow your following and create connections you could never dream of 
- 𝗣𝗿𝗼𝗺𝗼𝘁𝗶𝗻𝗴 𝗼𝘁𝗵𝗲𝗿𝘀 𝗶𝘀 𝗮 𝗴𝗿𝗲𝗮𝘁 𝘄𝗮𝘆 𝘁𝗼 𝗽𝗿𝗼𝗺𝗼𝘁𝗲 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 
- 𝗣𝗲𝗼𝗽𝗹𝗲 𝗰𝗮𝗻 𝘀𝗺𝗲𝗹𝗹 𝗳𝗮𝗸𝗲𝘀 - don’t be one and write what you actually think 
- You’re smart but 𝗻𝗼 𝗼𝗻𝗲 𝘄𝗮𝗻𝘁𝘀 𝘁𝗼 𝗿𝗲𝗮𝗱 𝗮 𝗯𝗹𝗼𝗰𝗸 𝗼𝗳 𝘁𝗲𝘅𝘁 𝘄𝗶𝘁𝗵 𝗯𝗶𝗴 𝘄𝗼𝗿𝗱𝘀 - write at a 5th-grade level and don’t be afraid to use “bro-etry” If we wanted an essay we’d read Medium 
- 𝗙𝗶𝗴𝘂𝗿𝗲 𝗼𝘂𝘁 𝘄𝗵𝗼 𝘆𝗼𝘂𝗿 𝗮𝘂𝗱𝗶𝗲𝗻𝗰𝗲 𝗶𝘀 and write for them 
- Wrote a great post? Sweet, post it again a few weeks later - I guarantee most of your audience did not see it or already forgot about it 
- T𝗵𝗲 𝗼𝗽𝗲𝗻𝗶𝗻𝗴 𝘀𝗲𝗻𝘁𝗲𝗻𝗰𝗲 𝘄𝗶𝗹𝗹 𝗺𝗮𝗸𝗲 𝗼𝗿 𝗯𝗿𝗲𝗮𝗸 𝘁𝗵𝗲 𝗽𝗼𝘀𝘁 - start off with an interesting number or a hard stance which you can elaborate on further 
 
I think harvesting likes is a silly goal if you’re trying to land a job as a developer but for those of you who are trying to build a brand as an engineer for business, fun or whatever, I hope you find this helpful.",UNKNOWN,Brian,Jenney,6760,6760,91,25,0,0,0.017159763313609466,,2023-08-24 09:07:13,https://www.linkedin.com/feed/update/urn:li:activity:7100499507829735424
urn:li:activity:7099767231336652800,"How does it feel to be the worst developer on a team? 
 
I had the unpleasant experience of holding this title when I worked at a small startup several years ago. 
 
It sucked. I also had more technical growth in the short time I was there than at any other company I’ve worked since. 
 
You’ve probably heard the advice “If you’re the smartest person in the room, it’s time to leave the room.” 
 
Easier said than done. 
 
The guilt and anxiety I felt daily was difficult to deal with. I was confronted with my technical limitations and the realization that this wasn’t just all in my head. Everyone was better than me at writing code. 
 
I could barely keep up with the tasks I was assigned and relied on lots of pairing sessions to get my work done. 
 
The company was small - only 3 engineers. They were the kind of developers who gave speeches at conferences and wrote the libraries that other devs use in their daily work. 
 
I could either quit or at least attempt to keep up with the other devs and contribute to the best of my ability. 
 
I resolved to suck a little less each day. 
 
I asked the smarty-pants devs what books they suggested I read 
 
I audited my Javascript knowledge and wrote out what I knew I had to learn to contribute to discussions 
 
I enrolled in a course to learn DSA and comp sci fundamentals 
 
Someone made a joke about Djikstra once… who the hell is that? I would find out. 
 
I never became the 2nd worst developer at this company, but I grew my technical skills, confidence and threshold for failure which helped me get to senior at the next company. 
 
As uncomfortable as it was, I now see just how pivotal this experience was. 
 
So if you’re learning to code, or maybe you're on a new team and discovering just how little you know… good. Embrace the suck, expose your ignorance, identify your knowledge gaps, make a plan to fill them in and be prepared to learn.",UNKNOWN,Brian,Jenney,9396,9396,135,12,7,0,0.016389953171562367,,2023-08-22 08:19:15,https://www.linkedin.com/feed/update/urn:li:activity:7099767231336652800
urn:li:activity:7097952237255102464,"Let me break down your next ReactJS interview for you:

- Fetch some data from this API
- Display the data according to this mock up
- Add some user events

How you fail:

- Not understanding the basics of `useEffect`
- No keys in your list or using the index as a key
- Ignoring error handling
- Mutating state directly
- Coding silently like a 🤖 

How you study:

- Open up CodeSandbox or Codepen or Gitpod
- Use a placeholder API like Typicode or FakeStoreAPI
- Practice without the aid of intellisense or ChatGPT
- Time yourself
- Record yourself explaining the code as you write it… ya know, kinda like you do in an interview

If you recently had a React focused interview - what was yours like?",UNKNOWN,Brian,Jenney,20648,20648,253,35,17,0,0.014771406431615652,,2023-08-17 08:36:59,https://www.linkedin.com/feed/update/urn:li:activity:7097952237255102464
urn:li:activity:7097608051322494976,"Some of my most hated advice for junior developers or boot camp grads is to contribute to open source. 
 
𝗪𝗶𝗹𝗹 𝗶𝘁 𝗺𝗮𝗸𝗲 𝘆𝗼𝘂 𝘀𝘁𝗮𝗻𝗱 𝗼𝘂𝘁? 𝘔𝘢𝘺𝘣𝘦. (I think a lot of you overestimate just how involved most software developers are in the coding community. Twitter and LinkedIn are a bubble rife with the most passionate developers) 
 
𝗪𝗶𝗹𝗹 𝘆𝗼𝘂 𝗽𝘂𝗹𝗹 𝘆𝗼𝘂𝗿 𝗵𝗮𝗶𝗿 𝗼𝘂𝘁 𝘁𝗿𝘆𝗶𝗻𝗴 𝘁𝗼 𝗳𝗶𝗴𝘂𝗿𝗲 𝗼𝘂𝘁 𝗵𝗼𝘄 𝘁𝗼 𝗴𝗲𝘁 𝘆𝗼𝘂𝗿 𝗰𝗵𝗮𝗻𝗴𝗲 𝗺𝗲𝗿𝗴𝗲𝗱 𝘁𝗼 𝗮𝗻𝘆 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘁𝗵𝗮𝘁 𝘄𝗼𝘂𝗹𝗱 𝗮𝗰𝘁𝘂𝗮𝗹𝗹𝘆 𝗶𝗺𝗽𝗿𝗲𝘀𝘀 𝗽𝗲𝗼𝗽𝗹𝗲? Absolutely. 
 
𝗔𝗿𝗲 𝘁𝗵𝗲𝘆 𝘀𝘁𝗶𝗹𝗹 𝘄𝗼𝗿𝘁𝗵 𝗲𝘅𝗽𝗹𝗼𝗿𝗶𝗻𝗴? For sure. 
 
Open source is a beautiful thing. We stand on the shoulders of tech giants... for free. It's crazy that software like React, NextJS, Serverless and the millions of NPM packages you need to scaffold a simple app are available on the web 😅. 
 
That being said, it's not a great place for junior devs to start: 
 
- overwhelming complexity 
- a high bar for entry 
- lack of guidance 
 
Instead, try this 
 
- clone down a popular project 
- try to get it working locally 
- update a small feature 
- try and hit a debugger statement that you’ve added 
 
This gives you the benefit of exploring open source and what it’s like to interact with a production-grade codebase instead of fishing around the 1169 open issues only to fix a typo in the README 😅",UNKNOWN,Brian,Jenney,16004,16004,164,19,2,0,0.011559610097475631,,2023-08-16 09:38:57,https://www.linkedin.com/feed/update/urn:li:activity:7097608051322494976
urn:li:activity:7097247596838088705,"The difference between a junior and senior developer is NOT that the senior writes code without bugs. It's how they handle them.

In fact, a few weeks ago, I created a pretty embarrassing bug at work 😅. It wasn't my first time. It won't be my last.

Here are 3 ways you can tackle your next blow up like a freakin' pro.",ARTICLE,Brian,Jenney,4908,4908,44,4,1,0,0.009983700081499592,,2023-08-15 09:17:38,https://www.linkedin.com/feed/update/urn:li:activity:7097247596838088705
urn:li:activity:7096875632638271488,"You’re having trouble coming up with solutions to problems as a software developer because you’re reinventing the wheel. 
 
As a junior developer, there are zero problems you will encounter that have not been solved a dozen times over. There are tried and true approaches for that feature you’re working on. 
 
But you don’t know what you don’t know. 
 
Here’s where I’d start: 
 
- lookup meta-software patterns- the general design patterns that dominate the field 
- familiarize yourself with language-specific patterns - for JS it could be the module pattern 
- read up on framework patterns like presenter/container and HOCs 
 
You’ll begin to notice that much of the code you write either fits into a larger pattern or implements smaller patterns. You’ll be a more confident and efficient developer because of it.",UNKNOWN,Brian,Jenney,14702,14702,126,6,7,0,0.009454495986940552,,2023-08-14 08:37:09,https://www.linkedin.com/feed/update/urn:li:activity:7096875632638271488
urn:li:activity:7095796300020920322,"When you land the job, that’s the last thing you’ll need to know how to do is traverse binary trees in O(h). 
 
There will be bugs. 
 
There will also be network requests to debug. 
 
The junior-est way to go about investigating an issue on the server is to replicate the scenario on the front end to hit the server and repeat this process 100+ times until you figure out what’s going on. 
 
I’ve seen too many of you doing this 😅. 
 
Check out the method in this video that you can use for some ethical hacking and more efficient debugging of your own codebase.",VIDEO,Brian,Jenney,10506,10506,94,9,4,0,0.010184656386826575,,2023-08-11 09:02:15,https://www.linkedin.com/feed/update/urn:li:activity:7095796300020920322
urn:li:activity:7095441223385026560,"Ok, we’ve seen enough well-written code on this damn site. 
 
It's hard to know what good code is if you can't identify bad code. 
 
Below is some janky ass code for you to refactor. Here's the thing though - it does work with the expected arguments. Could it be improved? Hell yeah it can. 
 
I’m curious, what’s the most unforgivable mistake I’ve made here and how would you fix it?",IMAGE,Brian,Jenney,14442,14442,52,46,2,0,0.006924248719013987,,2023-08-10 09:38:11,https://www.linkedin.com/feed/update/urn:li:activity:7095441223385026560
urn:li:activity:7095063689199788033,"How do you get better at Javascript? 
 
Build stuff. 
 
Not specific enough? Try this: 
 
Here are the subjects I struggled with and how I learned them through practice: 
 
- 𝙋𝙧𝙤𝙢𝙞𝙨𝙚𝙨 - implement Promise.all from scratch 
- 𝘾𝙡𝙤𝙨𝙪𝙧𝙚 - create a function that returns another function that can only be called 1 time 
- 𝙩𝙝𝙞𝙨 - implement bind and call from scratch 
- 𝙍𝙚𝙘𝙪𝙧𝙨𝙞𝙤𝙣 - make a function that searches a deeply nested object for a value 
 
If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge.",UNKNOWN,Brian,Jenney,21230,21230,221,10,13,0,0.01149317004239284,,2023-08-09 08:33:53,https://www.linkedin.com/feed/update/urn:li:activity:7095063689199788033
urn:li:activity:7094339012525514752,"You know you need a good side project but you don’t know where to begin. 
 
As much as I want to build 1 of these 𝟱 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀, I just don't have time. So steal 'em. 
 
If you succeed - I'll take the credit. 
 
If you fail... don't mention me. 
 
𝗣𝗲𝗿𝘀𝗼𝗻𝗮𝗹𝗶𝘇𝗲𝗱 𝗷𝗼𝗯 𝗿𝗲𝗰𝗼𝗺𝗺𝗲𝗻𝗱𝗮𝘁𝗶𝗼𝗻𝘀: Web scraper that gathers some initial user information and explores a few sites like Craigslist, LinkedIn, Indeed and Monster for particular jobs which meet the user criteria and emails the user each morning with a list of jobs to apply for. 
 
𝗖𝗦𝗩 𝘁𝗼 𝗖𝗵𝗮𝗿𝘁: A user uploads a CSV file and some information about the columns which is used to create 1 of [x] charts. Pie chart, time series, bar and scatter plots. The charts can be exported as an SVG or image type to be used on a site or report. 
 
𝗠𝗲𝗮𝗹 𝗽𝗹𝗮𝗻𝗻𝗲𝗿: A user enters some information about their height, weight and lifestyle to get a custom meal plan and workout routine using OpenAI. Each week they get updates to their current plan based on progress and goals. 
 
𝗧𝗵𝗿𝗲𝗮𝗱𝘀 𝘀𝗰𝗵𝗲𝗱𝘂𝗹𝗲𝗿: This one can't be done... yet. Once Threads becomes web-based (and it will) users will want to schedule posts, gather stats on their posts and get ideas based on the most popular threads. There are already popular apps that do this for Twitter. I guarantee you will see a few million dollar businesses using this model. 
 
𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗲 𝗮 𝗯𝗼𝗿𝗶𝗻𝗴 𝗯𝘂𝘀𝗶𝗻𝗲𝘀𝘀: I worked for a startup that scraped the web for information about shipping containers and served it in an easy to read format. There are lots of industries still using notepads, excel sheets and email for mission-critical workflows. Find them and figure out what people would pay to automate.",UNKNOWN,Brian,Jenney,6778,6778,61,13,1,0,0.01106521097668929,,2023-08-07 08:34:46,https://www.linkedin.com/feed/update/urn:li:activity:7094339012525514752
urn:li:activity:7093274896373317633,"100.5% of coding is debugging. 
 
Or something like that. 
 
If you're working on Node/Express apps, I bet you're making the same mistakes I did while debugging: 
 
- using 128 console logs 
- slamming your API with requests 
- crying a little 
 
There's a better way and I'm surprised more developers are NOT using the method I share below. 
 
Hope you find it useful.",VIDEO,Brian,Jenney,8089,8089,89,7,4,0,0.012362467548522686,,2023-08-04 10:14:49,https://www.linkedin.com/feed/update/urn:li:activity:7093274896373317633
urn:li:activity:7092895548323598336,"Eat code sleep is not a process for progress. 
 
It’s a recipe for burnout. 
 
I’ve seen some of you trying out this method and I’ve yet to see it work. 
 
Hell, I tried it myself. 
 
It led to: 
 
- anxiety 
- less enthusiasm for my work 
- decreased thought quality 
 
Counter-intuitively, the more I tried to cram in material or optimize my schedule, the less progress I was making. 
 
It was frustrating. 
 
For me, having a non-negotiable workout routine forced me to detach from work. 
 
Few things can interrupt my workout besides a sick kid or a critical bug at work. 
 
This is where I clear my mind and come up with my best ideas. 
 
Getting in shape was honestly a side effect of this routine and perhaps the best “hack” I’ve discovered for keeping me sane in a fairly stressful occupation. 
 
If you want my workout/diet routine that took me from a fluffy, anxiety-ridden developer to a less fluffy, and slightly less anxiety-ridden developer just DM your email and I'll send it over 💪.",UNKNOWN,Brian,Jenney,2936,2936,76,14,3,0,0.03167574931880109,,2023-08-03 09:17:01,https://www.linkedin.com/feed/update/urn:li:activity:7092895548323598336
urn:li:activity:7092157126013292544,"Let’s clear up some of the dumb advice you’ve read on LinkedIn: 
 
- Titles don’t matter 
- Seniors need at least [x] years of experience 
- Seniors are the best coders on the team 
- Get experience and the titles will come 
 
𝗧𝗵𝗲𝘆’𝗿𝗲 𝗮𝗹𝗹 𝗿𝗶𝗴𝗵𝘁. 𝗔𝗻𝗱 𝘁𝗵𝗲𝘆’𝗿𝗲 𝗮𝗹𝗹 𝘁𝗲𝗿𝗿𝗶𝗯𝗹𝘆, 𝘁𝗲𝗿𝗿𝗶𝗯𝗹𝘆 𝘄𝗿𝗼𝗻𝗴. 
 
The Senior Developer title can be wildly different at each company. You still need to chase it. 
 
There’s a bit of an unhealthy obsession developers have (me included) with getting to Senior but there is a good reason. 
 
𝘖𝘯 𝘰𝘯𝘦 𝘦𝘯𝘥 𝘰𝘧 𝘵𝘩𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘴𝘱𝘦𝘤𝘵𝘳𝘶𝘮 𝘪𝘴 𝘫𝘶𝘯𝘪𝘰𝘳. 
 
They are expendable for the most part. Cheap and plentiful and need lots of guidance. They are an important investment and also a bit of a gamble. 
 
𝘖𝘯 𝘵𝘩𝘦 𝘰𝘵𝘩𝘦𝘳 𝘦𝘯𝘥 𝘰𝘧 𝘵𝘩𝘦 𝘴𝘱𝘦𝘤𝘵𝘳𝘶𝘮 𝘪𝘴 𝘵𝘩𝘦 𝘴𝘦𝘯𝘪𝘰𝘳. 
 
They can make or break your team through their influence on the codebase, team and processes. They squish the really tough bugs. They make sure the team doesn’t over-commit or refactor unnecessarily. They’ve made costly mistakes and understand how to avoid them. 
 
I know you’re in a rush but you can’t cheat time in the saddle. 
 
You’ll need to collect enough experiences, errors and tacit knowledge to make it to the next level. Take on some high-profile features, work with people outside of the eng department and of course... understand closure 😅.",UNKNOWN,Brian,Jenney,8557,8557,57,9,0,0,0.007712983522262475,,2023-08-01 08:07:13,https://www.linkedin.com/feed/update/urn:li:activity:7092157126013292544
urn:li:activity:7091797921343406080,"LinkedIn or Twitter fame is a silly goal if you’re building in public to land a role. 
 
Your real goal is to demonstrate technical depth and showcase your work. 
 
You want the right eyes on your profile. You don’t want sympathy for the 1000th rejection you’ve had (or maybe you do, I dunno actually). 
 
Instead of fishing for likes, try writing about: 
 
- a hairy bug you squished 
- your deployment strategy 
- how you’re handling QA 
- TDD? TaDD(testing after development is done)? Or no tests? 
- your take on React Server Components 
 
If you’re feeling brave, post a code snippet, seek feedback and watch how anyone who ever wrote a line of code becomes an expert on how you can optimize a for loop 😅",UNKNOWN,Brian,Jenney,6933,6933,105,20,2,0,0.018318188374441078,,2023-07-31 08:15:41,https://www.linkedin.com/feed/update/urn:li:activity:7091797921343406080
urn:li:activity:7090361812239462400,"I got called a cringe tech influencer earlier this year.

It's ok. I've been called worse.

10 years ago my life was unrecognizable. I was lost in addiction and living a life that slowly catching up to me in the worst ways possible.

I'm not exaggerating when I say that I was headed for death or prison.

One intervention later and I started getting things together. 

- I got a normal job. 
- I read books. 
- I ate a sh*t ton of candy. 
- I started working out after gaining weight from all the candy.

Then I started coding to pass the time.

𝗖𝗼𝗱𝗶𝗻𝗴 𝗱𝗶𝗱𝗻'𝘁 𝗰𝗵𝗮𝗻𝗴𝗲 𝗺𝘆 𝗹𝗶𝗳𝗲. 𝗚𝗲𝘁𝘁𝗶𝗻𝗴 𝘀𝗼𝗯𝗲𝗿 𝗮𝗻𝗱 𝘄𝗼𝗿𝗸𝗶𝗻𝗴 𝗼𝘂𝘁 𝗱𝗶𝗱. 

The discipline from those efforts did give me the tools to learn to code at 30 with zero prior programming experience. I didn't use a computer for most of my adult life believe it or not. I'm not that old either (I think at least...)

Anyways, I don't like sharing that part of my past. It's embarrassing, uncomfortable and seems so far away that it feels surreal.

I share it every once in a while because I know that some of you may be struggling with your own demons or think people ""like you"" just aren't cut out for whatever goal is in your head.

Don't listen to that voice.

I linked up with one of your favorite influencers on LinkedIn Harley Ferguson through the power of networking (I follow my own advice 😉) who invited me to his podcast. We chat about coding, getting into tech and a little bit about my past. Check it out below.

https://lnkd.in/gxAUf5T7",IMAGE,Brian,Jenney,9353,9353,171,31,1,0,0.021704266010905592,,2023-07-27 09:53:22,https://www.linkedin.com/feed/update/urn:li:activity:7090361812239462400
urn:li:activity:7089990264987009024,"Front-end development stopped being easy a while ago. 
 
It’s a lot less: 
 
- Move this a few px to the right. 
- Make this button a little greener. 
- Sprinkle a little JS to submit this form. 
- Translate this design to HTML and CSS. 
 
It’s a lot more: 
 
- Decrease the initial page load! 
- Oh, you know JS? Can you help debug this lambda function written in NodeJS? 
- SSG vs CSR vs SSR. 
- Who’s on-call to investigate the code pipeline being broken?! 
- Move this a few px to the right 😉.",UNKNOWN,Brian,Jenney,13953,13953,225,26,7,0,0.01849064717265104,,2023-07-26 08:50:46,https://www.linkedin.com/feed/update/urn:li:activity:7089990264987009024
urn:li:activity:7089627876840378368,"5 Biggest mistakes of my coding career? 
 
1. Not learning the fundamentals before diving into frameworks 
2. Refusing to admit when I didn’t know something 
3. Only taking on tasks I knew I could finish 
4. Not understanding how engineering relates to business goals 
5. Staying silent 🤐 
 
That last one hurt me the most. 
 
I thought I was playing it safe by taking on easy tickets. I nodded my head during estimation sessions and gave bland status updates. I never shared my ideas during meetings. 
  
I just wanted to blend in.  
 
It was the most dangerous thing I could’ve done. 
 
They say the tallest blade of grass is the first to get cut. 
 
Yeah, I guess. It’s also the one growing the fastest. 
 
Companies need average developers more than they’d like to admit. But, if career trajectory and increased hire-ability is your goal, then playing it safe is your greatest threat.",UNKNOWN,Brian,Jenney,6382,6382,110,17,5,0,0.020683171419617674,,2023-07-25 09:14:54,https://www.linkedin.com/feed/update/urn:li:activity:7089627876840378368
urn:li:activity:7089265491260637187,"A few controversial things I believe about careers in software development: 
 
𝟭. 𝗕𝗲𝗶𝗻𝗴 𝗮𝘃𝗲𝗿𝗮𝗴𝗲 𝗶𝘀 𝗴𝗼𝗼𝗱 𝗲𝗻𝗼𝘂𝗴𝗵 
 
I’m not saying this will make you rich or get promoted. 
 
I’m just saying you don't HAVE to climb the engineering ladder. Plenty of developers are very happy doing their work, going home and not touching their laptops for the weekend. 
 
𝟮. 𝗔𝗹𝘄𝗮𝘆𝘀 𝗯𝗲 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝗶𝗻𝗴 
 
Stability is a myth. 
 
- You can be talented. 
- Your company can be profitable. 
- You can still be let go. Nothing personal. 
 
Letting your skills get stagnant is a fast track to becoming obsolete in a fast-moving industry. 
 
𝟯. 𝗬𝗼𝘂𝗿 𝗱𝗿𝗲𝗮𝗺 𝗰𝗼𝗺𝗽𝗮𝗻𝘆 𝗱𝗼𝗲𝘀𝗻'𝘁 𝗲𝘅𝗶𝘀𝘁 
 
Your dream team might. When you say dream company, you (probably) mean: 
 
- High salary 
- Autonomy 
- Supportive team members 
- Learning opportunities 
 
Your manager and team have a lot more to do with your individual experience than the larger company. 
 
𝟰. 𝗬𝗼𝘂𝗿 𝗽𝗲𝗼𝗽𝗹𝗲 𝘀𝗸𝗶𝗹𝗹𝘀 𝘄𝗶𝗹𝗹 𝗯𝗲 𝗺𝗼𝗿𝗲 𝗶𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 𝘁𝗵𝗮𝗻 𝘆𝗼𝘂𝗿 𝘁𝗲𝗰𝗵𝗻𝗶𝗰𝗮𝗹 𝘀𝗸𝗶𝗹𝗹𝘀… 𝘀𝗼𝗼𝗻 
 
Knowing how to speak, write and influence are the skills that make developers indispensable. And high paid. 
 
Writing code becomes a given when you move past junior. Chat GPT can do a decent job of writing code and solving difficult bugs. 
 
You're a human. Lean into it.",UNKNOWN,Brian,Jenney,25150,25150,183,16,5,0,0.008111332007952287,,2023-07-24 09:11:40,https://www.linkedin.com/feed/update/urn:li:activity:7089265491260637187
urn:li:activity:7088180633419591681,"Ok, that's enough coding for you.

Yes, learn closure, bind, call, apply, promises and whatever new framework just replaced the last new framework.

(𝘨𝘰𝘰𝘨𝘭𝘦 𝘯𝘰𝘵 𝘢𝘯𝘰𝘵𝘩𝘦𝘳 𝘤𝘰𝘶𝘳𝘴𝘦 𝘪𝘧 𝘺𝘰𝘶 𝘸𝘢𝘯𝘯𝘢 𝘭𝘦𝘢𝘳𝘯 𝘵𝘩𝘢𝘵 𝘴𝘵𝘶𝘧𝘧 😉)

But before you do all that, please learn how to use your code editor. Your future team mates will be grateful you did. Trust me.

This article will take you through some of my favorite shortcuts for VS Code to make to you more efficient with your editor, save keystrokes and maybe save your life... or at least make you look like less of a n00b 😉.",ARTICLE,Brian,Jenney,6840,6840,54,11,6,0,0.010380116959064328,,2023-07-21 09:38:38,https://www.linkedin.com/feed/update/urn:li:activity:7088180633419591681
urn:li:activity:7087822828309270528,"A couple of developers I mentor got hired (𝘺𝘦𝘴 𝘥𝘦𝘷𝘴 𝘢𝘳𝘦 𝘴𝘵𝘪𝘭𝘭 𝘨𝘦𝘵𝘵𝘪𝘯𝘨 𝘩𝘪𝘳𝘦𝘥 𝘥𝘦𝘴𝘱𝘪𝘵𝘦 𝘢𝘭𝘭 𝘵𝘩𝘦 𝘴𝘵𝘶𝘱𝘪𝘥 𝘧𝘦𝘢𝘳-𝘮𝘰𝘯𝘨𝘦𝘳𝘪𝘯𝘨 𝘰𝘯𝘭𝘪𝘯𝘦). Now the real work begins: 
 
- Exploring a new codebase 
- Finding areas to make an impact 
- Learning the engineering culture 
- Using git… but like, for real this time 
- Having good 1 on 1s 
- Peer reviews 
- Estimations 
 
I now see that the period after the interview and offer is when developers need the most support.  
 
The job search is stressful. It's also the shortest stage of the developer life cycle.  
 
I'm going to release a developer survival guide in the next 6 weeks. Videos, documents and challenges to prepare you for the technical and non-technical parts of the job. I'm excited to put this together. It's the stuff I learned through trial and error over the years. It's GOING to make you a better developer and shorten your path to the next stage of your career. 
 
If you were recently hired or a manager who recently hired someone, what are some areas you think I should cover in my survival guide?",UNKNOWN,Brian,Jenney,9091,9091,135,10,3,0,0.016279837201627984,,2023-07-20 09:32:09,https://www.linkedin.com/feed/update/urn:li:activity:7087822828309270528
urn:li:activity:7087453547742519299,"I met a developer who created a full-stack app that worked pretty well. It even looked nice. 
 
But when I asked how it worked… 
 
Oof. 
 
𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. Too many developers fall into the trap of looking at a tutorial, following along with the instructor and typing what they type. 
 
𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app.  
 
𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery. 
 
It’s an enticing trap and it may even fool someone into hiring you. 
 
I know I'm not the only one to go through a tutorial, turn it off, open the code editor and realize I have no f*cking clue how to replicate what I just created. 😬 
 
I'm no tutorial hater though. They have their time and place and I'll buy several more this year but I've learned the most when I take the training wheels off, get stuck and build something from scratch. It's the same approach I use with developers I mentor. 
 
I made janky apps and sites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack. 
 
Every side project doesn’t need to be a masterpiece. Leverage them to learn what you won’t at work or what you would like to work on next. 
 
𝗜𝗳 𝘆𝗼𝘂 𝘄𝗮𝗻𝘁 𝗺𝘆 𝘀𝘁𝗲𝗽 𝗯𝘆 𝘀𝘁𝗲𝗽 𝗴𝘂𝗶𝗱𝗲 𝗼𝗻 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 𝗮 𝘀𝗼𝗹𝗶𝗱 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗴𝗿𝗮𝗯 𝗶𝘁 𝗵𝗲𝗿𝗲: 
 
https://lnkd.in/gQ94kA97 
 
𝗧𝗶𝗿𝗲𝗱 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹𝘀? 𝗖𝗵𝗲𝗰𝗸 𝘁𝗵𝗶𝘀 𝗼𝘂𝘁: 
 
https://lnkd.in/ezpqmVbU",UNKNOWN,Brian,Jenney,23821,23821,182,25,9,0,0.009067629402627933,,2023-07-19 08:46:02,https://www.linkedin.com/feed/update/urn:li:activity:7087453547742519299
urn:li:activity:7086728770186854401,"The bootcamp is over. 
 
You wonder, “what now?” 
 
Do you create a side project? Pound LeetCode? Mass apply? Learn in public? Some bandicoot said you should just switch to CyberSec or DevOps. So many options. 
 
From speaking with a few hundred of you - I know that many of you just need direction. 
 
Here are the 2 paths I would explore if I was a new grad: 
 
𝙁𝙤𝙧 𝙩𝙚𝙘𝙝𝙣𝙞𝙘𝙖𝙡 𝙨𝙠𝙞𝙡𝙡 
 
𝗧𝗵𝗲 𝗗𝗦𝗔 𝗽𝗮𝘁𝗵 - go all in on DSA. Just understand you may limit the types of interviews you can “win” with this path. That’s OK. Many tech companies use DSA challenges and will continue to do so.  
 
Don’t just blindly tackle LC problems though: learn the structures, patterns and common approaches and practice with another human. 
 
𝗧𝗵𝗲 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝗽𝗮𝘁𝗵 - create a complex side project. What’s “complex”? I typically think of something you could potentially sell.  
 
If you’re unsure of where to start, look up APIs and build something around that API. Pick at least 1 or 2 new hot technologies to use that your education skipped. Typescript, NextJS, AWS and unit testing would be my top choices. 
 
𝙁𝙤𝙧 𝙜𝙚𝙩𝙩𝙞𝙣𝙜 𝙝𝙞𝙧𝙚𝙙 
 
𝗟𝗲𝗮𝗿𝗻 𝗶𝗻 𝗣𝘂𝗯𝗹𝗶𝗰 - use what you are learning for content and remember who your audience is. You want to create connections with software engineers and hiring managers so post the challenges you are facing, post some code for feedback and get into the weeds.  
 
You’re not posting for likes - you’re posting for the right kind of engagement from people in tech who can offer help, targeted advice or maybe a job. 
 
𝗠𝗮𝘀𝘀 𝗮𝗽𝗽𝗹𝘆 - this works and I don’t care who says differently. Don’t JUST mass apply, however. Try a few resumes to see which one works. If you get no hits after 100 attempts, maybe hire a resume writer.  
 
Try multiple platforms including LI and those other older sites like Craigslist (yeah, they have a section for software). 
 
The only wrong path is the one you can’t commit to. Pick a strategy, stick with it, find what works and do more of that.",UNKNOWN,Brian,Jenney,14300,14300,144,14,7,0,0.011538461538461539,,2023-07-17 08:47:05,https://www.linkedin.com/feed/update/urn:li:activity:7086728770186854401
urn:li:activity:7085620410423132162,"A few areas where most devs struggle after they are hired: 
 
1. Code quality 
2. Git 
3. Estimations 
 
It's not all about getting your code to run. 
 
Like it or not, you will be judged on whether or not you delivered working code on time. 
 
I'm not a fan of estimates. Humans naturally suck at them. When I mentor developers who were recently hired, I show them this tactic I've used to 𝗿𝗲𝘁𝗿𝗼𝗮𝗰𝘁𝗶𝘃𝗲𝗹𝘆 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗲 their work and suck a bit less.  
 
Hope you find it useful.",VIDEO,Brian,Jenney,13363,13363,121,17,9,0,0.011000523834468309,,2023-07-14 07:08:36,https://www.linkedin.com/feed/update/urn:li:activity:7085620410423132162
urn:li:activity:7084916877600165888,"Don’t be fooled that I know a ton because I’m an engineering manager. I’m just faking it better than you. 
 
I talk a lot about the mistakes I’ve made in the past but I’m still learning and failing 10 years later. 
 
I may have been a Senior Software Engineer but when I became Engineering Manager I became junior again. 
 
My biggest mistakes in the last 12 months? 
 
- Not pulling in other departments and stakeholders before building a solution - which led to 𝗯𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝘁𝗵𝗲 𝘄𝗿𝗼𝗻𝗴 𝘀𝗼𝗹𝘂𝘁𝗶𝗼𝗻 and lots of hours of work to fix it. 
- 𝗪𝗿𝗶𝘁𝗶𝗻𝗴 𝗺𝗼𝗿𝗲 𝗰𝗼𝗱𝗲 𝘁𝗵𝗮𝗻 𝗜 𝘀𝗵𝗼𝘂𝗹𝗱 𝗵𝗮𝘃𝗲 because it’s where I feel comfortable. That time should have been spent improving processes for the team. 
- 𝗧𝗵𝗶𝗻𝗸𝗶𝗻𝗴 𝗜 𝘄𝗮𝘀 𝗮𝗯𝗼𝘃𝗲 𝗽𝗼𝗹𝗶𝘁𝗶𝗰𝘀. 
 
𝙏𝙝𝙖𝙩 𝙡𝙖𝙨𝙩 𝙤𝙣𝙚 𝙞𝙨 𝙬𝙝𝙚𝙧𝙚 𝙄 𝙨𝙚𝙚 𝙖 𝙡𝙤𝙩 𝙤𝙛 𝙙𝙚𝙫𝙚𝙡𝙤𝙥𝙚𝙧𝙨 𝙛𝙖𝙞𝙡.  
 
“Politics” is really an umbrella term for anything outside of technical work but it’s incredibly important. Building relationships, giving presentations and creating visibility for my team are areas where I’ve made efforts to improve. I have no clue what the hell I’m doing sometimes, but I’m starting to figure it out. 
 
My biggest takeaways over the last 12 months? 
 
- 𝗔𝘀𝗸 𝗳𝗼𝗿 𝗵𝗲𝗹𝗽 𝗺𝗼𝗿𝗲 𝗼𝗳𝘁𝗲𝗻 and don’t assume intentions or motivations 
- 𝗣𝗿𝗼𝗺𝗼𝘁𝗲 𝗼𝘁𝗵𝗲𝗿𝘀 𝘁𝗼 𝗽𝗿𝗼𝗺𝗼𝘁𝗲 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳. Giving public thanks and shining the spotlight on my team members creates visibility without bragging (also - sometimes you gotta brag) 
- 𝗙𝗶𝘅 𝗽𝗿𝗼𝗰𝗲𝘀𝘀𝗲𝘀, don’t work around them 
- 𝗦𝗼𝗹𝘃𝗲 𝗽𝗿𝗼𝗯𝗹𝗲𝗺𝘀 𝘁𝗵𝗮𝘁 𝗮𝗰𝘁𝘂𝗮𝗹𝗹𝘆 𝗻𝗲𝗲𝗱 𝗳𝗶𝘅𝗶𝗻𝗴 not (just) because it seems fun or interesting 
 
We're all curious - what's a mistake you've made recently and how can others avoid it?",UNKNOWN,Brian,Jenney,6922,6922,95,10,0,0,0.015169026292978907,,2023-07-12 09:30:12,https://www.linkedin.com/feed/update/urn:li:activity:7084916877600165888
urn:li:activity:7084554473120911360,"Create React App is dead. NextJS is king. 
 
This is not a trivial change. 
 
NextJS introduces an entirely new paradigm and is full stack first. 
 
Let me introduce you to a host of new acronyms you will now need to be familiar with: 
 
- RSC 
- SSR 
- ISR 
- SSG 
- XPF 
 
𝘐 𝘮𝘢𝘥𝘦 𝘰𝘯𝘦 𝘰𝘧 𝘵𝘩𝘰𝘴𝘦 𝘶𝘱 😮. 
 
As a full-stack JS developer, I like many of the things about NextJS like page-based routing, API routes, edge runtime and SEO friendliness. 
 
Excellent docs and high adoption means you won’t need to scramble to find answers to questions. 
 
Chat-GPT will be much less useful, however. NextJS 13 was released recently and as you may know, Chat-Gippity only knows its stuff up to 2021. 
 
Here’s what I’m doing to make sure I don’t fall too far behind: 
 
- Adding more challenges to my Not Another Course challenges (link in profile) that focus on NextJS 
- Watching YouTubers like Theo Browne go over complex concepts 
- Reading the NextJS docs 
- Building sh*t 
 
If there’s one thing the JS community likes more than new frameworks, it’s drama 😅. If you’re using NextJS 13 what do you love or hate?",UNKNOWN,Brian,Jenney,18080,18080,180,57,5,0,0.01338495575221239,,2023-07-11 09:16:03,https://www.linkedin.com/feed/update/urn:li:activity:7084554473120911360
urn:li:activity:7084192059363885056,"Congratulations! You landed your first software engineering role. 
 
Now an entirely new and much longer game begins. 
 
So where should you spend your focus now? 
 
I know several developers who were recently hired. Some from my own Not Another Course community and others from the 15-minute chats I do (link in profile). 
 
𝗛𝗲𝗿𝗲’𝘀 𝘄𝗵𝗮𝘁 𝗜 𝘄𝗼𝘂𝗹𝗱 𝗱𝗼 𝗶𝗳 𝗜 𝘄𝗲𝗿𝗲 𝘁𝗵𝗲𝗺: 
 
- learn the code deployment process 
- ask to shadow the on-call engineer 
- read through previous code reviews from different developers to understand their code and feedback styles 
- create my own 30-day plan and have a goal to release code to production 
- understand the testing strategy (QA, unit tests or some combination?) 
- ask someone to help me navigate the observability tools 
- enjoy the ride 😎 
 
If you were recently hired, what’s one thing you would suggest to incoming developers?",UNKNOWN,Brian,Jenney,9335,9335,101,16,1,0,0.012640599892876272,,2023-07-10 08:57:01,https://www.linkedin.com/feed/update/urn:li:activity:7084192059363885056
urn:li:activity:7083109417751121920,"Unit tests are a waste of time.

Instead of taking minutes to write a test you can just:

- write your code
- manually replicate all the scenarios you want to test
- pray for the best and have your QA team ensure it all works

Now that it works, don't touch it! 😅

𝗪𝗵𝗲𝗻 𝗱𝗼𝗻𝗲 𝗰𝗼𝗿𝗿𝗲𝗰𝘁𝗹𝘆:

- tests enable refactoring with confidence
- confirm edge cases
- document the ACTUAL functionality (I know your docs suck) 🤫

Oddly enough, most bootcamps skip any mention of unit testing even though most dev teams write loads of tests.

Follow along with the video below to write your first unit test with Jest and learn the basics of testing.",VIDEO,Brian,Jenney,13981,13981,102,11,4,0,0.008368500107288464,,2023-07-07 09:41:55,https://www.linkedin.com/feed/update/urn:li:activity:7083109417751121920
urn:li:activity:7082742507645648896,"Top 6 services I used to broaden my skills as a software engineer: 
 
1. AlgoExpert/FrontEndExpert - finally someone made a solid offering for the JS and ReactJS interview with practical exercises 
 
2. CodeCrafters - I like this site so much. You build complex software that passes tests to see if it works. Addictive and inspired my own program (link in profile of course). 
 
3. Kindle - I read books from smarter developers. I won’t give you a listicle here, there are plenty out there already. 
 
4. Plato - when I became a manager I was overwhelmed. I needed mentorship and they provided some of the best I could’ve asked for. 
 
5. ByteByteGo - system design is where it’s at. As coding can increasingly be handled by AI tools, it’s more important than ever to understand the bigger picture. 
 
6. JoinTaro - there aren’t a lot of resources out there for mid and senior-level devs. Taro fills in the gap here with practical career advice that I steal from time to time 🤫. 
 
No one paid me to write this. I just use these tools and think they’re the bee's knees.  
 
Use em. Or don’t. Whatever. 
 
Anything out there I missed?",UNKNOWN,Brian,Jenney,15529,15529,148,22,4,0,0.011204842552643441,,2023-07-06 09:31:55,https://www.linkedin.com/feed/update/urn:li:activity:7082742507645648896
urn:li:activity:7082372599736893441,"Junior dev move 101: 
 
Wasting hours solving a problem a co-worker could’ve helped you figure out in minutes. 
 
You are ultimately judged on the work you complete, not your ability to slog through problems in solitude. When you bump your head against your technical depth, acknowledge it and ask for help. 
 
But for Jeebus' sake please don’t just say “I can’t figure out [x]” 
 
Try this: 
 
- I’m having an issue with [𝘵𝘩𝘪𝘴 𝘴𝘱𝘦𝘤𝘪𝘧𝘪𝘤 𝘱𝘳𝘰𝘣𝘭𝘦𝘮] 
- I’ve tried [𝘺] but it’s not working in the way I expect which is [𝘵𝘩𝘪𝘴 𝘸𝘢𝘺] 
- [𝘔𝘢𝘺𝘣𝘦 𝘢𝘥𝘥 𝘢 𝘴𝘤𝘳𝘦𝘦𝘯𝘴𝘩𝘰𝘵 𝘰𝘳 𝘥𝘰𝘤𝘶𝘮𝘦𝘯𝘵𝘢𝘵𝘪𝘰𝘯] 
- Is anyone available to take a look with me sometime today or point me in the right direction? 
 
Don’t let your ego get in the way of progress.",UNKNOWN,Brian,Jenney,12358,12358,207,21,1,0,0.01853050655445865,,2023-07-05 08:25:26,https://www.linkedin.com/feed/update/urn:li:activity:7082372599736893441
urn:li:activity:7080555976503808000,"Are you really a front end developer?

Front end roughly translates to ""JS developer"" on many teams. This means you will be working on anything JS-related including backend services written with NodeJS.

Debugging front end apps is trivial. Add a 𝚍𝚎𝚋𝚞𝚐𝚐𝚎𝚛 statement in the code and you can pause execution in the browser.

Node/Express apps aren't so simple.

There is a little more tooling to set up within VS Code to avoid using 108 console logs that I'll show you here.

A much smarter developer showed me this trick years ago and it's been a life-saver when trying to debug critical incidents.",VIDEO,Brian,Jenney,4432,4432,159,16,5,0,0.04061371841155235,,2023-06-30 08:35:17,https://www.linkedin.com/feed/update/urn:li:activity:7080555976503808000
urn:li:activity:7079843404561465344,"As a junior developer, your problems are painfully common. 

That doesn't make them any less valid. 

After over 350 phone calls with developers from around the world I have some sympathy and more importantly, some 𝘀𝗼𝗹𝘂𝘁𝗶𝗼𝗻𝘀 𝗳𝗼𝗿 𝘁𝗵𝗲 𝘁𝗼𝗽 𝟯 𝗶𝘀𝘀𝘂𝗲𝘀 𝘆𝗼𝘂'𝗿𝗲 𝗳𝗮𝗰𝗶𝗻𝗴.

Resources and links to docs included. 😎",ARTICLE,Brian,Jenney,4866,4866,59,4,2,0,0.013357994245787094,,2023-06-28 08:30:37,https://www.linkedin.com/feed/update/urn:li:activity:7079843404561465344
urn:li:activity:7079473479372156929,"Shocking and not so shocking takeaways from the 2023 Stack Overflow Developer Survey 
 
1. 𝗝𝗮𝘃𝗮𝘀𝗰𝗿𝗶𝗽𝘁 𝗶𝘀 𝘁𝗵𝗲 𝗺𝗼𝘀𝘁 𝗽𝗼𝗽𝘂𝗹𝗮𝗿 programming language - take that haters 
2. 𝗘𝘃𝗲𝗿𝘆𝗼𝗻𝗲 𝘂𝘀𝗲𝘀 𝗩𝗦 𝗖𝗼𝗱𝗲 - learn it like a pro. 
3. 𝗡𝗲𝘅𝘁𝗝𝗦 𝘄𝗶𝗹𝗹 𝘀𝘂𝗿𝗽𝗮𝘀𝘀 𝗔𝗻𝗴𝘂𝗹𝗮𝗿 𝗶𝗻 𝗽𝗼𝗽𝘂𝗹𝗮𝗿𝗶𝘁𝘆. I’d bet the house on learning it. Same with Typescript. 
4. Bootcamps love MERN - 𝗽𝗿𝗼𝗳𝗲𝘀𝘀𝗶𝗼𝗻𝗮𝗹𝘀 𝗹𝗼𝘃𝗲 𝗦𝗘𝗥𝗡. There’s never been a better time to learn SQL with offerings like Supabase that make it too easy to start. 
5. 𝗠𝗼𝘀𝘁 𝗱𝗲𝘃𝘀 𝗮𝗿𝗲 𝗙𝗦. You probably should be too... more on that later. 
 
Lastly, don't let a survey from a bunch of SO power users dictate your career path but ignore some of these trends at your own risk 😅.",UNKNOWN,Brian,Jenney,24619,24619,218,24,8,0,0.010154758519842398,,2023-06-27 08:51:11,https://www.linkedin.com/feed/update/urn:li:activity:7079473479372156929
urn:li:activity:7079111095717621763,"You've applied to every company in the Tri-State area. 
 
𝙉𝙤 𝙤𝙣𝙚 𝙞𝙨 𝙝𝙞𝙧𝙞𝙣𝙜. 
 
𝙏𝙝𝙚 𝙢𝙖𝙧𝙠𝙚𝙩 𝙞𝙨 𝙨𝙖𝙩𝙪𝙧𝙖𝙩𝙚𝙙. 
 
𝙔𝙤𝙪 𝙨𝙝𝙤𝙪𝙡𝙙 𝙟𝙪𝙨𝙩 𝙡𝙚𝙖𝙧𝙣 [𝙨𝙤𝙢𝙚 𝙣𝙚𝙬 𝙩𝙚𝙘𝙝𝙣𝙤𝙡𝙤𝙜𝙮]  
 
I've heard some version of all these frustrations for nearly 10 years. In fact, the ONLY time I stopped hearing these phrases was during the pandemic hiring spree. 
 
𝗦𝗼𝗺𝗲 𝗵𝗮𝗿𝘀𝗵 𝘁𝗿𝘂𝘁𝗵𝘀: 
 
- Mass applying does work - I don't care what influencer tells you differently 
- Networking works too 
- Luck is a factor no one wants to admit 
- You can control your skills - not the timeline to get hired 
 
𝗦𝗼𝗺𝗲 𝘀𝘁𝘂𝗳𝗳 𝘆𝗼𝘂 𝘀𝗵𝗼𝘂𝗹𝗱 𝗳𝗶𝘅 𝗾𝘂𝗶𝗰𝗸𝗹𝘆: 
 
- Get 500 connections on LinkedIn to be more discoverable 
- Remove any mention of junior/aspiring/student from your profiles 
- Don't apply for only junior roles - let the market decide 
- Use strong language on your resume to stand out (𝙬𝙝𝙖𝙩 𝙮𝙤𝙪 𝙗𝙪𝙞𝙡𝙩, 𝙮𝙤𝙪𝙧 𝙧𝙤𝙡𝙚 𝙖𝙣𝙙 𝙬𝙝𝙖𝙩 𝙬𝙖𝙨 𝙩𝙝𝙚 𝙗𝙚𝙣𝙚𝙛𝙞𝙩) 
- Check your portfolio site in mobile view and make sure it looks decent 😅 
 
If you were recently hired - what worked for you?",UNKNOWN,Brian,Jenney,9752,9752,123,23,5,0,0.015484003281378179,,2023-06-26 09:26:08,https://www.linkedin.com/feed/update/urn:li:activity:7079111095717621763
urn:li:activity:7078016351084163072,"Do I actually think you'll get a dynamic programming question at your next interview?

I sure in the hell hope not 😅

If you do - I'll bet you a bucket of donuts it'll be something like:

- refactor fibonacci to use DP
- find the maximum/minimum sum in an array
- find the number of paths in a maze

Check out this bandicoot below as he explains an approach to a common DP problem 👇",VIDEO,Brian,Jenney,1299,1299,28,5,0,0,0.025404157043879907,,2023-06-23 08:17:48,https://www.linkedin.com/feed/update/urn:li:activity:7078016351084163072
urn:li:activity:7077306686197088257,"At some point, we told all new developers they had to become mini LinkedIn influencers. 
 
I disagree. 
 
Kinda. 
 
A few weeks ago I invited a former co-worker to speak to the Not Another Course community. She’s an amazing developer who I knew could offer some insight and practical advice for developers at the early stages of their careers. 
 
I was shocked to learn that she ended up working on our team from a post that caught the attention of our former VP. This led to an interview that she crushed. 
 
A mentee of mine had an even wilder story: 
 
He follows a popular YouTuber who he reached out to that ended up referring him for a role where he currently works. 
 
He hadn’t even graduated from his boot camp yet. 
 
These stories aren’t typical. 
 
They also can’t be ignored. 
 
Networking and learning in public work, despite my own biases. 
 
Do you know what else works?  
 
- Never writing a word on LinkedIn. 
- Making connections with people through comments on their posts. 
- Mass applying. 
- Going on Facebook and asking your high school friends and family if they know anyone who's hiring 
 
Pick a strategy you can actually follow and then do it. They all (can) work.",UNKNOWN,Brian,Jenney,4777,4777,70,13,1,0,0.017584257902449236,,2023-06-21 08:39:21,https://www.linkedin.com/feed/update/urn:li:activity:7077306686197088257
urn:li:activity:7076944302446120961,"The stuff your coding boot camp didn’t tell you about being a software developer: 
 
- On-calls can be brutal, with unexpected 2 AM weekend wake-ups on a Saturday 
- Your day may be up to 50% meetings 
- They asked you to traverse a binary tree during the interview. Your first task is to change a button's color 
- You didn’t negotiate your salary? You lost money 
- You won’t be building anything from scratch 
- Sometimes sh*tty code is good enough 
- JIRA 
- Git will either save or destroy hours of your day - so git good",UNKNOWN,Brian,Jenney,10100,10100,197,32,6,0,0.023267326732673267,,2023-06-20 09:50:39,https://www.linkedin.com/feed/update/urn:li:activity:7076944302446120961
urn:li:activity:7075482197922623490,"Very practically, the 2 easiest ways to stand out as a developer on a new team:

1. Write some documentation
2. Write a mother flipping test

But your bootcamp didn’t teach you how to write a unit test. 😞 

Lemme show you a short cut to get you started if you’re using ReactJS:",VIDEO,Brian,Jenney,13350,13350,142,13,2,0,0.011760299625468165,,2023-06-16 07:59:09,https://www.linkedin.com/feed/update/urn:li:activity:7075482197922623490
urn:li:activity:7075132396357996544,"I have a confession. 
 
Over the last year, I’ve done nearly 400 phone calls with developers from all around the world. 
 
The main topics we covered: 
 
1. Getting hired 
2. Preparing for interviews 
3. Creating side projects 
 
And lots, I mean LOTS of tackling impostor syndrome. 
 
𝗧𝗵𝗲𝘀𝗲 𝗰𝗮𝗹𝗹𝘀 𝘄𝗲𝗿𝗲 𝗳𝗿𝗲𝗲 𝗯𝘂𝘁 𝗜 𝗵𝗮𝗱 𝗮𝗻 𝘂𝗹𝘁𝗲𝗿𝗶𝗼𝗿 𝗺𝗼𝘁𝗶𝘃𝗲. 
 
First off, I sell courses to people. This originally started as a marketing tactic but less than 1% of the calls converted to customers. 
 
I kept it going. 
 
I was learning too much. 
 
I could feel the difference it made for people. 
 
I also remember all the feelings I had when I started learning to code and got my first job.  
 
𝗗𝗼𝘂𝗯𝘁. 𝗙𝗲𝗮𝗿. 𝗔𝗻𝘅𝗶𝗲𝘁𝘆. 𝗛𝗼𝗽𝗲. 
 
Then I remember all the strangers on the internet or at meetups who helped me. 
 
Don’t get me wrong, I’m still selling stuff but that’s not the sole intention of these calls. If I can save you a few hours, days or even years from making the same mistakes I did then I’m happy to give you 15 minutes of my time. 
 
Also, when some of you strike it big I can come groveling to you for a consulting role in the future 😅. 
 
This weekend I’ll be sharing the lessons I’ve learned from speaking with so many of you (𝙨𝙞𝙜𝙣 𝙪𝙥 𝙖𝙩 𝙩𝙝𝙚 𝙨𝙞𝙩𝙚 𝙞𝙣 𝙗𝙞𝙤).",UNKNOWN,Brian,Jenney,7502,7502,73,13,0,0,0.011463609704078913,,2023-06-15 08:35:14,https://www.linkedin.com/feed/update/urn:li:activity:7075132396357996544
urn:li:activity:7074407587634421761,"No 90-day plan. 
 
No manager feedback. 
 
You think you're doing well but the team is silently frustrated. 
 
Your notice to leave the team comes out of the blue... to you at least. 
 
Your manager isn't some sadistic bastard. In most cases at least. The reason they didn't confront you or offer feedback is because they are human. They just want to focus on their work and avoid conflict. It's not right, but it's reality. 
 
On day 1, you should set some practical milestones with your team lead or manager. **What does success for you look like** in the first month or two on the job? 
 
𝗜𝗳 𝘁𝗵𝗲𝘆 𝗱𝗼𝗻'𝘁 𝗴𝗶𝘃𝗲 𝘆𝗼𝘂 𝗮 𝗽𝗹𝗮𝗻, 𝗺𝗮𝗸𝗲 𝗼𝗻𝗲 yourself and present it to them. 
 
For a junior developer, it might look like this: 
 
𝗗𝗮𝘆𝘀 𝟭 - 𝟯𝟬: Get all repos running locally on your machine and understand code review and deployment processes. Get at least 2 small features into production. 
 
𝗗𝗮𝘆𝘀 𝟯𝟬 - 𝟲𝟬: Participate in an on-call rotation and learn process for critical incidents. Understand the full software development lifecycle. Be able to fix small bugs with little help. 
 
𝗗𝗮𝘆𝘀 𝟲𝟬 - 𝟵𝟬: Take on a mid-level difficulty feature and deploy to production. Contribute to technical discussions. 
 
Once you're aligned on what success looks like, it's no longer a guessing game and you have proof that you are where you should be or have an idea about where you need to improve.",UNKNOWN,Brian,Jenney,16130,16130,111,19,6,0,0.008431494110353379,,2023-06-13 09:14:50,https://www.linkedin.com/feed/update/urn:li:activity:7074407587634421761
urn:li:activity:7074045199793979392,"How does it feel to be the worst developer on a team? 
 
Well, I had the unpleasant experience of holding this title when I worked at a small startup. 
 
I probably had more technical growth in the short time I was there than at any other company I’ve worked since. 
 
You’ve probably heard the advice “If you’re the smartest person in the room, it’s time to leave the room.” 
 
Easier said than done. 
 
The guilt and anxiety I felt daily were difficult to deal with. There I was, confronted with my limitations and the realization that this wasn’t just all in my head. 
 
I could barely keep up with the tasks I was assigned and relied on lots of pairing sessions to get my work done. 
 
The company was small - only 3 engineers and they were the kind of developers who gave speeches at conferences and wrote the libraries that other devs use in their daily work. 
 
I could either quit or at least attempt to keep up with the other devs and contribute to the best of my ability. 
 
I resolved to suck less. 
 
I asked the smarty-pants devs what books they suggested I read 
 
I audited my Javascript knowledge and wrote out what I knew I had to learn to contribute to discussions 
 
I enrolled in a course to learn DSA and comp sci fundamentals 
 
Someone made a joke about Djikstra once… who the hell is that? I would find out 
 
I never became the 2nd worst developer at this company, but I grew my technical skills, confidence and threshold for failure. 
 
As uncomfortable as it was, I now see just how pivotal this experience was. 
 
So if you’re just starting, or maybe on a new team and discovering just how little you know…good. Embrace the suck, expose your ignorance and be prepared to learn.",UNKNOWN,Brian,Jenney,11144,11144,179,27,3,0,0.01875448671931084,,2023-06-12 10:00:25,https://www.linkedin.com/feed/update/urn:li:activity:7074045199793979392
urn:li:activity:7072617319927070720,"Yes I'm an engineering manager.

Yes, I still write code daily. Much less than I used to though.

This week, I got to put back on my coding hat and work with my team at The Clorox Company for a hackathon where we built features for our sites to enhance personalization.

- integrations with our CMS system to show dynamic content
- location-based product recommendations
- trending products via our search engine

Today is the last day and the team is busy using Loom to record videos to demo their features. Nothing worse than having your project break apart on demo day 😅.

Hackathons aren't just a fun getaway from ""regular"" work - they can provide some real business value. Ideally one of these projects is a winner for the business. At the very least we've discovered how to better leverage new and current tech and prove out ideas.

#cloroxdtc",IMAGE,Brian,Jenney,10945,10945,138,14,1,0,0.013978985838282321,#cloroxdtc,2023-06-08 11:06:12,https://www.linkedin.com/feed/update/urn:li:activity:7072617319927070720
urn:li:activity:7072247454565330944,"𝘞𝘩𝘢𝘵 𝘢𝘳𝘦 5 𝘑𝘚 𝘤𝘰𝘯𝘤𝘦𝘱𝘵𝘴 𝘺𝘰𝘶 𝘢𝘳𝘦 𝘮𝘢𝘬𝘪𝘯𝘨 𝘢 𝘮𝘪𝘴𝘵𝘢𝘬𝘦 𝘣𝘺 𝘕𝘖𝘛 𝘭𝘦𝘢𝘳𝘯𝘪𝘯𝘨?

𝘞𝘩𝘢𝘵 𝘎𝘪𝘵 𝘤𝘰𝘮𝘮𝘢𝘯𝘥𝘴 𝘸𝘪𝘭𝘭 𝘺𝘰𝘶 𝘧𝘪𝘯𝘥 𝘮𝘰𝘴𝘵 𝘶𝘴𝘦𝘧𝘶𝘭?

🤔

Every few days, Anirudh Kadian asked me some really interesting developer-related questions and has now compiled them into a slideshow that maybe you'll find useful, violently disagree with or chuckle at.

Check 'em out.",UNKNOWN,Brian,Jenney,7874,7874,59,4,0,0,0.008001016002032004,,2023-06-07 10:07:00,https://www.linkedin.com/feed/update/urn:li:activity:7072247454565330944
urn:li:activity:7071870862659829760,"We get it, networking is important. 
 
But what the hell does that mean? Especially on a platform like LinkedIn? 
 
Well, I can certainly tell you what it’s not: 
 
- DMs to strangers asking to look at your resume 
- Posts romanticizing a string of rejections 
- Messages to connections you’ve never spoken to, asking for referrals 
 
So what do you do? 
 
- Genuine engagement with other people by commenting on their posts 
- DMs where you give first (a link to a helpful article for example) 
- Posts that share what you’re learning (and struggling with) 
 
I've dropped a link to some templates to help you craft learning in public posts in the comments 😉",UNKNOWN,Brian,Jenney,7495,7495,83,22,1,0,0.014142761841227485,,2023-06-06 09:40:14,https://www.linkedin.com/feed/update/urn:li:activity:7071870862659829760
urn:li:activity:7071508479231885313,"LinkedIn Sucks.

It’s full of:

- toxic positivity
- recruiters who ghost you
- fear peddlers
- cringy influencers with their big heads in blue backgrounds

It’s also full of:

- strangers willing to lend you a hand
- quality content you can learn from
- inspiring stories
- opportunity

LinkedIn, like most social media platforms, will do its best to feed you content it believes you will like. If your LI feed sucks, follow some better people.

Here's a list of people I follow and get a lot of value from:

Harley Ferguson - dev career advice for juniors -> senior
John Crickett - side project king 
Erik Andersen - junior dev job whisperer
Alex Chiou && Rahul Pandey - targeted, practical advice for devs looking to accelerate their careers
Ryan Talbert - React and JS for career changers
Richard Donovan - mindset and fitness for coders
Anirudh Kadian - junior dev and entrepreneur with a lot of damn grit
Eduardo Vedes ✨ - helps you learn to code
Guille Ojeda - AWS and Cloud master
Justin Welsh (Non-tech but certainly worth following for business and copy-writing)
",UNKNOWN,Brian,Jenney,55464,55464,300,45,2,0,0.006256310399538439,,2023-06-05 10:00:28,https://www.linkedin.com/feed/update/urn:li:activity:7071508479231885313
urn:li:activity:7070436781606793216,"My most embarrassing interview?

Well, once I ended an interview 10 minutes in when the interviewer asked me a problem I knew I could not solve. I figured I'd save us both some time and awkward chit chat if I just left.

So I did. 😢

I vowed to never be in that position again.

You see, I sucked at interviewing for years. It ruined my confidence and made me scared to take risks at work.

Then I spent thousands of dollars and hundreds of hours learning DSA, system design and reading up on all the parts of JS that I skipped from being mostly self-taught.

With my newfound confidence I did around 40 interviews over a year. 

- 20 mock interviews. 
- 3 FAANG final rounds.
- A dozen non-FAANG. 
- Too many recruiter screens to count. 

𝗥𝗲𝘀𝘂𝗹𝘁: Offer with an increase of  ~30K and another one for ~50K. More importantly, a hell of a lot more confidence.

If there's 1 single concept that I struggled with most, it was recursion. 𝗛𝗲𝗿𝗲'𝘀 𝗮 𝘃𝗶𝗱𝗲𝗼 𝗡𝗢𝗧 𝘂𝘀𝗶𝗻𝗴 𝗳*𝗰𝗸𝗶𝗻𝗴 𝗳𝗶𝗯𝗼𝗻𝗮𝗰𝗰𝗶 to walk you through some practical recursion.

𝙄'𝙢 𝙘𝙤𝙣𝙨𝙞𝙙𝙚𝙧𝙞𝙣𝙜 𝙙𝙤𝙞𝙣𝙜 𝙖𝙣 𝟴 𝙬𝙚𝙚𝙠 𝙘𝙧𝙖𝙨𝙝 𝙘𝙤𝙪𝙧𝙨𝙚 𝙤𝙣 𝙉𝙤𝙣-𝙁𝘼𝘼𝙉𝙂 𝙞𝙣𝙩𝙚𝙧𝙫𝙞𝙚𝙬𝙨 𝙩𝙖𝙞𝙡𝙤𝙧𝙚𝙙 𝙩𝙤𝙬𝙖𝙧𝙙𝙨 𝙅𝙎 𝙙𝙚𝙫𝙨. 𝘿𝙈 𝙞𝙛 𝙮𝙤𝙪 𝙬𝙖𝙣𝙩 𝙩𝙝𝙚 𝙙𝙚𝙩𝙖𝙞𝙡𝙨.",VIDEO,Brian,Jenney,14264,14264,124,12,3,0,0.00974481211441391,,2023-06-02 10:00:58,https://www.linkedin.com/feed/update/urn:li:activity:7070436781606793216
urn:li:activity:7070058936183185408,"I thought I was supposed to be happy. 
 
I got promoted to Senior Software Engineer. 
 
I had actually written this goal in my notebook 2 years prior. 
 
Once the initial excitement faded, I started to freak out. What would they expect from me now? The other seniors were much smarter than me. I still didn’t understand areas of the codebase that I thought I should. 
 
Was this a mistake? 
 
My brain went through every possible scenario that would lead to my failure or get me “exposed.” 
 
- I wouldn’t be able to figure out a critical issue and be fired. 
 
- A new senior member would code circles around me. 
 
- I’d get called on in a meeting to offer a solution and have no answer. 
 
Maybe you think like me 😅. 
 
I’ve had this feeling re-appear when I was promoted to Staff and then moved into management. I’ve come to accept it. 
 
New role = unknown. The unknown is scary. In the absence of experience, you imagine what MIGHT happen and how to best protect yourself from failure. 
 
One thing I started doing to tame the negative voice in my head is to use others’ knowledge to supplement my lack of experience. 
 
I hired mentors. 
 
I read books. 
 
I thought about the prototype of a person in my position and what they would do. How could I inherit their traits? (please tell me you JS devs caught that one) 
 
I hope you’re not as neurotic as me, but after speaking to a few hundred of you… I know that’s not the case.",UNKNOWN,Brian,Jenney,7268,7268,74,12,0,0,0.011832691249312053,,2023-06-01 08:33:54,https://www.linkedin.com/feed/update/urn:li:activity:7070058936183185408
urn:li:activity:7069776177426534400,"What you think your next interview will be like:

""𝘚𝘰𝘭𝘷𝘦 𝘵𝘩𝘪𝘴 𝘰𝘣𝘴𝘤𝘶𝘳𝘦 𝘢𝘭𝘨𝘰 𝘪𝘯 𝘖(𝘯) 𝘵𝘪𝘮𝘦 𝘸𝘪𝘵𝘩 𝘢 𝘤𝘳𝘢𝘺𝘰𝘯 𝘢𝘯𝘥 𝘱𝘪𝘦𝘤𝘦 𝘰𝘧 𝘤𝘰𝘯𝘴𝘵𝘳𝘶𝘤𝘵𝘪𝘰𝘯 𝘱𝘢𝘱𝘦𝘳""

What you're more likely to encounter:

""𝘛𝘦𝘭𝘭 𝘮𝘦 𝘢𝘣𝘰𝘶𝘵 𝘢 𝘱𝘳𝘰𝘫𝘦𝘤𝘵 𝘺𝘰𝘶 𝘳𝘦𝘤𝘦𝘯𝘵𝘭𝘺 𝘸𝘰𝘳𝘬𝘦𝘥 𝘰𝘯 𝘣𝘦𝘧𝘰𝘳𝘦 𝘸𝘦 𝘤𝘳𝘦𝘢𝘵𝘦 𝘢 𝘙𝘦𝘢𝘤𝘵 𝘤𝘰𝘮𝘱𝘰𝘯𝘦𝘯𝘵 𝘵𝘰𝘨𝘦𝘵𝘩𝘦𝘳""

That doesn't mean you shouldn't study DSA. But for Bob's sake, please don't do 500 random Leet Code problems. I've outlined a study guide with suggestions for concepts and practice exercises which will take you further than memorizing the solutions to a bunch of LC easy's 😉.",ARTICLE,Brian,Jenney,5726,5726,55,6,3,0,0.011177086971707998,,2023-05-31 14:25:53,https://www.linkedin.com/feed/update/urn:li:activity:7069776177426534400
urn:li:activity:7069334182702821376,"5 Biggest mistakes of my coding career? 
 
1. Not learning the fundamentals before diving into frameworks 
2. Being afraid to admit when I didn’t know something 
3. Only taking on tasks I knew I could finish 
4. Not understanding how engineering fits into the company eco-system and business goals 
5. Not speaking up 
 
That last one hurt me the most. 
 
I thought I was playing it safe by taking on easy tickets.  
 
I nodded my head during estimation sessions and gave bland status updates.  
 
I never shared my ideas during meetings.  
 
I wanted to blend in.  
 
It was the most dangerous thing I could’ve done. 
 
They say the tallest blade of grass is the first to get cut. 
 
Yeah, I guess. It’s also the one growing the fastest. 
 
Companies need average developers more than they’d like to admit. But, if career trajectory and increased hire-ability is your goal, then playing it safe is your greatest threat.",UNKNOWN,Brian,Jenney,6161,6161,67,15,2,0,0.013634150300275929,,2023-05-30 09:10:04,https://www.linkedin.com/feed/update/urn:li:activity:7069334182702821376
urn:li:activity:7067522208549519360,"Your portfolio projects probably look like a lot of other projects out there: 
 
- TODO app. 
- Weather app. 
- Clone of [popular app] 
- Blog 
- Chat app 
 
Here’s the thing, 𝘁𝗵𝗲𝗿𝗲’𝘀 𝗻𝗼𝘁𝗵𝗶𝗻𝗴 𝗮𝘁 𝗮𝗹𝗹 𝘄𝗿𝗼𝗻𝗴 𝘄𝗶𝘁𝗵 𝘁𝗵𝗲𝘀𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁𝘀. They can certainly teach you a lot.  
 
BUT - when digging through a stack of resumes for an open junior developer position, it is hard to stand out. 
 
If your goal is to stand out AND learn something try this: 
 
- 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗔𝗣𝗜 or a real-world problem you are familiar with 
 -𝗦𝗸𝗲𝘁𝗰𝗵 𝗼𝘂𝘁 𝘁𝗵𝗲 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 using a tool like Excalidraw (a simple piece of paper will do) 
- 𝗪𝗿𝗶𝘁𝗲 𝗼𝘂𝘁 𝘁𝗵𝗲 𝗳𝗲𝗮𝘁𝘂𝗿𝗲 𝗹𝗶𝘀𝘁 𝗮𝗻𝗱 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗲 how long each one will take and the order to create them 
- 𝗕𝘂𝗶𝗹𝗱, get stuck, read the docs, ask Chat Gippiter and repeat 
- 𝗗𝗲𝗽𝗹𝗼𝘆 on Vercel or AWS 
 
Now you have an interesting technical story and maybe even your next startup idea.",UNKNOWN,Brian,Jenney,25338,25338,262,25,16,0,0.011958323466729813,,2023-05-25 09:02:43,https://www.linkedin.com/feed/update/urn:li:activity:7067522208549519360
urn:li:activity:7067159835598880769,"Are you a “passionate developer”? 
 
Do you need to be? 
 
If you only got into coding for the money… I think that’s OK. 
 
The best developers I’ve met enjoy writing code and most of us do it for fun outside of work. That doesn’t mean YOU have to. 
 
There is an odd expectation that software engineers write code outside work hours and it isn’t uncommon to be asked in an interview about your side project or to take a look at your personal GitHub. 
 
Why? 
 
Do we ask doctors how many patients they’ve seen outside of office hours? 
 
Ever ask your plumber about his side project? 
 
Of course not. 
 
I still believe that in order to be a better-than-average author of code, you will need to find enjoyment in shipping code and squishing bugs. 
 
Tech moves fast. To keep up with trends and updates, you’ll likely need some intrinsic desire to do so… cuz your work certainly won’t be providing that time 😉. 
 
That being said, I don’t think you need to be a super passionate developer to be a good one. 
 
Am I off here? Do you need to genuinely love to code to move past junior code bot?",UNKNOWN,Brian,Jenney,9637,9637,107,27,2,0,0.014112275604441216,,2023-05-24 09:36:28,https://www.linkedin.com/feed/update/urn:li:activity:7067159835598880769
urn:li:activity:7066797441869643776,"“𝙄’𝙢 𝙜𝙤𝙞𝙣𝙜 𝙩𝙤 𝙜𝙚𝙩 𝙚𝙭𝙥𝙤𝙨𝙚𝙙,” I thought. 
 
As a junior developer, I was really anxious that one day my team would find out I was a hack. 
 
Then, one day, I did get “found out” 😬 
 
I was working at a small startup with some incredible talent and when our star engineer left to pursue his own business, he gave me some candid feedback: 
 
“𝘐𝘵’𝘴 𝘥𝘪𝘧𝘧𝘪𝘤𝘶𝘭𝘵 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘴𝘪𝘯𝘤𝘦 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘩𝘢𝘷𝘦 𝘢 𝘴𝘵𝘳𝘰𝘯𝘨 𝘨𝘳𝘢𝘴𝘱 𝘰𝘧 𝘴𝘰𝘮𝘦 𝘧𝘶𝘯𝘥𝘢𝘮𝘦𝘯𝘵𝘢𝘭 𝘑𝘢𝘷𝘢𝘴𝘤𝘳𝘪𝘱𝘵 𝘤𝘰𝘯𝘤𝘦𝘱𝘵𝘴 𝘭𝘪𝘬𝘦 𝘤𝘭𝘢𝘴𝘴𝘦𝘴 𝘰𝘳 𝘤𝘭𝘰𝘴𝘶𝘳𝘦. 𝘐 𝘵𝘩𝘪𝘯𝘬 𝘺𝘰𝘶 𝘯𝘦𝘦𝘥 𝘵𝘰 𝘨𝘰 𝘣𝘢𝘤𝘬 𝘵𝘰 𝘵𝘩𝘦 𝘣𝘢𝘴𝘪𝘤𝘴 𝘢𝘯𝘥 𝘭𝘦𝘢𝘳𝘯 𝘵𝘩𝘦𝘴𝘦 𝘵𝘩𝘪𝘯𝘨𝘴.” 
 
I was embarrassed. 
 
He was also correct. 
 
I wrote down his suggestions and made a plan to get more proficient with es6/7 and some of the concepts which had always confused me like promises, prototypal inheritance and decorators. 
 
It wasn’t even that difficult. 
 
I wondered why I hadn’t done this earlier. 
 
In fact it’s the method I still use and share with my mentees: 
 
1. Open the code editor 
2. Create a practical example leveraging the concept you’re learning 
3. Record a video explaining the concept and your code 
 
For promises, you might create a promise using the promise constructor and invoke it using the async/await pattern and then refactor it to use promise chains. Make a video for yourself that you may never even watch. The video simply forces you to articulate what you’ve learned in plain English. 
 
Hope that’s helpful.",UNKNOWN,Brian,Jenney,6119,6119,91,13,2,0,0.01732309200849812,,2023-05-23 08:48:20,https://www.linkedin.com/feed/update/urn:li:activity:7066797441869643776
urn:li:activity:7066435051688706048,"Very predictable, boring advice that most developers don’t follow: 
 
- 𝗗𝗼𝗻’𝘁 𝗼𝘃𝗲𝗿-𝗿𝗲𝗹𝘆 𝗼𝗻 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹𝘀 - build something on your own, get stuck and read the f*cking docs 
 
- 𝗟𝗲𝗮𝗿𝗻 𝘁𝗵𝗲 𝗳𝘂𝗻𝗱𝗮𝗺𝗲𝗻𝘁𝗮𝗹𝘀 𝗼𝗳 𝘆𝗼𝘂𝗿 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲 before diving into frameworks like React, Angular or Vue 
 
- 𝗞𝗲𝗲𝗽 𝘁𝗿𝗮𝗰𝗸 𝗼𝗳 𝘆𝗼𝘂𝗿 𝗮𝗰𝗰𝗼𝗺𝗽𝗹𝗶𝘀𝗵𝗺𝗲𝗻𝘁𝘀. It’s nice to look back at your progress when you’re feeling down 
 
- 𝗬𝗼𝘂 𝗰𝗮𝗻’𝘁 𝗰𝗵𝗮𝘀𝗲 𝗲𝘃𝗲𝗿𝘆 𝗻𝗲𝘄 𝘁𝗲𝗰𝗵. Be aware of macro trends in your industry and micro trends in your niche. For example, a JS developer may need to have surface-level knowledge of Serverless and a deeper understanding of NextJS 
 
- 𝗦𝘁𝘂𝗱𝘆 𝗖𝗦 𝗳𝘂𝗻𝗱𝗮𝗺𝗲𝗻𝘁𝗮𝗹𝘀. They’re slower to change and give you a strong foundation for understanding concepts outside your core language and tech stack 
 
- 𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝗶𝘇𝗲 𝘆𝗼𝘂𝗿 𝗵𝗲𝗮𝗹𝘁𝗵 as much as your work - they are more related than you think 
 
What’d I miss?",UNKNOWN,Brian,Jenney,8592,8592,133,10,6,0,0.01734171322160149,,2023-05-22 09:32:56,https://www.linkedin.com/feed/update/urn:li:activity:7066435051688706048
urn:li:activity:7065355444029976576,"It's OK to build nothing this weekend. 
 
Eat, sleep, code is not a process for progress, it’s a recipe for burnout. 
 
I’ve seen some of you trying out this method and I’ve yet to see it work. 
 
Hell, I tried it myself. 
 
It led to: 
 
- anxiety 
- less enthusiasm for my work 
- decreased quality of thought 
 
Counter-intuitively, the more I tried to cram in material or optimize my schedule, the less progress I was making. 
 
It was frustrating. 
 
For me, having a non-negotiable workout routine forced me to detach from work. 
 
Few things can interrupt my workout besides a sick kid or a critical bug at work. 
 
This is where I clear my mind and often where I come up with my best ideas.  
 
Getting in shape was honestly a side effect of this routine and perhaps the best “hack” I’ve discovered for keeping me sane in a fairly stressful occupation. 
 
This weekend I'll be sharing the diet and workout routine which has taken me from a fluffy, anxiety-ridden coder to a much less fluffy, slightly-less-anxious engineering manager 😅 (link in bio and in comments at some point)",UNKNOWN,Brian,Jenney,6025,6025,66,18,2,0,0.014273858921161826,,2023-05-19 10:11:09,https://www.linkedin.com/feed/update/urn:li:activity:7065355444029976576
urn:li:activity:7064988641869135874,"You're hired!

3 months later... you're fired!

This is a story I hate to hear and many times it's not avoidable.

Poor management.
CEO needs a new yacht.
Asteroid destroys office.

Hey sh*t happens.

In this article we explore 2 developer career death traps and how to avoid them.",ARTICLE,Brian,Jenney,7536,7536,85,10,4,0,0.013136942675159236,,2023-05-18 09:44:56,https://www.linkedin.com/feed/update/urn:li:activity:7064988641869135874
urn:li:activity:7064623106924896257,"I mentor a lot of boot camp grads. They are universally obsessed with these 2 things: 
 
1. Portfolio projects 
2. DSA 
 
Here's the deal: 
 
- Most companies don't care about your portfolio project. If it's hidden behind a login... just forget about it. 
 
Build 1 or 2 really interesting things you can speak about with pride. 
 
- Yes study DSA. Nothing wrong with that. 
 
Just realize most companies aren't going to ask you these questions. 
 
Also, your job will require a completely different skill set. 
 
Finally... 
 
Double down on the fundamentals of your language and software design patterns. This is what will pay the most dividends and is a lesson I learned later than I should have.",UNKNOWN,Brian,Jenney,12564,12564,204,24,7,0,0.018704234320280167,,2023-05-17 08:57:12,https://www.linkedin.com/feed/update/urn:li:activity:7064623106924896257
urn:li:activity:7064260728894947330,"Sometimes I feel like a fake engineering manager but that’s ok. Before this, I was a fake senior software engineer and before that I was pretending to be a developer. 
 
At each new stage, there’s a little voice in my head reminding me why I shouldn’t be in my position. 
 
I peruse LinkedIn and compare myself to others. 
 
Terrible habit. 
 
I know it will happen again and I’m prepared. 
 
Here’s how I get over that little voice in my head: 
 
- find an avatar - who do I want to be like? 
- what do they know that I don’t? 
- create a checklist with the items from the previous step 
- find mentors or books or both to bring me closer to the avatar 
- check items off the list and prove to myself that I’m where I need to be 
 
Rinse and repeat for each promotion, new company or new role.",UNKNOWN,Brian,Jenney,7398,7398,106,21,1,0,0.01730197350635307,,2023-05-16 09:21:37,https://www.linkedin.com/feed/update/urn:li:activity:7064260728894947330
urn:li:activity:7063898325724364800,"You probably won't be the best coder on your team.

Especially as a junior. 

So how do you stand out?

As an average developer, there’s still a lot of room to make an impact outside being the highest technical authority.

As a very non-rockstar coder, here are some things I’ve done over the years which helped me stand out:

- start an engineering book club
- volunteer for on-call
- onboard junior members
- create a PR template to streamline the code review process
- offer to assist with others’ work
- actually talk during pointing sessions and clarify tasks instead of just nodding my head

Of course, getting work done in a timely manner and not significantly adding to the number of bugs in our backlog didn’t hurt either. 

I don’t think I’ve ever been the “best” coder on any team where I’ve worked. I’ve certainly been the worst in at least 1 company. 

Let me be clear, you cannot be technically incompetent, start a book club and expect to get recognized and promoted… BUT you also don’t need to wait until you understand JS on a Kyle Simpson level to offer your insight, suggest changes and speak up.",UNKNOWN,Brian,Jenney,5337,5337,71,10,0,0,0.01517706576728499,,2023-05-15 09:43:09,https://www.linkedin.com/feed/update/urn:li:activity:7063898325724364800
urn:li:activity:7062805108643823616,"The worst way to spend your weekend? 
 
Completing a take-home coding interview that was supposed to take 4 hours but takes 2 full days. 🙃 
 
If you MUST participate in these kinds of interviews there are 2 ways you can stand out: 
 
1. Write documentation 
2. Write some unit tests 
 
You don’t know how to write unit tests? Let’s fix that.",VIDEO,Brian,Jenney,21432,21432,177,21,7,0,0.009565136244867488,,2023-05-12 08:23:05,https://www.linkedin.com/feed/update/urn:li:activity:7062805108643823616
urn:li:activity:7062441243871477761,"Top 5 pieces of advice to save your resume for all your junior devs, including 1 I bet you never considered 👇 
 
1. Stop calling yourself a junior or aspiring. You are a developer. 
 
2. Use strong language. “Led development on [x] feature which [improved some metric]” or “architected” sounds better than “worked with a team on [generic thing]” 
 
3. Lead with your relevant experience. It can be confusing to look at a resume for a dev role and see nothing coding related. Put your projects/volunteer work/side projects at the top. 
 
4. Don't get too cute with the format. Use a plain Word doc to be safe. 
 
5. Add a Loom video with a very brief intro or walkthrough of a project. Like 1 minute max. Now, track the views this video gets. No views? Maybe change your resume. Many views but no calls? Maybe remove the video 😅 
 
What else would you suggest?",UNKNOWN,Brian,Jenney,5002,5002,52,10,4,0,0.013194722111155539,,2023-05-11 08:03:51,https://www.linkedin.com/feed/update/urn:li:activity:7062441243871477761
urn:li:activity:7062086393899995136,"You can’t get hired because you have no experience. You have no experience because you can’t get hired. 
 
Let’s change that. 
 
Reach out to your cousin, aunt or that friend trying to launch their music career and offer to build a website.  
 
For free. 
 
Make them buy a domain. Or buy one for them - f*ck it. 
 
Sketch out the site and the main features and review them with your cousin, I mean the client. 
 
Build and deploy. 
 
Have them give you a testimonial. 
 
Now you have some viable experience, a real deal site to show off and have dipped your toe into freelance.",UNKNOWN,Brian,Jenney,39578,39578,401,35,12,0,0.011319419879731164,,2023-05-10 08:58:42,https://www.linkedin.com/feed/update/urn:li:activity:7062086393899995136
urn:li:activity:7061707159692095490,"The market for full stack developers is over-saturated.

Learn dev-ops.

Maybe C#.

Java?

PHP perhaps?

Become a Chat-Gippity prompt engineer. Yes, that’s the ticket 🤔.

I don’t think there’s anything wrong with learning another language or technology but if you change tech as the wind blows, you will quickly be a sub-par developer in many languages rather than a strong developer in 1 or 2.

𝘍𝘦𝘸 𝘤𝘰𝘮𝘱𝘢𝘯𝘪𝘦𝘴 𝘯𝘦𝘦𝘥 𝘢 𝘴𝘸𝘪𝘴𝘴-𝘢𝘳𝘮𝘺-𝘬𝘯𝘪𝘧𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳.

However, IF you are a full stack developer who recently graduated and considering what to learn next (hint hint) I would put these 3 technologies at the top of my list:

1. TypeScript
2. NextJS
3. AWS (lambdas, S3 and IAM)

Any others you'd suggest or wish you learned?",UNKNOWN,Brian,Jenney,11562,11562,130,41,3,0,0.015049299429164505,,2023-05-09 07:55:29,https://www.linkedin.com/feed/update/urn:li:activity:7061707159692095490
urn:li:activity:7061362313768964096,"3 members from my Not Another Course community just got hired.

They’re talented, amazing people and well deserving. And they’re not much different than you.

One had been looking for nearly a year for that first role. Another graduated from a program recently. 

They felt uncertain. 
Like it would never happen. 
That maybe they just weren’t good enough.

When I think of all the mentees I’ve seen get hired either in my program or in the bootcamps where I’ve taught over the years, there are few hard and fast rules.

- Most did NOT learn in public.
- Some were not particularly talented. In fact, a few I thought were un-hireable proved me wrong 😅
- Some mass-applied.
- A few networked their way to the first role.
- Many of their interviews were barely technical. 
- Some ONLY got LeetCode problems.

Your timeline will be unpredictable. Not even Chat-GPT can predict the future… yet.

Be persistent, practically optimistic that opportunity will present itself, re-calibrate when you see things not working, maintain your skills and your own success will be inevitable.",UNKNOWN,Brian,Jenney,6187,6187,84,5,0,0,0.014385000808146113,,2023-05-08 10:28:27,https://www.linkedin.com/feed/update/urn:li:activity:7061362313768964096
urn:li:activity:7059942985806872576,"You want to build an amazing side project but you don’t know where to start.

❌ TODO app?
❌ Clone of that other app that you use?
❌ A thing that generates a random thing?

When I’m not sure what I want to build, I do this:

- 𝗦𝘁𝗮𝗿𝘁 𝘄𝗶𝘁𝗵 𝘁𝗵𝗲 𝗱𝗮𝘁𝗮 - what API can you use which may have some interesting information?
- Use a tool like Postman to 𝗲𝗻𝘀𝘂𝗿𝗲 𝘁𝗵𝗲 𝗔𝗣𝗜 𝗶𝘀 𝘄𝗼𝗿𝘁𝗵𝘄𝗵𝗶𝗹𝗲 and accessible
- 𝗪𝗵𝗮𝘁 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 𝗰𝗮𝗻 𝘆𝗼𝘂 𝗰𝗼𝗻𝘀𝘁𝗿𝘂𝗰𝘁 𝗮𝗿𝗼𝘂𝗻𝗱 𝘁𝗵𝗲 𝗔𝗣𝗜? For example, a real time stock API could be used to trigger an alert to a user when it dips below a certain threshold
- Figure out the 𝗺𝗶𝗻𝗶𝗺𝗮𝗹 𝗮𝗺𝗼𝘂𝗻𝘁 𝗼𝗳 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀
- 𝗪𝗵𝗮𝘁 𝗶𝘀 𝘁𝗵𝗲 𝘂𝘀𝗲𝗿 𝗳𝗹𝗼𝘄? What happens when a user goes to your app? What is the feature they interact with and how is the data surfaced? 𝗦𝗸𝗲𝘁𝗰𝗵 𝗶𝘁 𝗼𝘂𝘁
- Pick a 𝗰𝗼𝗺𝗯𝗶𝗻𝗮𝘁𝗶𝗼𝗻 𝗼𝗳 𝗻𝗲𝘄 𝗮𝗻𝗱 𝗳𝗮𝗺𝗶𝗹𝗶𝗮𝗿 𝘁𝗲𝗰𝗵𝗻𝗼𝗹𝗼𝗴𝗶𝗲𝘀
- 𝗚𝗲𝘁 𝘀𝘁𝘂𝗰𝗸, read the docs and build your way out of the hole you’ve dug 😅

Gain more practical knowledge than any 100 hour course could ever offer you.",UNKNOWN,Brian,Jenney,8118,8118,115,18,9,0,0.0174919931017492,,2023-05-04 11:38:14,https://www.linkedin.com/feed/update/urn:li:activity:7059942985806872576
urn:li:activity:7059631200235130881,"They told you don't need Redux.

𝘛𝘩𝘦𝘳𝘦'𝘴 𝘵𝘰𝘰 𝘮𝘶𝘤𝘩 𝘣𝘰𝘪𝘭𝘦𝘳𝘱𝘭𝘢𝘵𝘦!
𝘛𝘩𝘦𝘳𝘦 𝘢𝘳𝘦 𝘣𝘦𝘵𝘵𝘦𝘳 𝘴𝘰𝘭𝘶𝘵𝘪𝘰𝘯𝘴!
My least favorite one: ""𝘑𝘶𝘴𝘵 𝘶𝘴𝘦 𝘊𝘰𝘯𝘵𝘦𝘹𝘵! ""

With around 8.2 million downloads just last week, there’s a pretty high chance the next company you join will leverage this library.

So stop being scared of it.

Try learning these concepts/tools:

- publisher/subscriber pattern
- ducks architecture
- FP principles

And when you're ready to get your hands dirty with some Redux check out my e-com React App Challenge here https://lnkd.in/gqnbpDCH",UNKNOWN,Brian,Jenney,24479,24479,201,54,8,0,0.010743902937211487,,2023-05-03 14:57:19,https://www.linkedin.com/feed/update/urn:li:activity:7059631200235130881
urn:li:activity:7059165914524504065,"Some uncomfortable truths for software engineers:

• 𝘠𝘰𝘶, not your company, 𝘢𝘳𝘦 𝘶𝘭𝘵𝘪𝘮𝘢𝘵𝘦𝘭𝘺 𝘳𝘦𝘴𝘱𝘰𝘯𝘴𝘪𝘣𝘭𝘦 𝘧𝘰𝘳 𝘺𝘰𝘶𝘳 𝘨𝘳𝘰𝘸𝘵𝘩 as a developer
• You may be really good at writing code but 𝘪𝘧 𝘺𝘰𝘶’𝘳𝘦 𝘶𝘯𝘱𝘭𝘦𝘢𝘴𝘢𝘯𝘵 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘸𝘪𝘭𝘭 𝘩𝘢𝘷𝘦 𝘢 𝘩𝘢𝘳𝘥 𝘵𝘪𝘮𝘦 𝘨𝘦𝘵𝘵𝘪𝘯𝘨 𝘱𝘳𝘰𝘮𝘰𝘵𝘦𝘥
• Shipping code fast is almost always better than shipping code perfect
• 𝘚𝘢𝘺 𝘴𝘰𝘮𝘦𝘵𝘩𝘪𝘯𝘨 𝘪𝘯 𝘢 𝘮𝘦𝘦𝘵𝘪𝘯𝘨… anything. A bad idea to kick off a conversation is better than silence
• Your first job will validate you - 𝘺𝘰𝘶𝘳 𝘴𝘦𝘤𝘰𝘯𝘥 𝘸𝘪𝘭𝘭 𝘨𝘦𝘵 𝘺𝘰𝘶 𝘱𝘢𝘪𝘥

What would you add?",UNKNOWN,Brian,Jenney,10890,10890,155,17,6,0,0.016345270890725436,,2023-05-02 07:19:36,https://www.linkedin.com/feed/update/urn:li:activity:7059165914524504065
urn:li:activity:7058849684341096448,"Of course you suck at interviewing.

You do it once every 2 years and wonder why it’s so difficult.

It’s a game with incredibly high stakes that most of us don’t practice until it’s time to play. This is a recipe for disaster.

There’s enough information on LinkedIn about what you should and shouldn’t study but that’s only half the game of interviewing.

𝘠𝘰𝘶𝘳 𝘯𝘦𝘳𝘷𝘦𝘴 𝘢𝘳𝘦 𝘨𝘰𝘯𝘯𝘢 𝘨𝘦𝘵 𝘺𝘰𝘶.

𝗜 𝗯𝗼𝗺𝗯𝗲𝗱 𝗮 𝗺𝗼𝗰𝗸 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗹𝗮𝘀𝘁 𝘆𝗲𝗮𝗿 𝘁𝗵𝗮𝘁 𝗵𝗮𝗱 𝘁𝗵𝗲 𝗹𝗼𝘄𝗲𝘀𝘁 𝘀𝘁𝗮𝗸𝗲𝘀 𝗽𝗼𝘀𝘀𝗶𝗯𝗹𝗲. I mean, it was literally a mock interview.

- My heart raced.
- I drank too much coffee before the meeting.
- I didn’t have water nearby.
- I froze up 😳

Don’t wait until the real game starts to get practice.

There is simply no substitute for being judged, I mean interviewed, by another human.

𝗜𝗳 𝘆𝗼𝘂’𝗿𝗲 𝗮 𝗹𝗶𝘁𝘁𝗹𝗲 𝘀𝗵𝘆 𝘁𝗿𝘆 𝘁𝗵𝗶𝘀:

- Open up Leetcode or whatever tool you’re using to study problems
- 𝗦𝗲𝘁 𝘁𝗵𝗲 𝘁𝗶𝗺𝗲𝗿 𝗼𝗻 𝘆𝗼𝘂𝗿 𝗽𝗵𝗼𝗻𝗲 𝗳𝗼𝗿 𝟯𝟬 - 𝟰𝟱 𝗺𝗶𝗻𝘀
- Open up a video recording tool and 𝗲𝘅𝗽𝗹𝗮𝗶𝗻 𝘆𝗼𝘂𝗿 𝘁𝗵𝗼𝘂𝗴𝗵𝘁 𝗽𝗿𝗼𝗰𝗲𝘀𝘀 and code as you type
- Watch it later and 𝗰𝗿𝗶𝗻𝗴𝗲 𝗮 𝗯𝗶𝘁
- Repeat until you 𝗰𝗿𝗶𝗻𝗴𝗲 𝗹𝗲𝘀𝘀",UNKNOWN,Brian,Jenney,8698,8698,113,25,2,0,0.016095654173373188,,2023-05-01 11:09:26,https://www.linkedin.com/feed/update/urn:li:activity:7058849684341096448
urn:li:activity:7057707960898105344,"Turns out I don't hate Typescript.

I just had no clue how to use it beyond adding a type after a variable. 😬

Now that I'm exploring generics, unions and mapped types, I'm starting to see why you all like it so much.",UNKNOWN,Brian,Jenney,7994,7994,115,29,1,0,0.018138603952964724,,2023-04-28 06:59:01,https://www.linkedin.com/feed/update/urn:li:activity:7057707960898105344
urn:li:activity:7057357474831491073,"𝘊𝘰𝘥𝘦 𝘴𝘩𝘰𝘶𝘭𝘥 𝘢𝘭𝘸𝘢𝘺𝘴 𝘧𝘰𝘭𝘭𝘰𝘸 𝘋𝘙𝘠 𝘱𝘳𝘪𝘯𝘤𝘪𝘱𝘭𝘦𝘴!

Except, maybe your abstraction is more clever than useful in this case.

𝘛𝘋𝘋 𝘰𝘳 𝘥𝘪𝘦!

Or you know, TaDD (write 𝘁ests 𝗮fter 𝗱evelopment is 𝗱one). Or, perhaps manual QA is the correct choice.

𝘛𝘺𝘱𝘦𝘚𝘤𝘳𝘪𝘱𝘵 𝘪𝘴 𝘵𝘩𝘦 𝘰𝘯𝘭𝘺 𝘤𝘩𝘰𝘪𝘤𝘦 𝘧𝘰𝘳 𝘴𝘦𝘳𝘪𝘰𝘶𝘴 𝘑𝘚 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴!

But maybe it’s overkill for this simple UI app.

𝘗𝘏𝘗 𝘴𝘶𝘹!

Maybe to you - but there are tons of developers still crafting amazing software with it.

Be careful falling into dogmatic, knee-jerk responses when it comes to writing software. One thing I’ve learned is that there are always exceptions to the rules we accept as coding law.

Any sacred cows I missed here?",UNKNOWN,Brian,Jenney,4697,4697,46,12,2,0,0.012774111134766872,,2023-04-27 08:04:42,https://www.linkedin.com/feed/update/urn:li:activity:7057357474831491073
urn:li:activity:7057010976004481024,"If you’re hell-bent on learning data structures and algorithms please don’t JUST do 500 random LeetCode problems... I mean, unless that's how you unwind after a day of coding (you sicko).

Try this instead:

- 𝗹𝗲𝗮𝗿𝗻 𝗰𝗼𝗺𝗺𝗼𝗻 𝗱𝗮𝘁𝗮 𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲𝘀 like trees, graphs, linked lists, stacks and queues
- code up these structures from scratch
- 𝗹𝗲𝗮𝗿𝗻 𝗰𝗼𝗺𝗺𝗼𝗻 𝘁𝗲𝗰𝗵𝗻𝗶𝗾𝘂𝗲𝘀 to sort and traverse data in these structures and their practical application (when is a LL better than an array?)
- focus on 𝗿𝗲𝗰𝘂𝗿𝘀𝗶𝗼𝗻 and backtracking 𝗔𝗙𝗧𝗘𝗥 learning 𝘁𝗿𝗲𝗲𝘀 (𝘐 𝘧𝘪𝘯𝘥 𝘵𝘩𝘢𝘵 𝘪𝘵 𝘮𝘢𝘥𝘦 𝘮𝘰𝘳𝘦 𝘴𝘦𝘯𝘴𝘦 𝘵𝘩𝘪𝘴 𝘸𝘢𝘺)
- 𝘁𝗶𝗺𝗲 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 solving LC problems - shoot for 30 mins for medium problems and write the space and time complexity next to your solution then check it with Chat-GPT
- learn 𝗰𝗼𝗺𝗺𝗼𝗻 𝗮𝗽𝗽𝗿𝗼𝗮𝗰𝗵𝗲𝘀 𝘁𝗼 𝗼𝗽𝘁𝗶𝗺𝗶𝘇𝗲 algorithms (𝘩𝘢𝘴𝘩𝘮𝘢𝘱𝘴, 𝘵𝘢𝘪𝘭-𝘤𝘢𝘭𝘭𝘴, 𝘮𝘦𝘮𝘰𝘪𝘻𝘢𝘵𝘪𝘰𝘯...)

Also - realize that just because MAANG exclusively asks DSA, the majority of your interviews as a Javascript developer will probably focus on a combination of behavioral and technical challenges including concepts like string manipulation, working with arrays and objects, JS trivia and building small components using ReactJS.",UNKNOWN,Brian,Jenney,17177,17177,153,15,13,0,0.010537346451650463,,2023-04-26 08:38:36,https://www.linkedin.com/feed/update/urn:li:activity:7057010976004481024
urn:li:activity:7056632902171705345,"Ok so maybe I was wrong.

I often downplay the importance of networking on LinkedIn or learning in public, but I’m changing my tune.

Last Friday, a former co-worker, Nicole Gooden spoke with me and members in my Not Another Course community (link in bio 😉) and shared how posting on LinkedIn helped her land that first role. She was learning in public, invited others to offer suggestions to the code she posted and a VP of technology did just that.

This post led to a conversation which led to an interview which resulted in an offer.

Crazy.

But not really.

I’ve been posting on LinkedIn consistently for a year which has led to more amazing connections and even some friendships that I never would have expected. I’ve personally mentored or spoke with many of you simply from putting myself out there. I am not a stellar engineer. I just have some opinions and advice that I’m confident will help you. So I share it.

I still get nervous though.

What will people think?

Is this too cringe?

Do I know enough to share?

I know I’m not alone. Here’s what’s worked for me when I get paralyzed by “what-if” spiral thinking and maybe will help you as well:

- 𝗪𝗿𝗶𝘁𝗲 𝗮𝗯𝗼𝘂𝘁 𝘆𝗼𝘂𝗿 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 - you are an expert on this subject
- If you’ve benefitted from the wisdom of others, 𝗶𝘁’𝘀 𝘆𝗼𝘂𝗿 𝗱𝘂𝘁𝘆 𝘁𝗼 𝘀𝗵𝗮𝗿𝗲 𝘄𝗵𝗮𝘁 𝘆𝗼𝘂’𝘃𝗲 𝗹𝗲𝗮𝗿𝗻𝗲𝗱
- 𝗘𝘅𝗽𝗼𝘀𝗲 𝘆𝗼𝘂𝗿𝘀𝗲𝗹𝗳 𝘁𝗼 𝗰𝗿𝗶𝘁𝗶𝗰𝗶𝘀𝗺 - it will help you grow. If it reveals jerks, then good. You now know where NOT to apply
- 𝗡𝗼 𝗼𝗻𝗲 𝗶𝘀 𝗷𝘂𝗱𝗴𝗶𝗻𝗴 𝘆𝗼𝘂 nearly as much as you think

We are all too concerned with our own lives to care much about what you’re posting. We read, chuckle  (or cringe) and continue to scroll 🤷‍♀️.

Worst case - you write something lame.
Best case - you increase your surface area for luck and meet great people.",UNKNOWN,Brian,Jenney,8075,8075,114,28,0,0,0.01758513931888545,,2023-04-25 08:11:36,https://www.linkedin.com/feed/update/urn:li:activity:7056632902171705345
urn:li:activity:7056287129760378880,"Jacob Pixler went from audio engineer to software developer in a non-tech area after graduating a bootcamp. 

𝘞𝘩𝘢𝘵 𝘩𝘦 𝘥𝘪𝘥𝘯'𝘵 𝘥𝘰:

- cold apply
- only apply for remote roles
- target big companies

I'll be honest, I was surprised and impressed by his results and search strategy.

There is no single path towards that first role as a developer and the best approach is the one that works 😉. Check out Erik Andersen's interview with him here: https://lnkd.in/ghNwThnY",UNKNOWN,Brian,Jenney,5457,5457,35,4,1,0,0.007330034817665384,,2023-04-24 09:56:07,https://www.linkedin.com/feed/update/urn:li:activity:7056287129760378880
urn:li:activity:7055241186533376000,"I bet 50% of you are still using 420 console logs to debug your buggy code 🐞.

There's a better way.

Check out my debugging walkthrough below and let me know any tricks you've developed for investigating unexpected features 😅.",VIDEO,Brian,Jenney,50869,50869,331,25,20,0,0.007391535119620987,,2023-04-21 11:30:53,https://www.linkedin.com/feed/update/urn:li:activity:7055241186533376000
urn:li:activity:7054869019115298816,"Here’s the harsh truth about interviews that no one ever really addresses:

Luck is a factor.

You could be absolutely qualified for a position and study all the relevant material and still bomb.

Perhaps your interviewer picks an unreasonably difficult question from their bag of LC problems. The previous interviewee got 2-sum while you got a traveling salesman problem.

Maybe a candidate has recently been selected but they didn't call you in time to cancel... 🥲

𝘖𝘳 𝘱𝘦𝘳𝘩𝘢𝘱𝘴 𝘭𝘶𝘤𝘬 𝘸𝘰𝘳𝘬𝘴 𝘪𝘯 𝘺𝘰𝘶𝘳 𝘧𝘢𝘷𝘰𝘳.

Maybe you study a particular question that you have memorized and get asked that exact same question.

Maybe the interview is not technical at all and just consists of small talk and personality fit. ""Oh you surf too? Hired!"" 🏄‍♀️

So if you’ve recently bombed an interview or are beating yourself up because you see others achieving success on a timeline that doesn’t seem possible for you, realize that interviews are both a game of skill AND chance.",UNKNOWN,Brian,Jenney,6665,6665,106,15,2,0,0.018454613653413353,,2023-04-20 11:40:52,https://www.linkedin.com/feed/update/urn:li:activity:7054869019115298816
urn:li:activity:7054454680046735360,"300 conversation with developers later and I’m convinced that most of us need a sympathetic ear as much as we need career and coding advice.

Here’s the thing: 𝗰𝗼𝗱𝗶𝗻𝗴 𝗶𝘀 𝗳𝘂𝗻.

It can also be:

- lonely
- stressful
- tedious
- confusing

Don’t wrap too much of your identity in the code you write. It can be a fickle beast. 

Sometimes I’m pretty damn good at slinging code. Sometimes I suck. 

So I hit the gym. Run around a lake. Read stuff. Write on here and in my newsletter (𝘺𝘰𝘶 𝘣𝘦𝘵𝘵𝘦𝘳 𝘩𝘢𝘷𝘦 𝘴𝘪𝘨𝘯𝘦𝘥 𝘶𝘱, 𝘴𝘦𝘳𝘪𝘰𝘶𝘴𝘭𝘺 𝘸𝘩𝘢𝘵 𝘵𝘩𝘦 𝘚𝘢𝘮 𝘏𝘪𝘭𝘭? 𝘓𝘪𝘯𝘬 𝘪𝘯 𝘣𝘪𝘰 😅).

This way when one area drags me down, I use another to lift me up.

Outside of coding, what are some hobbies you’ve picked up?",UNKNOWN,Brian,Jenney,7095,7095,78,35,1,0,0.016067653276955602,,2023-04-19 07:40:30,https://www.linkedin.com/feed/update/urn:li:activity:7054454680046735360
urn:li:activity:7054105539470888961,"Yes, I'm an engineering manager.

Yes, I still have a side project.

I am woefully late to the TypeScript party. I miss SQL. I want to use Vercel like a cool kid.

Here's my side project tech stack so far:

- NextJS
- Supabase
- TypeScript
- TailWind

This project will be publicly available with limited access. Members of my Not Another Course community (link in bio 😉)will have full access to help them navigate and sort through the massive number of challenges I have created for them.

If you know me, you know I'm all about side projects.

What technologies are you exploring for your side project?",UNKNOWN,Brian,Jenney,6440,6440,66,26,0,0,0.014285714285714285,,2023-04-18 08:38:28,https://www.linkedin.com/feed/update/urn:li:activity:7054105539470888961
urn:li:activity:7053728822659067905,"More developers should run toward critical incidents. 
 
It's not as risky as you think. 
 
- Likely worst case is you need to lean on your teammates to get it figured out. 
 
- Likely best case is you fix it, stand out and gain a lot of respect. 
 
Feels riskier to never raise your hand.",UNKNOWN,Brian,Jenney,4417,4417,48,7,0,0,0.012451890423364274,,2023-04-17 07:50:53,https://www.linkedin.com/feed/update/urn:li:activity:7053728822659067905
urn:li:activity:7052659711992545281,"Look, no one can tell you how long it’s going to take to get hired.

One thing I’ve learned from working with over a dozen developers last year and having literally hundreds of conversations with many of you here is that there is no single path towards that first job.

My favorite myths:

𝙄𝙩’𝙨 𝙉𝙊𝙏 𝙖 𝙣𝙪𝙢𝙗𝙚𝙧𝙨 𝙜𝙖𝙢𝙚… well, except that sometimes it kind of is. One of my mentees has a wife who sent his resume to tons of companies. He rarely uses LI and has had more interviews than others who have more experience.

𝙔𝙤𝙪 𝙈𝙐𝙎𝙏 𝙡𝙚𝙖𝙧𝙣 𝙞𝙣 𝙥𝙪𝙗𝙡𝙞𝙘. Nothing wrong with that. It takes courage and it’s certainly a strategy I’ve seen work. I’ve also never done it and most of the mentees I work with who have been recently hired haven’t either.

𝙄𝙛 𝙮𝙤𝙪 𝙡𝙚𝙖𝙧𝙣 [𝙭] 𝙮𝙤𝙪 𝙬𝙞𝙡𝙡 𝙗𝙚 𝙢𝙤𝙧𝙚 𝙝𝙞𝙧𝙚-𝙖𝙗𝙡𝙚. This is how Swiss-Army knife developers are born. They start with JS. Then Python. Next, Go. How bout Rust? These are all great languages but just piling on technologies isn’t a recipe for being more hire-able.

The most successful mentees I’ve worked with are persistent, practically optimistic, work on side projects and adjust their strategy when something is not working.",UNKNOWN,Brian,Jenney,2929,2929,27,6,0,0,0.011266643905769888,,2023-04-14 09:14:11,https://www.linkedin.com/feed/update/urn:li:activity:7052659711992545281
urn:li:activity:7052308429553487872,"How most successful bootcamp grads operate:

- Makes coding and learning a routine
- Applies consistently and broadly
- Has 1 or 2 complex side projects
- Re-calibrates their approach when things aren't working
- Has faith that opportunity will present itself

Why most bootcamp grads fail:

- Relies on motivation instead of routine
- Applies to only junior roles
- Tutorial
- Tutorial
- Tutorial
- Doesn’t get hired in 3 months
- 𝘎𝘪𝘷𝘦𝘴 𝘶𝘱",UNKNOWN,Brian,Jenney,8467,8467,67,8,3,0,0.009212235738750444,,2023-04-13 09:06:02,https://www.linkedin.com/feed/update/urn:li:activity:7052308429553487872
urn:li:activity:7051938107117481984,"Congratulations! You got the job. Now here comes the hard part.

Bootcamps do a great job (for the most part) of getting developers hire-able. But what happens after you nail the interview?

I mentor and speak with a lot of developers at the beginning of their careers. They struggle in the same areas that I did after getting hired:

- Git
- Writing good peer reviews
- Estimating features
- Writing unit tests
- Debugging
- JIRA
- Deployment processes

Like too many of us, I learned these skills through trial and error. Over years!

Anything I missed on this list that you wished you had learned before starting your first role as a developer?",UNKNOWN,Brian,Jenney,5877,5877,78,19,1,0,0.016675174408711926,,2023-04-12 08:57:28,https://www.linkedin.com/feed/update/urn:li:activity:7051938107117481984
urn:li:activity:7051574178910539776,"No I don't think ChatGPT will steal your job.

Unless all you do is write code.

A few months ago, our team was doing a large migration of a legacy codebase to a new platform. We had particularly complex nav bar to create and I suggested we leverage our AI overlord 🤲 to create it for us.

That's when we realized we didn't JUST want a nav bar.

We wanted a nav bar that connected to a 3rd party CMS. There were deeply nested values in the response object to safely check. The nav lived in a customized version of the framework we were using and made use of proprietary libraries to track user events. We have a custom component library we needed to use as well to match the mock ups.

I'm not GPT hater. I subscribed to the service and pay for Co-Pilot as well. They're amazing tools for quickly writing tests, creating functions with minimal prompts and learning things like Typescript, Docker and Terraform... or generating ideas for my weekly newsletter 😉.

Developers are more than button pushers. We write code but we also:

- innovate
- translate business requirements to code
- investigate issues through multiple systems

I'd say that's at least 6 months away for ChatGPT 😅.",UNKNOWN,Brian,Jenney,5999,5999,77,9,1,0,0.014502417069511586,,2023-04-11 08:44:17,https://www.linkedin.com/feed/update/urn:li:activity:7051574178910539776
urn:li:activity:7051219290057830401,"I met a developer who created a full stack app that worked pretty well. It even looked nice.

But when I asked how it worked…

Oof.

𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. Too many developers fall into the trap of looking at a tutorial, following along with the instructor and typing what they type.

𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app. 

𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery.

It’s an enticing trap and it may even fool someone into hiring you.

I know I'm not the only one to go through a tutorial, turn it off, open the code editor and realize I have no f*cking clue how to replicate what I just created. 😬

I'm no tutorial hater though. They have their time and place and I'll buy several more this year but I've learned the most when I take the training wheels off, get stuck and build something from scratch. It's the same approach I use with developers I mentor.

I made janky apps and sites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack.

Every side project doesn’t need to be a masterpiece. Leverage them to learn what you won’t at work or what you would like to work on next.

𝗜𝗳 𝘆𝗼𝘂 𝘄𝗮𝗻𝘁 𝗺𝘆 𝘀𝘁𝗲𝗽 𝗯𝘆 𝘀𝘁𝗲𝗽 𝗴𝘂𝗶𝗱𝗲 𝗼𝗻 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 𝗮 𝘀𝗼𝗹𝗶𝗱 𝘀𝗶𝗱𝗲 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗴𝗿𝗮𝗯 𝗶𝘁 𝗵𝗲𝗿𝗲:

https://lnkd.in/gQ94kA97

𝘛𝘪𝘳𝘦𝘥 𝘰𝘧 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭𝘴? 𝘊𝘩𝘦𝘤𝘬 𝘵𝘩𝘪𝘴 𝘰𝘶𝘵:

https://lnkd.in/gQ_xZrxq",UNKNOWN,Brian,Jenney,28680,28680,200,30,14,0,0.008507670850767085,,2023-04-10 09:03:26,https://www.linkedin.com/feed/update/urn:li:activity:7051219290057830401
urn:li:activity:7050138404327456769,"I mentor a lot of boot camp grads. Many are pretty good at using ReactJS. Once I give them this challenge though, they tend to fall apart:

1. Create a simple form using HTML and CSS [𝗡𝗢 𝗳𝗿𝗮𝗺𝗲𝘄𝗼𝗿𝗸𝘀]
2. Add a button to submit the form once all fields are filled
3. After pressing submit, clear the form and display a message that disappears after [x] seconds

Maybe you'll find this challenge easy.

Good.

Maybe it will expose some of the gaps in your HTML/CSS/JS knowledge.

Good.

Tomorrow I'll be sharing another Vanilla JS challenge in my weekly newsletter (link in bio 😉). Looking forward to seeing what people come up with.",UNKNOWN,Brian,Jenney,10671,10671,171,19,4,0,0.018180114328554025,,2023-04-07 09:53:14,https://www.linkedin.com/feed/update/urn:li:activity:7050138404327456769
urn:li:activity:7049848243349815296,"How do I get better at Javascript and ReactJS?

Build stuff.

Not specific enough? Try this:

Here are the subjects I struggled with the most and how I learned them through practice:

- 𝘗𝘳𝘰𝘮𝘪𝘴𝘦𝘴 - implement Promise.all or promisify a timeout
- 𝘊𝘭𝘰𝘴𝘶𝘳𝘦 - create a function that returns another function that can only be called 1 time
- 𝘛𝘩𝘪𝘴 - implement bind and call from scratch
- 𝘙𝘦𝘤𝘶𝘳𝘴𝘪𝘰𝘯 - make a function that searches a deeply nested object for a value
- 𝘞𝘦𝘣𝘱𝘢𝘤𝘬 - 𝚗𝚙𝚖 𝚎𝚓𝚎𝚌𝚝 create-react-app and analyze the bundle size
- 𝘙𝘦𝘥𝘶𝘹 - understand pub/sub pattern and add Redux to a small app using Ducks architecture (look it up 😎)

If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge.

I actually compiled these same challenges and way more in something that resembles a course. You can check it out at my site in the link next to my big head 😉
",UNKNOWN,Brian,Jenney,17569,17569,190,3,7,0,0.011383687176276396,,2023-04-06 14:15:30,https://www.linkedin.com/feed/update/urn:li:activity:7049848243349815296
urn:li:activity:7049801204603752448,"It's easy to write terrible React code. I would know, I've written quite a lot myself and seen even more from working with dozens of mentees at different companies.

While there's no silver bullet for writing ""good"" code, there is certainly some low-hanging fruit which I see most junior developers could benefit from incorporating.

I share 3 in this article for you to check out. 

Oh, and because I like you, I've included an interesting challenge where you will add a custom eslint configuration to a codebase that runs in a GitHub actions pipeline 😉.",ARTICLE,Brian,Jenney,5604,5604,78,5,1,0,0.014989293361884369,,2023-04-06 11:25:33,https://www.linkedin.com/feed/update/urn:li:activity:7049801204603752448
urn:li:activity:7049025890852229123,"Here’s some side projects I want to build. Try to beat me to it:

- 𝘎𝘪𝘵𝘩𝘶𝘣 𝘢𝘯𝘥 𝘎𝘰𝘰𝘨𝘭𝘦 𝘈𝘯𝘢𝘭𝘺𝘵𝘪𝘤𝘴 𝘥𝘢𝘵𝘢 𝘤𝘰𝘮𝘱𝘢𝘳𝘪𝘴𝘰𝘯 𝘵𝘰𝘰𝘭 - compares releases of code with GA metrics to see if a recent release affected things like sessions.

- 𝘊𝘚𝘚 𝘰𝘯 𝘥𝘦𝘮𝘢𝘯𝘥 - load a small script on a website that adds some rules to override current styles. The styles are composed via an admin portal and has version history. Useful for when you want to change the color of that button to green but don’t want to risk a deployment.

- 𝘊𝘚𝘝 𝘵𝘰 𝘵𝘪𝘮𝘦𝘴𝘦𝘳𝘪𝘦𝘴 𝘤𝘩𝘢𝘳𝘵 - API which takes in a csv file with at least one date column. Returns the data as a historical timeline chart with comparisons of multiple columns.

- 𝘗𝘦𝘳𝘴𝘰𝘯𝘢𝘭 𝘵𝘳𝘢𝘪𝘯𝘦𝘳 - TDEE calculator (look it up) which gives user a suggested calorie budget and meal plan based on some basic information as well as a workout routine and expected weight loss from following the plan.

What are you building?",UNKNOWN,Brian,Jenney,4539,4539,38,9,1,0,0.010575016523463317,,2023-04-04 07:49:08,https://www.linkedin.com/feed/update/urn:li:activity:7049025890852229123
urn:li:activity:7048670934496391168,"The best way to learn promises, closures, bind, call, apply and 𝚝𝚑𝚒𝚜 is through practical exercise.

Imagine trying to get in shape watching fitness videos on YouTube.

You might understand what to do, but without action, the knowledge is worthless.

So yes, read books, watch videos and buy that course.

Then put it into action.

Open up codepen or repl or your code editor and write your own example of the concept you learned.

- Promisify a timeout.
- Use closure to implement a curried function.
- Use apply and call to invoke a function with a variable number of arguments.

It doesn’t have to be pretty or even practical.

It just has to lead you to those “aha” moments. This is where stuff starts to click.",UNKNOWN,Brian,Jenney,4184,4184,67,3,2,0,0.017208413001912046,,2023-04-03 08:32:39,https://www.linkedin.com/feed/update/urn:li:activity:7048670934496391168
urn:li:activity:7047608021601976320,"It's 2023 and I meet developers who are still:

- not using any version control
- deploying straight to production with no checks
- avoiding writing tests and relying only on manual QA
- not using linters
- releasing code once a month

Here's the thing: most of us want to change.

So why don't we?

Change is hard. We prefer the devil we know to the devil we don't.

The best engineers I've worked with made change easy.

They added a linter and fixed up all the files with syntax errors. Implemented a pattern that others could copy from. Made the first test and added a check in the pipeline. Created a process and docs that anyone could follow.

You don't have to super senior staff hyperbole engineer to introduce changes. 

In fact, as a junior or new hire you may have a unique perspective. If something seems broken, inefficient or outdated come up with a solution. You'll stand out, your team will be a little better and you will gain trust and authority.",UNKNOWN,Brian,Jenney,5807,5807,66,15,2,0,0.014293094541071121,,2023-03-31 10:19:40,https://www.linkedin.com/feed/update/urn:li:activity:7047608021601976320
urn:li:activity:7047224422251851776,"Recipe for terrible 1 on 1’s:

Manager: “Anything to discuss this week?”

You: “Nah, I’m chilling”

Manager: “Nice. Talk to ya next time 👍”

1 on 1’s can devolve into weekly status updates, which is why I think a lot of people like to skip them. If used correctly, they can be your chance to:

- Share accomplishments
- Discuss your career path
- Find out what it will take to get to the next level
- Get buy-in for process improvements.
- Just catch up and chat like humans.

At best, by skipping 1 on 1’s frequently, you get time back to work on that bug on line 136 and avoid some awkward small talk.

At worst, it will stagnate your career or leave you wondering why you can’t seem to get promoted.",UNKNOWN,Brian,Jenney,7687,7687,46,15,0,0,0.007935475478079875,,2023-03-30 08:38:47,https://www.linkedin.com/feed/update/urn:li:activity:7047224422251851776
urn:li:activity:7046839291066404864,"My tech stack for side projects in 2018:

- Create-React-App
- Material-UI
- Heroku
- Enzyme
- My own authentication system 😅

My tech stack for my next failed startup idea:

- NextJS
- TailwindCSS
- AWS Amplify
- Jest
- Auth0

What are you building with this year?",UNKNOWN,Brian,Jenney,5646,5646,58,25,0,0,0.014700673042862203,,2023-03-29 07:31:30,https://www.linkedin.com/feed/update/urn:li:activity:7046839291066404864
urn:li:activity:7046118753255768064,"What you think front-end development is:

- cute lil' button
- sprinkle in some JS
- ReactJS 😎
- dash of TailwindCSS
- 𝘊𝘢𝘯 𝘺𝘰𝘶 𝘮𝘰𝘷𝘦 𝘵𝘩𝘪𝘴 𝘣𝘶𝘵𝘵𝘰𝘯 𝘰𝘷𝘦𝘳 2𝘱𝘹 𝘵𝘰 𝘵𝘩𝘦 𝘳𝘪𝘨𝘩𝘵?

What it really is:

- Oh you know JS? Work on this Node/Express API 😉
- Rollup? Webpack? Snowpack? [x]pack?
- New framework to solve old framework
- SEO
- How can I decrease bundle size?
- 𝘊𝘢𝘯 𝘺𝘰𝘶 𝘮𝘰𝘷𝘦 𝘵𝘩𝘪𝘴 𝘣𝘶𝘵𝘵𝘰𝘯 𝘰𝘷𝘦𝘳 2𝘱𝘹 𝘵𝘰 𝘵𝘩𝘦 𝘳𝘪𝘨𝘩𝘵?",UNKNOWN,Brian,Jenney,7630,7630,127,12,2,0,0.018479685452162515,,2023-03-27 07:03:07,https://www.linkedin.com/feed/update/urn:li:activity:7046118753255768064
urn:li:activity:7045057029282938880,"I've seen your resume.

Apparently Chat-GPT has as well.

I asked our AI overlord to write out a generic bootcamp grad resume and it did not disappoint.

In the video below I walk through the generic advice I've shared with many of you over phone conversations. Of course, my advice is subjective and if you ask 10 different people for advice on your resume, you may get 13 different takes 🤔.

Carry the 1...

Anyways, hopefully this helps you avoid the dreaded NO pile on every hiring manager's desk.",VIDEO,Brian,Jenney,7340,7340,54,21,3,0,0.010626702997275205,,2023-03-24 08:59:34,https://www.linkedin.com/feed/update/urn:li:activity:7045057029282938880
urn:li:activity:7044670002020458496,"My top 3 products for preventing skill-rot as a developer:

CodeCrafter offers advanced challenges through Github repos like replicating SQL or Docker. It's not your typical DSA material - it's one of the few resources where you are actually building something in your own coding environment.

AlgoExpert While the DSA offering is great, in that it breaks up problems by category/concept, my favorite is the front end material. I have yet to see anything close to the problems they've created here. I've run into more than a few of their questions in interviews myself.

ByteByteGo My prediction is that more coding interviews, even at the beginner level, will begin to focus on system design as coding tests become less trustworthy. ByteByteGo breaks down complex topics like distributed caching and common (and not so common) sys design questions. 

I'm not paid by any of these companies (but maybe I should be 🤔), I just think they have great products and you should consider them whether or not you're on the interview grind.",UNKNOWN,Brian,Jenney,9475,9475,93,9,2,0,0.010976253298153034,,2023-03-23 07:42:12,https://www.linkedin.com/feed/update/urn:li:activity:7044670002020458496
urn:li:activity:7044664252296568832,"Is copy/pasting really so bad?

Honestly, it’s how I’ve survived over the years as a developer.

Every new workplace where I went and every contract I completed, I took note of what the smarter developers were doing.

I wanted to know what books they read.

I read their pull requests, even when I wasn’t the reviewer.

I copied their styles for writing tests, React components and backend code.

I asked how they investigated and debugged critical issues.

I imitated their mannerisms and watched how they spoke in meetings.

I’ve been lucky. I copied from the right people at some amazing companies and worked with developers who I truly think might be genius.

You don’t have to get lucky though.

Nowadays, through the University of YouTube, you have the ability to learn from other amazing developers and copy what makes sense to you.

A few professors who I’ve learned a lot from recently include

- The Primeagen
- Theo from Pinglabs
- Blue Collar Coder

Anyone else you’d suggest?",UNKNOWN,Brian,Jenney,5163,5163,54,14,0,0,0.013170637226418749,,2023-03-23 06:56:27,https://www.linkedin.com/feed/update/urn:li:activity:7044664252296568832
urn:li:activity:7044307049358266368,"Stop building clones of popular apps and start creating things you might actually find useful.

I recently worked with a mentee on a side project that I want to steal.

If you didn’t know, I’m into exercise and tracking calories but I also like to eat out sometimes.

𝗧𝗵𝗲 𝗽𝗿𝗼𝗯𝗹𝗲𝗺: it’s always a game of calorie math when I go to a chain restaurant with my kids.

𝗦𝗼𝗹𝘂𝘁𝗶𝗼𝗻: pick a chain through the app and enter a calorie limit.

The user is shown a list of items that fit their “budget”

Simple.... kinda.

I won’t give away some of the tricky maneuvers we had to pull to get the data for dozens of chain restaurants or potential ways to automate this task by location, but it was very fun to figure out and there’s more work to do.

By the time Tasdeed Aziz finishes this project I think he’ll have something both interesting to speak about in an interview as well as a useful tool that others might want to use… like me 😉.",UNKNOWN,Brian,Jenney,6383,6383,79,11,2,0,0.014413285289049036,,2023-03-22 07:42:22,https://www.linkedin.com/feed/update/urn:li:activity:7044307049358266368
urn:li:activity:7043970072788299777,"I realized that I may have fooled some of you on here.

You read my title, see my follower count and start to assume things.

Just to be clear:

- I still Google the difference between slice and splice
- Get stuck on problems and wait too long to ask for help
- Fail interviews
- Realize how little I know and compare myself to others

I’m kind of glad though. Wouldn’t it be boring to have it all figured out this early in the game?",UNKNOWN,Brian,Jenney,9955,9955,220,24,5,0,0.02501255650426921,,2023-03-21 09:33:06,https://www.linkedin.com/feed/update/urn:li:activity:7043970072788299777
urn:li:activity:7043582777492983808,"If I was a junior developer, pressed for time and studying for an upcoming interview, I’d do the following:

1. Go on Glassdoor and look up previous interview questions.
2. Stalk my interviewers on LI to see if we have anything in common I can bring up during the interview… without being too creepy 😉.
3. Research the company so when I’m inevitably asked “Why do you want to work here?” - I don’t choke.
4. Run a Lighthouse audit on their site if its public-facing and note any areas for improvement.
5. Pray.",UNKNOWN,Brian,Jenney,8578,8578,118,18,4,0,0.016320820704126836,,2023-03-20 07:45:16,https://www.linkedin.com/feed/update/urn:li:activity:7043582777492983808
urn:li:activity:7042510798736211968,"My biggest coding hack?

Well, I used to be an addict.

Maybe I still am?

You see, over a decade ago, my life looked a lot more like a music video for a local rapper than an episode of Silicon Valley. 

Nearly 2 years after my son was born, I had an ultimatum: give up my ridiculous lifestyle or lose my family. I quit [a lot of stuff 😅] immediately with zero plan of how I was going to make it work or if I would succeed.

I had lots of time to kill. I had no clue what normal people did for fun.

I got introduced to HTML and CSS from a co-worker and my mind was blown. So this is how the internet works eh? How the hell did I not know this?

Cue my new addiction. I approached coding with the same unhealthy mindset as I did with, uhhh, previous things. It took over my life.

It worked well overall in that I made a transition that even my mother did not really believe was possible. 

But I don’t suggest it.

Eat, sleep, code is a recipe for burnout, not success.

Once I incorporated exercise, reading and other hobbies into my life, I was happier, less anxiety-ridden and more confident.

I still have a ways to go though, honestly. Even now, I tend to go overboard with any new interest, and while that sounds like a superpower it can also be at the expense of those around me and my own health.

Every once in a while, I share this embarrassing piece of my past in the hopes that a few readers will feel less alone who may be in a similar position. Just know that there are quite a few of us floating around out there and most just don’t post it online.",UNKNOWN,Brian,Jenney,6408,6408,113,13,2,0,0.019975031210986267,,2023-03-17 08:29:44,https://www.linkedin.com/feed/update/urn:li:activity:7042510798736211968
urn:li:activity:7041796535830880256,"Junior dev move 101:

Wasting hours solving a problem a co-worker could’ve helped you figure out in minutes.

Relying on your team mates to dig you out of holes is not a long-term strategy for becoming an effective developer.

Also:

You are ultimately judged on the work you complete. When you bump your head against your technical limit, acknowledge it and ask for help.

But for Jeebus sake please don’t just say “𝘐 𝘤𝘢𝘯’𝘵 𝘧𝘪𝘨𝘶𝘳𝘦 𝘰𝘶𝘵 [𝘹]”

Try this:

- I’m having an issue with [this specific problem]
- I’ve tried [y] but it’s not working in the way I expect which is [this way]
- [Maybe add a screenshot or documentation] 
- Is anyone available to take a look with me sometime today or point me in the right direction?

Don’t let your ego get in the way of progress.",UNKNOWN,Brian,Jenney,15901,15901,171,20,13,0,0.0128293817998868,,2023-03-15 08:58:38,https://www.linkedin.com/feed/update/urn:li:activity:7041796535830880256
urn:li:activity:7041420462387593217,"Are you a JavaScript developer or a ReactJS developer?

If you’re a front end or full-stack developer, your job probably depends on you being a solid ReactJS developer.

Unfortunately, those same skills don’t necessarily translate to being a proficient JavaScript developer.

In fact, I was doing a mock interview a few months ago with a person who tried to use setState while doing a pub-sub implementation. Here’s the thing, we were using Vanilla JS. No frameworks or anything.

I give a challenge to most of the mentees in my program and I’m going to share it with you.

Nothing ground breaking.

Create a form with a button that submits some data to an API and shows a success message on the screen for a couple seconds. Maybe you’ll find this easy. 

Good.

Maybe this will be a reminder to practice your JS skills along with whatever framework you’re currently using.

Also good.

Check it out in comments below.",UNKNOWN,Brian,Jenney,8553,8553,86,14,0,0,0.0116918040453642,,2023-03-14 08:01:30,https://www.linkedin.com/feed/update/urn:li:activity:7041420462387593217
urn:li:activity:7041059816093466624,"As a junior developer, I was really anxious that one day my team would find out I was a hack.

Then, one day, I actually did get “found out” 😬

I was working at a small startup with some incredible talent and when our star engineer left to pursue his own startup, he gave me some candid feedback:

“𝘐𝘵’𝘴 𝘥𝘪𝘧𝘧𝘪𝘤𝘶𝘭𝘵 𝘵𝘰 𝘸𝘰𝘳𝘬 𝘸𝘪𝘵𝘩 𝘺𝘰𝘶 𝘴𝘪𝘯𝘤𝘦 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘩𝘢𝘷𝘦 𝘢 𝘴𝘵𝘳𝘰𝘯𝘨 𝘨𝘳𝘢𝘴𝘱 𝘰𝘧 𝘴𝘰𝘮𝘦 𝘧𝘶𝘯𝘥𝘢𝘮𝘦𝘯𝘵𝘢𝘭 𝘑𝘢𝘷𝘢𝘴𝘤𝘳𝘪𝘱𝘵 𝘤𝘰𝘯𝘤𝘦𝘱𝘵𝘴 𝘭𝘪𝘬𝘦 𝘤𝘭𝘢𝘴𝘴𝘦𝘴 𝘰𝘳 𝘤𝘭𝘰𝘴𝘶𝘳𝘦. 𝘐 𝘵𝘩𝘪𝘯𝘬 𝘺𝘰𝘶 𝘯𝘦𝘦𝘥 𝘵𝘰 𝘨𝘰 𝘣𝘢𝘤𝘬 𝘵𝘰 𝘵𝘩𝘦 𝘣𝘢𝘴𝘪𝘤𝘴 𝘢𝘯𝘥 𝘭𝘦𝘢𝘳𝘯 𝘵𝘩𝘦𝘴𝘦 𝘵𝘩𝘪𝘯𝘨𝘴.”

I was embarrassed.

He was also correct.

I wrote down his suggestions and made a plan to get more proficient with es6/7 and some of the concepts which had always confused me like promises, prototypal inheritance and decorators.

It wasn’t even that difficult.

I wondered why I hadn’t done this earlier.

In fact it’s 𝘁𝗵𝗲 𝗺𝗲𝘁𝗵𝗼𝗱 𝗜 𝘀𝘁𝗶𝗹𝗹 𝘂𝘀𝗲 𝗮𝗻𝗱 𝘀𝗵𝗮𝗿𝗲 𝘄𝗶𝘁𝗵 𝗺𝘆 𝗺𝗲𝗻𝘁𝗲𝗲𝘀:

1. Open code editor
2. Create a practical example leveraging the concept I’m learning
3. Record a video explaining the concept and my code, write it down or both

For promises, I might create a promise using the promise constructor and invoke it using the async/await pattern and then refactor it to use promise chains. If I think others might benefit from an epiphany I’ve had, then I’ll write an article. If not, I’ll make a video for myself that I may never even watch. The video simply forces me to articulate what I’ve learned in plain English.

Hope that’s helpful.",UNKNOWN,Brian,Jenney,8566,8566,170,10,0,0,0.021013308428671492,,2023-03-13 09:02:14,https://www.linkedin.com/feed/update/urn:li:activity:7041059816093466624
urn:li:activity:7040030360147005440,"Your next technical interview might not be so technical at all.

What I’ve learned from working with over 20 front end developers in the last 12 months on the interview grind, is that in addition to having canned answers for explaining closure, promises, and the difference between bind, call and apply, you want to have answers for questions like:

- tell me about a challenging project you’ve worked on?
- how do you resolve conflicts with team mates?
- here’s a website we made, how can we improve it (how do you measure the performance of a webpage basically? psst... use Lighthouse)
 - how do you handle tight deadlines?
- what’s your debugging process?
- why do you want to work here?

So while you're optimizing those tree traversals and palindrome toy problems, don't skip on the questions above.

Any I missed?",UNKNOWN,Brian,Jenney,7979,7979,106,20,1,0,0.01591678155157288,,2023-03-10 10:55:41,https://www.linkedin.com/feed/update/urn:li:activity:7040030360147005440
urn:li:activity:7039209851180261376,"Most people think creating 100 small apps will teach them a lot about web development, but actually, creating 1 complex app will teach you more than those 100 trivial ones combined.

My general rule of thumb for creating a “complex” app?

Build it with the intention to sell.

Solve a problem for yourself, your community or someone else.

❌ MVP

How about MUP?

Minimally Usable Product.

Build the most basic version of this app and deploy it and maybe add a payment system like Stripe.

Either you’ll walk away with a small business or an incredible learning experience you can speak about during an interview.",UNKNOWN,Brian,Jenney,12461,12461,204,26,8,0,0.019099590723055934,,2023-03-08 05:26:17,https://www.linkedin.com/feed/update/urn:li:activity:7039209851180261376
urn:li:activity:7038851351824535552,"A mentee asked me a very difficult question when we first started meeting.

“Should I leave my job?”

He liked his team and manager. The problem was he didn’t feel like he was growing as a developer. 

If he stayed, he likely would’ve been the best damn developer on this small team and had a pretty chill work day. Small UI fix here, squash a little bug there. Easy breezy.

But what happens when you want to leave? Or have to? - I asked.

The danger of staying complacent at a company or team where your skills are not growing is that technology moves fast and you will be very much at the mercy of the market when, not if, you find yourself looking for a new role.

Stability is a myth.

The decision was not easy but he began searching for new roles and not only nailed the interview but became a lead developer at a large organization.

Imagine if he had just “played it safe.”",UNKNOWN,Brian,Jenney,6690,6690,86,12,1,0,0.014798206278026907,,2023-03-07 04:47:13,https://www.linkedin.com/feed/update/urn:li:activity:7038851351824535552
urn:li:activity:7037454853765296128,"The job search can feel unrewarding, draining and shake what little confidence you have in yourself.

It’s a game of both skill and chance.

You can be absolutely qualified and still “fail”.

Rejection is rarely personal, it’s an inevitable consequence of many factors:

- Resume quality is subjective (ask 5 people to look at your resume and get 5 different opinions)
- Some companies hire internal candidates but open roles to the public
- Engineering interviews can be biased in favor of a specific answer even when presented with working (or even better) alternatives

So what does this mean?

Expect failure and learn from it.

Try your hardest not to take it personally.

Whatever you do, please do not stop playing the game.

You only have to win once.",UNKNOWN,Brian,Jenney,5199,5199,65,6,2,0,0.014041161761877283,,2023-03-03 08:40:01,https://www.linkedin.com/feed/update/urn:li:activity:7037454853765296128
urn:li:activity:7037084970179321858,"If I was a junior developer looking to increase my marketability, then before I went for that AWS cert, learned Python or Go, I’d expand my JS knowledge to include TypeScript.

No matter how you feel about TypeScript, it’s impossible to ignore.

The demand for developers who know TS is exploding and though I’ve tried my best to avoid using it on my front end apps, I’m currently using it for all my backend apps and adding a lot more material to my code challenges which incorporate TS.

It’s by no means a silver bullet for those on the job hunt, but it’s probably the most practical tool to add to your belt as a front end developer.

(By the way - I’m not a Typescript hater I’m just a serially late adopter… I used ReactJS for 2 years before I enjoyed it 🤷‍♂️)",UNKNOWN,Brian,Jenney,8518,8518,113,26,1,0,0.01643578304766377,,2023-03-02 08:26:34,https://www.linkedin.com/feed/update/urn:li:activity:7037084970179321858
urn:li:activity:7036370906390167552,"Before you take my advice or the suggestions of any influencer out there, ask yourself 3 things about this person:

1. Do I want to be anything like them career-wise?
2. Do they seem happy?
3. Does their work history support their claims?

If the answer to all 3 is no, then maybe don’t take their advice.",UNKNOWN,Brian,Jenney,5226,5226,59,9,0,0,0.013011863758132415,,2023-02-28 08:26:50,https://www.linkedin.com/feed/update/urn:li:activity:7036370906390167552
urn:li:activity:7036005613876711424,"A young man made a Tik Tok about me recently.

He did not like the cut of my jib.

You see, I said something that ruffled his feathers quite a bit.

It was this:

“𝘠𝘰𝘶 𝘴𝘩𝘰𝘶𝘭𝘥 𝘭𝘦𝘢𝘳𝘯 𝘏𝘛𝘔𝘓 𝘢𝘯𝘥 𝘊𝘚𝘚 𝘣𝘦𝘧𝘰𝘳𝘦 𝘑𝘢𝘷𝘢𝘚𝘤𝘳𝘪𝘱𝘵” 

Not sure why or how this would controversial but yet, here we are.

Last year I interviewed a dozen bootcamp grads and participated in about 50 other mock interviews through my own program and as a volunteer.

I asked most of these candidates what I considered a softball question:

”Explain the difference between an id and class in CSS?”

Around half of the grads could not. 

As a front end developer you may be using ReactJS, Angular or Vue (I’m sorry for you - be strong) but you better know how to wield some CSS and use HTML elements in a reasonable (and accessible) manner.

Maybe this is my cue to get my old ass off Tik-Tok.",UNKNOWN,Brian,Jenney,9699,9699,113,43,1,0,0.016187235797504897,,2023-02-27 09:27:26,https://www.linkedin.com/feed/update/urn:li:activity:7036005613876711424
urn:li:activity:7034932418000158720,"I became an engineering manager last year and I've seen all your resumes.

I have 3 piles in which I divide resumes for candidates.

No pile.
Maybe pile.
Yes pile.

Here's what's in each pile for junior developers.

🛑 𝘕𝘰 𝘱𝘪𝘭𝘦:

Clearly, this person won't work. They have zero overlap in the skills we're looking for or a ton of errors on their resume.

It's unclear from their resume what they are looking for. They have either no projects or work experience which is relevant.

Maybe they clicked the easy-apply button and were playing spin the wheel. 🤷🏻‍♀️

🤔 𝘔𝘢𝘺𝘣𝘦 𝘱𝘪𝘭𝘦:

Where most generic resumes end up. 

They usually have an objective section that starts with ""passionate developer...""

Some relevant projects but little work experience.

The projects are 1 of a few: 

Clone of [x]
Chat app
[thing] generator

Not a ""NO"" but hard to say yes since they look like a lot of other candidates.

💪 𝘠𝘦𝘴 𝘱𝘪𝘭𝘦:

Skills match our needs.

Projects are interesting (or just different from the maybe pile) and they have some non-trivial accomplishments.

I feel like I can imagine this person on this team making an impact.

""Ooh, they did [something cool] on that team/project. I wonder if they can do that here for us?""

Ask 10 different people what should be on your resume and you'll probably get 10 different answers. 

That being said. I've helped hire developers at every company where I've worked and looked at at least 200 resumes just this year alone from people who seem to have a lot of ""luck"" and those who never get to the interview.

I'll be going over the patterns I've seen specifically for junior developers looking to avoid the Maybe and No piles this weekend here: https://lnkd.in/gVryxdVF",UNKNOWN,Brian,Jenney,11889,11889,123,22,14,0,0.013373706787787031,,2023-02-24 09:29:05,https://www.linkedin.com/feed/update/urn:li:activity:7034932418000158720
urn:li:activity:7034552410454777859,"Turn off the tutorial. 

Open the code editor.

You’re going to learn a hell of a lot more from:

- getting stuck
- reading the documentation
- realizing the docs suck
- scouring Stack Overflow
- wait, no one answered that question
- trying chatGPT
- throwing everything at the wall
- finally figuring it out
- wanting to share excitement and realizing your non-coding friends don't care 😑

as opposed to:

- typing what another person has typed",UNKNOWN,Brian,Jenney,51551,51551,600,40,24,0,0.01288044848790518,,2023-02-23 08:22:45,https://www.linkedin.com/feed/update/urn:li:activity:7034552410454777859
urn:li:activity:7034211263710683138,"Look, no one can tell you how long it’s going to take to get hired.

One thing I’ve learned from working with over a dozen developers last year and having literally hundreds of conversations with many of you here is that there is no single path towards that first job.

My favorite myths:

𝗜𝘁’𝘀 𝗡𝗢𝗧 𝗮 𝗻𝘂𝗺𝗯𝗲𝗿𝘀 𝗴𝗮𝗺𝗲… well, except that sometimes it kind of is. One of my mentees has a wife who sent his resume to tons of companies. He rarely uses LI and has had more interviews than others who have more experience.

𝗬𝗼𝘂 𝗠𝗨𝗦𝗧 𝗹𝗲𝗮𝗿𝗻 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰. Nothing wrong with that. It takes courage and it’s certainly a strategy I’ve seen work. I’ve also never done it and most of the mentees I work with who have been recently hired haven’t either.

𝗜𝗳 𝘆𝗼𝘂 𝗹𝗲𝗮𝗿𝗻 [𝘅] 𝘆𝗼𝘂 𝘄𝗶𝗹𝗹 𝗯𝗲 𝗺𝗼𝗿𝗲 𝗵𝗶𝗿𝗲-𝗮𝗯𝗹𝗲. This is how Swiss-Army knife developers are born. They start with JS. Then Python. Next, Go. How bout Rust? These are all great languages but just piling on technologies isn’t a recipe for being more hire-able.

The most successful mentees I’ve worked with are persistent, practically optimistic, work on side projects and adjust their strategy when something is not working.",UNKNOWN,Brian,Jenney,6491,6491,75,11,0,0,0.013249114158065014,,2023-02-22 10:30:44,https://www.linkedin.com/feed/update/urn:li:activity:7034211263710683138
urn:li:activity:7033873383758979073,"The stuff your bootcamp didn’t teach you about being a software developer:

- on-calls can be brutal - if something breaks, you will be the first to know - even if it’s 2AM on a Saturday
- your day may be up to 50% meetings
- I know they asked you to traverse a binary tree during the interview but you’re likely to get a lot of requests to change the color of a button
- if you didn’t negotiate your salary - you lost money
- you won’t be building anything from scratch
- sometimes sh*tty code is good enough
- PRs can be emotional… try to distance yourself from the code
- JIRA
- Git strategy",UNKNOWN,Brian,Jenney,13017,13017,212,20,9,0,0.01851425059537528,,2023-02-21 11:41:42,https://www.linkedin.com/feed/update/urn:li:activity:7033873383758979073
urn:li:activity:7033467712865533953,"Recently, mentees in my program got a chance to meet Ben Denzer and learn about his journey from crane operator to engineering manager as a self-taught developer and his side project (you may have used this 😉) that is now a full blown business!

Some takeaways from his chat with us:

• learn TypeScript to stand out in a sea of junior devs
• make sure your projects on your resume are mobile responsive
• create side projects... duh

Check out his chat with us here to learn how he changed his life and career and launched a business by teaching himself to code and some no-nonsense advice which may help you: https://lnkd.in/gxN8PKND",UNKNOWN,Brian,Jenney,3477,3477,28,11,1,0,0.011504170261719874,,2023-02-20 08:58:17,https://www.linkedin.com/feed/update/urn:li:activity:7033467712865533953
urn:li:activity:7033467850681982976,"Recently, mentees in my program got a chance to meet Ben Denzer and learn about his journey from crane operator to engineering manager as a self-taught developer and his side project (you may have used this 😉) that is now a full blown business!

Some takeaways from his chat with us:

• learn TypeScript to stand out in a sea of junior devs
• make sure your projects on your resume are mobile responsive
• create side projects... duh

Check out his chat with us here to learn how he changed his life and career and launched a business by teaching himself to code and some no-nonsense advice which may help you: https://lnkd.in/gxN8PKND",UNKNOWN,Brian,Jenney,72,72,0,0,0,0,0,,2023-02-20 08:58:17,https://www.linkedin.com/feed/update/urn:li:activity:7033467850681982976
urn:li:activity:7032401931645968384,"I bet your coding bootcamp or course from the University of YouTube skipped this important skill you will need as a JS developer:

Finding and squishing bugs.

Only half of programming is coding. The other 90% is debugging... 🤔

Or something like that.  

Anyways, check out this video walking you through some debugging techniques I've stolen from smarter developers over the years.",VIDEO,Brian,Jenney,5095,5095,178,20,14,0,0.041609421000981354,,2023-02-17 09:36:41,https://www.linkedin.com/feed/update/urn:li:activity:7032401931645968384
urn:li:activity:7032061882534416384,"If you're a junior developer preparing for interviews - don't fall into the LeetCode rabbit hole.

You're more likely to encounter:

• JS trivia
• String and Array manipulation problems
• Frequency counters
• Build a React component that fetches data
• Tell me about a project you worked on

Instead of:

• Traverse this tree in O(n) 🧐",UNKNOWN,Brian,Jenney,31618,31618,386,26,12,0,0.013410082864191283,,2023-02-16 11:34:27,https://www.linkedin.com/feed/update/urn:li:activity:7032061882534416384
urn:li:activity:7031998144401862656,"The most dangerous stand-up status:

“Worked on ticket 420 yesterday. Continuing on it today. No blockers”

What that often really means:

“𝘐’𝘮 𝘴𝘵𝘶𝘤𝘬 𝘢𝘯𝘥 𝘤𝘢𝘯’𝘵 𝘧𝘪𝘨𝘶𝘳𝘦 𝘵𝘩𝘪𝘴 𝘴𝘩*𝘵 𝘰𝘶𝘵 𝘣𝘶𝘵 𝘐 𝘥𝘰𝘯’𝘵 𝘸𝘢𝘯𝘵 𝘵𝘰 𝘢𝘥𝘮𝘪𝘵 𝘵𝘩𝘢𝘵”

I was the king of these updates.

Sometimes it worked out in my favor and I just figured sh*t out.

The real issue is that these generic updates are misleading at best and can deteriorate trust at worst. When a sprint ends or a project is finally due and you have to ask for an extension, the team will be blind-sided.

It took me a couple years and lot more courage to admit when I reached my technical depth.

It’s gotten easier through repetition but I still find myself sometimes slipping into old habits. Ego, fear, hard-headedness… take your pick.

I’d argue that if you are NOT bumping up against the limits of your technical capacity as a junior dev, it’s likely that you aren’t growing.",UNKNOWN,Brian,Jenney,18752,18752,150,15,2,0,0.008905716723549489,,2023-02-16 07:03:44,https://www.linkedin.com/feed/update/urn:li:activity:7031998144401862656
urn:li:activity:7031631887282438145,"People management is NOT the natural career progression for most software developers.

Project management, however, is.

The problem is that most of us just stumble across project management at some point or are thrust into it through a promotion.

As a junior developer, you are concerned with your code and making sure it works. That’s a task in itself at this stage.

Moving into mid and senior roles, there becomes a not-so-silent expectation that you are the shepherd of the codebase. You should have an overview of the general health of the codebase and the team.

So how do you get practice at these earlier stages to prepare you for the big leagues?

I recommend looking for opportunities to lead epics.

An epic is a high-level story or concept that represents a large body of work and usually includes multiple user stories.

Taking the lead doesn’t mean necessarily writing any code at all but rather organizing the stories in a logical order and keeping track of the pieces and overall delivery.

This provides a good opportunity to dip your toe into project management and get a deeper understanding of the codebase.",UNKNOWN,Brian,Jenney,4993,4993,38,9,1,0,0.009613458842379331,,2023-02-15 07:24:35,https://www.linkedin.com/feed/update/urn:li:activity:7031631887282438145
urn:li:activity:7030977564357644288,"Top 5 ways to save your resume from landing in the NO pile, for all your junior devs:

1. Stop calling yourself ""junior"" or ""aspiring"". 𝗬𝗼𝘂 𝗮𝗿𝗲 𝗮 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 or software engineer or whatever.
2. 𝗨𝘀𝗲 𝘀𝘁𝗿𝗼𝗻𝗴 𝗹𝗮𝗻𝗴𝘂𝗮𝗴𝗲. “Led development on [x] feature which [improved some metric]” or “architected” sounds better than “worked with a team on [generic thing]”
3. 𝗟𝗲𝗮𝗱 𝘄𝗶𝘁𝗵 𝘆𝗼𝘂𝗿 𝗿𝗲𝗹𝗲𝘃𝗮𝗻𝘁 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲. It can be confusing to look at resume for a dev role and see nothing coding related. Put your projects/volunteer work/side projects at the top.
4. That unique formatting you're using might get destroyed once your resume passes through some intake system. 𝗧𝗿𝘆 𝘂𝘀𝗶𝗻𝗴 𝗮 𝗽𝗹𝗮𝗶𝗻 𝗿𝗲𝘀𝘂𝗺𝗲.
5. Visit this freakin' site: https://lnkd.in/g4HQ6Stb

What else would you suggest?",UNKNOWN,Brian,Jenney,7516,7516,65,6,2,0,0.009712613092070251,,2023-02-13 11:19:55,https://www.linkedin.com/feed/update/urn:li:activity:7030977564357644288
urn:li:activity:7029848073149267968,"2 minutes into the interview and I already knew I failed.

I politely told my interviewer, ""I don't think it's worth moving forward and I don't want to waste your time""

He was a bit shocked and even encouraged me to try. So I did.

The problem was a particularly complicated one that would require recursion. I had no freaking clue where to start. So I quit on the spot. 😢

I made an oath that day to learn how to leverage recursion for silly-ass toy problems in interviews. This time... it was personal.

Honestly, they don't have to be intimidating and I'm going to show you a recipe I use to construct the majority of recursive solutions along with a practical example that is NOT fibonacci.",VIDEO,Brian,Jenney,3053,3053,148,18,5,0,0.05601048149361284,,2023-02-10 09:02:52,https://www.linkedin.com/feed/update/urn:li:activity:7029848073149267968
urn:li:activity:7029493275149414400,"Last week I wrote about a couple mentees of mine who had success in pivoting to QA roles directly from full stack bootcamps.

One uses Selenium and one will be using Cypress.io to create e2e (end-to-end) tests.

I like you... I think 🤔

Either way, I'm gonna share with you a challenge I've created for mentees in my community to introduce you to Cypress with a small RemixJS app that could use some additional tests which will be up to you to write.

Check it out here: https://lnkd.in/dyHT3mHT",UNKNOWN,Brian,Jenney,2795,2795,22,5,0,0,0.00966010733452594,,2023-02-09 08:58:08,https://www.linkedin.com/feed/update/urn:li:activity:7029493275149414400
urn:li:activity:7029098487933796352,"Before you take my advice, let me be clear:

I will only ever give you suggestions based on my own experience or what I’ve seen work for others.

Will it work for you?

Perhaps.

As a junior or soon-to-be-developer, some generic advice can be helpful.

Your problems are fairly generic at this stage and what you mostly need is direction.

As a team lead or senior, more context is needed to deliver useful advice and you have to be pickier with what advice you accept.

The reasons I post here are two-fold:

1. I have received considerable help from strangers online and I feel it’s only right to give back
2. I provide paid mentorship and courses to help developers be better at what they do and this is how people find me and make sure I'm not crazy

I’ll continue to do free convos with developers and give you spicy, and not-so-spicy advice.

I encourage you to take what makes sense and ignore what doesn’t.",UNKNOWN,Brian,Jenney,3700,3700,48,9,1,0,0.015675675675675675,,2023-02-08 07:13:35,https://www.linkedin.com/feed/update/urn:li:activity:7029098487933796352
urn:li:activity:7028738272864468993,"Your portfolio project probably looks a lot like other portfolio projects out there.

TODO app
Weather app
Clone of [x]
Blog
Chat app

Here’s the thing, there’s nothing at all wrong with these projects. They can certainly teach you a lot. 

BUT - when digging through a stack of resumes for an open junior developer position, it is hard to stand out.

If your goal is to stand out AND learn something try this:

- Start with an API or a real-world problem you are familiar with
- Sketch out the features using a tool like Excalidraw
- Build that sh*t
- Deploy it on AWS like an adult

Now you have an interesting technical story and maybe even your next startup idea.

If you’re looking for some interesting API’s Anirudh Kadian has compiled a list of interesting AI flavored ones (this guy’s a true hero) 🙇🏽‍♂️

👇

https://lnkd.in/gjCg5RKZ",UNKNOWN,Brian,Jenney,11482,11482,113,33,5,0,0.013151018986239332,,2023-02-07 07:05:32,https://www.linkedin.com/feed/update/urn:li:activity:7028738272864468993
urn:li:activity:7028372991092682752,"I’ve gone from struggling junior developer to struggling engineering manager over the last 8 years and that little voice in my head has been present that entire time.

“𝘛𝘩𝘦𝘺’𝘳𝘦 𝘨𝘰𝘯𝘯𝘢 𝘧𝘪𝘯𝘥 𝘺𝘰𝘶 𝘰𝘶𝘵”

It’s lot quieter than when I started but it never left. I’ve come to accept it and see its patterns.

- Promotion?
Voice gets louder.

- Accomplishment?
Voice gets quieter.

- New job?
Deafeningly loud 😬

- Solve an LC hard in 30 minutes?
🤐 😎

The feeling that you’re just not quite good enough may in fact be true. 

I try to be objective. I write out my weaknesses. Write out my strengths. Where is the gap between who I want to be and who I am currently and what will it take for me to get there?",UNKNOWN,Brian,Jenney,4527,4527,59,12,1,0,0.015904572564612324,,2023-02-06 07:28:52,https://www.linkedin.com/feed/update/urn:li:activity:7028372991092682752
urn:li:activity:7027316085376843777,"Yesterday a mentee I've been working with got a verbal offer for a QA position. 

Coincidentally, yesterday, I wrote a post about another mentee who also successfully transitioned to a QA role. Maybe I'm just psychic... 🤔

Anyways, he hasn't even graduated his bootcamp and here he is with an offer. 🤯

I'm not at all advocating that everyone switch to QA or that it's the right choice. But it is 𝘈 choice and one that has worked for others.

This weekend I'll be breaking down these success stories and sharing a challenge to help you learn Cypress.io, an end-to-end (e2e) testing framework using your most loved (or hated) language - Javascript.

Link in comments 😉.",IMAGE,Brian,Jenney,4817,4817,54,3,0,0,0.011833091135561552,,2023-02-03 09:21:23,https://www.linkedin.com/feed/update/urn:li:activity:7027316085376843777
urn:li:activity:7026925884964032512,"The job market for developers doesn’t suck.

It’s just less piping hot.

So yes, getting that first role is difficult, arduous and more luck is involved than many would like to admit.

A mentee of mine had that same issue last year and I suggested we pivot into searching for QA roles.

Here’s what he did:

- 𝘚𝘵𝘶𝘥𝘺 𝘊𝘺𝘱𝘳𝘦𝘴𝘴 𝘢𝘯𝘥 𝘚𝘦𝘭𝘦𝘯𝘪𝘶𝘮
- 𝘗𝘳𝘢𝘤𝘵𝘪𝘤𝘦 𝘸𝘳𝘪𝘵𝘪𝘯𝘨 𝘢𝘶𝘵𝘰𝘮𝘢𝘵𝘦𝘥 𝘵𝘦𝘴𝘵𝘴 𝘢𝘵 https://lnkd.in/gaq774ga
- 𝘜𝘱𝘥𝘢𝘵𝘦 𝘩𝘪𝘴 𝘳𝘦𝘴𝘶𝘮𝘦 𝘵𝘰 𝘳𝘦𝘧𝘭𝘦𝘤𝘵 𝘳𝘦𝘭𝘦𝘷𝘢𝘯𝘵 𝘘𝘈 𝘱𝘳𝘰𝘫𝘦𝘤𝘵𝘴 𝘧𝘳𝘰𝘮 𝘵𝘩𝘦 𝘱𝘳𝘦𝘷𝘪𝘰𝘶𝘴 𝘴𝘵𝘦𝘱
- 𝘈𝘱𝘱𝘭𝘺 𝘢 𝘭𝘰𝘵

He landed a role at a tech company shortly after as a QA automation engineer where he will write code for end to end test suites.

There’s more to the tech-o-sphere than ReactJS. There’s DevOps, QA, product, data, sales... 

Don’t limit yourself to what your bootcamp taught you.",UNKNOWN,Brian,Jenney,21896,21896,208,14,5,0,0.01036719035440263,,2023-02-02 07:01:14,https://www.linkedin.com/feed/update/urn:li:activity:7026925884964032512
urn:li:activity:7026559963669958656,"Nearly a decade ago I started my first day as a developer. I knew HTML, CSS, Jquery and a little AngularJS... very little.

The night before the first day, I was barely able to sleep. Would I be found out as a fake developer and fired immediately?

Would they give me a task I couldn’t figure out?

How long before they realized they made an error in their hiring process?

Well, I never got “found out” and took on more than a few tasks I couldn’t figure out.

I still have these fears each time I start a new position.

Here are some ways I get over my anxiety:

- make a 30/60/90 day plan which usually includes delivering a small feature
- immediately explore the codebase and identify areas I just don’t understand
- ask a bunch of questions while I’m still new enough that no one will judge me 😅
- take notes
- realize I’m here to do more observing than anything during my first month

So if you just got hired, congrats! 

I also know it can be just as stressful as the interview process. 

What’s some tips you have for people just starting a new dev position?",UNKNOWN,Brian,Jenney,8810,8810,131,16,0,0,0.016685584562996594,,2023-02-01 07:49:54,https://www.linkedin.com/feed/update/urn:li:activity:7026559963669958656
urn:li:activity:7026199049628254208,"Ok, we’ve seen enough good code on this damn site.

It's hard to know what good code is if you can't identify bad code.

Below is some janky ass code for you to refactor. Here's the thing though - it does in fact work with the expected arguments. Could it be improved? Hell yeah it can.

I’m curious, what’s the most unforgivable mistake I’ve made here and how would you fix it?",IMAGE,Brian,Jenney,33206,33206,74,66,6,0,0.004396795759802445,,2023-01-31 07:15:04,https://www.linkedin.com/feed/update/urn:li:activity:7026199049628254208
urn:li:activity:7025835385209446400,"250 conversation with developers later and I’m convinced that most of us need a sympathetic ear as much as we need career and coding advice.

Here’s the thing, coding is fun but it can also be:

- lonely
- stressful
- tedious
- confusing

Don’t wrap too much of your identity in the code you write. It can be a fickle beast. Sometimes I’m pretty damn good at slinging code. Sometimes I suck. 

So I hit the gym. Run around a lake. Read stuff. Write on here and in my newsletter (you better have signed up, seriously wtf).

This way when one area drags me down, I use another to lift me up.

Outside of coding, what are some hobbies you’ve picked up?",UNKNOWN,Brian,Jenney,5796,5796,57,12,0,0,0.011904761904761904,,2023-01-30 07:12:58,https://www.linkedin.com/feed/update/urn:li:activity:7025835385209446400
urn:li:activity:7024409899027632128,"Stuck on what to build for your next side project?

Here’s the process I’ve been using for years to learn everything from Typescript to AWS Lambdas:

1. 𝗣𝗶𝗰𝗸 𝗮𝗻 𝗔𝗣𝗜 - this is important, you need some external data or functionality in order to build something interesting or you’ll be mostly stuck with TODO or clone apps
   a. 𝘜𝘴𝘦 𝘗𝘰𝘴𝘵𝘮𝘢𝘯 or some other http client to test the API and make sure it’s worthwhile
   b. If the API is not free, consider how you might 𝘭𝘦𝘷𝘦𝘳𝘢𝘨𝘦 𝘤𝘢𝘤𝘩𝘪𝘯𝘨 𝘵𝘰 𝘭𝘪𝘮𝘪𝘵 𝘳𝘦𝘲𝘶𝘦𝘴𝘵𝘴
2. 𝗦𝗰𝗮𝗳𝗳𝗼𝗹𝗱 𝗼𝘂𝘁 𝘁𝗵𝗲 𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲 𝗼𝗳 𝘁𝗵𝗲 𝗮𝗽𝗽 - what is the first page a user lands on? What happens when they click a button? Where is data stored?
3. 𝗕𝗲𝗴𝗶𝗻 𝗯𝘂𝗶𝗹𝗱𝗶𝗻𝗴 using the new technology/language you want to learn

You will get stuck.

This is kinda what you want.

Google, ChatGPT and Stack Overflow through roadblocks. This will be a messy affair but you will learn a ton.",UNKNOWN,Brian,Jenney,5884,5884,69,12,2,0,0.014106050305914344,,2023-01-26 08:22:42,https://www.linkedin.com/feed/update/urn:li:activity:7024409899027632128
urn:li:activity:7024187553276715008,"So how does it feel to be the worst developer on a team? 

Not so great.

It's also an experience that was pivotal in my career as a software developer.",ARTICLE,Brian,Jenney,2767,2767,49,5,1,0,0.019877123238164075,,2023-01-25 18:20:25,https://www.linkedin.com/feed/update/urn:li:activity:7024187553276715008
urn:li:activity:7024025016161751040,"𝘛𝘋𝘋 𝘰𝘳 𝘥𝘪𝘦!

Or you know, TaDD (test after development is done). Or, perhaps manual QA is the correct choice.

𝘊𝘰𝘥𝘦 𝘴𝘩𝘰𝘶𝘭𝘥 𝘢𝘭𝘸𝘢𝘺𝘴 𝘧𝘰𝘭𝘭𝘰𝘸 𝘋𝘙𝘠 𝘱𝘳𝘪𝘯𝘤𝘪𝘱𝘭𝘦𝘴!

Except, maybe the abstraction is more clever than useful in this case.

𝘛𝘺𝘱𝘦𝘚𝘤𝘳𝘪𝘱𝘵 𝘪𝘴 𝘵𝘩𝘦 𝘰𝘯𝘭𝘺 𝘤𝘩𝘰𝘪𝘤𝘦 𝘧𝘰𝘳 𝘴𝘦𝘳𝘪𝘰𝘶𝘴 𝘑𝘚 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴!

But maybe it’s overkill for this simple UI app.

𝘈𝘨𝘪𝘭𝘦 𝘪𝘴 𝘩𝘰𝘸 𝘳𝘦𝘢𝘭 𝘴𝘰𝘧𝘵𝘸𝘢𝘳𝘦 𝘵𝘦𝘢𝘮𝘴 𝘸𝘰𝘳𝘬.

We have an aggressive deadline we cannot miss. Perhaps waterfall will work here.

Be careful falling into dogmatic, knee-jerk responses when it comes to writing software. One thing I’ve learned is that there are often exceptions to the rules we accept as coding law.

What's a code commandment you've broken?",UNKNOWN,Brian,Jenney,3080,3080,24,4,1,0,0.009415584415584415,,2023-01-25 06:57:31,https://www.linkedin.com/feed/update/urn:li:activity:7024025016161751040
urn:li:activity:7023665386994761728,"The developer who failed 100 interviews.

At first I didn’t believe him.

I mean, 100? There’s no way. Then we did a mock interview.

Oof.

Here’s the thing - he was a very personable dude. Polite, well-spoken and confident. During the interview though, he didn’t come off as such.

His answers were short to the point I could see how they could be perceived as rude. He cut me off a few times as I asked a question or tried to explain a concept. When asked about a project he had worked on, he gave a cursory overview of a trivial feature and didn’t offer much detail. He used some internal names for the app which didn’t make sense to me.

After the interview, I brought some of these issues to his attention.

We dug into his former role and the work he did. It was interesting. He had worked on challenging technical problems across the stack.

So why in the hell wasn’t he mentioning this in the interview?

He was genuinely surprised with my perception and feedback. 100 interviews deep and here he was getting this hot-take for the first time.

Companies will rarely give feedback to candidates and I know that’s “unfair.” It’s also reality.

Legal reasons. Awkwardness. Time constraints. Pick one.

Many of us are overly focus on the technical aspect of interviews. I mean, we’re software developers. 

Don’t underestimate the human aspect.",UNKNOWN,Brian,Jenney,10097,10097,125,22,2,0,0.014756858472813708,,2023-01-24 07:35:25,https://www.linkedin.com/feed/update/urn:li:activity:7023665386994761728
urn:li:activity:7023302875975995392,"How do I get better at Javascript?

Build stuff.

Not specific enough? Try this:

Here are the subjects I struggled the most with and how I learned them through practice:

- Promises - implement Promise.all
- Closure - create a function that returns another function that can only be called 1 time
- This - implement bind and call from scratch
- Recursion - make a function that searches a deeply nested object for a value

If you’re feeling brave, record a video going over the concept and share it with others so you can spread and reinforce your own knowledge.",UNKNOWN,Brian,Jenney,11541,11541,147,14,0,0,0.01395026427519279,,2023-01-23 07:25:18,https://www.linkedin.com/feed/update/urn:li:activity:7023302875975995392
urn:li:activity:7022237846707007488,"Am I... average?

In reality, many amazing teams are made up of mostly ""average"" developers. Not teams of ninjas/rockstars/wizards/elves 🧝‍♂️

As an average developer there’s still a lot of room to make impact outside being the highest technical authority.

As a very non-rockstar coder, here are some things I’ve done over the years which helped me stand out:

- start an engineering book club
- volunteer for on-call
- onboard junior members
- create a PR template to streamline the code review process
- offer to assist with others’ work
- actually talk during pointing sessions and clarify tasks instead of just nodding my head

Of course, getting work done in a timely manner and not significantly adding to the number of bugs in our backlog didn’t hurt either. 

Let me be clear, you cannot be technically incompetent, start a book club and expect to get recognized and promoted… BUT you also don’t need to wait until you understand JS on a Kyle Simpson level to offer your insight, suggest changes and speak up.",UNKNOWN,Brian,Jenney,9429,9429,78,22,0,0,0.010605578534309046,,2023-01-20 08:45:34,https://www.linkedin.com/feed/update/urn:li:activity:7022237846707007488
urn:li:activity:7021848156548071424,"I had a mentee who struggled to get hired after 6 months of mass applying.

I suggested he consider QA roles.

We studied Cypress.io  and Selenium . He was hired within a couple of months at a well-known company as a QA Automation Engineer.

Full-Stack and Frontend are not the only entryways into a career in software development.",UNKNOWN,Brian,Jenney,20709,20709,211,36,6,0,0.012216910521995267,,2023-01-19 06:48:41,https://www.linkedin.com/feed/update/urn:li:activity:7021848156548071424
urn:li:activity:7021156664162586624,"I’ve successfully networked my way into 0 of my last 4 jobs as a developer. 

I built exactly 0 projects in public.

I’ve also worked with 20 developers this year. They’ve overwhelmingly had the same experience.

The boring truth:

- They applied a lot.
- They worked with recruiters to get interviews.

They kept their skills sharp with side projects and mentorship.

I know, I know. Everyone must build in public and network their way to their first role. I don’t doubt this works for a lot of people. I’ve seen it work. It’s just not the only way.",UNKNOWN,Brian,Jenney,12509,12509,157,28,1,0,0.014869294108242066,,2023-01-17 09:51:16,https://www.linkedin.com/feed/update/urn:li:activity:7021156664162586624
urn:li:activity:7020786124197412865,"Concepts and technologies JS developers consistently struggle with:

Redux
Webpack
Closure
Promises
Recursion

I have material on each of these subjects in my course library but there’s 1 challenge that students have found more difficult than solving the actual technical problems:

𝘌𝘹𝘱𝘭𝘢𝘪𝘯𝘪𝘯𝘨 𝘵𝘩𝘦𝘴𝘦 𝘤𝘰𝘯𝘤𝘦𝘱𝘵𝘴 𝘰𝘯 𝘷𝘪𝘥𝘦𝘰.

It’s tough. It’s awkward.

It’s also the best way to ensure you actually understand the concept. 

Making this material was pretty eye opening for me honestly.

I had to refresh and re-learn a lot of things I thought I knew.

You certainly don’t need to buy my course to do this (you should though 😉) and I encourage you to try this challenge:

Use Loom (or whatever) to record yourself explaining one of the concepts above to a technical audience. 

Maybe post it on LI. 
Maybe cringe at hearing your own voice. 

I don’t know - but I guarantee you’re going to get some much needed practice with technical communication.

If you are a brave soul, tag me when you do post 😉.",UNKNOWN,Brian,Jenney,4664,4664,44,12,0,0,0.012006861063464836,,2023-01-16 08:21:15,https://www.linkedin.com/feed/update/urn:li:activity:7020786124197412865
urn:li:activity:7019766958812270592,"My tech stack for preventing skill rot as a developer:

- CodeCrafters 
- AlgoExpert 
- LeetCode 

Every year I set aside some money for keeping my coding skills up to par and these 3 are worth it IMO (no affiliation btw 😉) .

While AlgoExpert and Leetcode are very helpful for interview practice. CodeCrafters takes an interesting approach to learning with challenges that mimic real world problems in software development.",UNKNOWN,Brian,Jenney,13808,13808,145,17,5,0,0.012094438006952491,,2023-01-13 13:01:39,https://www.linkedin.com/feed/update/urn:li:activity:7019766958812270592
urn:li:activity:7019703130938322944,"The blueprint to take you from junior developer to senior developer:

𝘑𝘶𝘯𝘪𝘰𝘳:

- Double down on fundamentals
- Make things work and then make them efficient
- Learn the tools of your trade (code editor, git, Jira)
- Become familiar with the frameworks/libraries which dominate your field but focus on the one you’re currently working with
- Learn your immediate codebase (the one you’re working on daily)
- Don’t be afraid to ask for help

𝘔𝘪𝘥-𝘓𝘦𝘷𝘦𝘭:

- Make things work and make the solutions reusable
- Work on mastering one area of your stack
- Learn the art of communication and practice speaking at work
- Learn to give constructive feedback and receive it
- Understand the code deployment process
- Be familiar with other areas of the codebase and systems you interact with
- Don’t be afraid to ask for help

𝘚𝘦𝘯𝘪𝘰𝘳:

- Create patterns your team can leverage
- Mentor others
- Make things work, make them scalable and measure their performance
- Find places to create efficiencies from code development through deployment
- Help create an environment where others can learn and give feedback
- Don’t be afraid to ask for help",UNKNOWN,Brian,Jenney,13725,13725,149,6,10,0,0.012021857923497269,,2023-01-13 08:54:10,https://www.linkedin.com/feed/update/urn:li:activity:7019703130938322944
urn:li:activity:7018950128208142336,"Just hired 2 junior developers and onboarded them to our team.

They’re amazing and have exceeded our expectations.

Here’s what makes them stand out:

- 𝙩𝙝𝙚𝙮 𝙖𝙧𝙚 𝙥𝙧𝙤𝙖𝙘𝙩𝙞𝙫𝙚 - they seek out tickets to complete and pair with others without being asked
- 𝙩𝙝𝙚𝙮 𝙬𝙧𝙞𝙩𝙚 𝙩𝙝𝙤𝙧𝙤𝙪𝙜𝙝 𝙋𝙍𝙨 - I immediately noted the screenshots and before and after pics for a recent PR that taught me about a feature I was not familiar with. Less than a month on the job and they were already teaching me something
- 𝙩𝙝𝙚𝙮 𝙜𝙤𝙩 𝙜𝙪𝙩𝙨 - our team is at the tail end of a project with some mission critical issues to fix. They volunteered to take on these tickets which was a bit of a surprise and also relief for the team

When I think about previous hires who stood out, they basically did these same things. It only took me about 3 years to figure that out 😅.",UNKNOWN,Brian,Jenney,37284,37284,548,31,4,0,0.015636734255981118,,2023-01-11 07:03:18,https://www.linkedin.com/feed/update/urn:li:activity:7018950128208142336
urn:li:activity:7018585780314918912,"I spent the first couple years as a developer basically saying nothing. I just stayed in the background nodding my head.

5 points for that ticket to move a button? Sounds good.

Massive, complex feature due next week eh? Any questions? Nope!

This strategy didn’t work out well for me. I was forgettable.

So I forced myself to start contributing to discussions. 

I started by asking questions. 1 question per meeting.

As I grew in seniority, I realized there was a not-so-silent expectation that I would participate in and lead more discussions and proposals.

I had to talk… a lot.

Here are some communication hacks I’ve learned from studying others:

- 𝘴𝘱𝘦𝘢𝘬 𝘴𝘭𝘰𝘸𝘦𝘳 than you naturally do
- your tone should 𝘨𝘰 𝘧𝘳𝘰𝘮 𝘩𝘪𝘨𝘩 𝘵𝘰 𝘭𝘰𝘸 in order to sound more confident (try it out)
- 𝘯𝘦𝘷𝘦𝘳 𝘳𝘦𝘢𝘥 𝘸𝘰𝘳𝘥 𝘧𝘰𝘳 𝘸𝘰𝘳𝘥 off a slide during a presentation
- 𝘶𝘴𝘦 𝘺𝘰𝘶𝘳 𝘩𝘢𝘯𝘥𝘴 for emphasis and to keep people engaged during a presentation (point to stuff)
- 𝘥𝘰𝘯’𝘵 𝘶𝘴𝘦 𝘵𝘦𝘤𝘩𝘯𝘪𝘤𝘢𝘭 𝘫𝘢𝘳𝘨𝘰𝘯 and aim for the simplest way to explain something (people will silently be thanking you and most are too embarrassed to admit they don’t understand something)

Lastly, the best hack I’ve discovered to help me with me communication is speaking into a camera using Loom. 

I challenge my mentees to do this as well. It’s a great habit you can apply immediately at work, especially on distributed, remote teams. Send a video explaining what you’ve done and why instead of 10 chats via slack or even worse, an email chain.

Any communication/speaking tips I should add?",UNKNOWN,Brian,Jenney,7602,7602,86,27,3,0,0.015259142330965536,,2023-01-10 06:47:42,https://www.linkedin.com/feed/update/urn:li:activity:7018585780314918912
urn:li:activity:7018227574757625856,"When I tell you to be optimistic I don’t mean it as fluff. I don’t mean things will be easy or that they will inevitably get better.

I mean to look at the current obstacles in your way and realize they are not insurmountable.

It’s easy to be cynical.

Yes, it is difficult to get that first job.
Yes, it is difficult being a software engineer despite what Tik Tok shows you.
Yes, interviews are dumb and unfair.

Now what?

- skills will always be valuable - so build stuff
- not getting ANY interviews? Have someone look at your resume and LI
- not passing a single interview? Write down the areas where you are weak and attack them

Now, stay optimistic. Realize that with the proper skills and preparation you WILL be ready when (not if) luck presents itself.",UNKNOWN,Brian,Jenney,3599,3599,40,14,0,0,0.015004167824395665,,2023-01-09 07:21:25,https://www.linkedin.com/feed/update/urn:li:activity:7018227574757625856
urn:li:activity:7017173550901936128,"These concepts and topics blew my mind as a JS developer and maybe they’ll help you level up too:

- generator functions
- web workers
- web components
- currying
- decorators

Anything you’d add?",UNKNOWN,Brian,Jenney,6309,6309,41,6,1,0,0.007608178792201617,,2023-01-06 09:16:06,https://www.linkedin.com/feed/update/urn:li:activity:7017173550901936128
urn:li:activity:7016785355802628097,"Another ticket moves across the board.

The button is now 30px more to the right. It’s another shade of green.

The design team is happy and so is your manager. You on the other hand, begin to wonder “Am I growing as a developer?”

Ultimately, you and not your job will be responsible for your technical growth. You can certainly seek out challenging assignments when they’re available but that’s not always possible. 

So what do you do then?

One of the many benefits of being a developer is that you can create the problems you want to solve.

- Interested in Lambdas? Spin one up using AWS
- Curious about web sockets? Create a chat-app
- Don’t write tests at work? Try Cypress and Jest on a side project
- Sadomasochist? Start learning AngularJS

You don't need permission to build whatever your heart desires.",UNKNOWN,Brian,Jenney,5872,5872,72,19,2,0,0.015837874659400546,,2023-01-05 07:20:14,https://www.linkedin.com/feed/update/urn:li:activity:7016785355802628097
urn:li:activity:7016055020668272640,"3 API projects to teach you stuff and maybe even get you paid

1. 𝗧𝗶𝗺𝗲-𝘀𝗲𝗿𝗶𝗲𝘀 𝗳𝗿𝗼𝗺 𝗮 𝗖𝗦𝗩 - a user sends a csv file with historical data and some information about how to aggregate the data and the endpoint returns formatted JSON data
2. 𝗦𝗰𝗿𝗮𝗽𝗲𝗿 𝘁𝗵𝗮𝘁 𝗴𝗮𝘁𝗵𝗲𝗿𝘀 𝗷𝗼𝗯 𝗽𝗼𝘀𝘁𝗶𝗻𝗴𝘀 with less than [x] applicants
3. Endpoint that runs a 𝗡𝗮𝗶𝘃𝗲-𝗕𝗮𝘆𝗲𝘀 𝗽𝗿𝗲𝗱𝗶𝗰𝘁𝗶𝗼𝗻 𝗺𝗼𝗱𝗲𝗹 based on [x] years worth of NBA stats to predict the outcome of a game between 2 teams

Anything you'd add?",UNKNOWN,Brian,Jenney,6307,6307,66,16,1,0,0.013159980973521484,,2023-01-03 07:08:49,https://www.linkedin.com/feed/update/urn:li:activity:7016055020668272640
urn:li:activity:7015696871335616512,"I see you over there, eyeing another Udemy course on DSA.

I have a few myself 😉.

While you’re optimizing your approach to a DFS solution and exploring the many varieties of trees, don’t forget that as a JS developer you’re going to be working a hell of a lot more with arrays and objects than graphs, trees and tries.

A solid grasp of 

- map
- filter
- reduce
- reverse look up maps
- transforming data from one shape to another

Will take you a lot further on the job than solving toy problems.

Ok now back to my Udemy course.",UNKNOWN,Brian,Jenney,5496,5496,73,15,0,0,0.01601164483260553,,2023-01-02 07:57:37,https://www.linkedin.com/feed/update/urn:li:activity:7015696871335616512
urn:li:activity:7014643869938040832,"If there's one thing I hope you leave behind in 2022, it's using 122 console logs to debug your NodeJS/Express apps.

Maybe exercise more too.

Anyways back to your lame debugging methods. Here's what I used to do:

- slam API with requests from Postman
- get closer to issue (or at least think I was)
- add more logs
- wait, it's not even hitting that function
- more logs
- more requests
- f*ck got rate-limited from 3rd party API I didn't realize we were using

Don't do that.

If you're using VS Code check out this video which shows you how to set breakpoints in a Node/Express app using VSCode.

Grab the source code for the project you see below which includes tests, file upload capability and some challenges 😎",VIDEO,Brian,Jenney,6490,6490,62,15,0,0,0.011864406779661017,,2022-12-30 09:46:25,https://www.linkedin.com/feed/update/urn:li:activity:7014643869938040832
urn:li:activity:7014268220207497216,"You don't HAVE to build in public.

A good side project never has to see the light of day.

Ideally, a solid side project will:

1. Teach you something
2. Increase your confidence
3. Create a path for self-teaching
4. Wean you off ""watch and type"" tutorials

The most impactful side project I built was a web app to handle real-estate transactions. It taught me ReactJS, NodeJS and AWS and a hell of a lot about real estate. 

It also failed. 

We never got it off the ground and had little interest from investors. I spent nearly 3 years working on this “side project”. 

I don’t regret it one bit.

I took those exact same skills to the next company and gained a lot of confidence in technologies I was interested in learning. I got a crash course in real estate. I met some amazing people who are now working on other incredible projects.

I know the popular advice is to “build in public” and I’ve seen that strategy work for a lot of developers - so try it out if that’s your thing.

𝘈𝘭𝘴𝘰 - 𝘤𝘰𝘯𝘴𝘪𝘥𝘦𝘳 𝘵𝘩𝘪𝘴: the majority of developers aren’t actually on LinkedIn or actively posting. Anecdotally, I’ve worked for half a dozen companies and barely any of my co-workers ever spent much time here. They were incredibly employable however. They didn’t build anything in public. They did the boring work of applying, getting rejected (yes, even the smartest ones) and studying.

#juniordeveloper #buildinginpublic ",UNKNOWN,Brian,Jenney,3840,3840,46,18,0,0,0.016666666666666666,"#juniordeveloper ,#buildinginpublic ",2022-12-29 09:20:48,https://www.linkedin.com/feed/update/urn:li:activity:7014268220207497216
urn:li:activity:7013894655352201216,"I'm always encouraging you to create a side project. I know how much they've helped me over the years to switch tech stacks, learn things outside of work and even create a couple failed startups.

Right now, my side project is creating a series of challenges to increase the skills and confidence for JS developers. 

Yesterday, I scaffolded a Remix app for the first time in a repo designed to introduce you to e2e testing using Cypress.

I thought, ""Holy sweet Jimminy Crickets this thing is ugly.""

I mean, it's not a design challenge but I figured I should add some style... but I also don't really enjoy writing CSS 😅 🤫

TailwindCSS to the rescue. Honestly, I just copied and pasted some boilerplate code I ripped off the internet for the styling and updated my tests to pass and voila!

Literally 5 mins to go from refrigerator art to... art.",SLIDE_SHOW,Brian,Jenney,1567,1567,16,1,0,0,0.010848755583918315,,2022-12-28 08:09:43,https://www.linkedin.com/feed/update/urn:li:activity:7013894655352201216
urn:li:activity:7013885291354619904,"So I still deal with impostor syndrome.

I know what you might want to hear or have already heard:

It just gets better and you're fine the way you are. Think positively or wait it out and eventually you will feel less impostor-y.

🌈 🦄 🥰

Except, that didn't really work out for me and I will never give you advice that I wouldn't follow.

For me, impostor syndrome signals a disparity in the skills I think a person in my position should have and my current capabilities.

What I've done to identify this gap is list out the skills/traits I feel like I'm supposed to have. Often times the list is not as daunting as I imagined.

I start working on this list, little by little. I understand the areas that will make me feel more ""worthy"" of my position and attack them. Now I have ""proof"" that I am where I'm supposed to be.

In my experience, it's rare that others perceive us as impostors. People are too caught up in their own world to really care about you 😉. The insecurity that often accompanies change is indeed in your head but that doesn't mean you should ignore it. 

Identify, attack, move on and repeat?

I know a lot of you feel like this and I’m curious to know how you’ve dealt with it 🤔",UNKNOWN,Brian,Jenney,2822,2822,28,12,0,0,0.014174344436569808,,2022-12-28 08:09:43,https://www.linkedin.com/feed/update/urn:li:activity:7013885291354619904
urn:li:activity:7013527307478843392,"I've had the pleasure of working with a little over a dozen developers in the last 6 months who have landed their first role or their next role.

Junior devs, mid-level, senior and lead. Maybe CTO next 😉.

I've also worked with a dozen others who are still searching and are equally as talented as the others who found success earlier.

So what gives?

I wish I could tell you the formula for landing that first role but I have not unlocked that cheat code yet. I don't think anyone has.

My main takeaway is that you cannot control when or how luck decides to strike.

Your best bet is to be prepared when it does.

- 𝗳𝗼𝗰𝘂𝘀 𝗼𝗻 𝗯𝘂𝗶𝗹𝗱𝗶𝗻𝗴 𝗮 𝘀𝘁𝗿𝗼𝗻𝗴 𝘁𝗲𝗰𝗵𝗻𝗶𝗰𝗮𝗹 𝗳𝗼𝘂𝗻𝗱𝗮𝘁𝗶𝗼𝗻 in your primary language
- 𝗯𝘂𝗶𝗹𝗱 𝗶𝗻 𝗽𝘂𝗯𝗹𝗶𝗰 (if that's your thing) - 𝘣𝘶𝘵 𝘥𝘦𝘧𝘪𝘯𝘪𝘵𝘦𝘭𝘺 𝘣𝘶𝘪𝘭𝘥!
- 𝗹𝗲𝗮𝗿𝗻 𝗯𝗮𝘀𝗶𝗰 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝗱𝗲𝘀𝗶𝗴𝗻 𝗽𝗮𝘁𝘁𝗲𝗿𝗻𝘀 (𝘚𝘖𝘓𝘐𝘋, 𝘖𝘖𝘗)
- 𝗹𝗲𝗮𝗿𝗻 𝗱𝗲𝘀𝗶𝗴𝗻 𝗽𝗮𝘁𝘁𝗲𝗿𝗻𝘀 𝗳𝗼𝗿 𝘁𝗵𝗲 𝗳𝗿𝗮𝗺𝗲𝘄𝗼𝗿𝗸 𝘆𝗼𝘂’𝗿𝗲 𝘂𝘀𝗶𝗻𝗴 (𝘦𝘨: 𝘩𝘰𝘰𝘬𝘴 𝘧𝘰𝘳 𝘙𝘦𝘢𝘤𝘵)
- 𝗱𝗼 𝗽𝗼𝘀𝘁-𝗺𝗼𝗿𝘁𝗲𝗺𝘀 𝗮𝗳𝘁𝗲𝗿 𝗿𝗲𝗷𝗲𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝗻𝗱 𝘀𝘂𝗰𝗰𝗲𝘀𝘀𝗲𝘀 (𝘸𝘩𝘺 𝘥𝘪𝘥 𝘺𝘰𝘶 𝘧𝘢𝘪𝘭? 𝘸𝘩𝘺 𝘥𝘪𝘥 𝘺𝘰𝘶 𝘴𝘶𝘤𝘤𝘦𝘦𝘥?)

There’s no point stacking interviews or increasing your surface area for luck if you don’t have the skills to actually hit your target.",UNKNOWN,Brian,Jenney,3288,3288,41,7,0,0,0.014598540145985401,,2022-12-27 08:13:04,https://www.linkedin.com/feed/update/urn:li:activity:7013527307478843392
urn:li:activity:7013166621301112832,"In 2013 I bought one of those HTML5 programming books for dummies.

I was determined to learn to code by the end of Summer.

I read the entire flipping book. Cover to cover. Then, I promptly sat down in front of my laptop after downloading Sublime text editor and realized I had no goddamned clue how to code shit.

Learning to code wasn’t like any studying I had previously done.

I know you’re probably thinking, “A whole book on HTML5? How Sway? LOL”

Shut your pie hole - I barely knew anything back then.

Thankfully, I am a stubborn bastard and decided to go to a meetup with other developers who showed me how to get code from my noggin into my text editor and open it up in a web browser.

Magic.

- I stopped reading and started building janky apps on CodePen.
- I added Jquery.

Astonishing.

- I got hired at a job where I had to learn C#.
- Bought another book… for dummies.

I hadn’t quite learned yet. Never said I was the brightest bulb on the tree. Just the stubbornest.

After creating some useless API endpoints using C#, I knew enough to be dangerous. Ok, I saw a pattern here.

I actually really enjoy books on coding and find a lot of value in them… at this stage. Now I’m an engineering manager still building janky apps in my spare time and building less janky apps in my professional time.

Want to get better as a developer? Build shit.",UNKNOWN,Brian,Jenney,4599,4599,63,7,2,0,0.015655577299412915,,2022-12-26 07:51:31,https://www.linkedin.com/feed/update/urn:li:activity:7013166621301112832
urn:li:activity:7012454877192749056,"Another mentee of mine got hired.

The funny thing is we barely covered any technical material during our meetings.

I'm beginning to realize a lot of developers just need encouragement, a clear direction for what to study and a good kick in the ass to go for what they want.

Learning about closures doesn't hurt either 😉",UNKNOWN,Brian,Jenney,9765,9765,147,11,0,0,0.016180235535074246,,2022-12-24 08:34:49,https://www.linkedin.com/feed/update/urn:li:activity:7012454877192749056
urn:li:activity:7011759714803888128,"Maybe this wasn't such a good idea...

Earlier this year I posted a link to schedule a 15 minute chat with me. 

200+ of you took me up on my offer 😲

What was originally meant as a tactic to get more sales call for my mentorship services turned into something much more valuable than I could've ever expected.

I've heard all your problems and identified the top 5 which I explore in this article with links to free resources I know will help you.

Looking forward to the next 200. ✊",ARTICLE,Brian,Jenney,2959,2959,42,9,3,0,0.018249408583981074,,2022-12-22 10:34:49,https://www.linkedin.com/feed/update/urn:li:activity:7011759714803888128
urn:li:activity:7011371149905326080,"You don't need Redux.

But you should still know how to use it.

With around 8.2 million downloads just last week, there’s a pretty high chance the next company you join will leverage this library.

So stop being scared of it.

You can still debate whether context, useReducer or whatever new state management library popped up this week is better than Redux… I mean, if that’s your thing who am I to judge... but you know I am 😉.

Try learning these concepts/tools and I think you will get a better understanding and appreciation for Redux:

- publisher/subscriber pattern
- ducks architecture
- pure functions
- redux dev extension

Oh, and if you want to get your hands dirty with Redux - grab my starter kit in the comments below.",UNKNOWN,Brian,Jenney,6890,6890,69,15,3,0,0.012626995645863571,,2022-12-21 09:11:14,https://www.linkedin.com/feed/update/urn:li:activity:7011371149905326080
urn:li:activity:7011100204888195073,"I know it's all the rage to have an existential crisis over ChatGPT but have you considered using it for more than just generating code like a little code monkey?

I asked our robot overlord to review some code I'd written and it gave me some pretty spot-on feedback.

I can see how this tool could be leveraged to create more dialogue during code reviews between devs who have different experience levels or are unfamiliar with a codebase.

LGTM!",IMAGE,Brian,Jenney,8150,8150,72,15,4,0,0.011165644171779142,,2022-12-20 15:09:35,https://www.linkedin.com/feed/update/urn:li:activity:7011100204888195073
urn:li:activity:7011042674573025280,"What most aspiring developers do:

- Build 99 small, trivial apps
- Chase shiny frameworks
- Follow “watch and type” tutorials
- Marathon coding sessions on the weekend and nothing during the week
- Look for junior developer jobs

What you should do:

- Build 1 or 2 interesting and complex apps and deploy them to the web
- Double down on the fundamentals of your primary language and design patterns
- Consistent daily coding (it’s a wonder what 1 hour a day will do)
- Apply for jobs where you meet ~50% of the requirements",UNKNOWN,Brian,Jenney,6734,6734,97,10,4,0,0.016483516483516484,,2022-12-20 11:13:53,https://www.linkedin.com/feed/update/urn:li:activity:7011042674573025280
urn:li:activity:7010610080341520384,"5 Biggest mistakes of my coding career?

1. Not learning the fundamentals before diving into frameworks
2. Being afraid to admit when I didn’t know something
3. Only taking on tasks I knew I could finish
4. Being too narrowly focused on the technical aspect of the job and not understanding how engineering fits into the company eco-system and business goals
5. Not speaking up

That last one hurt me the most. 

I thought I was playing it safe by taking on easy tickets, nodding my head during estimation sessions and giving bland status updates. I never shared my ideas during meetings. I wanted to blend in. It was probably the most dangerous thing I could’ve done. 

They say the tallest blade of grass is the first to get cut.

Yeah, I guess. It’s also the one growing the fastest.

Companies need average developers more than they’d like to admit. If career trajectory and increased hire-ability is your goal however, playing it safe is the biggest threat to your goals.",UNKNOWN,Brian,Jenney,7859,7859,89,18,0,0,0.013614963735844254,,2022-12-19 06:37:54,https://www.linkedin.com/feed/update/urn:li:activity:7010610080341520384
urn:li:activity:7009544909904826368,"You passed the interview! Now the real work begins.

Bootcamps do a great job (for the most part) of getting developers hire-able. But what happens after you nail the interview?

If you're a junior dev, self taught or went to a bootcamp, you probably struggle in the same areas that I did after getting hired:

- Git
- Writing good peer reviews
- Estimating features
- Writing unit tests
- Debugging
- Technical communication
- Crippling impostor syndrome
- Learning a new codebase

Like too many of us, I learned these skills through trial and error. Over years!

That doesn't mean it has to take you that long.

While there is no substitute for time in the field, you can certainly follow accounts like 
Rahul Pandey and Alex Chiou to learn how to succeed as a software engineer and gain the non-coding skills you'll need to advance in your career. If YouTube is more your thing, I'd recommend 𝗧𝗵𝗲𝗼 𝗳𝗿𝗼𝗺 𝗣𝗶𝗻𝗴𝗟𝗮𝗯𝘀 (𝘑𝘚 𝘤𝘶𝘵𝘵𝘪𝘯𝘨 𝘦𝘥𝘨𝘦 𝘴𝘵𝘶𝘧𝘧 𝘢𝘯𝘥 𝘴𝘱𝘪𝘤𝘺 𝘳𝘢𝘯𝘵𝘴) and 𝗔 𝗟𝗶𝗳𝗲 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿𝗲𝗱 (𝘨𝘦𝘯𝘦𝘳𝘢𝘭 𝘤𝘢𝘳𝘦𝘦𝘳 𝘢𝘥𝘷𝘪𝘤𝘦 𝘧𝘰𝘳 𝘮𝘪𝘥 𝘢𝘯𝘥 𝘴𝘦𝘯𝘪𝘰𝘳 𝘥𝘦𝘷𝘴).",UNKNOWN,Brian,Jenney,15815,15815,148,9,3,0,0.010116977552956055,,2022-12-16 07:59:14,https://www.linkedin.com/feed/update/urn:li:activity:7009544909904826368
urn:li:activity:7009200431083962370,"""The market is over-saturated, no one is hiring coders right now.""

- 𝘚𝘰𝘮𝘦 𝘴𝘰𝘧𝘵𝘸𝘢𝘳𝘦 𝘦𝘯𝘨𝘪𝘯𝘦𝘦𝘳 𝘐 𝘸𝘢𝘴 𝘥𝘳𝘪𝘷𝘪𝘯𝘨 𝘪𝘯 𝘚𝘍 𝘸𝘩𝘪𝘭𝘦 𝘸𝘰𝘳𝘬𝘪𝘯𝘨 𝘧𝘰𝘳 𝘓𝘺𝘧𝘵 𝘪𝘯 2014

If you're listening to the cynics, eventually you'll believe them and their negative outlook will become your self-fulfilling prophecy.",UNKNOWN,Brian,Jenney,6855,6855,69,13,4,0,0.012545587162654996,,2022-12-15 09:13:46,https://www.linkedin.com/feed/update/urn:li:activity:7009200431083962370
urn:li:activity:7008835271429419008,"What you thought the front end interview would be:

- traverse tree
- search array - binar-ily
- detect a palindrome
- maps! use a map!

What you got instead:

- tell me about a time when...
- build something that looks like this mock-up
- tell me how this obscure feature in JS works 
- let's build a component while I watch... and judge!

Check out this walkthrough of the 3 species of interviews you will encounter in the wild as a front end developer, based on the 100 or so interviews I've done or heard about from others over the last few years.",ARTICLE,Brian,Jenney,4609,4609,67,6,2,0,0.016272510305923193,,2022-12-14 09:16:51,https://www.linkedin.com/feed/update/urn:li:activity:7008835271429419008
urn:li:activity:7008800130854268928,"The job hunt is a numbers game!

No - wait, it’s all about networking and coffee chats.

Hold on a sec - you need to learn in public! That’s the trick.

Honestly, I’ve seen people fail and succeed using all of these methods. There is no hack.

It’s actually quite boring really:

- Pick one thing and stick with it long enough to see results.

Be consistent but not dumb - if something is not working, seek advice and change it.",UNKNOWN,Brian,Jenney,6141,6141,84,12,0,0,0.015632633121641426,,2022-12-14 06:45:44,https://www.linkedin.com/feed/update/urn:li:activity:7008800130854268928
urn:li:activity:7008476745502773249,"Every developer should have a side project that teaches them something outside of work.

The problem?

Most people don't know how to build a project that will stretch their limits.

Here are 5 steps that might help you get started:

1. pick an API you are interested in
2. decide on a framework or language you’d like to learn for this project
3. create the MVP user flow by drawing out the features needed for the app (a piece of paper is is sufficient, no need to get fancy)
4. choose a cloud service provider for deployments - personally I’d use AWS since it’s what you’ll likely use in the “real world”
5. roughly 50% of your tech stack should be new to you and the other 50% should be familiar so you don’t get completely overwhelmed",UNKNOWN,Brian,Jenney,6504,6504,97,9,2,0,0.016605166051660517,,2022-12-13 09:26:50,https://www.linkedin.com/feed/update/urn:li:activity:7008476745502773249
urn:li:activity:7008151811547168768,"Yes, I do think ChatGPT will steal your coding job... if all you do is write code.  

Writing code is honestly the easy part... understanding all the biz requirements, constraints and how to deliver complex projects is at least a few months away for this AI 😅

***

Protect yourself from bots and check out some free material that will make you less replaceable: https://brianjenney.me",UNKNOWN,Brian,Jenney,5646,5646,55,8,1,0,0.011335458731845554,,2022-12-12 11:56:24,https://www.linkedin.com/feed/update/urn:li:activity:7008151811547168768
urn:li:activity:7008074862338478080,"In 2016 I was on the software developer hamster wheel program.

10 out of 10 would not recommend.

Here’s how it goes:

- Hear about a new technology
- Buy small course or book and blindly follow along
- Build trivial project
- Hear about a new technology
- 🐹

Now instead of being good in a few languages/technologies I was below average in several!

Once I really doubled down on the fundamentals of Javascript and design patterns I felt more confident and the quality of my work improved. That doesn’t mean I don’t explore new tech - but I am a lot more picky with what I choose to learn.",UNKNOWN,Brian,Jenney,5813,5813,68,2,3,0,0.01255805952176157,,2022-12-12 06:48:50,https://www.linkedin.com/feed/update/urn:li:activity:7008074862338478080
urn:li:activity:7007028599518097408,"The most impactful line of code you can write as a Javascript developer?

𝚍𝚎𝚋𝚞𝚐𝚐𝚎𝚛

I'm consistently shocked by how many people either don't use this keyword or know it exists.

It's a hell of a lot better than littering your code with 129 console logs.

I'll walk you through this and some other debugging tips in the video below.

***

𝗜𝗳 𝘆𝗼𝘂 𝘄𝗮𝗻𝘁 𝗺𝗼𝗿𝗲 𝗝𝗦 𝗺𝗮𝘁𝗲𝗿𝗶𝗮𝗹 𝘁𝗵𝗮𝗻 𝘆𝗼𝘂 𝗰𝗮𝗻 𝗵𝗮𝗻𝗱𝗹𝗲, 𝗴𝗿𝗮𝗯 𝗶𝘁 𝗵𝗲𝗿𝗲: https://brianjenney.me",VIDEO,Brian,Jenney,7122,7122,80,7,1,0,0.012356079752878404,,2022-12-09 09:41:54,https://www.linkedin.com/feed/update/urn:li:activity:7007028599518097408
urn:li:activity:7006686111783673857,"Need a break from the LeetCode grind?

I've been having a lot of fun with #adventofcode. 

Perhaps the best feature of these problems is that they require you to sift through a lot of information to get to the meat of the problem which is closer to your average interview experience than being explicitly asked to implement some random algo.

Check it out here: https://adventofcode.com/",UNKNOWN,Brian,Jenney,3706,3706,32,3,2,0,0.009983810037776578,#adventofcode.,2022-12-08 10:31:45,https://www.linkedin.com/feed/update/urn:li:activity:7006686111783673857
urn:li:activity:7006627280177287168,"If you’re one of those people who is waiting until January 1st to make some big change in your life, that thing you know you should be doing…

Well, I think that’s OK.

I like going to the gym in January and seeing all the new people. I honestly hope they stick with it because I know how powerful exercise has been in my professional and personal life.

There’s nothing wrong with setting a date to make a change. The hard part is sticking with it.

I’ve quit alcohol, got in shape and learned to code using this pattern and maybe it will help you:

- 𝘎𝘦𝘵 𝘢𝘤𝘤𝘰𝘶𝘯𝘵𝘢𝘣𝘭𝘦 - tell people what you are doing so failure is more embarrassing
- Instead of focusing on the benefits of your new habit - 𝘵𝘩𝘪𝘯𝘬 𝘰𝘧 𝘵𝘩𝘦 𝘳𝘦𝘱𝘦𝘳𝘤𝘶𝘴𝘴𝘪𝘰𝘯𝘴 𝘰𝘧 𝘕𝘖𝘛 𝘥𝘰𝘪𝘯𝘨 𝘪𝘵
- 𝘔𝘢𝘬𝘦 𝘤𝘩𝘢𝘯𝘨𝘦 𝘦𝘢𝘴𝘺 - don't rely on will power alone - you will fail. For example, if you want to stop eating so much junk, don't keep any in your house
- 𝘔𝘢𝘬𝘦 𝘪𝘵 𝘥𝘰𝘢𝘣𝘭𝘦 - you’re not gonna go from 0 - 100. Instead of studying for 2 hours a day, go for 30 minutes consistently

This weekend I'm seriously considering sharing a very non-tech newsletter that I wrote to help a friend lose weight and get in shape. Tis' the season and all.

Should I?",UNKNOWN,Brian,Jenney,2639,2639,28,4,0,0,0.012125805229253505,,2022-12-08 06:40:36,https://www.linkedin.com/feed/update/urn:li:activity:7006627280177287168
urn:li:activity:7006266040724721664,"Tutorial hell is miserable.

So instead, I:

- create small side projects using technology I'm interested in
- read books
- explore popular open source libraries to see how the pros write code

Don’t get me wrong, I’ll still use tutorials. But I’m not going to rely on them alone.

**

Tired of tutorial hell? Check out my not-another-course collection of material https://lnkd.in/gpqEgqny",UNKNOWN,Brian,Jenney,4854,4854,51,16,3,0,0.01442109600329625,,2022-12-07 07:03:52,https://www.linkedin.com/feed/update/urn:li:activity:7006266040724721664
urn:li:activity:7005923085593784320,"I had 193 15 minute conversations with developers from all over the world in the last 6 months.

Here are my takeaways:

- impostor syndrome is prevalent and rampant at all levels (shocker)
- most junior developers need to optimize their LinkedIn profiles
- picking a good side project is something most developers want to do but don’t know where to start
- networking, cold applying and learning in public ALL work - the trick is sticking to one long enough to see results
- this is an awesome community despite what anyone says to the contrary

I was personally shocked to hear just how many of us don’t feel good or smart enough. I do believe that some self-assessment is healthy and useful. I also believe that working remotely and often with cloudy expectations creates an environment for negative assessments to fester.

If it’s any consolation, know that basically everyone I’ve spoken to, from the senior at Amazon to the junior who just got hired feels like there is something missing from their tool belt.

I’ll be consolidating these conversations and the advice I find myself repeating next week in an article that I hope you find useful.


***

𝘊𝘩𝘦𝘤𝘬 𝘰𝘶𝘵 𝘴𝘰𝘮𝘦 𝘧𝘳𝘦𝘦 𝘳𝘦𝘴𝘰𝘶𝘳𝘤𝘦𝘴 𝘵𝘰 𝘩𝘦𝘭𝘱 𝘺𝘰𝘶 𝘭𝘦𝘷𝘦𝘭 𝘶𝘱 𝘢𝘴 𝘢 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘩𝘦𝘳𝘦 https://brianjenney.me",UNKNOWN,Brian,Jenney,12046,12046,158,18,6,0,0.015108749792462229,,2022-12-06 08:24:32,https://www.linkedin.com/feed/update/urn:li:activity:7005923085593784320
urn:li:activity:7005536624382017537,"I’ve seen all your side projects.

They fall into 1 of 3 categories:

1. Clone of popular app
2. Random thing generator
3. Chat app

I’m not saying there’s anything at all wrong with these apps. I’ve seen some amazing (and not so amazing) variations of these.

Here’s the real issue though:

It’s hard to stand out from other bootcamp grads who have basically created the same app.

So what can you do?

Create your own side project.

- Pick an API about something you’re interested in
- Choose a language and framework you’re curious about 
- Ideally, try to solve a real world problem
- Maybe a web scraper that aggregates jobs with less than [x] applicants from a popular site. Something that displays historical data? Whatever floats your damn boat.
- Add some tests maybe
- Deploy it

Now you’ve learned some valuable skills and maybe even have something beautiful to show off.

What are some good side projects you've seen or would suggest?",UNKNOWN,Brian,Jenney,20933,20933,206,49,8,0,0.01256389432952754,,2022-12-05 06:49:13,https://www.linkedin.com/feed/update/urn:li:activity:7005536624382017537
urn:li:activity:7004509183903485952,"Expecting formal mentorship at your next job as a developer?

Got some bad news for ya’ buddy.

Most companies simply don’t have a plan or budget to offer the kind of mentorship that will actually accelerate your career so they rely on:

- Video tutorials from popular services which may be outdated or irrelevant to your goals
- Conferences
- Senior devs who just don't have the time or desire

𝘚𝘰 𝘸𝘩𝘢𝘵 𝘤𝘢𝘯 𝘺𝘰𝘶 𝘥𝘰?

Here’s the harsh truth - you, not your company, are ultimately responsible for your growth as a developer.

If paid mentorship isn’t something you’re into, you can try:

- books 
- building an app using a few technologies you are interested in
- doing small algo challenges on sites that start with Leet and end with Code

What are some ways you’ve been able to stay sharp as a developer?


***


𝘐𝘧 𝘺𝘰𝘶 𝘸𝘢𝘯𝘵 𝘴𝘰𝘮𝘦 𝘤𝘩𝘢𝘭𝘭𝘦𝘯𝘨𝘪𝘯𝘨 𝘮𝘢𝘵𝘦𝘳𝘪𝘢𝘭 𝘵𝘰 𝘭𝘦𝘷𝘦𝘭 𝘺𝘰𝘶 𝘶𝘱 𝘢𝘴 𝘢 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘤𝘩𝘦𝘤𝘬 𝘰𝘶𝘵 https://brianjenney.me",UNKNOWN,Brian,Jenney,6200,6200,57,4,1,0,0.01,,2022-12-02 10:56:41,https://www.linkedin.com/feed/update/urn:li:activity:7004509183903485952
urn:li:activity:7004509234096717824,"Expecting formal mentorship at your next job as a developer?

Got some bad news for ya’ buddy.

Most companies simply don’t have a plan or budget to offer the kind of mentorship that will actually accelerate your career so they rely on:

- Video tutorials from popular services which may be outdated or irrelevant to your goals
- Conferences
- Senior devs who just don't have the time or desire

𝘚𝘰 𝘸𝘩𝘢𝘵 𝘤𝘢𝘯 𝘺𝘰𝘶 𝘥𝘰?

Here’s the harsh truth - you, not your company, are ultimately responsible for your growth as a developer.

If paid mentorship isn’t something you’re into, you can try:

- books 
- building an app using a few technologies you are interested in
- doing small algo challenges on sites that start with Leet and end with Code

What are some ways you’ve been able to stay sharp as a developer?


***


𝘐𝘧 𝘺𝘰𝘶 𝘸𝘢𝘯𝘵 𝘴𝘰𝘮𝘦 𝘤𝘩𝘢𝘭𝘭𝘦𝘯𝘨𝘪𝘯𝘨 𝘮𝘢𝘵𝘦𝘳𝘪𝘢𝘭 𝘵𝘰 𝘭𝘦𝘷𝘦𝘭 𝘺𝘰𝘶 𝘶𝘱 𝘢𝘴 𝘢 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘤𝘩𝘦𝘤𝘬 𝘰𝘶𝘵 https://brianjenney.me",UNKNOWN,Brian,Jenney,75,75,0,0,0,0,0,,2022-12-02 10:56:41,https://www.linkedin.com/feed/update/urn:li:activity:7004509234096717824
urn:li:activity:7004206369989947392,"First off, if someone actually asks you this question in a coding interview - wtf.

That being said, recursion is difficult and confused the hell out of me for a long time. In the video below, I walk through my delicious recursive recipe and do a fairly tricky problem in real time.

I hope this gets you a step or 2 closer to understanding recursion.

***

𝗖𝗵𝗲𝗰𝗸 𝗼𝘂𝘁 𝘀𝗼𝗺𝗲 𝗼𝘁𝗵𝗲𝗿 𝗳𝗿𝗲𝗲 𝗿𝗲𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝘁𝗼 𝗵𝗲𝗹𝗽 𝘆𝗼𝘂 𝗴𝗲𝘁 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗿𝗲𝗮𝗱𝘆 𝗵𝗲𝗿𝗲: https://brianjenney.me",VIDEO,Brian,Jenney,9633,9633,78,12,6,0,0.009965742759265027,,2022-12-01 14:16:15,https://www.linkedin.com/feed/update/urn:li:activity:7004206369989947392
urn:li:activity:7004093654042648576,"The end of the Leetcode grind?

The funny thing is, most non-tech companies weren’t asking whiteboard-style questions in the first place.

You’re a hell of a lot more likely to encounter a take home, pair programming or language-specific type of challenge on the interview circuit than dynamic programming.

I still encourage you to familiarize yourself with common data structures and algorithms. Learning them has given me confidence and better problem solving ability and it may do the same for you.

That being said, if you’re expecting your next interview to be filled with trees, graphs and palindromes… you might be right but I’d caution against ONLY studying DSA.

If you are on the interview grind, what’s your experience?


***

𝗘𝘃𝗲𝗿𝘆 𝘄𝗲𝗲𝗸𝗲𝗻𝗱 𝗜 𝘀𝗵𝗮𝗿𝗲 𝗳𝗿𝗲𝗲 𝗿𝗲𝘀𝗼𝘂𝗿𝗰𝗲𝘀 𝗮𝗻𝗱 𝘁𝗶𝗽𝘀 𝘁𝗼 𝗮𝗰𝗰𝗲𝗹𝗲𝗿𝗮𝘁𝗲 𝘆𝗼𝘂𝗿 𝗱𝗲𝘃 𝗰𝗮𝗿𝗲𝗲𝗿 𝗮𝗻𝗱 𝗹𝗲𝗮𝗿𝗻 𝘀𝘁𝘂𝗳𝗳: https://brianjenney.me",UNKNOWN,Brian,Jenney,13949,13949,79,32,1,0,0.008029249408559754,,2022-12-01 07:14:34,https://www.linkedin.com/feed/update/urn:li:activity:7004093654042648576
urn:li:activity:7003731378777325568,"You're rejecting yourself from more roles than you need to.

Listen, if you have ~50% of the skills and are within 1-2 years of the experience ""requirements"" then you should absolutely be applying.

If you actually met 100% of the requirements, you're overqualified.",UNKNOWN,Brian,Jenney,8280,8280,118,16,4,0,0.016666666666666666,,2022-11-30 07:31:55,https://www.linkedin.com/feed/update/urn:li:activity:7003731378777325568
urn:li:activity:7003034982453583872,"Here’s a story I hate to hear:

Developer graduates from bootcamp, gets hired, then let go for performance reasons.

It sucks.

I’ve heard this story from more than a couple developers and my heart goes out to them. Is the bootcamp at fault for not preparing them for a difficult profession? Maybe the job should’ve offered more support? Were they just out of their league?

If your bootcamp, school or YouTube instructors did not fully prepare you for the “real world” of software development, you may have to supplement your education.

- Get a mentor
- Build stuff
- Work with your manager to get feedback

Get specific:

- What is it that you need to learn? 
- How will you learn it? 
- How long will it take?

Clarity precedes success.


***

I write more stuff here: https://brianjenney.me",UNKNOWN,Brian,Jenney,8110,8110,60,13,2,0,0.009247842170160296,,2022-11-28 08:57:38,https://www.linkedin.com/feed/update/urn:li:activity:7003034982453583872
urn:li:activity:7001936234331746304,"Ask enough stupid questions and you're gonna be pretty godd*mn smart.

The trick is to only ask those ""stupid"" questions once.

90% of the people in the room probably have the same question and are too embarrassed to ask. Most of them won't write the answer down. 

I spent the first 3 years of my career as a software developer basically saying nothing. I'd nod my head whether or not I understood something and had some spectacular blow-ups because of it.

I made a resolution to expose my ignorance and ask questions. Something unexpected happened when I did that:

- I became more engaged in the work
- co-workers would DM me and thank me for asking questions they were too embarrassed to ask themselves
- I got more leadership opportunities
- I learned faster

Now, as an engineering manager, I hope the new members on my team feel safe and confident to ask their own ""stupid"" questions. Not only for moral reasons but for a very practical one as well:

It will shorten the time it takes for them to become proficient in our processes and codebases.

Expose your ignorance to grow faster.

#licreatoraccelerator 

***

This weekend I'll be going over ways junior developers can create impact, stand out and do more than not get fired. Check it out here https://brianjenney.me
",UNKNOWN,Brian,Jenney,6960,6960,90,13,5,0,0.015517241379310345,#licreatoraccelerator ,2022-11-25 08:01:32,https://www.linkedin.com/feed/update/urn:li:activity:7001936234331746304
urn:li:activity:7001246977187348480,"I was teaching at a bootcamp on weekends about 5 years ago.

A student came up to me after class and had a complaint about my teaching style:

“𝘠𝘰𝘶’𝘳𝘦 𝘮𝘰𝘷𝘪𝘯𝘨 𝘸𝘢𝘺 𝘵𝘰𝘰 𝘧𝘢𝘴𝘵 𝘧𝘰𝘳 𝘱𝘦𝘰𝘱𝘭𝘦 𝘭𝘪𝘬𝘦 𝘮𝘦. 𝘐 𝘥𝘪𝘥𝘯’𝘵 𝘨𝘳𝘰𝘸 𝘶𝘱 𝘶𝘴𝘪𝘯𝘨 𝘤𝘰𝘮𝘱𝘶𝘵𝘦𝘳𝘴 𝘭𝘪𝘬𝘦 𝘺𝘰𝘶”

He was right; I had been rushing the lesson and my mind was a bit foggy. I just had a daughter and was pulling 7 day work weeks because I like money and diapers.

Also - I had fooled him.

“𝘓𝘪𝘬𝘦 𝘺𝘰𝘶?”

I wanted to tell him that I did not grow up with computers. In fact I didn’t own a computer until I was about 28. I had learned to code just a few years before teaching this class, right after getting sober. I was driving real software engineers around San Francisco working for Uber and Lyft after my regular job and coding in the morning before work and on weekends. 

I was average at best. It took all that work to just be an average developer. But I was happy.

And here I was fooling this class and this guy into thinking I was some fancy-pants software engineer.

Maybe I’m fooling you too. Maybe you think I’m some highfalutin manager type who has been coding since MySpace and giving you advice based on a book I read or what sounds good.

I can only tell you what’s worked for me and hope it shortens your path from where you are to where you want to be. So take what I say with a grain of salt. Pick out what makes sense for you, question who’s giving you the info and then put down the phone and apply it.


***

𝘌𝘷𝘦𝘳𝘺 𝘚𝘢𝘵𝘶𝘳𝘥𝘢𝘺 𝘐 𝘨𝘪𝘷𝘦 𝘢𝘤𝘵𝘪𝘰𝘯𝘢𝘣𝘭𝘦, 𝘱𝘳𝘢𝘤𝘵𝘪𝘤𝘢𝘭 𝘢𝘱𝘱𝘳𝘰𝘢𝘤𝘩𝘦𝘴 𝘵𝘰 𝘣𝘦𝘤𝘰𝘮𝘪𝘯𝘨 𝘢 𝘣𝘦𝘵𝘵𝘦𝘳 𝘴𝘰𝘧𝘵𝘸𝘢𝘳𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳: http://brianjenney.me 


#licreatoraccelerator ",UNKNOWN,Brian,Jenney,12006,12006,126,17,1,0,0.01199400299850075,#licreatoraccelerator ,2022-11-23 10:26:09,https://www.linkedin.com/feed/update/urn:li:activity:7001246977187348480
urn:li:activity:7000838967898116096,"He created a full stack app that worked pretty well. It even looked nice.

But when I asked how it worked…

Oof.

𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. Too many people fall into the trap of looking at a tutorial, following along with the instructor and typing what they type. 

𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app. 
𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery

It’s an enticing trap and it may even fool someone into hiring you. 

More than 90% of my side projects have never had users or been deployed. I made janky apps and sites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack.

Every side project doesn’t need to be a masterpiece. Leverage them to learn what you won’t at work or what you would like to work on next.

If you want my step by step guide on creating a solid side project you can grab it here 
https://lnkd.in/gQ94kA97

***

𝘛𝘪𝘳𝘦𝘥 𝘰𝘧 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭𝘴? 𝘊𝘩𝘦𝘤𝘬 𝘵𝘩𝘪𝘴 𝘰𝘶𝘵: https://lnkd.in/gpqEgqny




#licreatoraccelerator ",UNKNOWN,Brian,Jenney,21833,21833,197,31,8,0,0.010809325333211195,#licreatoraccelerator ,2022-11-22 07:39:45,https://www.linkedin.com/feed/update/urn:li:activity:7000838967898116096
urn:li:activity:7000839046121889792,"He created a full stack app that worked pretty well. It even looked nice.

But when I asked how it worked…

Oof.

𝗔𝗻𝗼𝘁𝗵𝗲𝗿 𝗰𝗮𝘀𝗲 𝗼𝗳 𝘁𝘂𝘁𝗼𝗿𝗶𝗮𝗹 𝗮𝗯𝘂𝘀𝗲. Too many people fall into the trap of looking at a tutorial, following along with the instructor and typing what they type. 

𝗧𝗵𝗲 𝗽𝗮𝘆𝗼𝗳𝗳: a shiny new app. 
𝗧𝗵𝗲 𝗰𝗼𝘀𝘁: a false sense of mastery

It’s an enticing trap and it may even fool someone into hiring you. 

More than 90% of my side projects have never had users or been deployed. I made janky apps and sites to learn new concepts, frameworks and even join a startup as a mid-level developer in a completely new tech stack.

Every side project doesn’t need to be a masterpiece. Leverage them to learn what you won’t at work or what you would like to work on next.

If you want my step by step guide on creating a solid side project you can grab it here 
https://lnkd.in/gQ94kA97

***

𝘛𝘪𝘳𝘦𝘥 𝘰𝘧 𝘵𝘶𝘵𝘰𝘳𝘪𝘢𝘭𝘴? 𝘊𝘩𝘦𝘤𝘬 𝘵𝘩𝘪𝘴 𝘰𝘶𝘵: https://lnkd.in/gpqEgqny




#licreatoraccelerator ",UNKNOWN,Brian,Jenney,718,718,1,0,0,0,0.001392757660167131,#licreatoraccelerator ,2022-11-22 07:39:45,https://www.linkedin.com/feed/update/urn:li:activity:7000839046121889792
urn:li:activity:7000492456039333888,"I've had a few people I know recently lose their job.

It sucks. 

They weren't working for some fly-by-night startups either. These were established companies. It's a reminder that stability is a myth. 

Whether you just found yourself job-less or know someone who is in that position, hopefully this article that Erik Andersen put together with others in the tech/career space will be helpful.

https://lnkd.in/dYcZWX-m

#licreatoraccelerator 

---

I help developers accelerate their career and learn through hands-on exercises https://brianjenney.me
",UNKNOWN,Brian,Jenney,1897,1897,8,0,0,0,0.004217185028993147,#licreatoraccelerator ,2022-11-21 08:41:54,https://www.linkedin.com/feed/update/urn:li:activity:7000492456039333888
urn:li:activity:6999417291843006464,"Are you getting sh*t done?

Or are you just busy being busy?

This week I attended an audio event hosted by Rahul Pandey and Alex Chiou: ""How To Get Stuff Done In Tech"". I've certainly fallen into the trap of just being busy without actually feeling like I'm making forward progress.

I would end the day, mentally drained from meetings, research and centering divs 😉 only to look back and wonder what the hell I'd really done.

My 3 main takeaways from this event:

1. Clarity leads to action (𝘩𝘢𝘷𝘦 𝘢 𝘱𝘭𝘢𝘯 𝘢𝘯𝘥 𝘬𝘯𝘰𝘸 𝘸𝘩𝘢𝘵 𝘺𝘰𝘶𝘳 𝘱𝘳𝘪𝘰𝘳𝘪𝘵𝘪𝘦𝘴 𝘢𝘳𝘦)
2. Make habits easy to follow (𝘮𝘢𝘬𝘦 𝘢 𝘮𝘰𝘳𝘯𝘪𝘯𝘨 𝘳𝘰𝘶𝘵𝘪𝘯𝘦 𝘺𝘰𝘶 𝘤𝘢𝘯 𝘢𝘤𝘵𝘶𝘢𝘭𝘭𝘺 𝘤𝘰𝘮𝘮𝘪𝘵 𝘵𝘰 - 𝘯𝘰𝘵 𝘵𝘩𝘦 𝘰𝘯𝘦 𝘵𝘩𝘢𝘵 𝘪𝘯𝘤𝘭𝘶𝘥𝘦𝘴 1 𝘩𝘰𝘶𝘳 𝘢𝘧𝘧𝘪𝘳𝘮𝘢𝘵𝘪𝘰𝘯𝘴 𝘢𝘯𝘥 500 𝘱𝘶𝘴𝘩𝘶𝘱𝘴)
3. Don't fall into the trap of the manager schedule (𝘤𝘶𝘵 𝘰𝘶𝘵 𝘮𝘦𝘦𝘵𝘪𝘯𝘨𝘴 𝘸𝘩𝘦𝘳𝘦 𝘺𝘰𝘶 𝘤𝘢𝘯)

Busy !== productive but it's easy to confuse the two.

If you're not already following Rahul Pandey and Alex Chiou you really should. 

There's a lot of great information out there for junior devs and those trying to break into the industry... but what about the rest of us? Engineering managers, middle and senior devs? Where's our bootcamp? These two have a lot of great content and an app that explores life after the interview that I've found incredibly useful.

#linkedinaudioevent #licreatoraccelerator ",UNKNOWN,Brian,Jenney,8171,8171,43,5,2,0,0.006119202056051891,"#linkedinaudioevent ,#licreatoraccelerator ",2022-11-18 09:15:24,https://www.linkedin.com/feed/update/urn:li:activity:6999417291843006464
urn:li:activity:6999400627676078080,"Holy fishcakes, I see the same issues on every junior developer's LinkedIn profile:

- less than 500 connections
- mentioning ""junior"" or ""aspiring"" in the profile
- confusing job history
- top skills that aren't relevant

The video here will give you some pointers on how to make yourself more discoverable on LI and maybe make your profile suck a little less.


#licreatoraccelerator ",VIDEO,Brian,Jenney,11883,11883,119,15,12,0,0.012286459648236978,#licreatoraccelerator ,2022-11-18 08:13:45,https://www.linkedin.com/feed/update/urn:li:activity:6999400627676078080
urn:li:activity:6999046107385253889,"One of my mentees has been struggling on the job search and requested a meeting with me at 6AM this morn.

Ruh roh...

I expected we might go over some quick interview prep for an upcoming on-site or discuss a recent experience. I was pleasantly surprised when he pulled up his screen and showed me an offer letter! About as good a way to start my morning as I could imagine.

I met Ramandeep Singh a few months ago. He had just graduated from a bootcamp and was looking for a role as a developer. We worked on all the technical aspects of preparing for interviews: Javascript features and concepts, algorithms and ReactJS. In retrospect, more than anything, I offered him support during a very demanding string of interviews, rejections and self-doubt.

I am thoroughly impressed. It takes a lot of dedication to remain consistent when things just aren't going your way. This is exactly why most people fail. That little voice in the back of their head tells them every reason they won't or can't get hired. F*ck that voice.

This was a good reminder for me that technical skills are absolutely important to learn, but encouragement, empathy and support are equally needed. We're humans first.

Congratulations Ramandeep Singh - incredibly well deserved!",UNKNOWN,Brian,Jenney,18667,18667,177,21,1,0,0.010660523919215728,,2022-11-17 08:41:41,https://www.linkedin.com/feed/update/urn:li:activity:6999046107385253889
urn:li:activity:6998805535609278464,"Getting interviews is hard.

Interviewing is hard.

Do you know what’s harder?

The part after the interview. Starting a new position, learning a new codebase, getting your first feature, doing your first on call rotation.

The interview is just the entry fee to an entirely new game.

Check out 4 things you can do as a software engineer to stand out on your team that have little to do with coding.

#licreatoraccelerator ",ARTICLE,Brian,Jenney,4104,4104,48,6,1,0,0.013401559454191032,#licreatoraccelerator ,2022-11-16 16:59:49,https://www.linkedin.com/feed/update/urn:li:activity:6998805535609278464
urn:li:activity:6998299586368872449,"You can’t wish away impostor syndrome.

If there’s one theme I’ve noticed in the 176 conversations I’ve had with many of you over the phone or hangouts during the last few months, it’s this:

Developers largely feel  they are less competent than other developers on their team, bootcamp or university.

I’m no statistician, I’m barely an engineer, but I don’t think it’s possible this many developers are in the bottom 10% of their respective groups.

So what gives?

We think the person next to us is smarter than we are. They understand some concept just a little more than we do. They know the answer to the question we’re afraid to ask.

I’m intrigued and a little sad that so many of us feel like this. I suspect a lack of communication coupled with remote work has made us feel more isolated than ever. Funny thing is, the senior engineer at Amazon is feeling a lot of the same insecurities as the junior who just graduated.

So what do you do?

- identify the gaps in your skill
- resist the urge to procrastinate with endless tutorials
- embrace the fact you can not learn everything and expose your ignorance
- make a plan to earn your confidence by learning what intimidates you



#licreatoraccelerator ",UNKNOWN,Brian,Jenney,4908,4908,39,8,0,0,0.009576202118989406,#licreatoraccelerator ,2022-11-15 07:15:03,https://www.linkedin.com/feed/update/urn:li:activity:6998299586368872449
urn:li:activity:6997958321613750273,"A framework for a great side project:

1. Find an interesting (and free) API: 𝘪𝘯𝘴𝘵𝘦𝘢𝘥 𝘰𝘧 𝘢 𝘮𝘰𝘷𝘪𝘦 𝘥𝘢𝘵𝘢𝘣𝘢𝘴𝘦, 𝘵𝘳𝘺 𝘴𝘵𝘰𝘤𝘬𝘴 𝘰𝘳 𝘮𝘢𝘤𝘩𝘪𝘯𝘦 𝘭𝘦𝘢𝘳𝘯𝘪𝘯𝘨 𝘈𝘗𝘐𝘴
2. Pick 1 or 2 new technologies you want to learn and leverage your current knowledge for the rest of the dev work
3. Create the user flow: 𝘜𝘴𝘦 𝘍𝘪𝘨𝘮𝘢 𝘰𝘳 𝘊𝘢𝘯𝘷𝘢 𝘧𝘰𝘳 𝘮𝘰𝘤𝘬𝘶𝘱𝘴
4. Deploy it:  𝘊𝘰𝘯𝘴𝘪𝘥𝘦𝘳 𝘈𝘞𝘚 𝘣𝘦𝘤𝘢𝘶𝘴𝘦 𝘵𝘩𝘢𝘵’𝘴 𝘸𝘩𝘢𝘵 𝘮𝘰𝘴𝘵 𝘤𝘰𝘮𝘱𝘢𝘯𝘪𝘦𝘴 𝘸𝘪𝘭𝘭 𝘶𝘴𝘦 𝘪𝘯 𝘵𝘩𝘦 “𝘳𝘦𝘢𝘭” 𝘸𝘰𝘳𝘭𝘥





#licreatoraccelerator ",UNKNOWN,Brian,Jenney,6959,6959,83,13,4,0,0.014369880729989942,#licreatoraccelerator ,2022-11-14 08:45:03,https://www.linkedin.com/feed/update/urn:li:activity:6997958321613750273
urn:li:activity:6997300149437833216,"There are developers with less talent than you who are getting hired. 

I know the news sucks right now but hear me out:

You are likely not competing for the same roles as the influx of highly paid engineers who just came into the market.

So continue to work on your skills, keep applying to all those non-sexy companies and tech-adjacent roles and make connections online and IRL.

Some will tell you getting that first role (or the next one) is a numbers game. Others will say it's all about connections. Neither is wrong. So try a combination and do what works for you. 

𝗕𝗲 𝗰𝗼𝗻𝘀𝗶𝘀𝘁𝗲𝗻𝘁 𝗯𝘂𝘁 𝗻𝗼𝘁 𝗳𝗼𝗼𝗹𝗶𝘀𝗵:

- 𝘪𝘧 𝘺𝘰𝘶 𝘴𝘦𝘯𝘥 𝘰𝘶𝘵 100 𝘢𝘱𝘱𝘴 𝘢𝘯𝘥 𝘯𝘰𝘵 1 𝘨𝘦𝘵𝘴 𝘢 𝘳𝘦𝘱𝘭𝘺 maybe consider looking into your resume or LI profile and asking for advice
- 𝘧𝘢𝘪𝘭𝘦𝘥 𝘦𝘷𝘦𝘳𝘺 𝘤𝘰𝘥𝘪𝘯𝘨 𝘤𝘩𝘢𝘭𝘭𝘦𝘯𝘨𝘦 𝘴𝘱𝘦𝘤𝘵𝘢𝘤𝘶𝘭𝘢𝘳𝘭𝘺? Identify what concepts you need to study
- 𝘤𝘢𝘯'𝘵 𝘨𝘦𝘵 𝘱𝘢𝘴𝘵 𝘵𝘩𝘦 𝘣𝘦𝘩𝘢𝘷𝘪𝘰𝘳𝘢𝘭 𝘴𝘤𝘳𝘦𝘦𝘯 𝘸𝘪𝘵𝘩 𝘳𝘦𝘤𝘳𝘶𝘪𝘵𝘦𝘳𝘴? Try a mock interview with a friend or mentor and see if you're coming off like an unsafe bet (or a creep 😅)

I've had a couple mentees get hired this month. Some take weeks to find a role. Some take months. I've yet to find a ""hack"" to land a role. Do the boring stuff, fail, learn and re-calibrate. Just don't quit.

If you do have some strategies for getting hired please share 'em 👇🏽",UNKNOWN,Brian,Jenney,21117,21117,240,24,9,0,0.01292797272339821,,2022-11-12 12:56:40,https://www.linkedin.com/feed/update/urn:li:activity:6997300149437833216
urn:li:activity:6996861067150721024,"Why are we writing tests again?

Isn’t that what QA is for?

Tests aren’t free, they take time and when done correctly they:

- supplement documentation
- allow for easier refactoring
- verify edge cases which are difficult to trigger manually

The problem most people have when it comes to writing tests is just getting started.

Check out the video and the links below to code snippets you can use to write your first tests using Jest. ↙️

𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝘀 𝘁𝗼 𝘁𝗲𝘀𝘁: 
https://lnkd.in/g8Pz7ivi

𝗧𝗲𝘀𝘁 𝗳𝗶𝗹𝗲𝘀: 
https://lnkd.in/ganZJQSw




#licreatoraccelerator #jest #unittesting #javascript ",VIDEO,Brian,Jenney,9100,9100,52,9,2,0,0.006923076923076923,"#licreatoraccelerator ,#jest ,#unittesting ,#javascript ",2022-11-11 07:54:16,https://www.linkedin.com/feed/update/urn:li:activity:6996861067150721024
urn:li:activity:6996304884715192320,"Having code that works on your machine is great. Having it work and perform well on another person's machine is where the money is at. 

I predict site performance will be increasingly important as shoppers migrate further into e-commerce and new apps wreak havoc on our already weak attention spans. 

As a developer, you want to know how to diagnose and triage the most common culprits slowing down your site.



#licreatoraccelerator 
",ARTICLE,Brian,Jenney,2568,2568,42,1,1,0,0.017133956386292833,#licreatoraccelerator ,2022-11-09 19:13:22,https://www.linkedin.com/feed/update/urn:li:activity:6996304884715192320
urn:li:activity:6996119056256839682,"Stop being so selfish.

Honestly, didn’t expect my personal trainer, a tatted up ex-con to be one of the main reasons I started writing on LinkedIn. Both him and my VP at the time encouraged me to share more online and I was apprehensive.

Like you, I’ve benefitted from reading others’ stories on here, made some great connections and learned a ton.

Here I was, picking all these people’s brains and learning from the community but not giving back myself.

He was right, I was being selfish.

I let my own ego get in the way of sharing what I had learned and was learning, the mistakes I made and the advice that could’ve saved me months or years of frustration. 

Should I let people know about my past? How much? What would they think?

𝘞𝘩𝘰 𝘨𝘪𝘷𝘦𝘴 𝘢 𝘧*𝘤𝘬, he told me.

𝘚𝘵𝘰𝘱 𝘮𝘢𝘬𝘪𝘯𝘨 𝘪𝘵 𝘢𝘣𝘰𝘶𝘵 𝘺𝘰𝘶!

Yeah, he’s a super intense dude. 😅

So I wrote a lot more. Exposed my past. Got more followers and started a mentorship service. It’s one of the best decisions I’ve made this year. I've spoken with hundreds of you offline, met some amazing people and expanded my business.

I know there are people out there who will tell you all the reasons not to share your thoughts. 

- There are too many voices already
- You barely know anything
- Who are you to share? 

Give us the benefit of learning from your mistakes and successes. Open yourself up to criticism and support. Learn how to formulate your thoughts and share them.

Don’t be selfish.


#CreateOnLinkedIn #licreatoraccelerator ",UNKNOWN,Brian,Jenney,7378,7378,64,16,0,0,0.010843046896177827,#licreatoraccelerator ,2022-11-09 06:51:32,https://www.linkedin.com/feed/update/urn:li:activity:6996119056256839682
urn:li:activity:6995801925787037696,"You can stop using Redux.

That doesn’t mean your company will though.

With around 8.2 million downloads just last week, there’s a pretty good chance you will be using it.

So stop being scared of it.

Yes, you can still debate whether context, useReducer or whatever new state management library popped up this week is better than Redux… I mean, if that’s your thing who am I to judge (I am judging you… silently).

If Redux or its more approachable step-brother, react-redux, still confuses you I understand.

For some reason, lots of apps like to split up their actions, types and reducers into many, many small files for the sake of… I dunno really.

Try learning these concepts and I think you will get a better understanding of and appreciation for Redux:

- 𝘱𝘶𝘣𝘭𝘪𝘴𝘩𝘦𝘳/𝘴𝘶𝘣𝘴𝘤𝘳𝘪𝘣𝘦𝘳 𝘱𝘢𝘵𝘵𝘦𝘳𝘯
- 𝘥𝘶𝘤𝘬𝘴 𝘢𝘳𝘤𝘩𝘪𝘵𝘦𝘤𝘵𝘶𝘳𝘦
- 𝘱𝘶𝘳𝘦 𝘧𝘶𝘯𝘤𝘵𝘪𝘰𝘯𝘴

And of course, tell me why Redux sux and which state management tool you're currently using.



#licreatoraccelerator ",UNKNOWN,Brian,Jenney,9811,9811,72,30,0,0,0.010396493731525838,#licreatoraccelerator ,2022-11-08 09:46:41,https://www.linkedin.com/feed/update/urn:li:activity:6995801925787037696
urn:li:activity:6995447580897816577,"I’ve solved more problems running around Lake Merritt in Oakland, CA than staring at my computer screen.

I’ve been running this lake since I was 14 years old and became a member of Summer Search, a program for inner-city kids who needed a boost in life. At the time, they were sending me out of state to participate in a rigorous outdoors program and I needed to be in decent shape - so running it was.

I stopped running for a little over a decade and then picked it back up in my 30’s when I began coding.

During these runs I’d find solutions to problems that had alluded me during the week:

- creating a complex Redux setup for a real time chart
- solution for a race condition during the checkout step of an ecom app
- the idea to start a mentorship business
- how to create a shared state library for a series of front ends

I began to count on my runs when I ran into difficult issues in life or at work. There’s some science to back this up:

𝗬𝗼𝘂𝗿 𝗯𝗿𝗮𝗶𝗻 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻𝘀, 𝗺𝗲𝗺𝗼𝗿𝘆 𝗮𝗻𝗱 𝗮𝘁𝘁𝗲𝗻𝘁𝗶𝗼𝗻 𝘀𝗽𝗮𝗻 𝗯𝗲𝗰𝗼𝗺𝗲 𝘀𝘁𝗿𝗼𝗻𝗴𝗲𝗿 𝗱𝘂𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝗳𝗼𝗿 𝗮 𝘀𝗵𝗼𝗿𝘁 𝘁𝗶𝗺𝗲 𝘀𝗽𝗮𝗻 𝗮𝗳𝘁𝗲𝗿 𝗮 𝗿𝘂𝗻.

Exercise is one of the first things people sacrifice when work or life gets difficult but I doubled down on my routine at each stage of my career. I know it's my not-so-secret weapon. I’d run during lunch, early in the morning or whenever I could.

So while you’re banging your head against the computer or screaming at your rubber duck trying to solve that error on line 420, maybe try a run or a walk.

Anyone else solved life's problems on a long run?



#summersearch #licreatoraccelerator #debugging #running ",IMAGE,Brian,Jenney,5205,5205,61,14,0,0,0.01440922190201729,"#summersearch ,#licreatoraccelerator ,#debugging ,#running ",2022-11-07 10:24:39,https://www.linkedin.com/feed/update/urn:li:activity:6995447580897816577
urn:li:activity:6995392171528908800,"You aren't paid for how many lines of code you write. 
 
You're paid for solving problems and the outsize impact those have on the business. 
 
So don't keep on taking tickets you’re sure you will complete that don’t provide value. 
 
Instead, look for projects and features that have high visibility and impact. 
 
Then, learn from your failures, document your successes and leverage your wins.",UNKNOWN,Brian,Jenney,4314,4314,57,10,4,0,0.01645804357904497,,2022-11-07 06:34:26,https://www.linkedin.com/feed/update/urn:li:activity:6995392171528908800
urn:li:activity:6994689819943591936,"I know stability is a myth but just how much volatility will we have to get used to?

Some (well, at least one) of the latest rounds of tech layoffs seems particularly immoral. I'm sure there are reasons beyond my scope of understanding that can be used to justify upending the lives of thousands of people for ""business"" reasons... but I'm no economics professor. To me, it seems wrong on a basic human level.

The one silver lining here is the amount of people offering career support, job leads and a sympathetic ear.

The tech community continues to be an incredibly supportive (and snarky) group. There's a link in my bio where you can schedule a time to chat if you want to talk to a human.",UNKNOWN,Brian,Jenney,2832,2832,27,2,0,0,0.010240112994350282,,2022-11-05 09:11:28,https://www.linkedin.com/feed/update/urn:li:activity:6994689819943591936
urn:li:activity:6994366488761577472,"Bombed the interview?

It’s not over yet.

Ever had this happen to you:

Interviewer asks question that you were right on the verge of solving but too many coffees put you in a jittery state, you panicked and forgot how to do something you’ve done before. 

Time’s up, video ends and you curse yourself and your terrible caffeine addiction.

𝘖𝘙

Now that the pressure is off you figure out the answer to the question and immediately contact the interviewer/recruiter with your solution and explanation of how your nerves interfered with your performance.

I’ve successfully used this exact process and suggested it to others whom I mentor. Sometimes it works, sometimes it doesn’t. Worst case scenario, you’ve proven to yourself you can figure out the problem and maybe learn something. Best case, you move to the next round.

Ever used this technique? If so, how'd it work for you?




#licreatoraccelerator #codinginterview ",UNKNOWN,Brian,Jenney,5314,5314,48,10,1,0,0.011102747459540836,"#licreatoraccelerator ,#codinginterview ",2022-11-04 11:40:06,https://www.linkedin.com/feed/update/urn:li:activity:6994366488761577472
urn:li:activity:6994333550850232320,"There's one thing developers find especially difficult to do, regardless of their seniority:

Estimation.

It's unfortunate that this is often the metric we're judged by most harshly. It's great you're code quality and tests caught random edge cases but if the feature needed for a December 25th promotion isn't ready until Jan 1, I can guarantee your team won't be happy.

While there's not much you can do to ""fix"" a bad estimate, you can certainly get a good idea of when you will actually finish a feature using a system I share in the video below.

With this retroactive estimate, you can quickly flag at-risk work and make plans to cut scope or quality... or pull some marathon coding sessions 😬.

My steps for ""retroactive estimation"":

- 𝗜𝗱𝗲𝗻𝘁𝗶𝗳𝘆 𝗮𝗻𝗱 𝘄𝗿𝗶𝘁𝗲 𝗱𝗼𝘄𝗻 𝗮𝗹𝗹 𝘁𝗵𝗲 𝗻𝗲𝗰𝗲𝘀𝘀𝗮𝗿𝘆 𝘁𝗮𝘀𝗸𝘀 (styling, tests, PR)
- 𝗧𝗵𝗶𝗻𝗸 𝗼𝗳 𝘁𝗵𝗲 𝘄𝗼𝗿𝘀𝘁 𝗰𝗮𝘀𝗲 𝘀𝗰𝗲𝗻𝗮𝗿𝗶𝗼𝘀 for each task (maybe the PR takes 2 days to resolve)
- 𝗣𝗮𝗱 𝘆𝗼𝘂𝗿 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗲𝘀 to include meetings and other non-dev activities
- 𝗖𝗵𝗲𝗰𝗸 𝘆𝗼𝘂𝗿 𝗹𝗶𝘀𝘁 𝗱𝗮𝗶𝗹𝘆 to see if you are in fact on track to deliver and 𝗿𝗲-𝗰𝗮𝗹𝗶𝗯𝗿𝗮𝘁𝗲 𝘆𝗼𝘂𝗿 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗲𝘀 𝗯𝗮𝘀𝗲𝗱 𝗼𝗻 𝘆𝗼𝘂𝗿 𝗰𝘂𝗿𝗿𝗲𝗻𝘁 𝗽𝗿𝗼𝗴𝗿𝗲𝘀𝘀
- 𝗥𝗮𝗶𝘀𝗲 𝘆𝗼𝘂𝗿 𝗵𝗮𝗻𝗱 as soon as you see a possibility that the feature will NOT make the cut
- 𝗨𝘀𝗲 𝘁𝗵𝗶𝘀 𝗲𝘀𝘁𝗶𝗺𝗮𝘁𝗲 𝗻𝗲𝘅𝘁 𝘁𝗶𝗺𝗲 you see a similar feature to more accurately point it



#licreatoraccelerator ",VIDEO,Brian,Jenney,3738,3738,36,8,0,0,0.011771000535045479,#licreatoraccelerator ,2022-11-04 09:38:58,https://www.linkedin.com/feed/update/urn:li:activity:6994333550850232320
urn:li:activity:6993936930736406528,"No, I’m not teaching my kids to code.

Personally, I love writing code, both as a hobby and profession but I think the following skills/traits will be increasingly important in a digital world:

• writing
• the ability to learn independently
• data literacy
• public speaking
• flexibility
• curiosity

I’m currently using an AI powered tool, Github Co-Pilot, in my daily work to write code. Years ago I would have scoffed at this reality. 

With low code and no-code tools becoming more widely available and powerful, my prediction is that tech will continue to play an outsized role in our lives but the work will shift further away from implementing code to architecting systems and orchestrating communication between them. The people who can lead technical efforts, create engaging experiences and leverage data in a smart way will be more coveted than the software engineers who “only” write code.

If my kids do want to learn to code though…. Javascript.

#mytechprediction #licreatoraccelerator ",UNKNOWN,Brian,Jenney,14468,14468,101,36,6,0,0.009883881669892175,"#mytechprediction ,#licreatoraccelerator ",2022-11-03 07:09:05,https://www.linkedin.com/feed/update/urn:li:activity:6993936930736406528
urn:li:activity:6993570438714966017,"The job can search can feel unrewarding, draining and shake what little confidence you have in yourself.

It’s a game of both skill and chance.

You can be absolutely qualified and still “fail”.

Rejection is rarely personal, it’s an inevitable consequence of many factors:

- Resume quality is subjective (𝘢𝘴𝘬 5 𝘱𝘦𝘰𝘱𝘭𝘦 𝘵𝘰 𝘭𝘰𝘰𝘬 𝘢𝘵 𝘺𝘰𝘶𝘳 𝘳𝘦𝘴𝘶𝘮𝘦 𝘢𝘯𝘥 𝘨𝘦𝘵 5 𝘥𝘪𝘧𝘧𝘦𝘳𝘦𝘯𝘵 𝘰𝘱𝘪𝘯𝘪𝘰𝘯𝘴)
- Some companies hire internal candidates but open roles to the public
- Engineering interviews can be biased in favor of a specific answer even when presented with working (𝘰𝘳 𝘦𝘷𝘦𝘯 𝘣𝘦𝘵𝘵𝘦𝘳) alternatives

So what does this mean?

- Expect failure and learn from it
- Try your hardest not to take rejection personally
- Whatever you do, please do not stop playing the game

You only have to win once.



#licreatoraccelerator #interview #codinginterview ",UNKNOWN,Brian,Jenney,3391,3391,47,9,0,0,0.016514302565614862,"#licreatoraccelerator ,#interview ,#codinginterview ",2022-11-02 06:53:44,https://www.linkedin.com/feed/update/urn:li:activity:6993570438714966017
urn:li:activity:6993269592940843008,"I don't care what anyone says, effectively debugging an application is an important skill. 

In the browser, we can rely on a 𝘥𝘦𝘣𝘶𝘨𝘨𝘦𝘳 to pause execution of our scripts and investigate our janky code line by line.

What about Node/Express apps? Check out a feature a much smarter developer showed me years ago that I still use to figure out where I screwed up my API logic.

#licreatoraccelerator #debugging #nodejs #expressjs ",ARTICLE,Brian,Jenney,3702,3702,48,6,2,0,0.015126958400864398,"#licreatoraccelerator ,#debugging ,#nodejs ,#expressjs ",2022-11-01 11:05:32,https://www.linkedin.com/feed/update/urn:li:activity:6993269592940843008
urn:li:activity:6993231735333298177,"You don’t have a problem learning to code. 

You have a time management issue.

Too many people follow this pattern:

Zero coding 80% of the week.

Marathon coding sessions on their day off.

I’ve yet to see this strategy work. It’s simply not sustainable.

1 hour a day beats 6 on a Sunday. Hell, 30 minutes a day will likely get you further than attempting to cram a new framework into a weekend.

Consistency > Intensity.",UNKNOWN,Brian,Jenney,28433,28433,337,22,3,0,0.012731685013892309,,2022-11-01 08:29:01,https://www.linkedin.com/feed/update/urn:li:activity:6993231735333298177
urn:li:activity:6992877697496416256,"So there I was doing one of my daily 15 minute chats with a developer (link in bio 😉) and I found myself getting schooled.

There’s a lot of advice out there about getting your first job as a developer:

- Send a box of donuts to the hiring committee
- DM every hiring manager in the tri-state area
- Do a bunch of open source PRs (and get them ignored…)
- Write a bot to apply to 1 company per second 24/7
- Lie 🤷🏻‍♀️

The guy I was speaking with had a simple approach to getting interviews that was working for him which didn’t involve any donuts or even lying:

He was reaching out to his network of friends and acquaintances. Tech people. Non-tech people. Asking for referrals or leads and then following up on them. No bootcamp, no CS degree and here he was getting interviews.

So while you’re adding a new shade of green to the banner on your resume or adding yet another language to your skillset, don’t forget to reach out to family, friends and acquaintances IRL.

#licreatoraccelerator ",UNKNOWN,Brian,Jenney,6994,6994,59,13,0,0,0.010294538175579068,#licreatoraccelerator ,2022-10-31 09:02:44,https://www.linkedin.com/feed/update/urn:li:activity:6992877697496416256
urn:li:activity:6991784125988757504,"My most hated interview trend?

This one really boils my potato:

The take home assignment that's supposed to take 2 hours but actually takes 8. 

I've worked with too many developers on the interview circuit who get derailed by these often massive assignments that can require a backend, front end and interfacing with some AWS service... ""Should only take you a couple hours"" 😑

They're largely unavoidable for juniors on the market.

Here's some generic tips for dealing with these kinds of challenges:  

- write some goshdang tests. 
- add some freaking documentation
- record a sweet video of you walking through the functionality (a short one bucko... like 2 mins tops)

Few people will do this and it will make you stand out.

Here's my method for writing lots of tests quickly using the truth-table method that I hope you find useful.

#licreatoraccelerator #unittesting #reactjs 
",VIDEO,Brian,Jenney,35845,35845,327,32,16,0,0.010461710140884364,"#licreatoraccelerator ,#unittesting ,#reactjs ",2022-10-28 08:39:22,https://www.linkedin.com/feed/update/urn:li:activity:6991784125988757504
urn:li:activity:6991409511588642817,"I got through the first couple years of my career not knowing Big O, recursion or data structures.

It cost me.

I wasn’t building trivial apps here, and this lack of fundamentals led to some embarrassing mistakes.

There was the 100 line if-else statement… seriously.

The triple-nested for loop with a computationally expensive function.

The interview I bombed because I could barely pass a LeetCode easy.

“𝘉𝘶𝘵 𝘐’𝘭𝘭 𝘯𝘦𝘷𝘦𝘳 𝘵𝘳𝘢𝘷𝘦𝘳𝘴𝘦 𝘢 𝘵𝘳𝘦𝘦 𝘢𝘵 𝘸𝘰𝘳𝘬, 𝘢𝘭𝘭 𝘐 𝘥𝘰 𝘪𝘴 𝘤𝘦𝘯𝘵𝘦𝘳 𝘥𝘪𝘷𝘴 𝘢𝘯𝘥 𝘤𝘰𝘭𝘰𝘳 𝘣𝘶𝘵𝘵𝘰𝘯𝘴”

Really?

So you’ve never used recursion or leveraged a library that has? 

Never considered what happens if your function input grows… by a lot?

Ever thought, how can I decrease the look up time for the information in this massive array?

Armed with an understanding of common design patterns, data structures and algorithms I wasn’t just able to pass more interviews, I felt more confident and wrote better code. Maybe you will too 😉… probably won’t help you with those centering those divs though.


#licreatoraccelerator ",UNKNOWN,Brian,Jenney,14384,14384,145,21,3,0,0.01174916573971079,#licreatoraccelerator ,2022-10-27 07:57:30,https://www.linkedin.com/feed/update/urn:li:activity:6991409511588642817
urn:li:activity:6991037091182784512,"There can only be 1 best coder on the team.

As an average developer there’s still a lot of room to make impact outside being the highest technical authority.

As a very non-rockstar coder, here are some things I’ve done over the years which helped me stand out:

• start an engineering book club
• volunteer for on-call
• onboard junior members
• create a PR template to streamline the code review process
• offer to assist with others’ work
• actually talk during pointing sessions and clarify tasks instead of just nodding my head

Of course, getting work done in a timely manner and not significantly adding to the number of bugs in our backlog didn’t hurt either. 

I don’t think I’ve ever been the “best” coder on any team where I’ve worked. I’ve certainly been the worst in at least 1 company. 

Let me be clear, you cannot be technically incompetent, start a book club and expect to get recognized and promoted… BUT you also don’t need to wait until you understand JS on a Kyle Simpson level to offer your insight, suggest changes and speak up.",UNKNOWN,Brian,Jenney,6570,6570,60,6,1,0,0.010197869101978691,,2022-10-26 07:07:27,https://www.linkedin.com/feed/update/urn:li:activity:6991037091182784512
urn:li:activity:6990737879891140608,"That nagging feeling that you're not good enough or that maybe this career isn't meant for you can be debilitating. It's not enough to just wait it out.

For me it wasn't at least.

I realized that just as much as I needed to improve technically, I also needed to gain confidence in order to contribute at a level that made me proud. 

I'm a firm believer that the antidote to stress is action and I hope the steps I outline here give you some actionable steps to quiet that negative voice in your head.

#licreatoraccelerator ",ARTICLE,Brian,Jenney,3433,3433,77,6,1,0,0.024468394989804836,#licreatoraccelerator ,2022-10-25 11:29:43,https://www.linkedin.com/feed/update/urn:li:activity:6990737879891140608
urn:li:activity:6990670305492955136,"Congratulations! You got the job. Now here comes the hard part.

Bootcamps do a great job (for the most part) of getting developers hire-able. But what happens after you nail the interview?

I work with and speak with a lot of developers at the beginning of their careers. Many of them struggle in the same areas that I did after getting hired:

• Git flows and branching
• Writing good peer reviews
• Estimating features
• Deployment processes
• Writing unit tests
• Debugging
• Learning a new codebase

Like too many of us, I learned these skills through trial and error. Over years!

Anything I missed on this list that you wished you had learned before starting your first role as a developer?

#licreatoraccelerator ",UNKNOWN,Brian,Jenney,21651,21651,215,28,6,0,0.011500623527781627,#licreatoraccelerator ,2022-10-25 06:58:34,https://www.linkedin.com/feed/update/urn:li:activity:6990670305492955136
urn:li:activity:6990318372999610369,"If you’re hell-bent on learning data structures and algorithms please don’t JUST do 100 LeetCode problems.

Try this instead:

• learn common data structures like trees, graphs, linked lists, stacks and queues
• write these structures from scratch
• learn common techniques to sort and traverse data in these structures
• focus on recursion and backtracking after learning trees (𝘐 𝘧𝘪𝘯𝘥 𝘵𝘩𝘢𝘵 𝘪𝘵 𝘮𝘢𝘥𝘦 𝘮𝘰𝘳𝘦 𝘴𝘦𝘯𝘴𝘦 𝘵𝘩𝘪𝘴 𝘸𝘢𝘺)
• time yourself solving LC problems - shoot for 30 mins for medium problems and write the space and time complexity next to your solution
• learn common approaches to optimize algorithms (𝘩𝘢𝘴𝘩𝘮𝘢𝘱𝘴, 𝘮𝘦𝘮𝘰𝘪𝘻𝘢𝘵𝘪𝘰𝘯...)

Also - realize that just because MAANG exclusively asks DSA, the majority of your interviews as a front end developer will probably focus on a combination of behavioral and technical assessments including concepts like string manipulation, working with arrays and objects, JS trivia and building small components using ReactJS.",UNKNOWN,Brian,Jenney,35856,35856,357,10,27,0,0.010988398036590808,,2022-10-24 07:31:50,https://www.linkedin.com/feed/update/urn:li:activity:6990318372999610369
urn:li:activity:6989306782317785088,"Code peer reviews can be emotional.

At worst, they become punitive, nerve-wracking and destructive. Used correctly however, they can be a way for you to increase your influence on a team, teach and learn from others.

Here's a video of me walking through my code review process.
#licreatoraccelerator #codereview #juniordeveloper ",VIDEO,Brian,Jenney,3774,3774,32,0,0,0,0.008479067302596715,"#licreatoraccelerator ,#codereview ,#juniordeveloper ",2022-10-21 13:29:26,https://www.linkedin.com/feed/update/urn:li:activity:6989306782317785088
urn:li:activity:6989221990033235968,"Before you learn Kubernetes or Python or whatever is collecting dust in your Udemy library, I want you to do me a small favor.

If you’re a JS developer, make sure you can build a small application, free of any external framework.

I have a small challenge I give to developers who I mentor 1 on 1. It seems simple on the surface and my hope is that they do in fact find it easy. Often times, it uncovers some gaps in their knowledge and gives us a good idea about where to begin focusing our attention.

You can’t build a house on a shaky foundation.

Check it out in the comments below and if you’ve completed this challenge, don’t drop any hints!",UNKNOWN,Brian,Jenney,7945,7945,61,11,1,0,0.009188168659534299,,2022-10-21 06:53:21,https://www.linkedin.com/feed/update/urn:li:activity:6989221990033235968
urn:li:activity:6988805484258484224,"Diving into an unfamiliar codebase?

I’ve worked at 4 companies and had a dozen or so contract jobs as a developer over the years. Here’s how I navigate a new codebase:

- get it working locally (𝘺𝘰𝘶 𝘳𝘦𝘢𝘭𝘭𝘺 𝘵𝘩𝘪𝘯𝘬 𝘵𝘩𝘪𝘴 𝘸𝘰𝘶𝘭𝘥 𝘣𝘦 𝘰𝘣𝘷𝘪𝘰𝘶𝘴 𝘣𝘶𝘵 𝘦𝘹𝘱𝘦𝘳𝘪𝘦𝘯𝘤𝘦 𝘩𝘢𝘴 𝘴𝘩𝘰𝘸𝘯 𝘮𝘦 𝘰𝘵𝘩𝘦𝘳𝘸𝘪𝘴𝘦)
- look for patterns - for a UI app, how is the business logic handled as opposed to presentational logic? (𝘸𝘩𝘦𝘯 𝘺𝘰𝘶 𝘸𝘳𝘪𝘵𝘦 𝘤𝘰𝘥𝘦, 𝘴𝘵𝘢𝘺 𝘸𝘪𝘵𝘩𝘪𝘯 𝘢𝘯𝘥 𝘭𝘦𝘷𝘦𝘳𝘢𝘨𝘦 𝘵𝘩𝘰𝘴𝘦 𝘴𝘢𝘮𝘦 𝘱𝘢𝘵𝘵𝘦𝘳𝘯𝘴)
 - pick a feature and break it - expand the API response or trigger an auth error. Update a route to go to a page you just created (𝘵𝘩𝘪𝘴 𝘸𝘪𝘭𝘭 𝘦𝘪𝘵𝘩𝘦𝘳 𝘷𝘦𝘳𝘪𝘧𝘺 𝘰𝘳 𝘤𝘩𝘢𝘭𝘭𝘦𝘯𝘨𝘦 𝘺𝘰𝘶𝘳 𝘶𝘯𝘥𝘦𝘳𝘴𝘵𝘢𝘯𝘥𝘪𝘯𝘨 𝘰𝘧 𝘣𝘢𝘴𝘪𝘤 𝘧𝘶𝘯𝘤𝘵𝘪𝘰𝘯𝘢𝘭𝘪𝘵𝘺)
- update a test - pick a part of the codebase that could use more testing and write a test (𝘵𝘩𝘪𝘴 𝘸𝘪𝘭𝘭 𝘭𝘪𝘬𝘦𝘭𝘺 𝘵𝘦𝘢𝘤𝘩 𝘺𝘰𝘶 𝘵𝘩𝘦 𝘮𝘰𝘴𝘵 𝘢𝘣𝘰𝘶𝘵 𝘩𝘰𝘸 𝘢 𝘤𝘦𝘳𝘵𝘢𝘪𝘯 𝘧𝘦𝘢𝘵𝘶𝘳𝘦 𝘢𝘤𝘵𝘶𝘢𝘭𝘭𝘺 𝘸𝘰𝘳𝘬𝘴)
- read the f*** docs

Anything you’d add?",UNKNOWN,Brian,Jenney,18377,18377,127,23,0,0,0.008162376884148665,,2022-10-20 03:56:29,https://www.linkedin.com/feed/update/urn:li:activity:6988805484258484224
urn:li:activity:6988466986611593216,"I have a lot of new followers so I figure it’s time to out myself again.

You may know me as some dude on LinkedIn spouting about developer productivity and interviews… you’re not wrong.

10 years ago however, my life was unrecognizable. I struggled with addiction and lived mostly outside the law.

A friend’s death coupled with the birth of my first son only increased my foolishness. It’s not an exaggeration to say I was headed for a jail cell or a grave.

After an intervention I stopped cold turkey.

I had time on my hands and landed my first real job as an adult. I was nearly 30.

I needed something to fill the time between works and sleep. I discovered HTML and CSS and found my new addiction. I spent my nights and weekends on free sites like codecademy and going to meetups to learn how to use my Sublime text editor.

Many janky websites later and with a lot of luck and support from strangers on line I landed my first role.

Every time I share this slice of my life I get nervous. What will people think?

I also know there are others like me and my story is not as unique as you’d think. I know a lot of others are feeling alone or are struggling with addiction or insecurity and I hope that you read this and feel less alone. I hope you understand that your history doesn’t dictate your future.

I’m no doctor and I can only tell you what’s worked for me:

- Finding a hobby
- Exercising (discipline and dopamine)
- Making my goals public (social pressure)
- Taking myself out to movies on weekends (days I was likely to slip up)
- Taking it one day at a time (sounds corny but my goal was just to make it through the day… it worked)

My DMs are always open if you want to chat.

Ok back to more coding content 😉.



#licreatoraccelerator",UNKNOWN,Brian,Jenney,15724,15724,169,16,1,0,0.011829051132027474,#licreatoraccelerator,2022-10-19 05:22:51,https://www.linkedin.com/feed/update/urn:li:activity:6988466986611593216
urn:li:activity:6988122989317820417,"Here’s the harsh truth about interviews that no one ever really addresses:

Luck is a factor.

You could be absolutely qualified for a position and study all the relevant material... and still fail.

Get a bad interviewer? All that pre-work might go down the drain.

Perhaps your interviewer asks an unreasonably difficult question or has different standards about what constitutes a reasonable solution? 

Or perhaps luck works in your favor.

Maybe you study a particular question that you have memorized and get asked that question.

Maybe the interview is not technical at all and just consists of small talk and personality fit.

So if you’ve recently bombed an interview or are beating yourself up because you see others achieving success on a timeline that doesn’t seem possible for you, realize that interviewers are both a game of skill AND chance.

Increase your surface area for luck by continuing to apply, researching on sites like Glassdoor and Blind and studying the most common interview questions.


#licreatoraccelerator ",UNKNOWN,Brian,Jenney,7292,7292,74,5,1,0,0.010970927043335162,#licreatoraccelerator ,2022-10-18 06:30:49,https://www.linkedin.com/feed/update/urn:li:activity:6988122989317820417
urn:li:activity:6986746992970387456,"Out of the 200 or so chats I've had with developers in the last few months, around half of them are with people who live outside the US.

The most common question they have:

How do I get a remote job?

Admittedly, I don't know much about the logistics of getting hired as a remote worker living abroad but luckily Erik Andersen has written an article that I read which has some excellent tips.",ARTICLE,Brian,Jenney,8429,8429,45,10,1,0,0.006643729979831534,,2022-10-14 11:27:45,https://www.linkedin.com/feed/update/urn:li:activity:6986746992970387456
urn:li:activity:6986723507996950528,"Tutorial Hell is real place. I've been there.

The master writes the code, you watch them and type what they type.

It's like a paint by numbers exercise.

You may even end up with a nice shiny app and feel like you have achieved some level of mastery.

You go in to add a new feature and think to yourself, 𝘩𝘰𝘸 𝘪𝘯 𝘵𝘩𝘦 𝘩𝘦𝘭𝘭 𝘥𝘰𝘦𝘴 𝘵𝘩𝘪𝘯𝘨 𝘸𝘰𝘳𝘬?

What you actually learned was how to type really well, but you have about the same understanding of React, Redux or NodeJS as when you started... 12 hours ago.

Listen, I'll still buy a half dozen tutorials each year. I see a lot of value in them BUT I also see how they're abused. I'm a huge fan of learning by getting stuck, reading the docs, doing research and most importantly, putting hands on keyboards.

If you're looking for a non-tutorial, a project that takes you 80% of the way to the finish line but needs your fixes to get things working - check out the link in the comments ⬇️

I have some GitHub repos with challenges to teach you Redux and introduce you to Node and Express that might frustrate the hell out of you... in a good way I hope 😉",UNKNOWN,Brian,Jenney,12276,12276,131,12,0,0,0.011648745519713262,,2022-10-14 10:00:12,https://www.linkedin.com/feed/update/urn:li:activity:6986723507996950528
urn:li:activity:6986325858881863680,"Happy path coding - the mark of the junior developer.

Goes a little something like this:

- function works ✅
- test cases pass ✅
- PR LGMT’ed ✅
- Blows up spectacularly in production 🚨

I’ve had this experience happen more than a few times because I didn’t consider edge cases. 

What happens when a deeply nested object from a 3rd party API doesn’t come back as expected? What if the user clicks like a mad-man on the submit button? How often should a request be re-tried before failing?

Treat your users kindly but expect them to treat your app like raving lunatics with thumbs for fingers.",UNKNOWN,Brian,Jenney,5741,5741,70,8,2,0,0.013934854554955583,,2022-10-13 07:49:17,https://www.linkedin.com/feed/update/urn:li:activity:6986325858881863680
urn:li:activity:6986038679303577600,"Exhausted LinkedIn, AngelList and Indeed on your job search?

A very impressive young man reached out to me last week for a chat and was kind enough to share his list of job sites with notes included.

Some heroes wear capes. 

Some painstakingly review job sites, put them in a public file and share them free of charge. 🙏🏻

Hopefully you find it helpful.

Shout out to Anirudh Kadian!",ARTICLE,Brian,Jenney,23943,23943,228,17,29,0,0.011443845800442718,,2022-10-12 12:15:03,https://www.linkedin.com/feed/update/urn:li:activity:6986038679303577600
urn:li:activity:6985985291488518145,"Don’t remember a single thing as a software engineer.

Just Google everything.

Really?

I wrote a semi-viral post a few months ago about a developer who was unable to pass an interview because he did not have a basic grasp of modern Javascript. He did not know how to use map, filter or reduce. He was not junior.

Listen, I look up a ton of things. There’s absolutely nothing wrong with leveraging the collective knowledge of the internet to create code.

BUT, there are some things I would expect any JS developer with more than a year of experience to have committed to memory:

- for loops
- basic iteration methods like forEach, map, filter
- function syntax (including arrow functions)
- conditional statements (if/else)

That interview experience years ago is one of the reasons I started mentoring as a service. I don’t want you to lower your expectations for yourself or walk into interviews under the false impression that you ""can just look it up"". 

Perhaps your team uses ES5. Maybe you build emails all day.

Your interviewer/s don’t care. They have the same set of questions for you as the others.

Having a strong foundation in JS and understanding the basics is key to passing most front end interviews.

𝙏𝙇𝘿𝙍:

It’s ok to Google stuff.

As a Javascript developer there are some things you will be expected to just have committed to memory like for loops and basic ES6 features.

Unfair? I think not. Maybe you think otherwise.

Reality? You better believe it.",UNKNOWN,Brian,Jenney,9075,9075,82,19,0,0,0.011129476584022038,,2022-10-12 09:10:52,https://www.linkedin.com/feed/update/urn:li:activity:6985985291488518145
urn:li:activity:6985619659207168001,"Nobody asks why enough.

Why are we using framework X?

Why have we chosen Y deployment strategy?

Why are we writing unit tests?

Why is Typescript overrated? 😉

Whether you’re working at an established company or a 10 person startup, a lot of your tech stack has been decided for you. It’s critical to your growth to question why these decisions were made rather than blindly following them. Oftentimes there are solid reasons for your team’s choices. Sometimes… not.

It’s important to know either way.

This way, when you are tasked with making large decisions you can think clearly about the tradeoffs and benefits rather than saying “because that’s what I used in the past.” 

Being curious is one of your greatest assets as a developer.",UNKNOWN,Brian,Jenney,4408,4408,43,7,0,0,0.011343012704174229,,2022-10-11 08:20:32,https://www.linkedin.com/feed/update/urn:li:activity:6985619659207168001
urn:li:activity:6984201017504542720,"As a junior dev you may be focused on getting a function to just work but soon you’ll be pulling your hair out over things like:

- migrations
- versioning strategies for libraries
- code pipelines
- deployments
- breaking updates

I’ve found tackling these kinds of problems to be really exciting… for the most part. 

The issue most juniors face is that outside of actually being presented with these problems, they may wait years before getting the opportunity to encounter them.

Here’s the great thing about being a software engineer:

You can present these problems to yourself.

- Github actions can give you experience with pipelines
- creating an NPM package is a great way to learn about versioning strategies
- deploy an app to AWS on the free tier 
- update you long lost side project from React 15 to 18 or Node 12 to 18 and cry for a bit

So yes, keep getting those functions to work. And when you have the time, think about what's on the periphery of the code you write and how to make things work there.",UNKNOWN,Brian,Jenney,3652,3652,25,1,1,0,0.007393209200438116,,2022-10-07 10:36:05,https://www.linkedin.com/feed/update/urn:li:activity:6984201017504542720
urn:li:activity:6983836643581403136,"I've spoken with about 2% of my audience over the last few months.

That number may seem small but in reality that means I've done around 150 phone calls with people here on LI.

Our convos are short and even though they are tech focused, they're often more about impostor syndrome, confidence and career trajectory. 

Also... closure 😅

I find myself repeating a lot of the same advice and while I really enjoy these conversations, I want to reach more people.

Dagna Bieda and I are taking the conversations we've been having in 1 on 1's and behind closed doors to the public. Next week we'll be discussing burnout, the silent killer and ways we've found to handle the stress that comes with working in tech.

https://lnkd.in/eA6zXyhw",UNKNOWN,Brian,Jenney,303,303,1,0,0,0,0.0033003300330033004,,2022-10-06 10:35:20,https://www.linkedin.com/feed/update/urn:li:activity:6983836643581403136
urn:li:activity:6983779848020271104,"If you can learn how to code for free, then why do people upwards of 10k for a bootcamp or 50k for a college degree?

I’ll be honest, I’ve met way too many developers over the years who are unwilling to spend a dime on their education. They go to YouTube university, fall down several rabbit holes and emerge on the other end with a host of unrelated skills. None of which make them more employable than they previously were.

Of course, I’ve met some highly disciplined and ambitious people who actually beat the odds.

What you’re paying for when you enroll in a bootcamp (or college) is not only the knowledge you acquire but:

1. A clear and concise path to learn a skill
2. Support
3. Community
4. Accountability

You can also get in shape without a trainer. Perform basic car maintenance without a mechanic. Remodel your home from YouTube tutorials.

It just depends on your needs, time constraints and tolerance for failure.

Want a shorter, clearer path towards your goal? Find someone where you want to be and ask them what it takes to get there.",UNKNOWN,Brian,Jenney,17510,17510,163,31,2,0,0.011193603655054256,,2022-10-06 07:50:25,https://www.linkedin.com/feed/update/urn:li:activity:6983779848020271104
urn:li:activity:6983421096867880960,"How does it feel to be the worst developer on a team?

Well, I had the unpleasant experience of holding this title when I worked at a small startup.

I probably had more technical growth in the short time I was there than at any other company I’ve worked since.

You’ve probably heard the advice “If you’re the smartest person in the room, it’s time to leave the room.”

Easier said than done.

The guilt and anxiety I felt on a daily basis was difficult to deal with. There I was, confronted with my own limitations and the realization that this wasn’t just all in my head.

I could barely keep up with the tasks I was assigned and relied on lots of pairing sessions to get my work done.

The company was small - only 3 engineers and they were the kind of developers who gave speeches at conferences and wrote the libraries that other devs use in their daily work.

I could either quit or at least attempt to keep up with the other devs and contribute to the best of my ability.

I made a resolution to suck less.

- I asked the smarty-pants devs what books they suggested I read
- I audited my Javascript knowledge and wrote out what I knew I had to learn to contribute to discussions
- enrolled in a course to learn DSA and comp sci fundamentals
- someone made a joke about Djikstra once… who the hell is that? I would find out

I never became the 2nd worst developer at this company, but I grew my technical skills, confidence and threshold for failure.

As uncomfortable as it was, I know see just how pivotal this experience was.

So if you’re just starting out, or maybe on a new team and discovering just how little you know…good. Embrace the suck, expose your ignorance and be prepared to learn.",UNKNOWN,Brian,Jenney,27280,27280,348,43,8,0,0.014626099706744868,,2022-10-05 06:49:32,https://www.linkedin.com/feed/update/urn:li:activity:6983421096867880960
urn:li:activity:6982711844561895424,"⏰ The clock is ticking! ⏰

1.5 hrs-ish left to our watercooler audio chat, where you can tune in and ask any questions that come to mind about Salary vs. Fulfillment in Tech. 

Brian Jenney and I are bringing back the fun in-office feel of a water cooler chat to all those who want to listen in to an interesting chit-chat.

https://lnkd.in/g7WtKSNU

#linkedinAudioEvent #Tech #salary #fulfillment #joinUsLive #watercooler #office #chitChat
",UNKNOWN,Brian,Jenney,222,222,3,4,1,0,0.036036036036036036,"#linkedinA,#salary ,#fulfillment ,#joinU,#watercooler ,#office ,#chitC",2022-10-03 08:00:20,https://www.linkedin.com/feed/update/urn:li:activity:6982711844561895424
urn:li:activity:6982692840900345856,"Nearly a decade ago I started my first day as a developer. I knew HTML, CSS, Jquery and a little AngularJS.

The night before the first day, I was barely able to sleep. I scoured the internet for any articles on what to expect… nothing. Remember, this was a generation ago in tech years.

𝘞𝘰𝘶𝘭𝘥 𝘐 𝘣𝘦 𝘧𝘰𝘶𝘯𝘥 𝘰𝘶𝘵 𝘢𝘴 𝘢 𝘧𝘢𝘬𝘦 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘢𝘯𝘥 𝘧𝘪𝘳𝘦𝘥 𝘪𝘮𝘮𝘦𝘥𝘪𝘢𝘵𝘦𝘭𝘺?

𝘞𝘰𝘶𝘭𝘥 𝘵𝘩𝘦𝘺 𝘨𝘪𝘷𝘦 𝘮𝘦 𝘢 𝘵𝘢𝘴𝘬 𝘐 𝘤𝘰𝘶𝘭𝘥𝘯’𝘵 𝘧𝘪𝘨𝘶𝘳𝘦 𝘰𝘶𝘵?

𝘏𝘰𝘸 𝘭𝘰𝘯𝘨 𝘣𝘦𝘧𝘰𝘳𝘦 𝘵𝘩𝘦𝘺 𝘳𝘦𝘢𝘭𝘪𝘻𝘦𝘥 𝘵𝘩𝘦𝘺 𝘮𝘢𝘥𝘦 𝘢𝘯 𝘦𝘳𝘳𝘰𝘳 𝘪𝘯 𝘵𝘩𝘦𝘪𝘳 𝘩𝘪𝘳𝘪𝘯𝘨 𝘱𝘳𝘰𝘤𝘦𝘴𝘴?

Well, I never got “found out” and took on more than a few tasks I couldn’t figure out… yet.

If you recently started a new position or are about to, you may be feeling a lot of the same emotions.

I still do, honestly.

Here are some ways I get over my anxiety:

- make a 30/60/90 day plan which usually includes delivering a small feature
- immediately explore the codebase and identify areas I just don’t understand
- ask a bunch of questions while I’m still new enough that no one will judge me
- take notes
- realize I’m here to do more observing than anything during my first month

So if you just got hired, congrats! I also know it can be just as stressful as the interview process. Perhaps more so.

What’s your tips for people just starting a new dev position?",UNKNOWN,Brian,Jenney,6793,6793,107,16,3,0,0.018548505814809362,,2022-10-03 06:53:53,https://www.linkedin.com/feed/update/urn:li:activity:6982692840900345856
urn:li:activity:6981597869908664321,"You can LeetCode til your fingers bleed and still fail.

Unfortunately, I’ve fumbled more than a couple interviews in the past because I was unable to tell a good story about my accomplishments.

As you move past entry level roles, interviews will begin to center less around your immediate coding skills and more towards your experience, so have a good story or 2 in your back pocket.

𝘞𝘩𝘢𝘵 𝘥𝘪𝘥 𝘺𝘰𝘶 𝘸𝘰𝘳𝘬 𝘰𝘯? 𝘞𝘩𝘢𝘵 𝘸𝘢𝘴 𝘪𝘯𝘵𝘦𝘳𝘦𝘴𝘵𝘪𝘯𝘨 𝘢𝘣𝘰𝘶𝘵 𝘪𝘵? 𝘞𝘩𝘢𝘵 𝘪𝘮𝘱𝘢𝘤𝘵 𝘥𝘪𝘥 𝘪𝘵 𝘩𝘢𝘷𝘦?

Give some context. 

You may know what the EggsAndBacon API is but no one else does.

What were the challenges you encountered? How did you succeed or fail (and what did you learn?)

Use the STAR method or jot down the beginning, middle and end of your story and a metric or 2 you can point to to drive home the impact it had.

Having a good story in your mental reserve will prepare you for the next time you’re hit with the old “tell me about a technical project you’ve worked on…”",UNKNOWN,Brian,Jenney,28125,28125,194,15,2,0,0.007502222222222223,,2022-09-30 06:01:13,https://www.linkedin.com/feed/update/urn:li:activity:6981597869908664321
urn:li:activity:6980516439661166593,"Random technical interview tips that have nothing to do with coding:

- have some water near you during an interview
- make sure your battery life and charger are sufficient
- clean up your messy ass room
- arrive a few minutes early to bumble around with the video chat login
- have your code editor ready (and turn off Github Co-pilot 😉)
- take a short walk or do some pushups before the interview

Any other non-technical tips you’d add?",UNKNOWN,Brian,Jenney,16262,16262,86,34,0,0,0.007379166154224573,,2022-09-27 06:45:16,https://www.linkedin.com/feed/update/urn:li:activity:6980516439661166593
urn:li:activity:6980181249357205505,"𝘊𝘰𝘥𝘦 𝘴𝘩𝘰𝘶𝘭𝘥 𝘢𝘭𝘸𝘢𝘺𝘴 𝘧𝘰𝘭𝘭𝘰𝘸 𝘵𝘩𝘦 𝘋𝘙𝘠 𝘱𝘳𝘪𝘯𝘤𝘪𝘱𝘭𝘦!
- Except, maybe your abstraction is more clever than useful in some cases

𝘛𝘋𝘋 𝘰𝘳 𝘥𝘪𝘦!
- What about TaDD (test after development is done)? Or, perhaps manual QA is the correct choice

𝘛𝘺𝘱𝘦𝘚𝘤𝘳𝘪𝘱𝘵 𝘪𝘴 𝘵𝘩𝘦 𝘰𝘯𝘭𝘺 𝘤𝘩𝘰𝘪𝘤𝘦 𝘧𝘰𝘳 𝘴𝘦𝘳𝘪𝘰𝘶𝘴 𝘑𝘚 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳𝘴!
- Maybe TS is overkill for this simple UI app

Be careful falling into dogmatic, knee-jerk responses when it comes to writing software. One thing I’ve learned is that there are often exceptions to the rules we accept as coding law.

Any sacred cows I missed here?",UNKNOWN,Brian,Jenney,7563,7563,63,23,2,0,0.011635594340870026,,2022-09-26 08:21:14,https://www.linkedin.com/feed/update/urn:li:activity:6980181249357205505
urn:li:activity:6979816535590662144,"Like it or not, software development can involve just as much investigation as writing code.

Sometimes more of the former than the latter.

You will be debugging issues in production or your own code and digging through stack traces and source code you've never encountered.

Luckily, Chrome Devtools has some pretty interesting updates that should help us all when we're chasing bugs down. 

https://lnkd.in/gCnti9YV

I may have to update my debugging cheatsheet now 😅:
https://lnkd.in/gN-umMj2",ARTICLE,Brian,Jenney,2257,2257,16,0,0,0,0.007089056269384138,,2022-09-25 08:25:17,https://www.linkedin.com/feed/update/urn:li:activity:6979816535590662144
urn:li:activity:6979091203384303616,"I suck at giving estimates.

You probably do too.

Does this sound familiar: 

You looked over the feature, confidently blurted out “1 𝘱𝘰𝘪𝘯𝘵!” and here you are 2 weeks later “almost done.” And you’ve been “𝘢𝘭𝘮𝘰𝘴𝘵 𝘥𝘰𝘯𝘦” for the last 5 days. “𝘈𝘭𝘮𝘰𝘴𝘵.”

Don’t do what I did when I got stuck on a ticket earlier in my career:

- struggle in silence
- give misleading or useless updates during stand-ups
- power through it on your time off

What I should’ve done:

- admitted when I reached my technical depth
- gave updated estimates based on my progress
- asked for targeted support

This weekend I’ll go over my process for retroactive pointing which has helped me suck a lot less at estimating completion dates.",UNKNOWN,Brian,Jenney,3931,3931,45,3,1,0,0.012465021622996692,,2022-09-23 08:03:20,https://www.linkedin.com/feed/update/urn:li:activity:6979091203384303616
urn:li:activity:6978706680171659266,"My 4 step process for debugging sh*t:

1. Reproduce the bug consistently to determine the underlying issue.

2. Examine the source code to narrow down the suspects and check for any recent changes using Git blame.

3. Set breakpoints, debuggers and console logs to identify the issue and step through the offending code line by line. Maybe ping the developer who wrote this spaghetti... oh no, it was me!

4. Implement a fix, test it locally and have another engineer review the logic. Jumping the gun can result in introducing more bugs, so I like to have someone with a cooler head reviewing code I wrote in an emotional state 😅.

𝘉𝘰𝘯𝘶𝘴 𝘴𝘵𝘦𝘱: a unit test to ensure the issue does not repeat itself. 

Any debugging tips you’d add?",UNKNOWN,Brian,Jenney,5939,5939,50,18,0,0,0.011449739013301903,,2022-09-22 06:37:20,https://www.linkedin.com/feed/update/urn:li:activity:6978706680171659266
urn:li:activity:6978336946523713536,"Framework FOMO affects 8 out of every 10 front end developers.

What is Framework FOMO?

Goes a little something like this:

New, shiny JS framework comes out. 

You - in the middle of bumbling around with the framework you are currently using - think to yourself “ooh, shiny framework, must try”. NextJS. Vue. Svelte. Polymer.

Do this a few times and now you are no longer a sub par developer in your main framework, but MANY frameworks!

Congrats?

There is no “best” JS framework. 

Pick a popular one. Double down on the fundamentals and understand the problems it solves and how.

Also… React.",UNKNOWN,Brian,Jenney,7558,7558,57,13,1,0,0.009394019581899974,,2022-09-21 06:07:52,https://www.linkedin.com/feed/update/urn:li:activity:6978336946523713536
urn:li:activity:6977619558274646016,"How most successful bootcamp grads operate:

- Makes coding and learning a routine
- Applies consistently and broadly
- Has 1 or 2 complex side projects
- Re-calibrates their approach when needed
- Has faith that opportunity will present itself

Why most bootcamp grads fail:

- Relies on motivation instead of routine
- Applies to only junior roles
- Tutorial
- Tutorial
- Tutorial
- Doesn’t get hired in 3 months
- 𝘎𝘪𝘷𝘦𝘴 𝘶𝘱",UNKNOWN,Brian,Jenney,11875,11875,151,18,2,0,0.0144,,2022-09-19 06:35:33,https://www.linkedin.com/feed/update/urn:li:activity:6977619558274646016
urn:li:activity:6976578943961219072,"Turn off the tutorial. 

Open the code editor.

You’re going to learn a hell of a lot more from:

- getting stuck
- reading the documentation
- realizing the docs suck
- scouring Stack Overflow
- oh no - that’s an old comment
- throwing everything at the wall
- finally figuring it out
- wanting to share excitement and realizing your non-coding friends don't care 😑

as opposed to:

- typing what another person has typed",UNKNOWN,Brian,Jenney,18905,18905,317,29,7,0,0.018672308912985984,,2022-09-16 09:40:02,https://www.linkedin.com/feed/update/urn:li:activity:6976578943961219072
urn:li:activity:6976208879936270336,"Your next technical interview might not be so technical at all.

What I’ve learned from working with nearly 20 front end developers in the last year on the interview grind, is that they often over-optimize for code-related questions and challenges at the expense of everything else.

You also want to have answers for questions like:

- tell me about a challenging project you’ve worked on
- how do you resolve conflicts with team mates?
- here’s a website we made, how can we improve it (𝘩𝘰𝘸 𝘥𝘰 𝘺𝘰𝘶 𝘮𝘦𝘢𝘴𝘶𝘳𝘦 𝘵𝘩𝘦 𝘱𝘦𝘳𝘧𝘰𝘳𝘮𝘢𝘯𝘤𝘦 𝘰𝘧 𝘢 𝘸𝘦𝘣𝘱𝘢𝘨𝘦 𝘣𝘢𝘴𝘪𝘤𝘢𝘭𝘭𝘺?)
- how do you handle tight deadlines?
- what’s your debugging process?
- why do you want to work here?

What’s a good (or terrible 😈), non-technical question you’ve been asked in an interview?",UNKNOWN,Brian,Jenney,5040,5040,46,13,2,0,0.012103174603174604,,2022-09-15 09:19:51,https://www.linkedin.com/feed/update/urn:li:activity:6976208879936270336
urn:li:activity:6975807369800806400,"Always be interviewing.

It’s such a weird skill. You do it once every few years and wonder why you suck at it.

So how often should you interview?

I’d say roughly once every 6 months. This way you can identify your marketability, seniority and realistic salary range. 

This doesn't mean grinding LC year round. It does mean small daily deposits though. 1 problem a day is a good goal.

It also doesn't mean you're switching companies every 6 months. The goal is to keep your interview skills sharp and give you a clearer idea of how you would perform in a high stakes situation... like, if you found yourself jobless.

Perhaps you’re a junior at your current company but find yourself passing interviews for mid-level positions. Or maybe you’re wondering if you’re overpaid? Underpaid? Don’t guess. Prove yourself right or wrong. Either way, at least you know.

Stability is gone. 

You will likely work at half a dozen or more companies in your adult life so why not give yourself a fighting chance at actually deciding where you go next.",UNKNOWN,Brian,Jenney,7786,7786,83,14,2,0,0.012715129720010274,,2022-09-14 06:44:29,https://www.linkedin.com/feed/update/urn:li:activity:6975807369800806400
urn:li:activity:6975452526905085952,"Some things you need to develop an opinion on as a front-end developer:

- SSR vs CSR
- Typescript vs Javascript
- CSS - 𝘛𝘢𝘪𝘭𝘸𝘪𝘯𝘥𝘊𝘚𝘚? 𝘔𝘢𝘵𝘦𝘳𝘪𝘢𝘭 𝘜𝘐? 𝘚𝘵𝘺𝘭𝘦𝘥 𝘊𝘰𝘮𝘱𝘰𝘯𝘦𝘯𝘵𝘴? 𝘗𝘭𝘢𝘪𝘯 𝘊𝘚𝘚?
- Testing - 𝘛𝘋𝘋? 𝘜𝘯𝘪𝘵 𝘵𝘦𝘴𝘵𝘴? 𝘦2𝘦? 𝘈𝘭𝘭 𝘰𝘧 𝘵𝘩𝘦 𝘢𝘣𝘰𝘷𝘦? 𝘕𝘰𝘯𝘦 𝘰𝘧 𝘵𝘩𝘦 𝘢𝘣𝘰𝘷𝘦 😱
- Module bundlers
- UI frameworks - 𝘙𝘦𝘢𝘤𝘵 𝘷𝘴 𝘈𝘯𝘨𝘶𝘭𝘢𝘳 𝘷𝘴 𝘝𝘶𝘦𝘑𝘚 𝘷𝘴 𝘕𝘰 𝘍𝘳𝘢𝘮𝘦𝘸𝘰𝘳𝘬

What would you add?",UNKNOWN,Brian,Jenney,3907,3907,27,9,0,0,0.009214230867673407,,2022-09-13 07:16:08,https://www.linkedin.com/feed/update/urn:li:activity:6975452526905085952
urn:li:activity:6975452579384217601,"Some things you need to develop an opinion on as a front-end developer:

- SSR vs CSR
- Typescript vs Javascript
- CSS - 𝘛𝘢𝘪𝘭𝘸𝘪𝘯𝘥𝘊𝘚𝘚? 𝘔𝘢𝘵𝘦𝘳𝘪𝘢𝘭 𝘜𝘐? 𝘚𝘵𝘺𝘭𝘦𝘥 𝘊𝘰𝘮𝘱𝘰𝘯𝘦𝘯𝘵𝘴? 𝘗𝘭𝘢𝘪𝘯 𝘊𝘚𝘚?
- Testing - 𝘛𝘋𝘋? 𝘜𝘯𝘪𝘵 𝘵𝘦𝘴𝘵𝘴? 𝘦2𝘦? 𝘈𝘭𝘭 𝘰𝘧 𝘵𝘩𝘦 𝘢𝘣𝘰𝘷𝘦? 𝘕𝘰𝘯𝘦 𝘰𝘧 𝘵𝘩𝘦 𝘢𝘣𝘰𝘷𝘦 😱
- Module bundlers
- UI frameworks - 𝘙𝘦𝘢𝘤𝘵 𝘷𝘴 𝘈𝘯𝘨𝘶𝘭𝘢𝘳 𝘷𝘴 𝘝𝘶𝘦𝘑𝘚 𝘷𝘴 𝘕𝘰 𝘍𝘳𝘢𝘮𝘦𝘸𝘰𝘳𝘬

What would you add?",UNKNOWN,Brian,Jenney,5332,5332,10,6,0,0,0.003000750187546887,,2022-09-13 07:16:08,https://www.linkedin.com/feed/update/urn:li:activity:6975452579384217601
urn:li:activity:6975089397872439296,"Quintessential junior dev move:

Wasting hours solving a problem a co-worker could’ve helped you figure out in minutes.

You are ultimately judged on the work you complete, not your ability to slog through problems in solitude. When you bump your head against your technical depth, acknowledge it and ask for help.

But for Jeebus' sake please don’t just say “I can’t figure out [x]”

Try this:

- I’m having an issue with [this specific problem]
- I’ve tried [y] but it’s not working in the way I expect which is [this way]
- [Maybe add a screenshot or documentation] 
- Is anyone available to take a look with me sometime today or point me in the right direction?

Don’t let your ego get in the way of progress.",UNKNOWN,Brian,Jenney,7248,7248,105,13,3,0,0.016694260485651213,,2022-09-12 07:16:36,https://www.linkedin.com/feed/update/urn:li:activity:6975089397872439296
urn:li:activity:6974028060509536257,"I worked at a company that had exactly 0 unit tests and another with 90% overall coverage.

Which one do you think had more bugs?

Counterintuitively, the company with 0 tests had less critical issues than the one with high coverage 🤔.

Of course other factors were at play and I don’t necessarily think either strategy is wrong. Different teams require different approaches.

My general rules for writing tests:

- they should allow for easy/ruthless refactoring by validating core functionality
- they should test scenarios which would be time consuming to test manually
- critical areas should have high coverage
- they should support, not substitute manual QA

Tests are not a guarantee against bugs, but rather a first line of defense. At best they allow us to write code that behaves in a way we expect and actually increases velocity. At worst they just feel like another chore.

Which method do you use for tests? e2e? TDD? TaDD (𝘛𝘦𝘴𝘵𝘪𝘯𝘨 𝘢𝘧𝘵𝘦𝘳 𝘋𝘦𝘷𝘦𝘭𝘰𝘱𝘮𝘦𝘯𝘵'𝘴 𝘋𝘰𝘯𝘦) or no tests 😎😅?",UNKNOWN,Brian,Jenney,6696,6696,45,44,0,0,0.013291517323775388,,2022-09-09 08:59:21,https://www.linkedin.com/feed/update/urn:li:activity:6974028060509536257
urn:li:activity:6973665140554575872,"We’ve all heard the story of the genius asshole or perhaps been exposed to one (maybe even here, on LinkedIn - who would’ve thought?).

Here’s how the story goes: super duper smart senior dev produces great work. He also makes others feel dumb, writes snarky comments on code reviews and generally creates an atmosphere where you either agree with him or are a total fool.

The bigger problem:

- new ideas aren’t offered - especially from junior members
- appetite for risk is decreased among the team - why try to implement a new pattern when it will just get ripped apart?
- people who can leave, will - those who can’t - stay

Congrats! Now the team is little less proficient and whole hell of a lot less desirable to work with.

So perhaps you don’t mind assholes on a moral level, because ya know, you are one. In that case, perhaps the business reasons above will motivate you.",UNKNOWN,Brian,Jenney,3344,3344,33,5,0,0,0.011363636363636364,,2022-09-08 08:59:41,https://www.linkedin.com/feed/update/urn:li:activity:6973665140554575872
urn:li:activity:6973635533893767169,"Get paid to learn.

That first dev job can seem nearly impossible to get and the fear-mongers online don’t help.

Here’s one way I got experience when I had none:

- offered to do a site for free for an acquaintance
- worked out what features the client wanted and set a timeline for completion
- iterated on feedback and communicated with client throughout the build
- deployed site to the webs

If I were doing this now, I’d follow up with:

- get a recommendation from the client
- leverage that recommendation to land paying clients on sites like Upwork or codementor.io OR simply use it to gain validation for potential employers

Hope that’s helpful.",UNKNOWN,Brian,Jenney,2281,2281,23,5,0,0,0.012275317843051293,,2022-09-08 06:39:05,https://www.linkedin.com/feed/update/urn:li:activity:6973635533893767169
urn:li:activity:6973297492201267200,"How to become a senior developer in one easy step:

𝘍𝘪𝘯𝘥 𝘰𝘶𝘵 𝘸𝘩𝘢𝘵 𝘪𝘵 𝘵𝘢𝘬𝘦𝘴 𝘵𝘰 𝘣𝘦𝘤𝘰𝘮𝘦 𝘢 𝘴𝘦𝘯𝘪𝘰𝘳 𝘥𝘦𝘷𝘦𝘭𝘰𝘱𝘦𝘳 𝘢𝘵 𝘺𝘰𝘶𝘳 𝘤𝘶𝘳𝘳𝘦𝘯𝘵 𝘤𝘰𝘮𝘱𝘢𝘯𝘺 - 𝘢𝘯𝘥 𝘥𝘰 𝘵𝘩𝘰𝘴𝘦 𝘵𝘩𝘪𝘯𝘨𝘴

Honestly, it can vary… widely.

Some teams use years of experience to determine seniority... 😬

Others use potentially subjective metrics like code quality, complexity of features and influence in the organization.

Others - a blood sacrifice. 

Whatever metrics you are being judged on, it’s important to know them so you have a very clear path towards mid-level or senior or mega-ultra-hyperbole engineer.

What are some metrics you’ve seen to determine seniority?",UNKNOWN,Brian,Jenney,5940,5940,42,5,0,0,0.007912457912457913,,2022-09-07 08:58:40,https://www.linkedin.com/feed/update/urn:li:activity:6973297492201267200
urn:li:activity:6972915647521468416,"A couple developers I mentor recently got hired. Now the real work begins.

- Exploring a new codebase.
- Finding areas to make impact.
- Learning the engineering culture.
- Using git… but like, foreal this time.

I’m beginning to think the transition into the first dev role is where developers need the most support. 

The job search is stressful for sure but it makes up such a small portion of the developer life-cycle. You won’t be spending your days optimizing algorithms or manipulating palindromes.

The part after the interview is when the real growth happens.

If you’re a recently hired developer, what are some areas where you wish you had more knowledge?",UNKNOWN,Brian,Jenney,11069,11069,112,19,0,0,0.011834854097027735,,2022-09-06 07:03:05,https://www.linkedin.com/feed/update/urn:li:activity:6972915647521468416
urn:li:activity:6971863207342718976,"Ever finish a Udemy tutorial only to discover that you still don't know how to code the thing you just ""learned""?

Yeah, me too.

There is no substitute for getting your hands dirty with code. You can spend another weekend passively watching videos, following paint by numbers tutorials or reading a book on object oriented design and wonder why things just aren't clicking for you.

At some point, you need to put pen to paper.

Moments ago, I sent out a Node/Express project to a few hundred developers who read my newsletter and now I want to share it with you (link in comments).

This repo includes a README with a video walking you through some basic concepts and an overview of the app.

Now, your turn: 

- add some new routes
- update the unit tests
- change it to use TypeScript
- use a real DB instead of my janky solution

Hope you find it helpful!",UNKNOWN,Brian,Jenney,6844,6844,45,19,0,0,0.009351256575102279,,2022-09-03 09:40:12,https://www.linkedin.com/feed/update/urn:li:activity:6971863207342718976
urn:li:activity:6971473888593543168,"If you’re tired of my rants, spicy advice and tips on how to suck less as a software engineer - check out the rants, spicy advice and tips from some of my favorite YouTube channels instead:

https://lnkd.in/gyuZ66S2 - excellent breakdown of DSA

https://lnkd.in/gyXXZiiX - for mid/senior level engineers interested in career advancement

https://lnkd.in/gZUpnX8F -  it’s kinda like you’re sitting with a really Senior Fullstack Dev/mad scientist

Any channels out there you suggest?",ARTICLE,Brian,Jenney,1845,1845,10,6,0,0,0.008672086720867209,,2022-09-02 07:50:17,https://www.linkedin.com/feed/update/urn:li:activity:6971473888593543168
urn:li:activity:6971131734729916418,"Why do you need to know Vanilla JS? You’re probably writing JS within the bounds of a framework like ReactJS or Angular. So what’s the benefit?

I’ve found that going back to the basics offers a lot of “Eureka” moments. It deepens my understanding of how these frameworks work and the benefits they offer.

- now it makes sense why that 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 is firing when an object is in the dependency array even though none of the kev-value pairs have changed
- Redux becomes a little less magical (or confusing 😉)
- it’s easier to debug 3rd party libraries written in Vanilla JS or write one myself

Frameworks come and go… JS is forever!

#javascript #frontenddeveloper #reactjs",UNKNOWN,Brian,Jenney,6422,6422,53,4,0,0,0.008875739644970414,"#javascript ,#frontenddeveloper ,#reactjs",2022-09-01 09:18:25,https://www.linkedin.com/feed/update/urn:li:activity:6971131734729916418
urn:li:activity:6971131767705534464,"Why do you need to know Vanilla JS? You’re probably writing JS within the bounds of a framework like ReactJS or Angular. So what’s the benefit?

I’ve found that going back to the basics offers a lot of “Eureka” moments. It deepens my understanding of how these frameworks work and the benefits they offer.

- now it makes sense why that 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 is firing when an object is in the dependency array even though none of the kev-value pairs have changed
- Redux becomes a little less magical (or confusing 😉)
- it’s easier to debug 3rd party libraries written in Vanilla JS or write one myself

Frameworks come and go… JS is forever!

#javascript #frontenddeveloper #reactjs",UNKNOWN,Brian,Jenney,1563,1563,5,0,0,0,0.003198976327575176,"#javascript ,#frontenddeveloper ,#reactjs",2022-09-01 09:18:25,https://www.linkedin.com/feed/update/urn:li:activity:6971131767705534464
urn:li:activity:6970771275182993409,"Don’t fall into the trap of getting tickets “DONE”.

Another trivial feature moves its way across the JIRA board. You do this several times over the course of the year and then wonder when your raise or promotion happens… it doesn’t.

Listen, there is no simple blueprint to move you from junior → senior developer that you can apply to all software teams. Companies vary widely in the criteria they use to determine seniority and unfortunately you can be deserving and still not get it for reasons outside your control - budget issues for example.

𝘏𝘦𝘳𝘦 𝘪𝘴 𝘢 𝘨𝘦𝘯𝘦𝘳𝘢𝘭 𝘢𝘱𝘱𝘳𝘰𝘢𝘤𝘩 𝘵𝘰 𝘮𝘢𝘬𝘦 𝘢 𝘴𝘰𝘭𝘪𝘥 𝘤𝘢𝘴𝘦 𝘧𝘰𝘳 𝘱𝘳𝘰𝘮𝘰𝘵𝘪𝘰𝘯:

- take on features that have high impact and visibility
- keep a running brag document where you list achievements and the dates/ticket numbers and any related metrics
- ask your manager what is required to reach the next step and explicitly identify what you are missing

I don’t think anyone’s ever been fired for getting work across the line. And if you’re content doing that - more power to you. BUT, If you want the title that seems to be just outside your reach, you might want to think about how you can increase your impact.",UNKNOWN,Brian,Jenney,2021,2021,19,0,1,0,0.009896091044037604,,2022-08-31 09:29:51,https://www.linkedin.com/feed/update/urn:li:activity:6970771275182993409
urn:li:activity:6970393772983472128,"But I can just Google that.

Well, you’re not wrong. I mean, yeah, a lot of being a software developer is Googling what we don’t know. Technology moves fast. We get stuck on a bug or feature. The collective knowledge of the internet gives us a way out.

There is an extent to how much you should rely on the kindness of strangers however.

If you’re a JS developer and cannot iterate over an array without the help of Stack Overflow - I’d challenge you to go back to the basics for a bit.

The real issue with the copy-paste approach or composing software from snippets off the internet is that code inevitably breaks or needs to be extended. Bugs happen. New rules get created. What do you do if you lack the fundamentals or have over-relied on Google rather than your own problem solving skills?

Googling is absolutely a skill and should not be discounted.

Let’s not also discount our need to have some basic grasp of the language we use on a daily basis.

Or am I just way off base here?",UNKNOWN,Brian,Jenney,13468,13468,112,23,2,0,0.010172260172260172,,2022-08-30 08:18:13,https://www.linkedin.com/feed/update/urn:li:activity:6970393772983472128
urn:li:activity:6970022648646930432,"They got it all wrong - the interview isn’t harder than the job - it just requires a completely different skill set.

So while you’re grinding away at toy problems and optimizing solutions using hashmaps (natch) - don’t forget that the actual job of writing code will be challenging in a completely new way.

So build stuff. Read code. Gain cursory knowledge of the software development lifecycle and deployment strategies. Write an awful test or 2 for that create-react-app project you abandoned. Put your LC easy solutions into a Github repo so the rest of us can steal them.

The interview is the gateway to the job, not the job itself.",UNKNOWN,Brian,Jenney,14419,14419,85,7,1,0,0.006449823150010403,,2022-08-29 07:36:31,https://www.linkedin.com/feed/update/urn:li:activity:6970022648646930432
urn:li:activity:6968971739254980608,"The stuff your bootcamp didn’t teach you about being a software developer:

- oncalls can be brutal - if something breaks, you will be the first to know - even if it’s 2AM on a Saturday
- your day may be up to 50% meetings
- I know they asked you to traverse a binary tree during the interview but you’re likely to get a lot of requests to change the color of a button
- if you didn’t negotiate your salary - you lost money
- you won’t be building anything from scratch
- sometimes sh*tty code is good enough
- PRs can be emotional… try to distance yourself from the code… also, don’t make people feel bad during PRs when it’s your turn
- JIRA

What’d I miss?",UNKNOWN,Brian,Jenney,59701,59701,575,81,11,0,0.011172342171822917,,2022-08-26 09:56:16,https://www.linkedin.com/feed/update/urn:li:activity:6968971739254980608
urn:li:activity:6968583675189809152,"Now that the bootcamp is over, how do you keep your coding muscles strong?

Sure, you could knock out a random LC easy everyday. A dozen TODO apps. Learn yet another JS framework.

OR

You could invest your time in a side project. A big one. Something you’re not quite sure how to build exactly.

Using around 50% familiar technologies and 50% new technologies you want to learn or are in demand and deploying your (secure) app using AWS will give you an experience which is closer to what you’ll experience in the wild.

At worst you learn some valuable skills. At best you launch a useful app which generates monies.

I’ve used my failed startup ideas to build side projects which helped me make the switch from AngularJS/C#/SQL to React/Node/Express and advance my career… no monies though… yet. 

My step by step process for building a solid side project is here:",ARTICLE,Brian,Jenney,6602,6602,48,9,2,0,0.008936685852771888,,2022-08-25 08:08:54,https://www.linkedin.com/feed/update/urn:li:activity:6968583675189809152
urn:li:activity:6968247078766452738,"Interviewing is an emotional game.

I failed an interview recently, on a mock interview site, with no intention of actually interviewing in the future. It was just for practice. Basically as low stakes as possible. Still hurt.

If you're dealing with rejection and need a little pick me up - check out the stories of amazing engineers here who were rejected and realize it happens to all of us:",ARTICLE,Brian,Jenney,32171,32171,249,18,8,0,0.008548071244288333,,2022-08-24 10:05:18,https://www.linkedin.com/feed/update/urn:li:activity:6968247078766452738
urn:li:activity:6968204027234852864,"Don’t take LinkedIn too seriously. There are a lot of people on here, with a lot of advice you should take with precaution. Hell, I’m one of them.

I can’t tell you, with complete certainty, what will work for you. I do know what’s worked for me and others I’ve mentored and worked with. Will it work for you? Well, that’s my hope.

I also don’t believe in telling people how things 𝘴𝘩𝘰𝘶𝘭𝘥 be. 

We live in an unforgiving reality.

So yes, interviews suck. You will have to learn on your own. No one really cares about your sob story. You will be judged on things you may think are unfair - like your ability to traverse a binary tree.

At the end of the day, I want you to succeed.

It can be tough to wade through all the tips, tricks and advice on here. My rules for sifting through the mud and finding actual valuable nuggets of actionable advice:

- 𝘪𝘴 𝘵𝘩𝘦 𝘱𝘦𝘳𝘴𝘰𝘯 𝘪𝘯 𝘢 𝘱𝘰𝘴𝘪𝘵𝘪𝘰𝘯 𝘐 𝘸𝘢𝘯𝘵 𝘵𝘰 𝘣𝘦 𝘪𝘯?
- 𝘥𝘰𝘦𝘴 𝘵𝘩𝘪𝘴 𝘱𝘦𝘳𝘴𝘰𝘯 𝘴𝘦𝘦𝘮 𝘩𝘢𝘱𝘱𝘺?
- 𝘥𝘰 𝘵𝘩𝘦𝘺 𝘩𝘢𝘷𝘦 𝘢 𝘸𝘰𝘳𝘬 𝘩𝘪𝘴𝘵𝘰𝘳𝘺 𝘸𝘩𝘪𝘤𝘩 𝘴𝘶𝘱𝘱𝘰𝘳𝘵𝘴 𝘵𝘩𝘦𝘪𝘳 𝘤𝘭𝘢𝘪𝘮𝘴?

Hopefully this helps you navigate the LinkedIn maze.

#juniordeveloper #coding #bootcamp",UNKNOWN,Brian,Jenney,4588,4588,52,3,1,0,0.012205754141238012,"#juniordeveloper ,#coding ,#bootcamp",2022-08-24 07:26:10,https://www.linkedin.com/feed/update/urn:li:activity:6968204027234852864
urn:li:activity:6967908105808490496,"Failed the Google on-site 2 times.

Honestly, pretty happy about it overall.

Google is an amazing company but it was never my dream. To top it off, when I first started writing code I couldn’t tell you what Big-O, merge sort or a binary tree was.

I was just happy to nail those phone screens and get a free lunch on the campus 🤷🏽‍♂️.

So how did I hustle my way onto the Google campus and sully their white boards?

𝘚𝘩𝘰𝘳𝘵 𝘢𝘯𝘴𝘸𝘦𝘳:

- studying

𝘕𝘰𝘵 𝘴𝘰 𝘴𝘩𝘰𝘳𝘵 𝘢𝘯𝘴𝘸𝘦𝘳:

- setting a timer when solving LC problems (30 mins max)
- recording myself walking through solutions using Loom 
- writing the Big-O space and runtime complexity in comments
- studying the basics of system design (caching, work queues, nosql/sql, CAP theorem - read Alex Xu's system design book)
- compiled a few good stories to share that showed my skill as a developer (things I’d done which made an impact that I could prove via some metrics)

I didn’t make it obviously, but I used a lot of what I studied to help me get offers at other companies, which in comparison, felt a hell of a lot easier than Google.

If you’re studying for FAANG - what’s your process?",UNKNOWN,Brian,Jenney,9780,9780,66,17,1,0,0.008588957055214725,,2022-08-23 11:30:21,https://www.linkedin.com/feed/update/urn:li:activity:6967908105808490496
urn:li:activity:6967476046875045888,"Sometimes, “I don’t know” is the best answer.

It’s also uncomfortable - so maybe try to talk through your ignorance out of fear of appearing… well, ignorant.

It’s not fooling anyone.

At best, it can be a laughable offense.

At worst, it lessens trust.

As a software engineer, you will likely come face to face with the limits of your knowledge on a regular basis. A new framework comes out. A pattern you used for years becomes antiquated. A term gets thrown around in a meeting you’ve never heard.

𝘠𝘰𝘶 𝘵𝘩𝘪𝘯𝘬 “𝘈𝘮 𝘐 𝘴𝘶𝘱𝘱𝘰𝘴𝘦𝘥 𝘵𝘰 𝘬𝘯𝘰𝘸 𝘵𝘩𝘪𝘴?”

A wiser, almost better looking developer once told me - “expose your ignorance, it’s the only way you’ll learn.”

This was after I nodded my head during a marathon pairing session going over a particularly complex unit testing setup. I had never written a single unit test up to this point.

I was too embarrassed to admit I was out of my depth. 

Bring up those things you don’t understand. Ideally, in a public setting so others can benefit. I can nearly guarantee your team mates are silently thanking you.",UNKNOWN,Brian,Jenney,5031,5031,37,5,2,0,0.008745776187636653,,2022-08-22 06:47:05,https://www.linkedin.com/feed/update/urn:li:activity:6967476046875045888
urn:li:activity:6966437049818103808,"A couple months ago I shared a link to schedule a 15 minute chat with me in a post that got more attention than I anticipated. 

Nearly 100 calls later with developers from the US, India, Pakistan, the UK, Nigeria, Kenya and many other parts of the world, I’ve learned a lot about the landscape of web development and the interview experiences beginning developers face.

Perhaps you’re as surprised as I am to know that the work we do, the rigorous interviews we face and the general feeling of not knowing enough are commonalities we share.

These 100 calls have been overwhelmingly positive and have exposed me to some amazing stories, insights and people.

Here’s some of the things I find myself repeating a lot:

- get 500 connections on LinkedIn - it will make you more discoverable
- don't limit yourself to junior roles and consider removing junior/aspiring from your title
- do mock interviews on Pramp if you need practice (no affiliation... yet - holler at me Pramp!)
- if you’re not getting any interviews don’t over-prepare for them - focus on getting them
- don’t waste too much time learning - videos and tutorials can give you a false sense of mastery - build stuff!
- take notes after each interview - what could you have done better?
- JS stuff - closures and promises come up a lot
- write unit tests for your take home project to stand out

I see a LOT of easy to fix mistakes when checking out people’s LI profiles. Check out this list of steps to fix yours https://lnkd.in/gVHGwuqN

Here’s to the next 100 calls 😅.

#juniordeveloper #coding #javascript #javascriptdeveloper",ARTICLE,Brian,Jenney,8982,8982,84,27,4,0,0.012803384546871521,"#juniordeveloper ,#coding ,#javascript ,#javascriptdeveloper",2022-08-19 10:23:05,https://www.linkedin.com/feed/update/urn:li:activity:6966437049818103808
urn:li:activity:6966063522086629376,"Maybe you are an impostor.

Perhaps that nagging feeling that you don’t quite know what you think you should is actually a signal.

I know the standard advice is just “wait it out.”

That didn’t work for me so well once I got promoted to senior developer. In my head there was a discrepancy between my expectations of a person in my role and the reality of my current knowledge.

Heres what worked for me to tame that nagging voice in my head:

- wrote down the skills I expected of a senior developer, using the engineers I worked with as examples
- identified the skills I was missing
- picked the skills I felt were the most important and would give me the most confidence
- made a time-bound plan to learn these things
- got more confident

Hope that helps.",UNKNOWN,Brian,Jenney,10866,10866,95,8,6,0,0.010031290263206332,,2022-08-18 09:11:53,https://www.linkedin.com/feed/update/urn:li:activity:6966063522086629376
urn:li:activity:6965683419548725248,"You’re right, whiteboard interviews are unfair, biased and won’t likely resemble the kind of work you do on a daily basis.

Now what?

Do you simply limit yourself to companies that don’t ask these types of questions?

Sure, you could. In fact there’s a list of companies that don't participate in whiteboard interviews https://lnkd.in/gUak6vrp

You could also, you know, learn some of the most common data structures and algorithms at the University of YouTube. Or if you’re a masochist, a book perhaps.

Want to get started?

- trees/tries
- linked lists
- graphs
- stacks/queues
- binary search
- merge sort
- quick sort

Implement these structures and algorithms from scratch. 

Find the Big O time for the most common operations (eg.  what is the time complexity for searching a BST? How about inserting into a linked list?).

Great, now you can still turn down these white board interviews. But because you want to, not because you have to.",ARTICLE,Brian,Jenney,2876,2876,17,7,1,0,0.008692628650904033,,2022-08-17 08:12:34,https://www.linkedin.com/feed/update/urn:li:activity:6965683419548725248
urn:li:activity:6965339026832646144,"Biggest (and most embarrassing) mistakes I’ve made as a developer so far...and the lessons learned:

- The 100 line if/else statement used to determine if a customer was eligible for a refund - 𝘧𝘪𝘹𝘦𝘥 𝘵𝘰 𝘶𝘴𝘦 𝘵𝘢𝘣𝘭𝘦 𝘣𝘢𝘴𝘦𝘥 𝘭𝘰𝘨𝘪𝘤

- Not understanding how enums work and writing code that sent emails to every single user repeatedly - 𝘸𝘳𝘰𝘵𝘦 𝘵𝘦𝘴𝘵𝘴 𝘵𝘰 𝘤𝘢𝘵𝘤𝘩 𝘵𝘩𝘪𝘴 𝘴𝘪𝘭𝘭𝘺 𝘦𝘳𝘳𝘰𝘳 𝘢𝘯𝘥 𝘺𝘢 𝘬𝘯𝘰𝘸, 𝘳𝘦𝘢𝘥 𝘶𝘱 𝘰𝘯 𝘦𝘯𝘶𝘮𝘴

- Mistakenly deploying the stage branch on production during a hotfix - 𝘭𝘦𝘢𝘳𝘯𝘦𝘥 𝘵𝘰 𝘢𝘴𝘬 𝘲𝘶𝘦𝘴𝘵𝘪𝘰𝘯𝘴 𝘢𝘣𝘰𝘶𝘵 𝘣𝘳𝘢𝘯𝘤𝘩𝘪𝘯𝘨 𝘳𝘢𝘵𝘩𝘦𝘳 𝘵𝘩𝘢𝘯 𝘫𝘶𝘴𝘵 𝘯𝘰𝘥𝘥𝘪𝘯𝘨 𝘮𝘺 𝘩𝘦𝘢𝘥 𝘸𝘩𝘦𝘯 𝘐 𝘥𝘪𝘥 𝘯𝘰𝘵 𝘶𝘯𝘥𝘦𝘳𝘴𝘵𝘢𝘯𝘥

- The infamous quadruple nested for loop that brought a real time ordering system to a crawl when traffic peaked - 𝘤𝘳𝘢𝘴𝘩 𝘤𝘰𝘶𝘳𝘴𝘦 𝘰𝘯 𝘉𝘪𝘨 𝘖 𝘯𝘰𝘵𝘢𝘵𝘪𝘰𝘯

- The PR that didn’t catch some glaring bugs which went into production - 𝘗𝘙𝘴 𝘢𝘳𝘦 𝘴𝘦𝘳𝘪𝘰𝘶𝘴 𝘣𝘶𝘴𝘪𝘯𝘦𝘴𝘴 𝘯𝘰𝘵 𝘳𝘶𝘣𝘣𝘦𝘳 𝘴𝘵𝘢𝘮𝘱𝘴

- Not speaking up or sharing my ideas for the first 3 years of my career - 𝘮𝘢𝘥𝘦 𝘢 𝘨𝘰𝘢𝘭 𝘵𝘰 𝘴𝘱𝘦𝘢𝘬 𝘮𝘰𝘳𝘦 𝘢𝘯𝘥 𝘧𝘦𝘭𝘵 𝘮𝘰𝘳𝘦 𝘦𝘯𝘨𝘢𝘨𝘦𝘥 𝘢𝘯𝘥 𝘩𝘢𝘱𝘱𝘺 𝘢𝘧𝘵𝘦𝘳 𝘵𝘢𝘬𝘪𝘯𝘨 𝘢𝘯 𝘢𝘤𝘵𝘪𝘷𝘦 𝘳𝘰𝘭𝘦 𝘰𝘯 𝘮𝘺 𝘵𝘦𝘢𝘮

I’m not writing this to encourage or romanticize shoddy coding or breaking things. Some of these oversights were more forgivable than others but they all taught me a lesson I might not have otherwise learned.

I’d argue that if you’re not making ANY mistakes as a developer, you may be not be taking on enough risk or features that stretch your capabilities.

What’s the biggest mistake you’ve made thus far?",UNKNOWN,Brian,Jenney,4299,4299,38,21,2,0,0.014189346359618516,,2022-08-16 09:27:22,https://www.linkedin.com/feed/update/urn:li:activity:6965339026832646144
urn:li:activity:6964945325044228096,"Will Github Copilot steal your job? 

I’ll tell you one thing it can’t (yet) do. Debug your buggy code.

Debugging continues to be one of the most underrated and valuable skills you can add to your toolbelt as a software engineer.

I leveraged a particularly gnarly critical bug fix to make my case for a promotion at one company.

If there’s one universal expectation of senior developers, no matter the company, it’s that they jump in to triage the most critical of critical issues. 

Logging errors to the console often just isn’t enough.

Node/Express apps are notoriously difficult to debug. If you are using VS Code, you can set breakpoints in the code, just like you might do in the browser,  to pause execution and walk through your spaghetti code line by line.

Check out how to do it step by step here: https://lnkd.in/gqE6hmVD",UNKNOWN,Brian,Jenney,2564,2564,15,9,0,0,0.0093603744149766,,2022-08-15 07:17:59,https://www.linkedin.com/feed/update/urn:li:activity:6964945325044228096
urn:li:activity:6963876871511883777,"I’ve gained quite a lot more followers on here so I figure it’s time to out myself again:

10 years ago I was addicted to drinking and drugs and living a criminal lifestyle.

After an intervention, I promised to quit, unsure if I would actually be able to do it for more than a week.

I noticed I had a lot of time on my hands now with none of my terrible outlets available.

I found Codecademy and wrote my first line of code. I was hooked (notice a theme here?).

I fell ass backwards into a full-stack role after building janky websites for a year.

Switched companies 4 times, took on contracts, taught at bootcamps and bought a ton of courses.

Made lots of embarrassing mistakes.

Kept building stuff.

Sucked less each year.

I’ll be honest - I don’t like sharing much about my checkered past. It’s a distant memory at this point but I also know a lot of people reading this may be going through an addiction. Maybe it’s strong drugs… maybe it’s video games.

Obviously you have to want to change. You need desire and most importantly, direction. Here’s what worked for me:

- exercising daily (𝘥𝘰𝘱𝘢𝘮𝘪𝘯𝘦 𝘢𝘯𝘥 𝘤𝘰𝘯𝘧𝘪𝘥𝘦𝘯𝘤𝘦)
- finding a replacement relapse when triggered (𝘐 𝘦𝘢𝘵 𝘢 𝘵𝘰𝘯 𝘰𝘧 𝘴𝘸𝘦𝘦𝘵𝘴 𝘸𝘩𝘦𝘯 𝘐 𝘸𝘢𝘯𝘵 𝘵𝘰 𝘥𝘰… 𝘰𝘵𝘩𝘦𝘳 𝘴𝘵𝘶𝘧𝘧)
- finding a hobby to fill in the time (𝘧𝘰𝘳 𝘮𝘦 𝘪𝘵 𝘸𝘢𝘴 𝘤𝘰𝘥𝘪𝘯𝘨, 𝘧𝘰𝘳 𝘺𝘰𝘶 𝘮𝘢𝘺𝘣𝘦 𝘳𝘦𝘢𝘥𝘪𝘯𝘨 𝘰𝘳 𝘱𝘶𝘻𝘻𝘭𝘦𝘴)
- scheduling events on days I would normally do stupid things (𝘐 𝘸𝘢𝘵𝘤𝘩𝘦𝘥 𝘢 𝘵𝘰𝘯 𝘰𝘧 𝘢𝘸𝘧𝘶𝘭 𝘮𝘰𝘷𝘪𝘦𝘴 𝘰𝘯 𝘛𝘩𝘶𝘳𝘴𝘥𝘢𝘺 𝘢𝘯𝘥 𝘍𝘳𝘪𝘥𝘢𝘺 𝘯𝘪𝘨𝘩𝘵𝘴 𝘪𝘯 𝘮𝘰𝘷𝘪𝘦 𝘵𝘩𝘦𝘢𝘵𝘦𝘳𝘴 𝘵𝘰 𝘱𝘢𝘴𝘴 𝘵𝘩𝘦 𝘵𝘪𝘮𝘦)
- telling everyone I quit (𝘺𝘰𝘶’𝘭𝘭 𝘧𝘦𝘦𝘭 𝘢 𝘭𝘰𝘵 𝘮𝘰𝘳𝘦 𝘦𝘮𝘣𝘢𝘳𝘳𝘢𝘴𝘴𝘦𝘥 𝘪𝘧 𝘺𝘰𝘶 𝘧𝘢𝘪𝘭 𝘢𝘯𝘥 𝘵𝘩𝘦𝘳𝘦𝘧𝘰𝘳𝘦 𝘪𝘯𝘤𝘦𝘯𝘵𝘪𝘷𝘪𝘻𝘦𝘥 𝘵𝘰 𝘴𝘶𝘤𝘤𝘦𝘦𝘥)

I sincerely hope that helps.",UNKNOWN,Brian,Jenney,18348,18348,199,31,0,0,0.012535426204490953,,2022-08-12 08:41:51,https://www.linkedin.com/feed/update/urn:li:activity:6963876871511883777
urn:li:activity:6963500115219140609,"LinkedIn Sucks.

It’s full of:

- self aggrandizing sales people
- toxic positivity 
- recruiters who only serve to ghost you
- crying ceos - and other crying people apparently 🤔 (seriously, I feel bad for dude at this point)

It’s also full of:

- strangers willing to lend you a hand
- quality content you can learn from
- inspiring stories
- opportunity

LinkedIn, like most social media platforms, will do its best to feed you content it believes you will like. If your LI feed sucks, maybe follow some better people.

Here's a list of people I follow and get a lot of value from:

𝘌𝘯𝘨𝘪𝘯𝘦𝘦𝘳𝘪𝘯𝘨 𝘙𝘦𝘭𝘢𝘵𝘦𝘥

Adrian 🔵 Bogdan 
Jason Adam 
Kyle Simpson (duh)
Alex Xu (system design) 

𝘌𝘯𝘨𝘪𝘯𝘦𝘦𝘳𝘪𝘯𝘨 𝘊𝘢𝘳𝘦𝘦𝘳 𝘈𝘥𝘷𝘪𝘤𝘦

Andy Wong (spicy yet hilarious)
Alex Chiou && Rahul Pandey 
Erik Andersen 

𝘐𝘯𝘴𝘱𝘪𝘳𝘢𝘵𝘪𝘰𝘯 𝘢𝘯𝘥 𝘉𝘳𝘢𝘯𝘥𝘪𝘯𝘨

Dan Koe 
Justin Welsh 

Definitely forgot some people but this list of authors teaches, entertains and inspires. If you want more pics of crying CEO's just keep scrolling LI for the next 2 - 3 days 😉.",UNKNOWN,Brian,Jenney,106142,106142,476,83,7,0,0.005332479131729193,,2022-08-11 07:34:00,https://www.linkedin.com/feed/update/urn:li:activity:6963500115219140609
urn:li:activity:6963142107372912641,"I had 95 brainstorm sessions with developers in the last 3 months. 

Some were FAANG employees and others had just graduated from bootcamps. 

Not more than 3 of them said they felt ready to: 

- interview
- leave their current job
- write that post
- publish that article
- ask for that promotion

Stop waiting for the right time.

You’re never going to feel ready. Do it anyways.",UNKNOWN,Brian,Jenney,3565,3565,42,7,0,0,0.013744740532959326,,2022-08-10 07:46:58,https://www.linkedin.com/feed/update/urn:li:activity:6963142107372912641
urn:li:activity:6962780381527875584,"My number 1 rule for creating a good side project?

Build it as if you were going to sell it.

In the last 8 years I’ve only had 3 side projects (not counting all the half finished projects from Udemy tutorials I followed… RIP)

I unsuccessfully tried to turn each of these ideas into businesses. Each failed a little less miserably than the last.

So what was the benefit? 

- successfully switched tech stacks to ReactJS and Node/Express (𝘸𝘩𝘪𝘤𝘩 𝘐 𝘩𝘢𝘥 𝘯𝘦𝘷𝘦𝘳 𝘶𝘴𝘦𝘥 𝘱𝘳𝘰𝘧𝘦𝘴𝘴𝘪𝘰𝘯𝘢𝘭𝘭𝘺)
-met other talented developers and product people who worked with me on these projects (𝘴𝘰𝘮𝘦 𝘰𝘧 𝘸𝘩𝘰𝘮 𝘢𝘤𝘵𝘶𝘢𝘭𝘭𝘺 𝘸𝘦𝘯𝘵 𝘰𝘯 𝘵𝘰 𝘤𝘳𝘦𝘢𝘵𝘦 𝘴𝘶𝘤𝘤𝘦𝘴𝘴𝘧𝘶𝘭 𝘣𝘶𝘴𝘪𝘯𝘦𝘴𝘴𝘦𝘴)
-learned enough devops to be dangerous and the basics of AWS (𝘭𝘢𝘮𝘣𝘥𝘢𝘴, 𝘦𝘤2, 𝘤𝘭𝘰𝘶𝘥𝘸𝘢𝘵𝘤𝘩…)
-got my first taste of sales (𝘤𝘰𝘭𝘥 𝘤𝘢𝘭𝘭𝘪𝘯𝘨 𝘪𝘴 𝘱𝘦𝘳𝘩𝘢𝘱𝘴 𝘮𝘰𝘳𝘦 𝘯𝘦𝘳𝘷𝘦-𝘸𝘳𝘢𝘤𝘬𝘪𝘯𝘨 𝘵𝘩𝘢𝘯 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸𝘪𝘯𝘨)
- finally understood CORS - but I forgot already… next side project

I know there are a lot of early career devs reading this - what’s a side project you’d recommend for them to really spread their wings?",UNKNOWN,Brian,Jenney,6487,6487,56,11,0,0,0.010328349005703716,,2022-08-09 07:50:52,https://www.linkedin.com/feed/update/urn:li:activity:6962780381527875584
urn:li:activity:6962406860205285376,"The junior developer with 7 years experience.

His resume looked impressive. The interview though… oof.

How was it possible, this seasoned developer didn’t understand even the most basic JS concepts like:

- array iteration methods (𝘮𝘢𝘱, 𝘧𝘪𝘭𝘵𝘦𝘳, 𝘳𝘦𝘥𝘶𝘤𝘦)
- the difference between const and let
- async/await pattern

I was genuinely curious how he had survived this long as a front end developer.

Turns out, most of his experience was at the same company, using a very dated tech stack. I now understood how he got to be senior. He was a senior at that particular company in that particular role. I’m sure he knew that codebase inside and out. 

For all intents and purposes however, he was very junior.

I wanted to pull him to the side and tell him to study Javascript fundamentals, learn its modern syntax and do a side project using React or any modern framework so he would be a viable candidate. 

I regret not giving him that feedback so I’m sharing it here in the hopes you avoid a similar fate.

Your current job and tech stack may not prepare you for the future. That is ultimately up to you.",UNKNOWN,Brian,Jenney,140882,140882,1009,129,52,0,0.008446785252906689,,2022-08-08 07:03:46,https://www.linkedin.com/feed/update/urn:li:activity:6962406860205285376
urn:li:activity:6961331812698640384,"Preparing for front end interviews is easy.

1. Study JS trivia… including obscure stuff. Why does NaN ≠= NaN for example? 
2. If the job says framework agnostic - study ReactJS (when they say front end they really meant ReactJS 😉)
3. Throw in some random algo prep as well - to be safe just do like 500 LeetCodes
4. Pray to Ecma International's TC39 committee for good measure (sacrifice recommended though not required)

Easy right?

Since I like you, I have a short list of some of the most common concepts you’re likely to encounter in the front end interview:

https://lnkd.in/gW7QxXyT

If you like that sort of material - check out my weekly newsletter. 1 freakin' tip each week to help you progress as a developer: https://lnkd.in/gTQC3KUh",ARTICLE,Brian,Jenney,11263,11263,70,7,9,0,0.007635621060108319,,2022-08-05 08:10:57,https://www.linkedin.com/feed/update/urn:li:activity:6961331812698640384
urn:li:activity:6960957368738201600,"Worst interview trend?

The take home challenge that’s supposed to be an hour or 2 but really takes the whole day.

As a junior developer without a lot of options, doing these challenges may be unavoidable.

Writing sorta good code won’t do much to make you stand out either.

You’d be shocked how far a unit test or 2 can go in making your project stand out and make the difference between an onsite interview and another rejection.

One of the devs I mentored had this exact same experience. The company where he ultimately landed a job explicitly told him that the tests he added were one of the reasons he was invited to the final round.

If your bootcamp did not cover unit testing (common theme) - check out my unit testing course in the comments section. It covers Jest, react-testing-library and generally how to approach beginner → non-trivial test cases in small ReactJS apps.

Also, because I like you, here's a video I made a while ago to introduce you to Jest and write your first unit test.

https://lnkd.in/g684tqyD

And of course the react-testing-library docs: https://lnkd.in/guYxRdMb

You say you don’t have time to write tests? I’d argue you don’t have time NOT to write tests.",UNKNOWN,Brian,Jenney,11687,11687,85,31,0,0,0.009925558312655087,,2022-08-04 07:04:08,https://www.linkedin.com/feed/update/urn:li:activity:6960957368738201600
urn:li:activity:6960591911497715713,"Some uncomfortable truths for software engineers:

- You, not your company, is ultimately responsible for your growth as a developer

- You may be really good at writing code but if you’re unpleasant to work with you will have a hard time getting promoted

- Shipping code fast is almost always better than shipping code perfect

- Say something in a meeting… anything. A bad idea to kick off a conversation is better than silence

- If you don't negotiate your salary - you're probably leaving a lot of money on the table

- It’s hard to sell refactoring efforts to the business… do it anyways, just don’t make it super obvious

- Your first job will validate you - your second will get you paid

- Switching jobs is the easiest way to increase your salary

What would you add?",UNKNOWN,Brian,Jenney,22359,22359,194,36,8,0,0.010644483205867883,,2022-08-03 06:56:10,https://www.linkedin.com/feed/update/urn:li:activity:6960591911497715713
urn:li:activity:6960292423121993728,"#juniordeveloper,

As I am searching for my next role, I go through a certain process when trying to find my next great role. 

Here it is:

I apply to positions where I meet at least 65%ish of the job description (JD). If it is a junior or “entry-level” role I apply. There are two options that will occur once you apply, *that I know of* you either get to the next step or rejection. If I get the fun old rejection email, I just delete it and keep going. (I became desensitized to rejection emails because I am not the right flavor for every company, and I know that. I like Half Baked from Ben and Jerry’s doesn’t mean everyone will.)

Oh yeah, I also send emails or LinkedIn messages to the recruiters/hiring managers. Some people don’t like it and others have really liked it. (ex. I have met people who said don’t DM them and I have met great people who have helped my growth.)

If I’m not getting to the screening calls for at least 1/6 jobs I am applying for especially if I am meeting more than 75% of the JD. I would address my resume, the questions should be asked when looking at my resume such as:

Am I portraying myself as a #developer/SWE?
Am I discussing what I am capable of or what I can do?
Is my resume grammatically correct?
How does the format of my resume look?

If I am getting to screening calls and not making the next round, then I would ask myself did I portray that I am capable of doing this job, and if am I asking the right questions. One of the many questions I have used as of late is, “From our call, my resume, and experience as a junior, would this team be accepting of a #juniorengineer?”

If I make it to the technical screen. This is where I am being tested to see if I am able to prove I can program for this company. I could confidently say this, the technical screens I have not passed I have had a 100% SUCCESS rate of NOT making it to the next round. 😂

Whether ds&a, #javascript topics, trees, etc. It is tough to study for and know all these at least to me, at this point in my career, so I decided to spend more time working on javascript because understanding the basis is better than becoming great at ds&a when I did not know what closure, prototypical inheritance, promise, etc. My values are different on my journey than others so I can’t say what is important to each person. Thank you for this Brian.

Upon getting passed these steps in the virtual on-site, which varies per company but ensuring that I am doing my best on the #technical round, and speaking to the product team, and hiring manager. If I don’t make it passed this area, I reach out and ask for feedback because I want to know where I came up short and how I can improve. 

If I make it passed all these SUCCESSFULLY, I would hope to get an offer. 

Always be your authentic self, it's tough to wear a mask all the time.

After our call, I decided to post Louis!

I also track my processes with https://lnkd.in/gAN6q2ui Thank you Teal for creating this great Software.",ARTICLE,Brian,Jenney,264,264,29,8,1,0,0.14393939393939395,"#juniordeveloper,,#developer/,#juniorengineer?,#javascript ,#technical ",2022-08-02 11:11:35,https://www.linkedin.com/feed/update/urn:li:activity:6960292423121993728
urn:li:activity:6960236288679542784,"Your technical skills will get you hired. Your leadership skills and influence will get you promoted.

How can you expand your influence on a software engineering team?

- Write great peer reviews (𝘶𝘴𝘦 𝘵𝘩𝘦𝘴𝘦 𝘢𝘴 𝘢𝘯 𝘰𝘱𝘱𝘰𝘳𝘵𝘶𝘯𝘪𝘵𝘺 𝘵𝘰 𝘵𝘦𝘢𝘤𝘩 𝘢𝘯𝘥 𝘴𝘩𝘢𝘳𝘦 𝘬𝘯𝘰𝘸𝘭𝘦𝘥𝘨𝘦)
- Onboard new members (𝘵𝘦𝘢𝘤𝘩𝘪𝘯𝘨 𝘰𝘵𝘩𝘦𝘳𝘴 𝘪𝘴 𝘱𝘳𝘰𝘣𝘢𝘣𝘭𝘺 𝘵𝘩𝘦 𝘣𝘦𝘴𝘵 𝘸𝘢𝘺 𝘵𝘰 𝘴𝘰𝘭𝘪𝘥𝘪𝘧𝘺 𝘺𝘰𝘶𝘳 𝘰𝘸𝘯 𝘬𝘯𝘰𝘸𝘭𝘦𝘥𝘨𝘦)
- Introduce new processes that make work easier (𝘦𝘷𝘦𝘯 𝘴𝘮𝘢𝘭𝘭 𝘰𝘯𝘦𝘴 𝘭𝘪𝘬𝘦 𝘪𝘮𝘱𝘳𝘰𝘷𝘪𝘯𝘨 𝘵𝘩𝘦 𝘗𝘙 𝘱𝘳𝘰𝘤𝘦𝘴𝘴)
- Solve critical issues (𝘳𝘢𝘪𝘴𝘦 𝘺𝘰𝘶𝘳 𝘩𝘢𝘯𝘥 𝘯𝘦𝘹𝘵 𝘵𝘪𝘮𝘦 𝘢 𝘣𝘶𝘨 𝘱𝘰𝘱𝘴 𝘶𝘱 𝘪𝘯 𝘱𝘳𝘰𝘥𝘶𝘤𝘵𝘪𝘰𝘯)
- Offer ideas and be open to discussion (𝘢 𝘣𝘢𝘥 𝘪𝘥𝘦𝘢 𝘪𝘯 𝘢 𝘴𝘪𝘭𝘦𝘯𝘵 𝘮𝘦𝘦𝘵𝘪𝘯𝘨 𝘤𝘢𝘯 𝘴𝘱𝘶𝘳 𝘢 𝘣𝘦𝘵𝘵𝘦𝘳 𝘪𝘥𝘦𝘢... 𝘴𝘢𝘺 𝘴𝘰𝘮𝘦𝘵𝘩𝘪𝘯𝘨 𝘸𝘩𝘦𝘯 𝘰𝘵𝘩𝘦𝘳𝘴 𝘴𝘢𝘺 𝘯𝘰𝘵𝘩𝘪𝘯𝘨)
- Give others praise in public (𝘪𝘵'𝘴 𝘵𝘩𝘦 𝘳𝘪𝘨𝘩𝘵 𝘵𝘩𝘪𝘯𝘨 𝘵𝘰 𝘥𝘰 𝘢𝘯𝘥 𝘸𝘪𝘭𝘭 𝘳𝘢𝘪𝘴𝘦 𝘵𝘦𝘢𝘮 𝘮𝘰𝘳𝘢𝘭𝘦)

Obviously, having the technical skills needed to perform at an average → above average level in relation to your title is paramount. I mean, you need to know how to code. 

There is a lot more to being a mid-level or senior developer than coding alone, however.

What are other ways you've seen to expand your influence and improve an engineering team?",UNKNOWN,Brian,Jenney,6041,6041,63,6,2,0,0.011753021023009435,,2022-08-02 07:23:20,https://www.linkedin.com/feed/update/urn:li:activity:6960236288679542784
urn:li:activity:6959860412615970816,"I was trying to BS my way through an interview when the interviewer cut me short.

Thank God.

“I don’t think really think this is a good use of our time.” 

He was right and honestly I was relieved.

The job was for a NodeJS position and at the time I had never used it 🤫.

I was new to tech and thought if I just strung together enough buzzwords I could get past this part of the interview.

My benevolent interviewer saved us both some time and embarrassment and cut the interview short. He even gave me some pointers on how to learn NodeJS. Thanks random interviewer dude!

So, what did I learn from this encounter?

𝘐𝘵’𝘴 𝘖𝘒 𝘵𝘰 𝘴𝘢𝘺 𝘺𝘰𝘶 𝘥𝘰𝘯’𝘵 𝘬𝘯𝘰𝘸… 𝘺𝘦𝘵.

There is a limit to everyone’s technical depth. 

What will instill more confidence and trust between you and your team is when you can confidently admit you don’t quite know something and how you plan to learn it later.",UNKNOWN,Brian,Jenney,7481,7481,52,12,2,0,0.008822349953214811,,2022-08-01 06:30:37,https://www.linkedin.com/feed/update/urn:li:activity:6959860412615970816
urn:li:activity:6958828417853140992,"A mentee in my program had 10 interviews this week!

I asked him: “Out of all these these interviews, how many trees did you have to traverse? How many linked lists did you reverse? How many graphs got Djikstra’d?

He thought for a while…

“Maybe 1”

Experience has taught me that unless you are FAANG bound, studying only DSA for front end dev roles will leave you unprepared for the interview (not to mention the job).

I was still a bit shocked though.

Perhaps you are too.

I’m not saying to burn your “Cracking the Coding Interview” book just yet.

I am saying, be realistic and practical with how you are preparing.

This Saturday I’ll be sharing 4 of the most common scenarios/questions you will encounter as a front end developer. You can grab them by signing up here:

https://lnkd.in/gTQC3KUh",UNKNOWN,Brian,Jenney,8271,8271,52,19,0,0,0.008584209889977028,,2022-07-29 10:11:42,https://www.linkedin.com/feed/update/urn:li:activity:6958828417853140992
urn:li:activity:6958427811560783872,"The average number of interviews before getting a job offer is 2–3.

I’m gonna bully you into interviewing until you give in.

Seriously, I want you to realize that failing an interview… or 5 is the price of entry to a new career or a new role. 

I’m not asking you to get over the fear. I’m asking you to accept it and do it anyways.

Not sold?

Try this:

𝘚𝘤𝘩𝘦𝘥𝘶𝘭𝘦 𝘢𝘯 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸 𝘧𝘰𝘳 𝘢 𝘤𝘰𝘮𝘱𝘢𝘯𝘺 𝘺𝘰𝘶’𝘳𝘦 𝘯𝘰𝘵 𝘴𝘶𝘱𝘦𝘳 𝘦𝘹𝘤𝘪𝘵𝘦𝘥 𝘢𝘣𝘰𝘶𝘵 𝘢𝘯𝘥 𝘦𝘹𝘱𝘦𝘤𝘵 𝘵𝘰 𝘧𝘢𝘪𝘭. Seriously, count on failing.

𝘈𝘧𝘵𝘦𝘳 𝘺𝘰𝘶𝘳 𝘯𝘦𝘳𝘷𝘦𝘴 𝘩𝘢𝘷𝘦 𝘴𝘦𝘵𝘵𝘭𝘦𝘥, 𝘢𝘯𝘢𝘭𝘺𝘻𝘦 𝘵𝘩𝘦 𝘪𝘯𝘵𝘦𝘳𝘷𝘪𝘦𝘸. Were there questions you were asked that you feel you should know? A challenge you didn’t even know how to approach? Good. Learn that thing.

Repeat a couple times without long breaks in between. 𝘞𝘦 𝘧𝘦𝘢𝘳 𝘵𝘩𝘦 𝘶𝘯𝘧𝘢𝘮𝘪𝘭𝘪𝘢𝘳. Make interviewing more familiar and less of a novelty.

If you’re super neurotic like me and need a gentler introduction to interviewing, 𝘵𝘳𝘺 𝘢𝘯𝘴𝘸𝘦𝘳𝘪𝘯𝘨 𝘵𝘩𝘦 𝘧𝘰𝘭𝘭𝘰𝘸𝘪𝘯𝘨 𝘲𝘶𝘦𝘴𝘵𝘪𝘰𝘯𝘴 𝘸𝘩𝘪𝘭𝘦 𝘳𝘦𝘤𝘰𝘳𝘥𝘪𝘯𝘨 𝘺𝘰𝘶𝘳𝘴𝘦𝘭𝘧 𝘶𝘴𝘪𝘯𝘨 𝘢 𝘵𝘰𝘰𝘭 𝘭𝘪𝘬𝘦 𝘓𝘰𝘰𝘮:

- Explain closure
- Explain promises to a non-technical audience
- Explain HTTP verbs to a non-technical audience 
- Explain why React is so much better than Vue 😉

Good luck!",UNKNOWN,Brian,Jenney,8388,8388,73,22,0,0,0.011325703385789223,,2022-07-28 07:43:02,https://www.linkedin.com/feed/update/urn:li:activity:6958427811560783872
urn:li:activity:6958056356805296128,"There are 5 types of front-end interviews you’re going to encounter as a JS developer:

- Build a component that fetches some data from an API and displays it
- Extend the functionality from your take home app
- JS trivia including closure, this, event loop, event queue and promises
- Debug this broken app (usually React) and make some unit tests pass
- Create some app/game without using a framework 😅

Anything I missed?

#softwareengineering #coding #juniordeveloper #frontenddeveloper #javascript",UNKNOWN,Brian,Jenney,15058,15058,147,16,2,0,0.010957630495417718,"#softwareengineering ,#coding ,#juniordeveloper ,#frontenddeveloper ,#javascript",2022-07-27 06:59:18,https://www.linkedin.com/feed/update/urn:li:activity:6958056356805296128
urn:li:activity:6957700485545918464,"There’s more in common with getting in shape and learning to code than you might think. 

Both teach:

Growth mindset - our body, like our mind is not fixed or limited.

Humility - there is always somebody better than you. Learning a new programming language or lifting a larger weight will keep you humble.

Delayed gratification - if you stick with either endeavor you will see long term benefits and fulfillment.

No one is judging you (as much as you think) - people are focused on themselves, not you. We’re all looking in the actual mirror or the proverbial mirror at ourselves for the most part.

Age limits don’t exist - despite what you may think - the gym, like the software industry is not controlled by 20 somethings and as long as you’re breathing, its a good time to get in shape or learn a new skill.

For all you gym rat coders out there, what are some similarities I missed?",UNKNOWN,Brian,Jenney,7651,7651,71,19,2,0,0.012024571951378904,,2022-07-26 07:25:57,https://www.linkedin.com/feed/update/urn:li:activity:6957700485545918464
urn:li:activity:6957320804585922560,"Spicy advice: don’t highlight the fact you are a junior developer.

Market yourself as a developer - drop “junior” or “aspiring” from your profile.

Why would a potential employer need to know this?

If anything, it gives them another mental hurdle to clear before even meeting you to assess your junior-ness.

They think, hmmm, should I take a chance on this aspiring developer?
Would you hire an aspiring doctor? A junior doctor perhaps?

🧐

Highlight your accomplishments, projects and what you have to offer… as a software developer.

Thoughts?

#softwaredeveloper #juniordeveloper #engineering #frontenddeveloper #bootcamp #techjobs",UNKNOWN,Brian,Jenney,18371,18371,147,42,8,0,0.01072342278591258,"#softwaredeveloper ,#juniordeveloper ,#engineering ,#frontenddeveloper ,#bootcamp ,#techjobs",2022-07-25 06:16:08,https://www.linkedin.com/feed/update/urn:li:activity:6957320804585922560
urn:li:activity:6956625045288873984,"Last week I sent out a challenge to a few hundred developers:

Basically, create a form, with NO framework and have it handle some events and conditions.

I give this same challenge to the developers I work with in my mentoring program.

Some people fly through it while others struggle… a lot.

It can be eye opening.

The intention is to identify their core Javascript knowledge and simulate a pretty common interview scenario. No judgment, simply a way for me to know where we should begin focusing.

If you find yourself struggling with this challenge, it’s likely a sign you should re-visit some JS fundamentals.

A couple brave people submitted their answer and allowed me to share it. Manvi Jain is one of those brave souls (who was also brave enough to share her LinkedIn 😅).

Here's her solution: https://lnkd.in/gYF96BdG

If you’re interested - you can check out the challenge here: https://lnkd.in/gsWfuTBx",ARTICLE,Brian,Jenney,5834,5834,54,5,1,0,0.010284538909838875,,2022-07-23 08:27:32,https://www.linkedin.com/feed/update/urn:li:activity:6956625045288873984
urn:li:activity:6956255332922785792,"Could there be a worse time to learn to code? I’d been sober for a couple months, had a newborn and a small child to take care of and was doing ride share part time.

It wasn’t like I was some computer whiz either. I didn’t own a computer through college or as an adult. I had just discovered Codecademy.com and was basically tinkering around trying to kill my boredom at work 🤫.

After nearly a year of creating janky websites and learning enough Jquery to be dangerous, I was quite proud of myself. Maybe I can be an email developer, I thought.

I was nowhere near ready to apply for a job but I had a mentor who pushed me. He actually sat me down and basically forced me to apply to companies.

I got hired. In a full stack role, no less.

I was also terrible. I didn’t even know what I didn’t know.

I wrote a 100 line if/else statement. A quadruple nested for loop with some asynchronous actions…. I know. I know.

I started the process of filling the gaps in my knowledge. I hired mentors. I left a trail of semi-finished Udemy videos in my wake. I asked embarrassing questions. I got incrementally better. 

Thank Bob I took that mentor’s advice and got started. Without that push, I'd probably still be spinning in circles, waiting for that perfect moment to apply... or worse, just gave up.

Now I feel a lot more confident in my coding skills. Outside of work I mentor and speak with developers who deal with a lot of the same issues I faced.

I've had about 100 conversations with devs from all over the world in the last 3 months. I honestly don’t think I’ve spoken with more than 3 of them who said they felt ready to:

- interview
- leave their current job
- write that post
- publish that article
- ask for that promotion

Stop waiting for the right time.

You’re never going to feel ready. Do it anyways.",UNKNOWN,Brian,Jenney,6352,6352,78,16,4,0,0.015428211586901764,,2022-07-22 07:53:15,https://www.linkedin.com/feed/update/urn:li:activity:6956255332922785792
urn:li:activity:6955904056154296321,"Despite my best efforts, I can’t stop you front end devs from grinding the LeetCodes.

I mean, I kinda get it. If nothing else, it will build your confidence and teach you some important fundamentals.

Studying 100 representative problems just isn’t enough though. You need to be able to find patterns. When do you DFS rather than BFS? When should you use a linked list? 

Should this array be searched… binar-ily?

Here is a non-exhaustive list of the concepts which will give you the power to solve nearly any damn LeetCode problem:

Sorting and Searching Algos:

- Binary search, merge sort, quick sort

Trees (pre-req before recursion, or at least a good intro):

- Binary Trees, N-ary trees, BFS, DFS, inorder, preorder, postorder

Recursion:

- Permutations, backtracking, combinations, factorials

Graphs:

- BFS, DFS, Adjacency List, Edge List, Edge Matrix

Linked Lists (I guess…)

Dynamic Programming:

- Pray and think how can you use an array…

Nearly all LeetCode-esque problems you come across leverage one or more of these data structures or concepts. Now it becomes a game of mix and match.

Anything I missed?",UNKNOWN,Brian,Jenney,10158,10158,72,30,3,0,0.010336680448907265,,2022-07-21 08:26:30,https://www.linkedin.com/feed/update/urn:li:activity:6955904056154296321
urn:li:activity:6955149189651591168,"What most aspiring developers do:

- Build 100 small trivial apps
- Chase shiny frameworks
- Follow paint by numbers tutorials
- Marathon study/coding sessions
- Look for junior developer jobs

What you should do:

- Build 1 or 2 interesting and complex apps and deploy them to the web
- Double down on the fundamentals of your primary language and design patterns
- Consistent daily coding (it’s a wonder what 1 hour a day will do)
- Apply for jobs where you meet ~50% of the requirements",UNKNOWN,Brian,Jenney,33660,33660,326,41,14,0,0.011319073083778965,,2022-07-19 06:34:13,https://www.linkedin.com/feed/update/urn:li:activity:6955149189651591168
urn:li:activity:6954779775349522432,"Are you a framework developer?

I was. For quite a while actually.

So what does that mean exactly?

Well, for me that meant that I lacked a lot of the core fundamentals needed to understand Javascript. The framework, AngularJS at the time, was an abstraction I didn’t just leverage but depended on to be useful. 

I didn’t know JS so much as I knew AngularJS (RIP).

What changed? Well, once I moved companies, frameworks and teams, I quickly realized how little I knew. I went back to the drawing board, enrolled in a bootcamp while being employed as a developer and read books that my co-workers recommended. I built stuff and broke stuff.

Now, I mentor other JS developers and one of the first assignments we do is an exercise to create a form that submits some data to a placeholder API. No framework allowed!

I sent this challenge out to around 400 people on Saturday.
Check it out here: https://lnkd.in/gsWfuTBx

I can promise you will find this either:
  a. incredibly simple
  b. eye-openingly difficult to complete

No judgement or shame here. I’m curious, which camp do you fall under?

#javascript #frontenddevelopment #juniordeveloper #vanillajs",UNKNOWN,Brian,Jenney,12403,12403,77,15,4,0,0.007740062888010965,"#javascript ,#frontenddevelopment ,#juniordeveloper ,#vanillajs",2022-07-18 06:14:15,https://www.linkedin.com/feed/update/urn:li:activity:6954779775349522432
urn:li:activity:6953716193186783232,"How did our team adopt a culture of unit testing and go from 0 front end tests -> ~50% coverage?

Slowly at first.

Of course, there were some myths to expose:

- We don’t have time
- Our front end apps aren’t that complex
- Isn’t that what QA is for?
- Is it really worth it?

After overcoming some of the initial apprehension, we saw the benefits:

- We were empowered to refactor complex components without fear of breaking original functionality
- Tests doubled as documentation for new developers
- We were more confident in the quality of our code and releases
- We could release code more frequently

Some developers took to testing immediately while others weren’t sold. So we:

- Set a testing threshold in our pipeline
- Created videos and short tutorials on unit testing
- Used code coverage tools to ensure we were testing what we thought

If you’re new to unit testing and want to learn I’m excited to share a course I’ve created which includes source code, videos, articles and most importantly challenges to teach you unit testing and testing ReactJS components.

It’s all the stuff I wish I had learned when I started and it will shorten your path to unit testing proficiency with real world applications.

It’s 19.99 right now and if you happen to be in a difficult financial situation or from a country where $20 might be a significant expense, please DM me for a very super secret special discount code 😉.

https://lnkd.in/gWbv4peB

#reactjs #javascript #unittesting #unittest #juniordeveloper",ARTICLE,Brian,Jenney,2449,2449,18,3,2,0,0.009391588403429971,"#reactjs ,#javascript ,#unittesting ,#unittest ,#juniordeveloper",2022-07-15 07:42:36,https://www.linkedin.com/feed/update/urn:li:activity:6953716193186783232
urn:li:activity:6953338613422055424,"I don’t think there’s anything wrong with copying and pasting code from Stack Overflow.

We all do it.

I DO think there is something wrong if you copy and paste code which you don’t understand.

It works!

Yeah, but how?

What happens when it breaks?

Imagine a doctor, cutting a patient apart and inserting a foreign object.

Patient wakes up, cured from what has been ailing them.

'""Doctor, how did you cure me?""

""Not really sure, kinda stuck something in there and it just worked - lol""

""… 😧""

""See ya in 6 months, let’s see how this turns out!""",UNKNOWN,Brian,Jenney,3429,3429,24,15,2,0,0.011956838728492273,,2022-07-14 06:26:06,https://www.linkedin.com/feed/update/urn:li:activity:6953338613422055424
urn:li:activity:6953085302638850048,"So recently I was working with a developer who is at the tail end of a 6 month long bootcamp.

They were working on a full stack app using a pretty standard tech stack including AWS, Node/Express, MongoDB and ReactJS.

We were digging into an issue with an API call. The arguments were sent in a shape that the API did not expect.

Simple fix overall.

There was just a small problem. They didn’t quite understand the syntax or general logic for adding key-value pairs to an object.

I know you want to study ReactJS. NextJS. AWS. All the things that end in S.

Before you dive too far into those things though, it’s probably worth auditing your basic JS knowledge and having a solid grip on:

- loops
- arrays
- objects

I actually have a small challenge I give to the developers I mentor to assess some of their basic JS knowledge. I’ll share a slimmed down version of it this Saturday in my newsletter if you're interested.",UNKNOWN,Brian,Jenney,19388,19388,177,38,2,0,0.011192490200123788,,2022-07-13 13:48:51,https://www.linkedin.com/feed/update/urn:li:activity:6953085302638850048
urn:li:activity:6952983140780974080,"When my code didn’t work

Beginner me:

- Blamed the user
- Tried it on my machine… look it works
- Blamed the previous dev
- I don't usually use this language
- I hate this framework

Not so beginner me:

- Ooh, I really messed up something

#softwareengineer #juniordeveloper #javascript #techcareer",UNKNOWN,Brian,Jenney,5658,5658,47,6,0,0,0.009367267585719336,"#softwareengineer ,#juniordeveloper ,#javascript ,#techcareer",2022-07-13 07:12:23,https://www.linkedin.com/feed/update/urn:li:activity:6952983140780974080
urn:li:activity:6952611952896458752,"Only half of programming is coding. The other 90% is debugging. 🤔

Debugging JS code in the browser is fairly straightforward:

Debuggers, console logs… hitting refresh and praying.

Investigating bugs in a Node/ExpressJS presents a different set of challenges however since you can’t leverage the browser API.

So you’re stuck with logging…. praying.

Or are you?

If you’re using VSCode (because of course you are) - check out this how-to-guide on debugging Node/Express projects I shared with 300 others: https://lnkd.in/gqE6hmVD

Want 1 lesson, tip or piece of advice related to JavaScript delivered to your inbox every Saturday morning? Shoot me your email here: https://lnkd.in/gTQC3KUh

#javascript #coding #software #nodejs #juniordeveloper",UNKNOWN,Brian,Jenney,9329,9329,68,12,1,0,0.00868260263693858,"#javascript ,#coding ,#software ,#nodejs ,#juniordeveloper",2022-07-12 06:19:45,https://www.linkedin.com/feed/update/urn:li:activity:6952611952896458752
urn:li:activity:6952612012027785217,"Only half of programming is coding. The other 90% is debugging. 🤔

Debugging JS code in the browser is fairly straightforward:

Debuggers, console logs… hitting refresh and praying.

Investigating bugs in a Node/ExpressJS presents a different set of challenges however since you can’t leverage the browser API.

So you’re stuck with logging…. praying.

Or are you?

If you’re using VSCode (because of course you are) - check out this how-to-guide on debugging Node/Express projects I shared with 300 others: https://lnkd.in/gqE6hmVD

Want 1 lesson, tip or piece of advice related to JavaScript delivered to your inbox every Saturday morning? Shoot me your email here: https://lnkd.in/gTQC3KUh

#javascript #coding #software #nodejs #juniordeveloper",UNKNOWN,Brian,Jenney,3889,3889,9,0,0,0,0.0023142195937258937,"#javascript ,#coding ,#software ,#nodejs ,#juniordeveloper",2022-07-12 06:19:45,https://www.linkedin.com/feed/update/urn:li:activity:6952612012027785217
urn:li:activity:6952251499368378368,"
Me, somewhere shady in Oakland, CA as a teen. Spitting raps as my friend, the famous, inimitable Kali worked the boards.

Software engineer? I didn’t even know what the hell they did back then.

I wanted to be a rapper, and no, I will not share my rap moniker 😅.

If I had known about coding back then would I have been interested?
I dunno.

I learned to code around 30 and it’s like a light bulb went off in my head. It was the most fulfilling hobby I had ever started. Even more than spitting profanity-laced raps.

I speak to too many people who think life ends at 25. Or 30. Or 40.

Am I too old to code, they ask? I sure hope not.

There’s still time.

When did you learn to code?",IMAGE,Brian,Jenney,7104,7104,90,34,0,0,0.017454954954954954,,2022-07-11 06:30:42,https://www.linkedin.com/feed/update/urn:li:activity:6952251499368378368
urn:li:activity:6951196201304150016,"Still using 128 console logs in your code to debug #javascript code?

There’s a better way my friend:

I’m actually a little shocked more developers aren’t aware of the debugger keyword or how to set breakpoints in their code.

For me, this technique has saved me during some gnarly on-call shifts and helped me to diagnose and triage critical bugs.

Here’s a video going over some debugging techniques I use that I hope you find useful:

#frontenddeveloper  #juniordeveloper #debugging",EXTERNAL_VIDEO,Brian,Jenney,5942,5942,61,16,4,0,0.013631773813530798,"#javascript ,#frontenddeveloper ,#juniordeveloper ,#debugging",2022-07-08 08:51:06,https://www.linkedin.com/feed/update/urn:li:activity:6951196201304150016
urn:li:activity:6951196455604801538,"Still using 128 console logs in your code to debug #javascript code?

There’s a better way my friend:

I’m actually a little shocked more developers aren’t aware of the debugger keyword or how to set breakpoints in their code.

For me, this technique has saved me during some gnarly on-call shifts and helped me to diagnose and triage critical bugs.

Here’s a video going over some debugging techniques I use that I hope you find useful:

#frontenddeveloper  #juniordeveloper #debugging",EXTERNAL_VIDEO,Brian,Jenney,139,139,1,1,0,0,0.014388489208633094,"#javascript ,#frontenddeveloper ,#juniordeveloper ,#debugging",2022-07-08 08:51:06,https://www.linkedin.com/feed/update/urn:li:activity:6951196455604801538
urn:li:activity:6950438189044039680,"At the end of an interview, inevitably, they ask - So, do you have any questions?

The worst questions I’ve heard:

- Nah. 
- When will I know if I got the job?
- How did I do?

Seriously.

Here are my favorite 5 questions to ask at the end of an interview:

- Can you walk me through your deployment process?
- What is your team’s testing philosophy?
- What is the on-call process?
- What is your favorite part of working here?
- What is one process you would change?

These questions usually lead to interesting conversations, give me some insight into the engineering culture and a more honest take on what it’s like to actually work there.

What’s your go to question?",UNKNOWN,Brian,Jenney,44708,44708,277,49,9,0,0.00749306611792073,,2022-07-06 06:27:15,https://www.linkedin.com/feed/update/urn:li:activity:6950438189044039680
urn:li:activity:6950072176314118145,"Congratulations! You got the job. Now here comes the hard part.

Bootcamps do a great job (for the most part) of getting developers hire-able. But what happens after you nail the interview?

I work with and speak with a lot of developers at the beginning of their careers. Many of them struggle in the same areas that I did after getting hired:

- Git
- Code editor shortcuts and commands
- Writing good peer reviews
- Estimating features
- Deployment processes
- Writing unit tests
- Debugging
- Learning a new codebase

Like too many of us, I learned these skills through trial and error. Over years!

I’ve always wanted to create a course to help first year developers survive and thrive after getting hired.

Anything I missed on this list that you wished you had learned before starting your first role as a developer?

#juniordeveloper #softwareengineer #javascript",UNKNOWN,Brian,Jenney,31677,31677,286,33,2,0,0.010133535372667866,"#juniordeveloper ,#softwareengineer ,#javascript",2022-07-05 06:21:38,https://www.linkedin.com/feed/update/urn:li:activity:6950072176314118145
urn:li:activity:6948628861576257537,"When I talk to junior developers, there are a couple concepts I consistently hear that confuse or intimidate the majority of them:

1. Redux
2. Webpack

Each of these technologies took me a long time to wrap my head around. The learning curve is steep. 

I know there are a lot of alternatives to them too. Zustand, Snowpack, Recoil, Rollup, whatever framework just came out today...

So why learn them?

They are so widely used that you will almost certainly come across in your career.... especially if you are working on the front end.

Don't be intimidated. 

Learn the main concepts, integrate them into a small app and get your hands dirty and you'll gain confidence and practical skills.

#juniordeveloper #javascript #reduxjs #softwareengineer",UNKNOWN,Brian,Jenney,22419,22419,125,34,1,0,0.00713680360408582,"#juniordeveloper ,#javascript ,#reduxjs ,#softwareengineer",2022-07-01 06:35:01,https://www.linkedin.com/feed/update/urn:li:activity:6948628861576257537
urn:li:activity:6948628910796419074,"When I talk to junior developers, there are a couple concepts I consistently hear that confuse or intimidate the majority of them:

1. Redux
2. Webpack

Each of these technologies took me a long time to wrap my head around. The learning curve is steep. 

I know there are a lot of alternatives to them too. Zustand, Snowpack, Recoil, Rollup, whatever framework just came out today...

So why learn them?

They are so widely used that you will almost certainly come across in your career.... especially if you are working on the front end.

Don't be intimidated. 

Learn the main concepts, integrate them into a small app and get your hands dirty and you'll gain confidence and practical skills.

#juniordeveloper #javascript #reduxjs #softwareengineer",UNKNOWN,Brian,Jenney,1964,1964,3,0,0,0,0.0015274949083503055,"#juniordeveloper ,#javascript ,#reduxjs ,#softwareengineer",2022-07-01 06:35:01,https://www.linkedin.com/feed/update/urn:li:activity:6948628910796419074
urn:li:activity:6948303324311937024,"You ever bought a used car?

If so, did you pay the exact price listed in the ad?

Or did you haggle a bit? Was there an implicit expectation when the author of the ad wrote “OBO” (or best offer) that the final price would be lower than the asking?

Think of salary negotiations the same way.

With few exceptions, the initial offer has room for haggling.

You just might not know that. There is no “OBO” in the description.

It was silent.",UNKNOWN,Brian,Jenney,1898,1898,12,0,0,0,0.006322444678609062,,2022-06-30 08:57:50,https://www.linkedin.com/feed/update/urn:li:activity:6948303324311937024
urn:li:activity:6947971984479703040,"Ever sit down to pair with someone and they have zero control of their code editor?

That was me for longer than I'd like to admit 😅

Years ago, one very senior developer politely asked me to get a better hang on using my code editor before we paired again. It was a bit embarrassing for me as I had been using VS Code for a few months before this incident. 

He seemed to fly around at light speed and use techniques I didn't even know existed. I wanted to be like him. 

He was kind enough to write a lot of these commands down for me and I've shared them here:",ARTICLE,Brian,Jenney,3044,3044,34,0,3,0,0.012155059132720105,,2022-06-29 11:10:22,https://www.linkedin.com/feed/update/urn:li:activity:6947971984479703040
urn:li:activity:6947889633871478784,"Maybe you’re afraid of posting on LinkedIn… honestly, me too sometimes.

What will they think?

Do I know enough?

1. Who cares
2. Yes, you do 

Give others that are just behind you the benefit of your experience.

You may have some insight to shorten their path towards their goal or at least something they can relate to.

At a basic level, we are humans, looking for connections, to be educated or entertained. Or both.

Not concrete enough for you? 

Ok fine, check out this What to Post on LinkedIn Cheatsheet that I hope gets your gears turning",ARTICLE,Brian,Jenney,971,971,8,0,0,0,0.008238928939237899,,2022-06-29 05:43:01,https://www.linkedin.com/feed/update/urn:li:activity:6947889633871478784
urn:li:activity:6947177075401261057,"My interview tech stack for front end interviews:

- Pramp.com for live practice with a human (FREE)
- AlgoExpert's frontendexpert.io for practical JS problems
- Alex Xu's books and more recently ByteByteGo for system design
- Glassdoor and teamblind.com for company research
- Blind 75 https://lnkd.in/guEs9s5V
- My last minute cheat sheet for JS interviews  https://lnkd.in/gN8rtJFm

Good luck... and happy studying.",ARTICLE,Brian,Jenney,5351,5351,68,0,13,0,0.015137357503270417,,2022-06-27 06:48:01,https://www.linkedin.com/feed/update/urn:li:activity:6947177075401261057
urn:li:activity:6946832408197427200,"I get on here and write a lot about code and career advice to attract customers and hopefully offer some insight that may help you on your JS journey.

I typically shy away from current topics or any political discourse but in case you were wondering or cared - I support a woman's rights to choose what she does with her body. 

- I support women who don't want to have abortions
- I support women who want to have abortions
- I support your right to have an opinion different than my own

What I don't support is other people regulating a private matter and what a woman can and can't do with her body.",UNKNOWN,Brian,Jenney,3277,3277,27,0,0,0,0.00823924321025328,,2022-06-26 07:38:37,https://www.linkedin.com/feed/update/urn:li:activity:6946832408197427200
urn:li:activity:6946104401946185728,"Forget good advice.

Ever had some really good criticism? Lord knows I have. And it’s not always fun… in fact it’s never fun.

It can be embarrassing. Crushing. 

It can also be incredibly useful. A catalyst for growth.

Here are the most impactful criticisms I’ve received over the years as a software engineer:

- You don’t have a fundamental understanding of some core JS concepts - it makes it hard to work with you.

- Speak up during meetings. You don’t say much.

- This peer review missed some glaring bugs and is now holding up a major release. Let’s make sure that doesn’t happen again.

- Think bigger. The organization is larger than our team.

Could some of these criticisms been delivered in a nicer way?

Sure.

Am I glad they weren’t? 

Absolutely.

We all want praise but what we really need oftentimes is critical feedback.",UNKNOWN,Brian,Jenney,2211,2211,17,5,0,0,0.009950248756218905,,2022-06-24 07:19:21,https://www.linkedin.com/feed/update/urn:li:activity:6946104401946185728
urn:li:activity:6945346696256118784,"I’ll be honest - I don’t think I’ve ever fully made it through a Udemy coding course.

I’m not bashing Udemy either. I’ve gotten a lot out of these half-finished tutorials.

In fact, I’ve intentionally not finished many of them.

At worst, a Udemy course can be a paint-by-numbers exercise. They code, you watch and then copy.

Turn off the video and open your editor and you realize you have no f*ckin clue how to replicate what you just learned.

Here’s my method:

- Watch the course until I understand just enough to get started and get the necessary source code

- Extend the functionality of the paint by numbers exercise (for example for a CRUD app I might add a new endpoint or for a React app I may update the routing logic to add a new page)

- Now, with my base app I will go completely off the rails and keep extending and adding little features - essentially using it as a starting point for a side project

- As I get stuck, I will go back the course and look for any relevant information to get unstuck

Going through the motions !== understanding.",UNKNOWN,Brian,Jenney,6641,6641,83,10,1,0,0.014154494804999248,,2022-06-22 05:13:28,https://www.linkedin.com/feed/update/urn:li:activity:6945346696256118784
urn:li:activity:6944985944257159168,"Habits > Goal setting.

Try habit stacking.

About 8 years ago I stopped drinking and realized I had a lot of time on my hands and a couple decades worth of bad habits.

I started coding. 

About an hour or so a day before work. More on the weekends.

Got hired. 

Realized I kinda sucked at writing code.

Picked up reading as a habit. Nothing major, just 15 - 30 minutes a night before I went to sleep.

Read lots of books on coding (and a lot of awful mystery novels). Asked for recommendations from co-workers I admired.

Got kinda fat from not being poor.

Made exercise a daily habit.

Now here I am, in the midst of making writing on LI another habit.

Ok, give me yours - what’s one habit you’re stacking this year?",UNKNOWN,Brian,Jenney,5852,5852,52,19,0,0,0.012132604237867396,,2022-06-21 05:33:26,https://www.linkedin.com/feed/update/urn:li:activity:6944985944257159168
urn:li:activity:6944441029102100480,"You’re not going to learn recursion from memorizing Fibonacci toy problems.

Recursion is notoriously difficult for developers to understand and has tanked me in more than a few interviews.

While doing the phone screen for Meta, years ago, I was given a challenge to take a string that contains only digits and an integer target, and return all possibilities to insert the operators '+', '-', and/or '*' between the digits in the string so that the resultant expression evaluates to the target value.

Jeez, it’s confusing even writing that.

I didn’t even attempt the problem. 

I politely admitted defeat and saved us from a very awkward interview.

I spent a lot of money and time learning recursion after that debacle.

Everyone will have a different model for recursion and making it “click”.

Here’s me walking through a moderately difficult problem using recursion and thinking out loud in real time 👇 - hope that’s helpful.",EXTERNAL_VIDEO,Brian,Jenney,2590,2590,20,8,0,0,0.010810810810810811,,2022-06-19 17:21:33,https://www.linkedin.com/feed/update/urn:li:activity:6944441029102100480
urn:li:activity:6943954226846846976,"Instead of learning solutions of LeetCode  questions, understand patterns! 🙂

For ex.

If input array is sorted then
- Binary search
- Two pointers

If asked for all permutations/subsets then
- Backtracking

If given a tree then
- DFS
- BFS

If given a graph then
- DFS
- BFS

If given a linked list then
- Two pointers

If recursion is banned then
- Stack

If must solve in-place then
- Swap corresponding values
- Store one or more different values in the same pointer

If asked for maximum/minimum subarray/subset/options then
- Dynamic programming

If asked for top/least K items then
- Heap

If asked for common strings then
- Map
- Trie

Else
- Map/Set for O(1) time & O(n) space
- Sort input for O(nlogn) time and O(1) space

Thank you creator for this. 🙏",UNKNOWN,Brian,Jenney,148,148,4113,200,159,0,30.216216216216218,,2022-06-18 09:05:14,https://www.linkedin.com/feed/update/urn:li:activity:6943954226846846976
urn:li:activity:6943560172212551680,"Ex drug dealer. Ex convict. Ex cashier.

I’ve met people from each group who now work as developers, scientists and in higher education. 

Funny thing is, you wouldn’t know from looking at their LinkedIn profile that they have amazing and often salacious stories. In fact they often go to great lengths to hide this part of their history.

I understand. There are parts of my past that I’m not proud of. Long parts in fact.

Just know that you are likely not unique. 

Whatever you’ve gone through does not exclude you from being a developer, a scientist, an ex-whatever.",UNKNOWN,Brian,Jenney,6191,6191,90,4,1,0,0.01534485543530932,,2022-06-17 06:56:05,https://www.linkedin.com/feed/update/urn:li:activity:6943560172212551680
urn:li:activity:6943192562941775872,"99% of bootcamp grads I see make these same mistakes:

- Letting their GitHub contributions nosedive immediately after graduating

- Waiting too long to interview or letting that first rejection stop their interview momentum

- Not writing code on a daily basis

Too much reliance on structured learning.

Not enough consistency.",UNKNOWN,Brian,Jenney,39883,39883,400,45,17,0,0.011583882857357772,,2022-06-16 06:31:43,https://www.linkedin.com/feed/update/urn:li:activity:6943192562941775872
urn:li:activity:6942826043846144000,"Unit tests? 

We just don’t have the time.

Now let’s manually test these 10 separate scenarios.

Oh and these edge cases.

Rats! Not quite right yet.

I think we’re not checking the condition when a user is only partially logged in… or partially logged out…. partially.

🤔

Looks like we need to re-check all those scenarios again once you figure out that weird scenario. 

You see, we simply just don’t have time to write unit tests!

If your team struggles to find time to write unit tests… it’s probably a sign you need to make time for unit tests.

Want to learn unit testing but not sure where to start? Check out these videos 👇

Intro to Jest:
https://lnkd.in/g684tqyD

Testing Async Methods:
https://lnkd.in/gfyTAnRz

Testing Callbacks and Using Mocks:
https://lnkd.in/gEdDXQcB

Source Code:
https://lnkd.in/ganZJQSw

https://lnkd.in/g8Pz7ivi",EXTERNAL_VIDEO,Brian,Jenney,2235,2235,29,1,0,0,0.013422818791946308,,2022-06-15 06:50:03,https://www.linkedin.com/feed/update/urn:li:activity:6942826043846144000
urn:li:activity:6942104667275370496,"Spoke to around 20 developers this month who are having trouble with interviewing or feeling stuck in their career. From FAANG engineers to those just getting started.

Here are 5 lessons I learned from these 20 calls:
 
1. Everyone suffers from impostor syndrome. Yes, even the FAANG engineers.
2. Closure comes up a lot in JS interviews so be prepared.
3. 100 Devs is an amazing FREE program and if you’re learning to code I’d check it out.
4. Not enough bootcamps teach unit testing.
5. No one really feels ready to interview. If you’re reading this, take it as a sign you should start anyway, learn from that experience and re-calibrate.

Hope that's helpful.",UNKNOWN,Brian,Jenney,53059,53059,460,33,11,0,0.009498859759889934,,2022-06-13 06:45:21,https://www.linkedin.com/feed/update/urn:li:activity:6942104667275370496
urn:li:activity:6940657639580200960,"Writing code as a profession certainly isn’t all flexibility, big bags and unlimited vacation.

The stress is real.

At one company, we had a particularly stressful on-call rotation which included frequent 5AM PagerDuty alerts and more than a couple sleepless nights to fix critical issues.

Ask any developer for a horror story about a bug they created and you won’t be disappointed. 

Personally, I’ve caused more than a few embarrassing bugs and fixed too many to count at this point.

Making show-stopping bugs certainly isn’t relegated to junior developers either. Think about outages at Meta, AWS or whatever 3rd party service your company currently uses. 

When these apps go down, who do you think is dripping in sweat over their keyboards to fix it? 

This isn’t meant to discourage you but it certainly may explain (in part) why the salaries for this kind of work are higher than average.

Anyone have a good on call horror story?",UNKNOWN,Brian,Jenney,2241,2241,22,0,1,0,0.010263275323516287,,2022-06-09 06:43:43,https://www.linkedin.com/feed/update/urn:li:activity:6940657639580200960
urn:li:activity:6940293535397007360,"What’s the biggest difference between the developers I’ve met who were hired and those who weren’t?

I think about this pretty often and over the years I’ve worked with well over 100 developers while teaching at bootcamps or via 1 on 1 mentoring (link in my about section 😉).

I was shocked to see some under-performers get hired quickly and those who were technically strong take a longer time.

I’ve followed up with a lot of these same developers. 

The biggest difference?

Some let the rejection get to them. They quit or they waited until they were “ready”.

A lot of them are still waiting.

The ones who succeeded learned from their failures and pushed past the fear and insecurity. 

They basically just didn’t stop.",UNKNOWN,Brian,Jenney,7188,7188,66,20,2,0,0.012242626599888704,,2022-06-08 06:42:19,https://www.linkedin.com/feed/update/urn:li:activity:6940293535397007360
urn:li:activity:6939925410533031936,"I can think of 2 straightforward ways to have your take-home-assessment project stand out:

Write unit tests
Write a solid README that includes a recording of you walking through the functionality (I personally like to use Loom)

I am not a fan of the take home project-as-interview - they are too time consuming for the most part. 

If you’re going to spend a significant time on these projects, why not give yourself the best chance possible?",UNKNOWN,Brian,Jenney,2448,2448,23,7,0,0,0.012254901960784314,,2022-06-07 06:09:21,https://www.linkedin.com/feed/update/urn:li:activity:6939925410533031936
urn:li:activity:6938231487758561280,"Haven't we all felt like this?

Am I the only one who doesn't know [x]?

I can't speak about [y] - I might sound like a fool.

[z] person probably knows this way better than I do.

Besides his amazing books on JS - one of the most impactful takeaways from Kyle Simpson for me, has been to learn in public, admit when I don't know something and re-frame what it means to be an impostor.

The term, and general feeling, of being an impostor is not unique and was especially detrimental to my career and perhaps yours as well.. how can you learn or grow if you're afraid to admit the gaps in your knowledge or wait until you've mastered something to share your thoughts on it? 

Once I learned to expose my ignorance and learn publicly, I saw a lot more growth as a software engineer. I'm still learning to be comfortable doing this honestly. At each new step, comes a new set of impostor-y feelings.

He's made this manifesto and pledge (which you can sign) below which I'm really digging 👇🏽",ARTICLE,Brian,Jenney,716,716,5,0,0,0,0.006983240223463687,,2022-06-02 13:54:52,https://www.linkedin.com/feed/update/urn:li:activity:6938231487758561280
urn:li:activity:6938130868976705537,"One of the developers I mentor just landed his dream role!

A not-so-suprising takeaway from his experience going through the interview process:

Writing unit tests can make you stand out.

For his take home project, he added unit tests to a ReactJS app as well as the backend. 

The interviewers mentioned the fact he included tests in his app. It impressed them, especially because so few people bother to do it.

Oh, and in case you were wondering, for this full stack role and the half dozen others he applied for - 0 DSA!.

Not 1. 

The opposite of some.

For those that I mentor, we focus on JS fundamentals, design patterns, writing unit tests and technical communication… as well as DSA!

It’s awesome to see someone I work with not only nail the interview but land a role at a company they truly wanted. 

Warms my cold heart.

If you’re having trouble with your interview strategy or have yet to write your first unit test 😅 you should grab a few mins on my calendar (it’s in my about section) to chat about what’s holding you back.",UNKNOWN,Brian,Jenney,5109,5109,61,9,0,0,0.013701311411235075,,2022-06-02 07:15:03,https://www.linkedin.com/feed/update/urn:li:activity:6938130868976705537
urn:li:activity:6937750629243138048,"My biggest fear when interviewing? 

Maybe yours too.

I walk into the room. White board just sitting there, looking all smug.

Interviewer strolls in, carbonated water in hand.

Asks question I have NO freaking clue how to answer.

He sits there, bewildered. 

“You mean to tell me you don’t know [this thing you should know]?”

Slams carbonated beverage on the table. Stands up. 

“You call yourself a developer?!”

“You sir, are a charlatan!”

Interviewer walks out. I silently erase my answer from the whiteboard. 

After around 100 interviews , I’ve learned there is no way to prepare for every question you can be asked. I’ve waved the white flag more than a few times.

I’ve also never had the scenario above happen to me, despite having some pretty awful answers.

This unfounded fear is something I’ve yet to fully overcome and I sincerely hope you don’t let made up scenarios like this prevent you from stepping into the ring. 

Am I just super neurotic or do you feel me?",UNKNOWN,Brian,Jenney,6210,6210,32,19,1,0,0.008373590982286634,,2022-06-01 06:04:07,https://www.linkedin.com/feed/update/urn:li:activity:6937750629243138048
urn:li:activity:6937034502087065601,"Recursion as a lazy guy in a movie theatre:

Lazy guy wants to know how many rows are in front of him.

He’s smart - but lazy. He knows that he is 1 row further back than the guy in front of him. 

A light bulb goes off.

He asks the lazy guy in front of him how many rows are in front of him.

This guy is also pretty lazy.

He asks the guy in front of him - using the same logic as above (1 + the amount of rows in front of the guy in front of him).

Eventually this game of telephone reaches a man in the second row.

1 guy in front of me he replies.

This sets off a chain of lazy bastards relaying this information.

Finally it reaches the second-laziest man at the top. 

“8 guys in front of me, see” (this is an old-time-y theatre)

The initial requestor simply adds 1 to the number of people in front of the lazy man who is sitting in front of him. 

9.

He sits back, satisfied. 

The movie begins.

Everyone has a different mental model for understanding recursion. Mine is a lazy man in a theatre. What’s yours?",UNKNOWN,Brian,Jenney,9422,9422,65,11,5,0,0.008596900870303546,,2022-05-30 06:38:29,https://www.linkedin.com/feed/update/urn:li:activity:6937034502087065601
urn:li:activity:6936038412118351872,"Will you use DS/A on the job? Probably not.

Should you learn it anyway? Yeah.

As a late bloomer coder from a very non-tech background (I didn't own a laptop until well into my mid 20's) - algos and data structures intimidated the hell out of me.

I spent money, time and lots of effort to get proficient. What did I get out of it?

Confidence, mostly.

And a much better grasp on the underlying patterns and concepts which make up the software ecosystem, which in turn improved my code quality.

But mostly... confidence.

Anyways, don't let LeetCode scare you. Even though I rag on it a bit here and there - it's a great place to strengthen your coding skills (or improve you chances in the FAANG Hunger Games).

Also - here's me walking through a DP problem using a common problem solving technique which I hope you find helpful. I know recursion and DP problems are often perceived as intimidating and they don't have to be. 

It's been a rough week. When life gets tough I do DP problems... cuz I'm a masochist.",EXTERNAL_VIDEO,Brian,Jenney,1873,1873,23,4,0,0,0.014415376401494928,,2022-05-27 12:40:22,https://www.linkedin.com/feed/update/urn:li:activity:6936038412118351872
urn:li:activity:6935275704871792640,"Today just feels weird. In a really awful way.

I drop my kids off at school. 

At work, coding. As usual, I've retreated to my code hole. My little logical universe. A layer of insulation from a world which seems increasingly more volatile, unpredictable.

Back to back massacres in different parts of the US just weeks apart.

What's most concerning is how much our collective tolerance seems to have grown in response to these tragedies.

Is there any limit? Any tragedy too great?

What will be the catalyst to enact some actual, tangible change?

I don't know how much more love or support we can send to parents and communities who have had their souls ripped from them in such cruel ways.",UNKNOWN,Brian,Jenney,2353,2353,17,4,0,0,0.008924776880577986,,2022-05-25 10:09:39,https://www.linkedin.com/feed/update/urn:li:activity:6935275704871792640
urn:li:activity:6935222839948062721,"How did I become a Senior Software Engineer?

Well, I kinda just asked.

I mean, I also got offered a role at another company at a senior level. I was at mid-level during this time. 

I spoke to my manager and let him know I would be leaving for greener pastures.

Wait? What? Aren’t you happy here?

Well, yeah, I replied.

But, you know… 💰📈

Why didn’t you just ask? 

Uhhh, well… honestly never thought about it like that. 

I was kinda hoping it would just happen. It was lottery mentality thinking on my part.

He was right. I should’ve made my goals clear. I could’ve spoken up. I was too nervous to admit that I wanted the senior title and didn’t really have a clue what was required.

Be good at coding? Like really good? 🤷‍♀️

What I learned is that getting to senior wasn’t solely about technical skill… here at least (your mileage may vary).

I needed to show mentorship capability, influence by making impactful technical decisions and of course have a track record of writing quality code.

I really did enjoy where I worked and I ended up staying at that position. We created a roadmap to get me a senior title.

I learned a valuable lesson about communication and what was required to get me to the next level as a software engineer in our organization from that experience.

Getting from junior -> mid or from mid -> senior shouldn’t be a black box. 

Don’t make my mistake. Find out what it takes. Ask your manager. Ask for advice from other people in the position you’re after. Identify the gaps in your skills. Execute.",UNKNOWN,Brian,Jenney,9922,9922,105,11,1,0,0.011791977423906471,,2022-05-25 06:39:35,https://www.linkedin.com/feed/update/urn:li:activity:6935222839948062721
urn:li:activity:6934854025058140161,"The problem with learning ReactJS before Javascript:

So here I was, doing a mock interview and the interviewee is attempting to implement the publish subscriber pattern.

No framework. Just plain old JS.

To their surprise, useState was not available within a Javascript object… oops. The majority of the interview was spent going over the basics of JS objects. Key-value pairs. Dot notation. Context.

You know, table stakes JS stuff.

I felt their pain. I started my Javascript career off with AngularJS and Jquery. I thought because I knew the framework, I knew JS. It took me years to return back to the fundamentals and really double down on the concepts that were holding me back.

I’m not saying don’t learn frameworks. They are a very useful abstraction to create apps.

Just don’t forget to build your house of knowledge on a solid foundation.",UNKNOWN,Brian,Jenney,463,463,4,0,0,0,0.008639308855291577,,2022-05-24 06:14:02,https://www.linkedin.com/feed/update/urn:li:activity:6934854025058140161
urn:li:activity:6934853871227846656,"The problem with learning ReactJS before Javascript:

So here I was, doing a mock interview and the interviewee is attempting to implement the publish subscriber pattern.

No framework. Just plain old JS.

To their surprise, useState was not available within a Javascript object… oops. The majority of the interview was spent going over the basics of JS objects. Key-value pairs. Dot notation. Context.

You know, table stakes JS stuff.

I felt their pain. I started my Javascript career off with AngularJS and Jquery. I thought because I knew the framework, I knew JS. It took me years to return back to the fundamentals and really double down on the concepts that were holding me back.

I’m not saying don’t learn frameworks. They are a very useful abstraction to create apps.

Just don’t forget to build your house of knowledge on a solid foundation.",UNKNOWN,Brian,Jenney,65700,65700,678,50,28,0,0.011506849315068493,,2022-05-24 06:13:26,https://www.linkedin.com/feed/update/urn:li:activity:6934853871227846656
urn:li:activity:6934491842264653824,"You finally did it! You got the freakin’ job!

DFS’ed so many trees.

Searched that sorted array… binar-ily. 

Took home that project and beat it into submission… within the allotted time of course 😉.

Now what?

Some next steps you may want to consider now that you’re taking a brief hiatus from the interview grind:

✅ Get good at Git (or at least brush up on the basics like branching/pulling/commits)
✅ Dig into the deployment process and how code goes from a repository to being hosted at an address on the web
✅ Look up common design patterns in the framework you’ll be using - which I’ll bet you a bag of donuts includes one of the letters in MERN
✅ Learn to write some non-trivial tests

Oh… and share your experience! 

Remember how you felt during your search and give back. What are the tips you recommend to others on the interview grind or looking to secure their first dev role?",UNKNOWN,Brian,Jenney,1892,1892,14,4,2,0,0.010570824524312896,,2022-05-23 06:14:51,https://www.linkedin.com/feed/update/urn:li:activity:6934491842264653824
urn:li:activity:6933405036144205824,"So I did an interview last week.

I'm not looking for a job, either. I'm actually really satisfied in my current role...

I work with JS developers to nail down the concepts they need to pass interviews and I recommend they all enroll in pramp.com - a FREE mock interview site to help them with technical communication and getting over their nerves.

Anyways - here I was, taking my own advice - doing a pramp interview, with basically the lowest stakes possible:

No intention of interviewing in the near future and paired with a stranger I'll never see again.

You know what - I was still a bit nervous. I've done dozens of these mocks in the past year as well.

I fumbled with an async function.

Had to look up how to use mutation observer (I mean, right?)

Forgot to add a return statement to another function.

That's exactly why these types of mock interviews are so important IMO.

Perhaps you're less neurotic/anxious than me (I sincerely hope so) - even the coolest of cucumbers may pickle up a bit during an interview.

Don't let your ""real"" interview be your first interview. Nothing can really substitute the experience of walking through your code with another human being.",UNKNOWN,Brian,Jenney,4537,4537,41,9,1,0,0.011240908089045624,,2022-05-20 06:16:17,https://www.linkedin.com/feed/update/urn:li:activity:6933405036144205824
urn:li:activity:6933039264502870016,"How to fail your next coding interview.

In a few easy steps 👇

✅ Don’t use Glassdoor.com to investigate previous interviews and the questions asked

✅ TeamBlind.com? Nah - no need to check out the super candid information about the company’s interview process there

✅ Only focus on DS/A - who tests front end stuff amirite? Djikstra, A*, BFS, DFS or die!!!

✅ A story in your back pocket about a complex project or a time you disagreed with a coworker? Never!

✅ Google basic concepts like “how to use a for loop” during the interview - you can’t memorize everything!

Now you’re ready to stick it to the man by wasting their engineers’ valuable time and spectacularly fail!

Anything I miss?",UNKNOWN,Brian,Jenney,3902,3902,16,6,1,0,0.005894413121476166,,2022-05-19 06:02:50,https://www.linkedin.com/feed/update/urn:li:activity:6933039264502870016
urn:li:activity:6931955412548157440,"Attacks on Asians. A war in Ukraine. Women’s reproductive rights on trial. Now, another racially motivated massacre. 

As a black-ish person (half, in case you were wondering), the tragedy in Buffalo, NY is particularly jarring to me. It makes me wonder if my family will be targeted at some point. If we're safe anywhere.

I usually don’t like to bring up these kinds of events outside of friends and family. I don't pretend to expect all my co-workers or internet peoples to feel the same and maybe I'm a little fearful that I'll unearth some opinions I wish I hadn't discovered.

I think some of you will know exactly what I'm talking about 😅 - and if you're a leader hoping to facilitate discussion or offer sympathy, don't be totally shocked if you have employees who would rather skirt the topic - perhaps because they share some of my concern.

At work I prefer to focus on, well, work stuff. Personally, it helps me feel stable and insulated from what feels like an increasingly volatile world. We all have different coping strategies.

I hope you’re doing whatever you need to do to deal with the staggering amount of terrible world news lately and if you've been directly or indirectly affected by the terrorist attack in Buffalo my heart goes out to you.",UNKNOWN,Brian,Jenney,2593,2593,28,4,0,0,0.012340917855765523,,2022-05-16 06:15:59,https://www.linkedin.com/feed/update/urn:li:activity:6931955412548157440
urn:li:activity:6930156512459833344,"There are more than enough bootcamps out there for software engineers, but what about engineering managers?

I recently made the jump from IC to manager and am learning in real-time how different the roles are.

I was told by more than a few people that this truly is a career shift and I sort of wrote it off… I mean, how different could it be right?

Well, I write a lot less code which makes me feel less productive and it’s harder to measure myself as I might have in the past.

Leading and defining the vision for a team is nebulous, subjective stuff and learning how to relinquish control of technical decisions is certainly an area where I’ve had to improve.

Outside of the increase in meetings, I’ve found I really do enjoy working with and for my team through mentorship, finding opportunities at work and increasing their autonomy.

Some books I’ve read (or currently reading) which I’ve found useful as a new manager:

For Technical Career Paths
https://lnkd.in/gnfrjX-W

For Better 1x1’s
https://lnkd.in/gJ6JN5NX

For Creating Organizational Change
https://lnkd.in/gMjhMyzt

Now hook me up! What are some courses/books you recommend for new engineering managers? 👇",ARTICLE,Brian,Jenney,1168,1168,12,7,0,0,0.016267123287671232,,2022-05-11 07:07:48,https://www.linkedin.com/feed/update/urn:li:activity:6930156512459833344
urn:li:activity:6929421988159533056,"I’ve fooled a lot of people into thinking I’m smarter than I really am.

In my opinion, being “smart” is overrated.

What I respect more than genius is persistence.

I’ve met a lot of students who feel that [x] language/concept/framework is just too complicated for them. Only really smart people can learn that. Not people like them.

Listen, there are absolutely some geniuses lurking amongst us. The rest of us are somewhere on the scale of average.

With enough persistence and direction I 100% believe ANYONE can reach a certain level of proficiency with anything from calculus to Javascript.

Some people will “naturally” excel more than others, however I have yet to see anyone completely fail to grasp a concept with enough applied studying.

I may not be able to help you with calculus but if you’re feeling stuck with JS - give me a holler 😉",UNKNOWN,Brian,Jenney,3024,3024,38,8,0,0,0.01521164021164021,,2022-05-09 06:29:04,https://www.linkedin.com/feed/update/urn:li:activity:6929421988159533056
urn:li:activity:6928379302644248576,"Does your mouth turn to mush when trying to explain a technical concept?

I’ve seen it happen in a lot of interviews.

We usually write code in silence, alone, snarfing burritos and pounding fizzy canned waters.

Interviews force us to think out loud. All of the sudden that thing you thought you knew isn’t so clear.

Try this:

✅ Get loom.com (FREE)
✅ Record yourself going over a concept or explaining some code you wrote while on your LeetCode grind
✅ If you feel ambitious - share it on social media to help others

Speaking out loud in a low-stakes environment can help build your technical communication muscle. 

Talking at a camera with a blurred out background to obscure the stack of laundry behind you is becoming an important skill in an increasingly remote-centric tech world.",ARTICLE,Brian,Jenney,1031,1031,9,6,0,0,0.014548981571290009,,2022-05-06 09:25:48,https://www.linkedin.com/feed/update/urn:li:activity:6928379302644248576
urn:li:activity:6927618597632565248,"What is a framework developer?

I used to be one.

So what’s wrong with it?

Well, simply put, a framework developer is a person who depends on the abstraction of their programming language via a framework (or library in the case of ReactJS) to develop applications.

The problem with being a framework (or library) developer is that when your framework goes out of favor, so do you. Without a grasp of the fundamentals upon which it was built, you’re now tied to the abstraction.

So how do you go from framework dev to JS dev? 

Double down on the fundamentals.

Async, closure, DOM, promises, prototypal inheritance, design patterns and of course 'this' 😉.

I'm particularly fond of this site for learning design patterns in JS:",ARTICLE,Brian,Jenney,1554,1554,17,3,2,0,0.014157014157014158,,2022-05-04 07:03:02,https://www.linkedin.com/feed/update/urn:li:activity:6927618597632565248
urn:li:activity:6925830755331833856,"F*ck that TODO app.

Here's an interactive project I think will impress people.

Or at least learn ya' something.

Resume as an API. 

Set up a Node/Express API with some routes which return information about you.

For example 'resume/work-history' or 'resume/education' which returns some JSON about you.

Set up middleware and error handling and deploy to the web for others to interact with.

If you want some starter code for setting up a Node/Express app, with tests and middleware and some routing complete with a short video walkthrough - just DM me with your email 🧐",UNKNOWN,Brian,Jenney,13489,13489,115,18,2,0,0.010008154792794129,,2022-04-29 08:38:47,https://www.linkedin.com/feed/update/urn:li:activity:6925830755331833856
urn:li:activity:6925459781558116352,"Worst interview I’ve had?

That’s a tough one. I mean, I’ve bombed my fair share of interviews, but the worst experience I probably had was during an interview at an office that allowed dogs.

I’m not a dog hater per se…. Also, not exactly a dog lover 😬.

So during an awkward white boarding session where I was flailing around with a canned answer for designing a rate limiter… the 2 dogs in the interview room begin barking loudly at each other and fight! 

The respective owners pried the dogs apart as I stared in disbelief mixed with some healthy fear.

My average performance tanked after this incident… not because of it… but it certainly didn’t help.

Not surprisingly I was not offered the role. 

So sad. Too bad.

I think the feeling that this wasn’t a good fit was mutual.

If you’re in a position to be picky in your job search, then do so. Job hopping and searching is stressful for most of us. Maybe your deal-breaker is fighting dogs in the office. Perhaps it’s weekend on call shifts? 

I’m curious, what’s the worst interview experience you’ve had?",UNKNOWN,Brian,Jenney,3745,3745,9,17,0,0,0.006942590120160214,,2022-04-28 08:04:40,https://www.linkedin.com/feed/update/urn:li:activity:6925459781558116352
urn:li:activity:6925068527045423104,"I don’t think I’ve met a developer who had a lack of desire to improve their skills.

What they (including me) usually lack is direction.

What does a lack of direction look like?

Endless tutorials. 

A fuzzy end goal.

Dabbling across languages/frameworks/projects. 

Without a clear direction it’s easy to go in the wrong one and end up somewhere you didn’t intend to.

So pick a direction, a desired result (and write them down 😉) and double down on the fundamentals of your chosen language, the most popular framework and testing libraries and create a single application that uses all this knowledge.

And of course, if you want some of my very opinionated opinions on your direction feel free to DM me.",UNKNOWN,Brian,Jenney,6624,6624,77,14,0,0,0.01373792270531401,,2022-04-27 06:09:58,https://www.linkedin.com/feed/update/urn:li:activity:6925068527045423104
urn:li:activity:6924350528369938432,"Here’s a trend you front end devs should be aware of:

I work with about half a dozen developers, many of whom are currently interviewing.

Of the nearly dozen interviews between them, here’s the breakdown:

6 Take home projects varying from simple HTML/CSS forms to your typical React App that fetches data from an API.

2 On-sites where developers paired with others to build something like a game. Games seem to come up a lot lately 🤷🏽‍♂️.

2 Multiple question exams 👎- the lamest of all tech screens

0 Algorithm style questions… yet (there is a person ready to interview at some top tier companies where they will absolutely get some DS/A style questions)

Does this mean don’t study DS/A? 

I’ll leave that up to you. 

I still think understanding common data structures and algorithms for searching/sorting are important.

That being said - for you front end devs on the LeetCode grind, don’t forget to study front-end-y things.

Also - if you are interested in working with me to nail your JS interviews and go from framework dev -> JS engineer, just DM!",UNKNOWN,Brian,Jenney,3013,3013,31,3,0,0,0.011284434118818453,,2022-04-25 06:36:54,https://www.linkedin.com/feed/update/urn:li:activity:6924350528369938432
urn:li:activity:6919649111293992960,"Coding... so easy. So freaking easy.

Yup, so easy you can get paid upwards of multiple 6 figures.

So easy bootcamps charge 10k+ to teach you.

So easy, that there is an emerging industry teaching current software developers how to pass wildly difficult interviews.

Too easy, right? 

It really boils my potato when I see a post or ad claiming coding is easy. It both trivializes the accomplishments of people that go to school or learn on their own and land jobs and sets up aspiring developers for disappointment and insecurity when they don't just get it!

So no, coding !== easy. 
['coding'].includes('easy')
const coding = !easy

That's good though. You don't want coding to be easy. It can be a worthwhile pursuit to learn and like anything worthwhile - like getting in shape, or writing a book or climbing a mountain - it will not be easy.",UNKNOWN,Brian,Jenney,5070,5070,59,11,0,0,0.013806706114398421,,2022-04-12 07:15:08,https://www.linkedin.com/feed/update/urn:li:activity:6919649111293992960
urn:li:activity:6915681081086144512,"I’m a little apprehensive to admit this…

But, much of what I’ve done as a mentor for others is NOT technical.

Many times, I’ve simply offered an alternative point of view, a similar experience or a recommendation. 

Hey, why don’t you apply for that role? Yeah, the one where you meet a little over half the requirements.

Yes, respond to that recruiter.

Oh, you’re interviewing with Amazon? I’d focus on graphs.

They offered you how much? Whoa! Now ask for x amount more.

Have you watched this video on recursion? It really clicked for me.

When I really dig into what is holding junior developers back in their career (and from my own failures), it IS often a lack of fundamental JS knowledge and design principles. You can read any number of articles and books on OOP, recursion, performance optimization and how React is the best… or worst… library out there.

What we are often in need of more than technical skill is focus, accountability and support.",UNKNOWN,Brian,Jenney,2383,2383,27,4,0,0,0.013008812421317666,,2022-04-01 08:27:36,https://www.linkedin.com/feed/update/urn:li:activity:6915681081086144512
urn:li:activity:6914564085699264513,"You’re gonna break stuff.

In fact, you kinda need to.

Ever hang around a bunch of senior developers and hear their war stories? 

The ubiquitous dropped database story. 

The time they didn’t quite test their code well enough and released a show stopping bug. 

The feature that introduced a security vulnerability.

I don’t want to romanticize shoddy work or careless mistakes but I do believe that your personal progress will necessarily put you in a position to break things.

Sure you can play it safe. Take on another ticket to change the color of a button. Update a test. 

You can still learn this way.

However, if you want to make significant progress in your career and increase your technical ability at a faster pace, then take calculated risks and make decisions with consequences.",UNKNOWN,Brian,Jenney,2736,2736,33,2,0,0,0.012792397660818713,,2022-03-29 06:29:04,https://www.linkedin.com/feed/update/urn:li:activity:6914564085699264513
urn:li:activity:6913130059025321984,"I play it pretty safe on here for the most part.

I talk a lot about code because that’s safe. And I know it decently… at least I think I do.

Just another nerd on LI spouting off about work and productivity in the web world… and there’s nothing wrong with that. In fact, I worked really hard to be able to write about this stuff.

About 8 years ago, though, I was struggling with addiction, involved in crime and was headed towards incarceration or death.

Maybe you’ve met me at a presentation, worked with me or slid in my DMs for my hot takes on your resume. You may have no idea about my past, and for the most part, I like to keep it that way. 

I could easily gloss over the not so glorious aspects of my life prior to typing code into an editor, but I’ve met too many people who think that they have fallen too far down to climb back up or that people like them just aren’t cut out for [x].

I used to meet people in tech and get intimidated (I sometimes still do 🤫). Perhaps you feel the same. They went to [fancy] school. Have [inflated] title. Worked at [coveted tech company].

Realize everyone has a past, some more salacious than others, and whatever their current title, salary or company is, they started somewhere. You can also.",UNKNOWN,Brian,Jenney,8813,8813,86,18,0,0,0.011800748893679791,,2022-03-25 07:30:45,https://www.linkedin.com/feed/update/urn:li:activity:6913130059025321984
urn:li:activity:6912026902648025089,"When am I gonna get hired?

You’ve seen the horror stories on LinkedIn. 

I applied to 300 companies a day and didn’t get a single response!

I sent a box of donuts and a hand-penned letter to every engineer I met during my interview…. Nothing!

Listen - no one can tell you what your timeline for getting your first role as a developer will be.

There is some luck involved.

There’s also a lot of skill involved.

A solid technical foundation, 1 or 2 interesting projects, an optimized LinkedIn and consistency will work wonders. Boring stuff I know right?

Not a box of donuts. Not a different color scheme for your portfolio. 

Learn stuff. Build stuff. Don’t quit.",UNKNOWN,Brian,Jenney,10435,10435,85,18,4,0,0.010253953042644945,,2022-03-22 06:27:12,https://www.linkedin.com/feed/update/urn:li:activity:6912026902648025089
urn:li:activity:6911652884296216576,"The Glassdoor Interview Hack Strategy:

Sure, you could study for the technical interview using the shot gun approach... a little of this, a little of that or just fallback on what you THINK they might ask. Better than… well, not studying.

As a front end developer I hope you're covering the most common concepts you're likely to encounter: bind, call, apply, closure, string and array manipulation, promises…. Jeez that’s a lot already.

Luckily, a lot of companies have the exact questions you are likely to encounter on Glassdoor. 

Previous candidates will often leave their experience, the questions they were asked and even the answer!

Oftentimes, the company in question doesn’t even slightly update their interview based off this knowledge.

Use that to your advantage.

Hell, I’ve talked to Google recruiters who suggest you do as much for their interview.

Other sites where people discuss their interview experience are CareerCup and of course Blind.

#juniordeveloper #interviewpreparation",UNKNOWN,Brian,Jenney,1562,1562,12,0,0,0,0.0076824583866837385,"#juniordeveloper ,#interviewpreparation",2022-03-21 05:40:59,https://www.linkedin.com/feed/update/urn:li:activity:6911652884296216576
urn:li:activity:6909490627101544448,"Yes, there are more meetings.

But, that’s the probably the most trivial change I’ve experienced in making the change from IC to manager.

I’m still learning how to be a technical manager and I wrongly assumed it would be more technical than management. 

I’ve learned quickly how important it is to manage expectations, morale and dig into what motivates others. Everyone isn’t motivated or inspired in the same ways I am and though that seems obvious when writing it, this was definitely a moment of epiphany for me.

The most rewarding part of management for me is the ability it gives me to mentor and help shape others’ career… ideally for the better.

The most difficult part? Relinquishing control of the code and giving room for others to make mistakes to learn… without jumping in too soon… or too late.

Outside of that… yeah, there are a lot of meetings 😅.

Question: 

For those of that you that made the jump from IC to manager - what was the biggest change you experienced?",UNKNOWN,Brian,Jenney,2109,2109,14,6,1,0,0.00995732574679943,,2022-03-15 06:28:57,https://www.linkedin.com/feed/update/urn:li:activity:6909490627101544448
urn:li:activity:6908104183745015808,"Easy way to have your portfolio project stand out…

Unit tests.

Yup. It’s not sending a box of donuts to the hiring committee… though that would be nice. Mmmmm, donuts.

Most bootcamps && CS programs simply don’t teach unit testing, especially front-end unit tests. Those I’ve seen that do, don’t have time to dig past the trivial. 

Read up on the controversial opinions surrounding mocking, e2e and TDD and DDT… one of those I just made up 😉.

Jest/Mocha/Chai/Testing-Library are the most common frameworks/libraries you WILL encounter on a full stack or front-end focused team. Why not use them now in a side project now?

It’s like learning to code all over again, which, depending on your love of coding may sound really exciting or kinda terrifying.

Here's a video walking you through writing your first simple Jest unit test ⬇️",EXTERNAL_VIDEO,Brian,Jenney,4181,4181,45,12,4,0,0.014589811049988041,,2022-03-11 09:39:43,https://www.linkedin.com/feed/update/urn:li:activity:6908104183745015808
urn:li:activity:6906602902526263297,"Are any of us really self-taught developers?

Throughout my career I’ve relied on the developer community to fill in the gaps in my knowledge.

I attended a meetup nearly 10 years ago where a developer showed me how to use Sublime to write some simple HTML code. I had been using an online IDE until this point and a plain text editor 😬.

A former co-worker spent an afternoon walking me through some of the principles of OOP at my first job.

A friend of a friend who worked for Slack wrote me a detailed page-long email about what I needed to study to become a web developer and materials/books he recommended. (I was like, Slack? What an odd name for a startup… sure it will never go anywhere 😅)

One of my first managers introduced me to the concept of Big O. 

I can’t count the number of Udemy videos I’ve purchased over the years… (how many I finished is another story 🤫)

None of us really learn in a vacuum, and the dev community, not without its flaws, has a lot of awesome and selfless people who are happy to help.

That being said, LI has millions of people here at your fingertips. DM some of them. Ask them about what they do. Get advice. Then return the favor!",UNKNOWN,Brian,Jenney,5010,5010,36,16,0,0,0.010379241516966068,,2022-03-07 06:14:10,https://www.linkedin.com/feed/update/urn:li:activity:6906602902526263297
urn:li:activity:6906359671712546816,Now this could be worth checking out ⬇️,UNKNOWN,Brian,Jenney,689,689,5,0,0,0,0.00725689404934688,,2022-03-06 14:07:39,https://www.linkedin.com/feed/update/urn:li:activity:6906359671712546816
urn:li:activity:6904807101877866496,"Yeah, they’re probably not going to merge that PR.

You’ve probably heard that contributing to open source projects can really make you stand out. That’s true.

The reality is that the maintainers of uber-popular libraries are understandably very picky about what they allow into their masterpieces. 

The project set up, PR process and time needed to really solve any less than trivial bug for most popular projects on Github can be incredibly time consuming and depending on the issue you are solving… not really worthwhile.

If your goal is to stand out as a junior developer, gain some valuable skills and learn something new, make your own damn project.

Been deploying to netlify? Try AWS.

Want to write Javascript but, like, a lot more of it? Try Typescript.

Never used Vue.js?… good.

Anyways, yeah. Build stuff. Stuff that you actually like and can talk about with pride.",UNKNOWN,Brian,Jenney,9846,9846,56,21,2,0,0.008023562868169815,,2022-03-02 07:18:18,https://www.linkedin.com/feed/update/urn:li:activity:6904807101877866496
urn:li:activity:6904067666693226496,"The invasion of Ukraine may further support your view that the world is indeed a f*cked up place… but I’m continually amazed at the stories I read on here about regular people, from software developers to stay-at-home mothers bearing arms to protect their country and generally just working together to do whatever’s necessary to survive.

Massive corporations are divesting from Russian companies against their own economic interests.

A billionaire offered free internet?!

At our core, I believe humans are resilient, amazing and generally good. To help Ukrainians and their army ⬇️",UNKNOWN,Brian,Jenney,148,148,0,0,0,0,0,,2022-02-28 06:20:03,https://www.linkedin.com/feed/update/urn:li:activity:6904067666693226496
urn:li:activity:6902617465398939648,"Yay 🥳. You got the job. You traversed all the trees. You told them about the time you didn’t punch your co-worker for deploying a code change that broke the pipeline on a Friday. Team work.

Now what?

Joining a new team, especially as a junior can be intimidating.

You may not feel you have a lot to offer the team at this stage and you’re likely right… kinda.

A fresh perspective on processes, coding standards and culture can work in your favor. 

Question why - politely of course and from a place of genuine curiosity. If you’re feeling bold, offer suggestions to improve.

Code reviews are another place you can stand out. 

Be thorough in your review and ask why certain choices were made. Add links to articles. Give props when you see something particularly clever or that taught you something you didn’t know. 

Volunteer for at least one ticket/project that will stretch your capabilities. Changing the color of a button is a great first task but if you really want to grow, take on a ticket you’re not quite sure how to handle or in a part of the codebase you haven’t explored.

What happens after nailing the interview is a much less clearly defined process and it’s easy to play the background as a junior developer.

What’s the worst that can happen? You get canned and spin the interview wheel again - and you’re already so good at traversing trees 😉",UNKNOWN,Brian,Jenney,2322,2322,28,1,0,0,0.012489233419465978,,2022-02-24 06:17:28,https://www.linkedin.com/feed/update/urn:li:activity:6902617465398939648
urn:li:activity:6901887157133279232,"Part of your job as an interviewee during an interview is be like-able. 

Especially if you are more junior. You will have less technical capability and the ultimate decision may boil down to who the team perceives as easier to work with.

Is it fair? I don't know. But it's reality. And I want to see you hired, not tell you how things SHOULD be.

One of the easiest ways to become more like-able is to ask questions about the other person (this also works in non-interview settings 😉).

Humans love is talking about ourselves!

📌 What do you like most about your job here?
📌 What’s one thing you would change on your team?
📌 Can you walk me through <deployments/incident handling/some process> ? (this question may actually raise some red flags for you - oh you do on-call 1x per week eh... interesting)

So keep reversing those linked-lists or balancing trees or whatever but don't forget to have some canned questions in your back pocket once you hit the optimal solution.",UNKNOWN,Brian,Jenney,3794,3794,31,10,0,0,0.01080653663679494,,2022-02-22 05:55:29,https://www.linkedin.com/feed/update/urn:li:activity:6901887157133279232
urn:li:activity:6900519294891900928,"Happy Freakin Friday!

I'm curious, are there any IT Support professionals in my network (Database administrator, IT specialist, tech support specialist, help desk technician, IT support, etc.)?

I'm sure there are and I could use your help. 

Don't worry, didn't spill coffee on my laptop or anything... 😅. I have a much higher calling for you 🙇🏽‍♂️ 👇🏽

Damany M. Fisher, Ph.D. works with an amazing program dedicated to helping formerly incarcerated people find work in the IT support field and could use some insight from you!

Feel free to comment or DM me or Damany M. Fisher, Ph.D. if you'd like to share your insight and experience for a very worthwhile and important cause.

#itdevelopment #databaseadministrator #helpdesksupport #helpingothers",UNKNOWN,Brian,Jenney,513,513,2,1,0,0,0.005847953216374269,"#itdevelopment ,#databaseadministrator ,#helpdesksupport ,#helpingothers",2022-02-18 11:20:05,https://www.linkedin.com/feed/update/urn:li:activity:6900519294891900928
urn:li:activity:6900072604447711232,"So I still deal with impostor syndrome.

I know what you might want to hear or have already heard:

It just gets better and you're fine the way you are. Think positively or wait it out or go somewhere that makes you feel less impostor-y. 

🌈 🦄 🥰 

Except, that didn't really work out for me and I will never give you advice that I wouldn't follow.

For me, impostor syndrome signals a disparity in the skills I think a person in my position should have and my current capabilities.

What I've done to close this gap is list out the skills/traits I feel like I'm supposed to have. Often times the list is not as daunting as I imagined.

I start working on this list, little by little. I understand the areas that will make me feel more ""worthy"" of my position and attack them. Now I have ""proof"" that I am where I'm supposed to be.

In my experience, it's rare that others perceive us as impostors. People are too caught up in their own world to really care about you 😉. The insecurity that often accompanies change is indeed in your head but that doesn't mean you should ignore it. Identify, attack, move on and repeat.
#impostersyndrome #impostorsyndrome #howdoyouspellimpostor",UNKNOWN,Brian,Jenney,3754,3754,50,9,1,0,0.015982951518380393,"#impostersyndrome ,#impostorsyndrome ,#howdoyouspellimpostor",2022-02-17 05:45:06,https://www.linkedin.com/feed/update/urn:li:activity:6900072604447711232
urn:li:activity:6898986961206423552,"Interviews are weird.

We do them so infrequently that we never quite get used to them. 

That’s also why I suggest you never really stop preparing for them…

Do 1 Leetcode problem a day. Read 1 Article a week. Have 1 Side project. Nothing crazy or super time consuming but these small deposits compound over time. You’ll be a better engineer, more prepared for whatever comes your way and maybe, most importantly, more confident.

The worst thing you can do is sit on the sidelines out of fear. Hoping your job is safe. Waiting for a new manager to see your potential or give you interesting work. 

My best advice, that even I find difficult to follow, is to separate your feelings from the interview and treat it as a game... a winnable game. You absolutely can't win if you don't play.",UNKNOWN,Brian,Jenney,6572,6572,56,10,2,0,0.010346926354230066,,2022-02-14 05:51:08,https://www.linkedin.com/feed/update/urn:li:activity:6898986961206423552
urn:li:activity:6897548952493797376,"Imagine this:

You, on the LeetCode grind, traversing trees, linking lists, BFS'ing graphs, exploring the time and space tradeoffs between sorting algorithms.

You walk into your interview. Or Zoom. Whatever. 

They ask you to build a snake game using Vanilla JS. 

F*ck.

If you truly are aiming for FAANG roles then I totally understand the LC grind. Honestly, I think LC is a great source for learning and problem solving, even if you aren't interviewing (another story). 

But why are so many devs, especially front end, optimizing their interview prep for Google when they won't be interviewing there? 

I'm not saying not to go down the LC path, but make sure you are also studying for the kinds of problems you're almost certainly going to encounter in non-FAANG interviews. 
#interview #frontend #algorithms #leetcode",UNKNOWN,Brian,Jenney,15098,15098,68,23,2,0,0.006159756259107167,"#interview ,#frontend ,#algorithms ,#leetcode",2022-02-10 06:37:00,https://www.linkedin.com/feed/update/urn:li:activity:6897548952493797376
urn:li:activity:6897173436343435265,"The first 3 years of my career as a software developer, I barely said a word during meetings.

So what changed?

Well, one day I got called out on it. My manager told me I needed to share my opinions more often and ask questions when I didn’t understand them. It stung a bit when he told me this but I took it to heart.

I made it a point to ask a question during each meeting. At the time, it was uncomfortable	and I’d “cheat” by writing down a question before the meeting started or during, so I’d have something to say.

Nowadays, speaking during meetings doesn’t carry the same weight it used to, though it’s still not completely natural to me.

One of my goals this year was to use my voice more on LinkedIn. It still feels uncomfortable if I’m being honest but a hell of a lot less so than it used to. I’ve met a lot of great people and reconnected with others as a result.... also some weirdos, but hey, I can't complain 😅.

The simple of act of sharing your thoughts or questions at work can position you as leader on your team. It can inspire others to speak and introduce new points of view. It can lead to better discussions, better software and processes.

So say something. Write something. Start with a question. Even if you have to write it down beforehand 😉.",UNKNOWN,Brian,Jenney,3937,3937,53,1,0,0,0.013716027432054865,,2022-02-09 05:44:50,https://www.linkedin.com/feed/update/urn:li:activity:6897173436343435265
urn:li:activity:6896452190727217152,"If you are looking for your first role in software and holding out for a company with a diverse team (in terms of race and gender), I hate to tell you but you may be searching for a while.

For a snapshot of the demographics of professional developers, check out StackOverflow’s yearly survey https://lnkd.in/grs5yMFt

I spoke with a recruiter who told me a lot of the bootcamp grads she was speaking with were apprehensive about joining non-diverse companies… 😬

My concern upon hearing that is that companies whom are attempting to recruit (and retain) people who are not well represented in tech will be negatively impacted by this sentiment. 

I get it though. 

It’s tough to be the only ____ on a team or at a company. You stand out. It’s harder to hide. I still suggest you do it. If not for your own benefit then for the benefit of others that may come after you, searching for another ____ zoom square on their first day.",ARTICLE,Brian,Jenney,1399,1399,10,5,0,0,0.010721944245889922,,2022-02-07 05:58:52,https://www.linkedin.com/feed/update/urn:li:activity:6896452190727217152
urn:li:activity:6895122999553462272,"I know how much developers love to wind down a long day of coding with a good book like Cracking the Coding Interview or Clean Code or maybe a book exploring the time and space trade offs between different sorting algorithms, BUT, if you want a book that's a little lighter and perhaps more related to what you will experience as a developer, I'd highly suggest The Phoenix Project.

Without giving too much away, it's a novel about a struggling IT department under the gun to turn things around. It has some practical advice peppered throughout the book and if you've ever worked on a dev team you'll immediately recognize some of the personalities and issues presented in it.",ARTICLE,Brian,Jenney,814,814,13,4,0,0,0.020884520884520884,,2022-02-03 13:57:08,https://www.linkedin.com/feed/update/urn:li:activity:6895122999553462272
urn:li:activity:6893939033924345856,"I was recently working with some students enrolled in a very popular bootcamp. They were incredibly bright and seemed to have a decent understanding of how to use ReactJS as well as DS/A.

When we were pairing on how to write an event handler for a button, things took an interesting turn...

For the most part, they seemed unfamiliar with some basic syntax for markup as well as very common elements like header and paragraph tags. 

This is a trend I've noticed at some bootcamps - basically skipping over HTML and CSS. 😬 Like, hey we know you spent ~20k to learn to code but you figure it out smarty-pants.

It's great you can traverse a binary tree or know the space/time tradeoffs between sorting algos... but if you don't also know the difference between an id and a class, you're going to find it difficult to nail your interviews... or, you know, make websites and stuff.

My non-exhaustive list of FE concepts to brush up on:

📌 Event delegation
📌 ID vs class
📌 Event capturing/Event bubbling
📌 HTML5 semantic elements",UNKNOWN,Brian,Jenney,1901,1901,16,7,1,0,0.01262493424513414,,2022-01-31 07:32:28,https://www.linkedin.com/feed/update/urn:li:activity:6893939033924345856
urn:li:activity:6892470069998317568,"I work with a team of developers, mostly in the beginning stages of their careers, and am consistently shocked by how much more they know than I did at that stage.

When I first started writing code, I had the confidence one can only have from being completely ignorant of all the things I did not yet know. This phenomenon is known as the Dunning-Kruger effect. 

As a newly minted Engineering Manager, I am now fully aware there are things I do not know, which I don't yet know I don't know...🤔🧐

Like most career transitions, this one has invited impostor syndrome and doubt into my head but also a lot of joy as I get to spend more of my time mentoring others and hopefully creating a culture where people feel safe and included, among all the other software-y things we need to do.

I'm curious, what are some traits of the best managers you've had? Worst?",UNKNOWN,Brian,Jenney,2145,2145,22,11,0,0,0.015384615384615385,,2022-01-27 06:15:20,https://www.linkedin.com/feed/update/urn:li:activity:6892470069998317568
urn:li:activity:6891739880595058688,"Over the weekend, a few people from LI reached out to me that are recent bootcamp grads. Like many of the conversations I have with recent grads, it centered on the big question: 

How do I get hired?

I don't pretend to have some fool-proof strategy  for landing that first role but I do have some opinions and observations that support them from working at bootcamps.

✅ Stop applying for Junior roles, only. They are highly competitive and usually mean a lowball offer.

✅ Use other platforms besides LI. Craigslist, anyone? You'd be shocked how many businesses still post CL ads for developers 🤷🏽‍♂️. Also checkout angel.co, a job board for startups.

✅ Get 500 connections on LI. It will make you more discoverable when recruiters search for developers using keywords like ""Javascript"".

✅ Don't stop coding. Keep your Github profile up to date by doing small commits regularly. A lot of employers will look at your GH history and a sharp drop in commits after graduating a program can be a red flag to many people.

✅ Remember luck plays a part in this. This is ultimately a numbers game. Don't stop playing the game until you've ""won"". The worst thing you can do is give up when things get tough.

✅ Don't do the same damn thing if it's not working. No interviews? Tweak your resume or LI profile. Remove the open to work badge maybe. Failing every interview? Invest in LC premium or AlgoExpert or a mentor to target your weak areas.

Whew... now tell me, what did I miss here? Especially if you're a recent grad that landed a role as a developer, I'm curious to hear what worked for you?",ARTICLE,Brian,Jenney,3061,3061,38,11,0,0,0.016007840574975497,,2022-01-25 05:53:49,https://www.linkedin.com/feed/update/urn:li:activity:6891739880595058688
urn:li:activity:6890279660073172992,"A few years ago I was working at a bootcamp and a student was having difficulty with JS. Don’t we all 😉? He approached me after class and I was short with him, as it had been a long day. 

He said something to the effect of, “People like you may just get this stuff, but it doesn’t come easy to people like me.”

I apologized and told him we’d work together to get him caught up. He left and I thought, I’ve done it. I’ve finally done it. I’ve successfully reinvented myself.

About 10 years ago I was doing the kind of work that you can’t put on LinkedIn… I was also deep into multiple addictions. 8 years ago, I got sober and found I had a lot of time on my hands. I filled it with code. Building janky sites and barely working apps. With a lot of support and a healthy dose of luck, I landed my first role as a developer.

Lots of coding, studying and fighting against the doubts in my head later and I somehow ended up managing a team of engineers. I can barely believe it sometimes… most times.

I don’t really like to share much about my past. What will people think of me? I wonder. But I also know that I when I read about the struggles of people in positions I aspire to, I feel less alone, like maybe it's possible for me too.

I hope if you’re struggling with addiction or a life that you’re not proud of that you read this and also feel less alone and that no matter how far down you might feel, there is a path out. 

I’m no doctor. I’m barely an engineer 😅. But I do know the struggle of sobriety, addiction and reinventing yourself. So if you want any advice or just to vent, my DM is always open.",UNKNOWN,Brian,Jenney,4992,4992,68,13,0,0,0.01622596153846154,,2022-01-21 05:11:26,https://www.linkedin.com/feed/update/urn:li:activity:6890279660073172992
urn:li:activity:6889286257571192832,"I've been very fortunate to have some great managers throughout my time as a software developer. Each one has impacted my career and outlook in a different way. While I valued their technical leadership, what I'll remember most is the critical feedback they gave me, the support they offered during personal issues, the opportunities they gave to me that were just outside my comfort zone or simply taking a chance on me.

It's easy to get caught up in the technical aspect of being part of a software team (I mean, it's a pretty technical space) but the most impactful events in my career have little to do with the code I wrote.",UNKNOWN,Brian,Jenney,1480,1480,24,3,0,0,0.018243243243243244,,2022-01-18 11:24:00,https://www.linkedin.com/feed/update/urn:li:activity:6889286257571192832
urn:li:activity:6887802540742844416,"If you're concerned with being pigeonholed as a React developer, or an Angular Developer, or a Vue developer (people use Vue right? 🤔) I would spend some time focusing on design patterns. 

For years, I worked with AngularJS. I was pretty good at it. Then I switched to Ember. I realized I wasn't so much a Javascript developer as I was an AngularJS developer... and we see where that version of Angular ended up...

I switched again to using React and Redux. More magic I struggled to understand. 

I would have had gained a quicker understanding of any of these frameworks/libraries had I studied the underlying patterns they used. Ember and the decorator pattern. Redux and the observer pattern. Angular and dependency injection. React and function composition. Vue and... whatever it uses.

If you're a JS developer (aren't we all 😉) check out this site which breaks down common design patterns in Javascript",ARTICLE,Brian,Jenney,1816,1816,15,7,1,0,0.012665198237885462,,2022-01-14 09:08:14,https://www.linkedin.com/feed/update/urn:li:activity:6887802540742844416
urn:li:activity:6887098200906457088,"The LC grind has really spawned an industry of apps and courses dedicated to teaching engineers how to pass these types of interviews. Imagine rolling into an interview for FE role, after weeks of studying heaps, graphs and DP only to be asked to re-create a debounce function 😅",UNKNOWN,Brian,Jenney,530,530,3,0,0,0,0.005660377358490566,,2022-01-12 10:29:27,https://www.linkedin.com/feed/update/urn:li:activity:6887098200906457088
urn:li:activity:6886681070876655617,"Who am I to negotiate?

This is what I was thinking after getting that first job offer as a software developer. It was surreal for me. When the recruiter called me and asked me what my ideal salary would be I gave a number so low it's laughable in retrospect. 

This number was so low in fact, that they gave me more than I asked for... it was still pretty low.

Years later, I would get an offer for double my salary! Negotiate? For What? 

I mean, who was I? Here I was, a fairly new developer, getting offered more than I'd imagined and saddled with intense self-doubt. Would they rescind the offer if I asked for more? Laugh me off the phone call? Would my expectations change with more money?

It took me about 4 years until I figured out the power of salary negotiations by taking the advice from a recruiter I was working with. It was uncomfortable and nerve-wracking. But it worked. 

Salary negotiation is an unfortunate game that too often leaves POC and women getting shorted, either from ignorance that there is a game being played, fear of rejection or of coming off as ungrateful.

You MUST negotiate. The first offer you receive is almost always lower than what is available. This is because, the company EXPECTS that you will negotiate. When you don't, you've made their job much easier and in return you've left money on the table.

Negotiating isn't always about salary either. Maybe you need an additional day to work from home. Shorter hours on a certain day of the week or a sign on bonus.

I don't care if it's your first role. Negotiate. More money than you expected? Negotiate. Don't want to negotiate? Even more important that you negotiate. 😎",UNKNOWN,Brian,Jenney,2870,2870,32,12,0,0,0.015331010452961672,,2022-01-11 06:51:55,https://www.linkedin.com/feed/update/urn:li:activity:6886681070876655617
urn:li:activity:6885335375141838848,"I've failed a lot in life and in my career so I appreciate reading the stories of people who take the chance and share those failures/setbacks publicly.

What's equally as important though, is what you learned from that failure. Whether is was a job interview or something with more dire repercussions like falling into addiction. 

It's comforting to realize others aren't impervious to moments of weakness, cracking under pressure or bombing a dozen interviews. Stories like these can make us feel less alone. What's even more valuable though, is hearing what was learned/gained after the failure.

So you failed another interview? Ok, it happens. What now? Ideally you identify an area where you need to focus. Maybe technical communication, maybe don't drink two Vietnamese Iced Coffees 😬 beforehand.

Deleted a column from a production database with no back up perhaps? Hey, haven't we all? Hopefully something was learned there. Or you're likely doomed to repeat this mistake.

Give us some insight into your failure. Help yourself (and us!) avoid the same pitfalls.",UNKNOWN,Brian,Jenney,333,333,5,0,0,0,0.015015015015015015,,2022-01-07 13:44:36,https://www.linkedin.com/feed/update/urn:li:activity:6885335375141838848
urn:li:activity:6884877543023931393,"I've probably solved more difficult coding problems by going for a run than just powering through a mental block (aka endlessly staring at the screen, coding in circles).

Apparently, there's some science to back up this hack of mine. Exercise can increase brain plasticity by stimulating growth of new connections and also decrease your stress hormones 🧐. I just know that for me, I get my best ideas when I'm sprinting around Lake Merritt.

I remember pairing with a more seasoned developer and after a day of working through an issue we could not solve he calmly said ""Let's check this out first thing in the morning. A night of sleep will probably give us the answer we need."" I nodded my head, not really convinced, but what did I know? Apparently less than him, because the next day we reconvened and solved the sh*t out of this problem. He suggested this more than a few times when he saw me struggling and generally his advice worked for me.

Whether it's a run, walk or just staring at something else for a while I suggest you <insert alternative activity here> when you're stuck on a problem.",UNKNOWN,Brian,Jenney,2145,2145,30,18,0,0,0.022377622377622378,,2022-01-06 07:25:21,https://www.linkedin.com/feed/update/urn:li:activity:6884877543023931393
urn:li:activity:6884137594884624384,"So you really want a remote job eh?

Coding in your pajamas. Snarfing burritos with your camera turned off on Zoom. Or perhaps you want to avoid mega-commutes and spend more time with your family. Whatevs.

If I were a recent bootcamp grad, I would certainly consider non-remote jobs in my search (if possible - I realize living outside tech hubs can limit this possibility). According to LinkedIn, remote jobs can get up to 2x more applicants than non-remote.

Your first job in software can be notoriously difficult to land - so instead of spinning your wheels and courting luck by applying to highly competitive remote roles, FAANG and FAANG adjacent companies, try for non-tech companies and non-remote roles.

I listen to people who I consider to be smart, in the hopes I can perhaps be as smart as them one day. One of these smart people told me that your first job is just preparation for your second job, the one you really want.",UNKNOWN,Brian,Jenney,1396,1396,20,4,0,0,0.017191977077363897,,2022-01-04 06:25:03,https://www.linkedin.com/feed/update/urn:li:activity:6884137594884624384
urn:li:activity:6882333055856574464,"Can you be just an average #softwareengineer as a POC (person of color)?

I would hope so.

There is a prevalent feeling though, from many of the developers I've spoken with (and that I share) that as POC in software development and often the only <insert ethnicity/gender here> on a team, you must go above and beyond. You need to continually prove you belong. 

Let me paint a scenario for you: you're already dealing with the regular flavor of impostor syndrome just being a developer or joining a new team and to top it off you're worried that any mistake will now label you as a ""diversity hire."" Ahh - that's how they got this job, your co-workers will think.

It's also just harder to hide during meetings. You inevitably stand out. And you're acutely aware of this fact. You feel like your silence is magnified. Loud silence... 😅 

Is this paranoia? Perhaps (though if you read through the comments on Blind app... maybe not 😬). Do more of your black/brown/other coworkers feel like this than you may be aware of? Based on the conversations I've had over they years... absolutely.",UNKNOWN,Brian,Jenney,829,829,10,0,0,0,0.012062726176115802,#softwareengineer ,2021-12-30 06:54:28,https://www.linkedin.com/feed/update/urn:li:activity:6882333055856574464
urn:li:activity:6881254544643366912,"Do you need to have a side project as a software engineer?

Well, like most things in life... it depends.

I recommend anyone that wants to expand their toolset and knowledge outside of what is offered at their current role, take on a side project. Ideally one that uses some technology, language, or framework that you haven't been exposed to.

I started writing code about 7 years ago using .NET, C#, SQL and #angularjs . And I thoroughly enjoyed it... don't judge me.

But, I kept hearing rumblings about this framework, ReactJS. Surely it will fade into obscurity I thought. AngularJS being a superior framework and all. 

Plot twist. ReactJS blows up and Angular make a clean break from AngularJS to release Angular as we now know it. 

I was working on a side project at the time and decided to try #reactjs out. Hated it. Props, class based components and a large mental shift AngularJS's two-way data binding. 

I slogged through the project and developed a liking to React and even Redux as I learned more. 

Despite not having any professional experience with ReactJS I was able to land a role at a company using it because of the knowledge I had acquired from building that janky web app.

Side projects can give you an outlet to learn things you just won't get exposed to during the course of a work day and offer fresh perspective to problems you're likely to encounter as a developer. They don't have to be polished or go into your portfolio or resume either... just build something.",UNKNOWN,Brian,Jenney,999,999,9,0,0,0,0.009009009009009009,"#angularjs ,#reactjs ",2021-12-27 07:28:50,https://www.linkedin.com/feed/update/urn:li:activity:6881254544643366912
urn:li:activity:6879789086232719361,"I know we're all supposed to love remote work. Flexibility! No commute! Work in your pikachu onesie! Yeah!!!

BUT, it can be tough. For many people, being physically isolated can feel, well, isolating. Collaboration has to be more intentional. You can't just walk to Jessica or Bobert's desk and ask for help or to review some code you just wrote.

For junior developers, how do you stand out on a remote team? At an office, just showing up early and leaving late can give people the impression that you are a hard worker and during meetings, simply being there and nodding your head can show sufficient engagement.

On a remote team here a few very simple things you can do to make yourself visible:

Err on the side of having your camera on - people convey a lot of emotion through facial expressions. This is especially important if you don't speak very often.

Write things in Slack (or whatever your team uses)! Give updates, offer to help publicly, give praise publicly and share information like interesting articles or reports.

Nervous about speaking in meetings? Yeah, me too 🤫 - so start with a question. Have a question you've written down during the meeting that you're curious about and simply ask it. This is a great first step to being more involved in meetings and getting comfortable speaking.

I'm curious what other remote work tricks/tips have you found to be most helpful during this sh*t-show of a year 🧐?",UNKNOWN,Brian,Jenney,860,860,14,0,0,0,0.01627906976744186,,2021-12-23 06:25:38,https://www.linkedin.com/feed/update/urn:li:activity:6879789086232719361
urn:li:activity:6879432225880969216,"Most of my growth as a software developer came from critical feedback and making BIG mistakes. I can point to inflection points in my career so far and the failures/mistakes I made that shaped me. 

I've released software that crashed on its first day. Missed glaring issues during code reviews, not quite understood how some data structure was used and subsequently wrote a line of code that accidentally sent thousands of emails to customers... oops 😅.

Each of these failures offered me a lesson on what NOT to do and areas where I needed to improve. I stopped treating code reviews as an afterthought, I spoke up when I didn't understand something and started writing tests for my code, among other things.

As a junior (or not so junior) developer you're likely going to make a few high profile mistakes. After the embarrassment has subsided, don't retreat and play it safe by only taking on assignments you KNOW you can complete. Learn, f*ck up and repeat.",UNKNOWN,Brian,Jenney,1594,1594,27,2,1,0,0.018820577164366373,,2021-12-22 06:47:36,https://www.linkedin.com/feed/update/urn:li:activity:6879432225880969216
urn:li:activity:6878726440930676736,"Should you be using the open to work badge?

I'm sure LinkedIn would disagree with me, but if I was looking for a job as a #juniordeveloper, I'd remove it.

Why? Well, people are biased. We make assumptions. I wouldn't want to offer potential employers a reason to question my skills or talent. An open to work badge tells people that you aren't currently working (maybe even if you are) and paradoxically, recruiters tend to reach out to people that are already employed 🤷🏽‍♂️.

Depending on who you ask, the badge can make you more discoverable to people that are hiring or it can be a detriment in your search.

Like any good developer, do some A/B testing on this feature and see how much traction you get with and without the badge. 

You can also use your settings to make yourself ""available"" to recruiters and your headline is searchable as well, so adding keywords and top skills in there will make you more discoverable to recruiters and hiring managers... without a large badge telling the world that you need work.

If you're a recruiter, I'd love to hear your candid feedback on the open to work badge, specifically as it relates to junior developers looking for their first or second role.",UNKNOWN,Brian,Jenney,847,847,5,0,1,0,0.0070838252656434475,"#juniordeveloper,",2021-12-20 08:03:04,https://www.linkedin.com/feed/update/urn:li:activity:6878726440930676736
urn:li:activity:6877652254707499008,"Too many people are under the impression that writing code is the only entry path into tech. I've talked to more than a few developers who have graduated from bootcamps, landed jobs... and hate what they do 😿.

Writing code can be tedious and stressful and that massive dopamine hit that most of us get from solving problems and learning new concepts can push us through the not so fun parts of the job. If you're not getting that rush or satisfaction, I can only imagine how you feel staring at code all day long... and then having to study for interviews or the new framework the VP wants to use...

Luckily, there are other bootcamp style programs out there teaching product management, UX/UI design, sales, and engineering-adjacent skills (that can often pay at or above eng roles 😉).",UNKNOWN,Brian,Jenney,326,326,4,0,1,0,0.015337423312883436,,2021-12-17 08:54:38,https://www.linkedin.com/feed/update/urn:li:activity:6877652254707499008
urn:li:activity:6877336438422286336,"Before you create that weather app, todo list, or that movie finder app... hear me out.

If you really want to stand out, or better yet, challenge yourself with a project that will expose you to some concepts you may not be familiar with - I'd suggest creating an NPM library that exposes some UI components or useful helper functions (e.g. lodash). Publish this library with a useful README and then learn how to link it into an npm project.

Finally, write a small article about it. Then make that todo-list or burrito-finder app you had in mind 😉.",UNKNOWN,Brian,Jenney,716,716,10,2,0,0,0.01675977653631285,,2021-12-16 11:59:41,https://www.linkedin.com/feed/update/urn:li:activity:6877336438422286336
urn:li:activity:6876624027209785344,"So yes, your bootcamp is likely using creative math to come up with those employment numbers. When's the last time you saw a bootcamp with <90% placement rate? ... 🧐

Lambda School most recently got shamed for inflating their own employment numbers by double but I'd bet you a year's worth of burritos they're not the only ones doing this.

I've worked at a few bootcamps and I'm sorry to say that according to my back of the envelope calculations, a little less than 50% of all grads I've followed have landed full time roles as software developers.

Should this discourage you from attending a bootcamp? Absolutely not! These creative numbers are marketing tactics at best and misleading at worst. The knowledge you receive from a good program is still valuable whether or not you get hired in 1 month or 1 year after graduating.

Your timeline and experience finding employment will ultimately be unique to you and influenced by luck, economic health, your tenacity and technical aptitude despite any ""statistics"" leading you to believe otherwise.",UNKNOWN,Brian,Jenney,605,605,10,0,1,0,0.01818181818181818,,2021-12-14 12:48:49,https://www.linkedin.com/feed/update/urn:li:activity:6876624027209785344
urn:li:activity:6875126838751043584,"Stability is a myth.

The pandemic has exposed the illusion of job security that many of us (me included) believed in.

It's not just the small startups that are ruthlessly cutting people from their real-time-burrito-finder app team (hmm, maybe I should look int this actually 🤔) but major corporations slashing entire departments at the drop of a hat. 

It can be jarring to realize that your job is never truly secure, especially during catastrophic external events, but armed with this realization it might be wise to stop chasing ""stable"" jobs and companies and instead invest in yourself with the same vigor that companies are investing in themselves... this way you'll be in a more enviable position when/if you find yourself on the wrong end of one of those dreaded zoom calls.",UNKNOWN,Brian,Jenney,2241,2241,20,8,1,0,0.012940651494868362,,2021-12-10 09:39:32,https://www.linkedin.com/feed/update/urn:li:activity:6875126838751043584
urn:li:activity:6874809838338240512,"If you're doing interview prep you probably notice that most products are geared towards data structures and algorithms. LeetCode amirite?

It's really refreshing to see AlgoExpert offer a front end focused track for software engineers preparing for interviews.

I was a bit skeptical at first.

How the heck are they going to choose problems that cover concepts like closure, binding and DOM manipulation?

Well, I was pleasantly surprised! Thanks Clement Mihailescu! This is definitely my favorite tool for interview prep and refreshing a lot of front end concepts I THOUGHT I had down!",UNKNOWN,Brian,Jenney,74982,74982,208,17,1,0,0.0030140567069429996,,2021-12-09 12:39:53,https://www.linkedin.com/feed/update/urn:li:activity:6874809838338240512
urn:li:activity:6862109146783850496,"The interview process is BROKEN! 

At least that's what I'm hearing from a lot of you out there on LI.

I see/hear/experienced a lot of issues with the current interview trend of focusing on DS/A and the growth of startups and programs dedicated to preparing engineers for these LC-style interviews is testament to their popularity. Or perhaps the perception of it.

So I have to ask - what interview format do you prefer? 

Build something in front of people?
Standard LC type questions?
Take home project?
Pair with another person on a typical work task?
Eng trivia (ex - explain the concept from x language?)
Other?

#softwareengineer #interview #leetcode #datastructures #interviewprocess",UNKNOWN,Brian,Jenney,2820,2820,11,8,0,0,0.00673758865248227,"#softwareengineer ,#interview ,#leetcode ,#datastructures ,#interviewprocess",2021-11-04 12:31:52,https://www.linkedin.com/feed/update/urn:li:activity:6862109146783850496
urn:li:activity:6853806900576972800,"Like many software engineers, I've become a bit obsessed with the trend of #leetcode style interviews that seem to have taken over and maybe you have too. I would only caution that many companies will NOT use this style of interview and if you're a front end developer especially, it's worth familiarizing yourself with some of the most common questions you're likely to see in an interview for a #javascript focused role:

* what is closure? 
* bind, call and apply - differences and how to use
* what is this?
* map, filter, reduce - differences and how to use
* let vs const

Bonus:
* create a React component that fetches data and displays it in a pleasant way (it's always React... who is using Vue... I'll wait) - how many times have you seen some variation of this exercise?

While you're inverting all those binary trees, don't forget to you know, actually learn how to code and stuff 😉",UNKNOWN,Brian,Jenney,4878,4878,23,4,1,0,0.005740057400574006,"#leetcode ,#javascript ",2021-10-12 14:41:42,https://www.linkedin.com/feed/update/urn:li:activity:6853806900576972800
urn:li:activity:6844793908229222400,"As developers we spend a lot of time studying and worrying about interviews, especially the leetcode style process which it seems a large portion of the industry has standardized on... but what about the interviewers?

A good interviewer can help lead a candidate to the correct solution through a collaborative exercise and learn what it might truly be like to work with them. Meanwhile, a not so stellar interviewer may be completely silent, or worse, discourage an interviewee from a working solution that doesn't fit their ideal - potentially turning down a perfectly suitable candidate or discouraging them from joining based on their experience.

The cost of the bad interviewer is significantly higher than the cost of interviewing the poorly prepared candidate. With so much emphasis being given to DS/A prep it feels like we should be reading more articles about how companies plan to standardize on the expectations for the person at the other end of the table or screen. #interviewing #leetcode #softwaredevelopment",UNKNOWN,Brian,Jenney,1655,1655,20,3,0,0,0.013897280966767372,"#interviewing ,#leetcode ,#softwaredevelopment",2021-09-17 17:47:17,https://www.linkedin.com/feed/update/urn:li:activity:6844793908229222400
urn:li:activity:6843898901938999296,"There are so many articles out there describing how to become a #seniordeveloper but at the end of the day it's simply a title - one that can mean wildly different things depending on the company. 

I've worked with senior devs who were the most technically skilled on the team and others who weren't code wizards but had leadership and project management skills. 

One underrated skill that I've noticed in every senior dev I've admired is their ability to quickly debug issues and find the root cause. In my mind this is what truly separates a senior dev on the team. Uh oh, site's down, <insert senior dev name here>, can you check it out?

Humans are weird, we don't remember all the good things that happen to us as well as we remember the negative. So that feature you shipped that didn't break may not stand out as much as the time a feature stopped working and you fixed it under pressure. While you're advancing your coding skills, don't forget to sharpen your #debugging skills and take those opportunities to jump into critical bugs when they pop up.",UNKNOWN,Brian,Jenney,1044,1044,20,6,0,0,0.02490421455938697,"#seniordeveloper ,#debugging ",2021-09-15 06:30:51,https://www.linkedin.com/feed/update/urn:li:activity:6843898901938999296
urn:li:activity:6839609924482416640,"Every day I read posts from #bootcamp grads who have applied to 100 or more roles with no luck. While I do believe that getting that first role is a bit of a numbers game - I also think you should treat your resume/LinkedIn as an experiment.

If your resume is getting no bites, switch it up... dramatically even.  I remember using 3 separate resumes at one point, a very quirky one with nice graphics and more personal information, a traditional one with little formatting and another that was a combination of the former.

I'm pretty embarrassed of that quirky resume and cover letter I wrote back then but it seemed to get more traction than the other ""safer"" ones and I never would have tried that if it hadn't been for a mentor that pushed me out of my comfort zone. 

Run some A/B tests on your job search and see if any trends emerge... what's that saying about trying the same thing over and over and expecting different results 🧐 

If you have an interesting approach to your #jobsearch as a #softwaredeveloper that worked please share it and hopefully it helps others.",UNKNOWN,Brian,Jenney,1573,1573,28,6,0,0,0.02161474888747616,"#bootcamp ,#jobsearch ,#softwaredeveloper ",2021-09-03 10:27:59,https://www.linkedin.com/feed/update/urn:li:activity:6839609924482416640
urn:li:activity:6837097996568657920,"As new developers, we're often so focused on just getting hired that we forget how much effort and work awaits us when we start writing code professionally. Getting hired is really step 0. There are unspoken rules, jargon and tools that more experienced people often take for granted and that can be intimidating when you land your first role.

So many acronyms. So many ticket numbers.

I distinctly remember my first stand-up meeting and hearing people rattle off ticket numbers and the work they were doing. It was complete gibberish to me and I damn near choked when it was my turn to speak 😓. I think my voice may have actually cracked 😬.

For all you recent #frontenddeveloper and #fullstack hires, especially those that graduated from a bootcamp, what has been a skill or area of #webdevelopment you wish you were more familiar with that wasn't fully covered in your education?",UNKNOWN,Brian,Jenney,557,557,9,2,0,0,0.019748653500897665,"#frontenddeveloper ,#fullstack ,#webdevelopment ",2021-08-27 12:06:29,https://www.linkedin.com/feed/update/urn:li:activity:6837097996568657920
urn:li:activity:6835928661275873280,"Looking to stand out as a new #developer on a team or as a #juniordeveloper? Speak.

I spent the first 3 years of my career in software writing code. Makes sense I guess, that's what I was paid for. I wrote good code overall, fixed a lot of critical issues and didn't drop (m)any databases in production.

During meetings regarding architectural or technical discussions, I'd often just sit and let the senior devs in the room figure it out. I mean what did I know?

Then, at a small startup, one of the founders called me out during a 1 on 1. Why do you never share your ideas he asked? I was caught off guard and didn't really have any reason beyond my fear that I'd be judged harshly or didn't have anything to add. He told me that even bad ideas can help ignite a discussion 🤔.

I made a goal to speak more after that meeting and I noticed how my career accelerated over the years after taking that advice. I'm rarely the smartest person in the room but I've grown more comfortable speaking even though it can still be a bit uncomfortable TBH. 

In the age of remote work, it's easy to get lost in code and play a background position on your team... that's OK too. If you DO want to grow into a leadership or senior position I totally think you should share that dumb idea/question you're contemplating during the next zoom meeting 😉",UNKNOWN,Brian,Jenney,2513,2513,80,8,3,0,0.036211699164345405,"#developer ,#juniordeveloper?",2021-08-24 06:39:58,https://www.linkedin.com/feed/update/urn:li:activity:6835928661275873280
urn:li:activity:6834545556812124160,"If you're a developer on the job hunt with no prior experience I have a bit of a hot take on how to supplement your experience...

Get some experience!

Your mom, aunt, cousin or acquaintance either has a website or wants a website for their business. Likely a simple one but they don't know where to start or have the budget. This is where you come in. 

Create this site for them (for an unbeatable price), deploy it on the web-o-sphere and now you are a Freelance Developer. Do this a couple times and now you have some real experience to speak about during an interview which includes working with clients and more importantly deploying code to a live site. 

""Freelance Developer"" is now your most current role and recruiters will be less confused when they see you applying for a tech role than if your last job was something completely unrelated to tech.

#softwareengineer #jobhunting #bootcamp",UNKNOWN,Brian,Jenney,1924,1924,37,2,1,0,0.02079002079002079,"#softwareengineer ,#jobhunting ,#bootcamp",2021-08-20 11:04:00,https://www.linkedin.com/feed/update/urn:li:activity:6834545556812124160
urn:li:activity:6833388223960633344,"The interview process is broken! When will I ever have to convert a binary tree to a linked-list on the job?! So unfair aaarrgghhh!

Well, however you feel about the Leetcode-style interview that has become increasingly common, if you don't want to limit your prospects as a #softwareengineer it's in your best interest to study common  #algorithms and #datastructures.

I was awful at these interviews years ago... I mean, really bad. I spent lots of time on sites like #leetcode and bought programs to understand the most common problems I would encounter during interviews. 

My original goal was just to feel more confident during interviews but I also improved my knowledge of computer science fundamentals. I gained a deeper understanding of the performance effects of the code I wrote and my work improved.

I would advise anyone interviewing (or who wants to improve the CS fundamentals) to add sites like #leetcode into their routine. Solve a couple problems a week and when you get stuck read articles walking through solutions.

BTW, could totally turn that binary tree to a linked-list now 👋",UNKNOWN,Brian,Jenney,4081,4081,58,16,0,0,0.018132810585640775,"#softwareengineer ,#algorithms ,#datastructures.,#leetcode ,#leetcode ",2021-08-17 06:25:10,https://www.linkedin.com/feed/update/urn:li:activity:6833388223960633344
urn:li:activity:6830856806089269248,"Am I supposed to know this? 

Over the years, I've become more comfortable exposing my ignorance but as a #juniordeveloper and in a #remote world - speaking up to admit you don't know something or are not familiar with some particular acronym can be a nerve-wracking task. What will they think of me? Am I the only one who doesn't know this? 

If you are junior dev (or a human with a question), I'd challenge you to ask that question you think you're supposed to know next time you're in a meeting or slack thread. Your team mates will almost certainly appreciate it (they're thinking the same thing) and appreciate your honesty. Often these questions are the best way to spread knowledge across the team and surface shared misunderstandings. If nothing else, it gives you an opportunity to speak up and show engagement.",UNKNOWN,Brian,Jenney,2272,2272,38,13,0,0,0.02244718309859155,"#juniordeveloper ,#remote ",2021-08-10 06:46:13,https://www.linkedin.com/feed/update/urn:li:activity:6830856806089269248
urn:li:activity:6828672397550469122,"Just for the record - I don't dislike bootcamps. Far from it. I've used 3 bootcamps style programs over the years to supplement my skills with great results. 

The only thing that boils my potato is the rising cost of these programs and the inflated promises. I distinctly remember pulling up to the gas station and performing all sorts of mental math to determine how much I could fill up my tank and still afford food for the week. Affording a bootcamp nowadays would be almost entirely out of the question for me back then.

I've written a non-comprehensive study path that I've shared with friends and family who are interested in learning  #frontenddevelopment - whether you are currently in a #bootcamp or a recent graduate - you might find this helpful:",ARTICLE,Brian,Jenney,4081,4081,50,22,5,0,0.018867924528301886,"#frontenddevelopment ,#bootcamp ",2021-08-04 06:06:10,https://www.linkedin.com/feed/update/urn:li:activity:6828672397550469122
urn:li:activity:6828339675866955778,"I love when people DM me here for advice or just to vent (about software stuff, not like your dog or weird stuff)... lately, I've received a couple messages from people that have entered into the field of #softwaredevelopment to learn that they actually uhh, don't like coding so much... oops. 

I'm not against bootcamps at all but I do think they sell financial freedom packaged as a career in software. There's nothing wrong with wanting money but I'd argue there are other ways to get it besides writing code. Anecdotally, the most successful engineers I've met over the years have thoroughly enjoyed what they do. 

Before you take spend upwards of 10k on a #coding #bootcamp I'd really suggest you take a class on #codecademy or get a code editor and learn some code on your own. 

A career in software means a career of constant study, learning new skills and being curious. If you want my hot take on bootcamps or career advice just hit my DM  ;)",UNKNOWN,Brian,Jenney,3858,3858,63,15,0,0,0.02021772939346812,"#softwaredevelopment ,#coding ,#bootcamp ,#codecademy ",2021-08-03 08:04:03,https://www.linkedin.com/feed/update/urn:li:activity:6828339675866955778
urn:li:activity:6810981548695916544,"Great seeing Zignal Labs in the news combatting medical disinformation. Watching this piece on CBS and seeing a chart I worked on while on the team brought back some fond memories and also the stress of learning #d3js ... so many charts
https://lnkd.in/gBWimwr",IMAGE,Brian,Jenney,1332,1332,34,2,1,0,0.027777777777777776,#d3,2021-06-16 10:29:03,https://www.linkedin.com/feed/update/urn:li:activity:6810981548695916544
urn:li:activity:6802226486033182720,"And here I thought I was imagining things... hopefully this translates to more opportunities for junior developers as companies struggle to find and retain seniors - and maybe, just maybe less 8 hour take home challenges 🤞",UNKNOWN,Brian,Jenney,1023,1023,9,2,0,0,0.010752688172043012,,2021-05-23 06:39:33,https://www.linkedin.com/feed/update/urn:li:activity:6802226486033182720
urn:li:activity:6793928549993721856,Guess you could say I'm a little biased but this is truly a great place to work where you can have a serious and immediate impact. If you are a #seniorsoftwareengineer check out the posting below for #clorox  ,UNKNOWN,Brian,Jenney,380,380,5,0,0,0,0.013157894736842105,"#seniorsoftwareengineer ,#clorox ",2021-04-30 09:06:31,https://www.linkedin.com/feed/update/urn:li:activity:6793928549993721856
urn:li:activity:6783585051138494464,"A student reached out to me and asked if there was something about software development which might surprise people. I answered that people underestimate the stress accompanied with writing code for a living. Whether it's being on call and getting woken up in the middle of the night to patch a critical bug or doing a deployment only to discover bugs in production that need to be fixed or rolled back, 
the code we write often has real life consequences ranging from loss of revenue for a company or at worst, loss of life. 

I don't mean to discourage anyone from pursuing a career in software. Stress will be in your life either way and the feeling of excitement from solving mission critical issues is a high that is hard to describe to others, but at the same time, I wouldn't expect a new career as a dev to be all foosball tables and LaCroix. #softwaredevelopment #workstress ",UNKNOWN,Brian,Jenney,914,914,20,1,0,0,0.022975929978118162,"#softwaredevelopment ,#workstress ",2021-04-01 20:05:08,https://www.linkedin.com/feed/update/urn:li:activity:6783585051138494464
urn:li:activity:6780843095463489536,"I've been doing WFH in some form for the last few years, but it definitely didn't come as naturally as all the WFH advocates would have you believe. In fact, I felt pretty isolated and like I wasn't making an impact. WFH is a skill like any other and takes some thought to not suck at it. #wfh2021 #wfhlife #softwareengineer ",ARTICLE,Brian,Jenney,3229,3229,44,14,5,0,0.019510684422421803,"#wfh2,#wfhlife ,#softwareengineer ",2021-03-25 06:29:35,https://www.linkedin.com/feed/update/urn:li:activity:6780843095463489536
urn:li:activity:6765282352575971328,I see you. Adding all those console logs in your code. If you're using VS Code and NodeJS there's a better way. #javascript #nodejsdevelopers #vscode ,ARTICLE,Brian,Jenney,596,596,10,0,0,0,0.016778523489932886,"#javascript ,#nodejsdevelopers ,#vscode ",2021-02-10 06:56:45,https://www.linkedin.com/feed/update/urn:li:activity:6765282352575971328
urn:li:activity:6763098666279550976,"Have you ever released a feature only to find out something was missing? The JIRA board says the ticket is done, the developer says it's been merged but it's just not showing up?! 

Turns out it was still un-merged.. oops. Humans can make mistakes.

For releases at Clorox DTC we use a small script to help us verify what is going in each release branch in addition to all the wonderful humans that help test and mange it. 

Maybe this small script will help you as well:
#releasemanagement #github #bitbucket #clorox ",ARTICLE,Brian,Jenney,467,467,6,3,0,0,0.019271948608137045,"#releasemanagement ,#github ,#bitbucket ,#clorox ",2021-02-04 06:19:34,https://www.linkedin.com/feed/update/urn:li:activity:6763098666279550976
urn:li:activity:6757810924415004672,,UNKNOWN,Brian,Jenney,139,139,2,0,0,0,0.014388489208633094,,2021-01-20 16:07:58,https://www.linkedin.com/feed/update/urn:li:activity:6757810924415004672
urn:li:activity:6757003367790325760,Wow! This is one of those rare opportunities to attend a well respected bootcamp for free + housing expenses!,UNKNOWN,Brian,Jenney,391,391,2,1,0,0,0.0076726342710997444,,2021-01-18 10:39:01,https://www.linkedin.com/feed/update/urn:li:activity:6757003367790325760
urn:li:activity:6745755529978748928,,UNKNOWN,Brian,Jenney,72,72,0,0,0,0,0,,2020-12-18 09:44:08,https://www.linkedin.com/feed/update/urn:li:activity:6745755529978748928
urn:li:activity:6743532253290348544,"I know there are a lot of junior developers out there looking to get their first break. But who says your first nickel earned from writing code has to be at a traditional workplace? 
#juniordeveloper #jobseekers #javascript",ARTICLE,Brian,Jenney,3193,3193,32,3,4,0,0.012214218603194488,"#juniordeveloper ,#jobseekers ,#javascript",2020-12-12 06:29:37,https://www.linkedin.com/feed/update/urn:li:activity:6743532253290348544
urn:li:activity:6735207184168308736,,UNKNOWN,Brian,Jenney,42,42,0,0,0,0,0,,2020-11-19 07:08:46,https://www.linkedin.com/feed/update/urn:li:activity:6735207184168308736
urn:li:activity:6734228676608712704,Great opportunity for a recent #devops #devopsengineer ,UNKNOWN,Brian,Jenney,573,573,5,0,0,0,0.008726003490401396,"#devops ,#devopsengineer ",2020-11-16 14:20:32,https://www.linkedin.com/feed/update/urn:li:activity:6734228676608712704
urn:li:activity:6732435018876108800,,UNKNOWN,Brian,Jenney,127,127,1,0,0,0,0.007874015748031496,,2020-11-11 15:33:11,https://www.linkedin.com/feed/update/urn:li:activity:6732435018876108800
urn:li:activity:6725812960289271808,Our #devteam at #clorox uses #microservicesarchitecture  to create store fronts for different brands to sell products. While there are a lot of articles exploring using shared component libraries for #microfrontends to leverage re-usable components what about shared state? #reduxjs ,ARTICLE,Brian,Jenney,345,345,11,0,0,0,0.03188405797101449,"#devteam ,#clorox ,#microservicesarchitecture ,#microfrontends ,#reduxjs ",2020-10-24 09:59:29,https://www.linkedin.com/feed/update/urn:li:activity:6725812960289271808
urn:li:activity:6721455203821895680,"Our dev team at #clorox has started doing small coding challenges on Fridays, with the intent to help our team keep our skills sharp and take a little break from work-related tasks. 

Last Friday our VP Joey Shakespeare raised the stakes with a cash prize which David Hebert won! 

So far, we've been tackling LeetCode style questions but I'm curious about any challenges you have encountered which might be of interest to #javascript focused developers that can be completed within about an hour 🤔 - please share!",UNKNOWN,Brian,Jenney,1476,1476,24,2,0,0,0.017615176151761516,"#clorox ,#javascript ",2020-10-12 09:23:19,https://www.linkedin.com/feed/update/urn:li:activity:6721455203821895680
urn:li:activity:6717620835219329024,"A couple days ago, someone on LI messaged me and shared their feelings of #impostersyndrome after graduating from a bootcamp and landing their first role in software. 

""Fake developer,"" he said. That phrase pretty accurately describes how I felt too, sometimes how I feel now (shh, don't tell anybody). I vividly remember the first couple years of getting paid to write code, wondering when/if I would be fired. 

To my surprise, almost 6 years later, I'm still here and feeling a little less fake each year. 

Cheers to all you fake #software devs out there, you're not alone and hopefully that big voice of doubt in your head will get a little smaller with each bug you squash, problem you solve and on-call rotation you survive.",UNKNOWN,Brian,Jenney,1842,1842,39,5,0,0,0.023887079261672096,"#impostersyndrome ,#software ",2020-10-01 19:26:54,https://www.linkedin.com/feed/update/urn:li:activity:6717620835219329024
urn:li:activity:6714945037274378240,For the first two years of my career as a #softwareengineer I wrote exactly 0 tests... shame on me. If you're new to writing tests and using React hopefully this will help you write your first non-trivial test #react #testingtools #javascript ,ARTICLE,Brian,Jenney,859,859,25,2,1,0,0.03259604190919674,"#softwareengineer ,#react ,#testingtools ,#javascript ",2020-09-24 10:14:14,https://www.linkedin.com/feed/update/urn:li:activity:6714945037274378240
urn:li:activity:6705186535375024128,Just joined this team recently and really enjoying it! Check out the job description below and see if you might be a good fit:,UNKNOWN,Brian,Jenney,139,139,2,0,0,0,0.014388489208633094,,2020-08-28 11:57:26,https://www.linkedin.com/feed/update/urn:li:activity:6705186535375024128
urn:li:activity:6696761009262202880,"If there any junior #devops looking for an opportunity, you should check this out:",UNKNOWN,Brian,Jenney,152,152,4,0,0,0,0.02631578947368421,#devops ,2020-08-05 05:57:24,https://www.linkedin.com/feed/update/urn:li:activity:6696761009262202880
urn:li:activity:6692526027316572160,"I was reading CNN last night and stumbled on this interview where Anderson Cooper mentions Zignal Labs! While I'm excited for my next opportunity, I'm also sad to leave this place and really proud to say I worked here! #zignallabs #misinformation ",UNKNOWN,Brian,Jenney,310,310,7,0,0,0,0.02258064516129032,"#zignallabs ,#misinformation ",2020-07-24 13:29:06,https://www.linkedin.com/feed/update/urn:li:activity:6692526027316572160
urn:li:activity:6689289124274429952,"So many self taught coders and bootcamp grads shy away from the #leetcode grind, and while I agree that there's too much emphasis on learning obscure #algorithms you will likely never use for the sake of interviews, the problem solving aspect of figuring out these coding puzzles offers a lot of benefits... also, #interviews ;)-",ARTICLE,Brian,Jenney,1128,1128,19,4,1,0,0.02127659574468085,"#leetcode ,#algorithms ,#interviews ",2020-07-15 15:06:48,https://www.linkedin.com/feed/update/urn:li:activity:6689289124274429952
urn:li:activity:6679102593416998912,If you’re a former student of mine or someone looking for mentorship as you begin your journey towards #softwaredevelopment this is a very gracious and valuable offer from a seasoned developer/eng manager =>,UNKNOWN,Brian,Jenney,392,392,6,0,0,0,0.015306122448979591,#softwaredevelopment ,2020-06-17 12:29:09,https://www.linkedin.com/feed/update/urn:li:activity:6679102593416998912
urn:li:activity:6676844980029530112,I hear a lot in tech that it’s hard to find “diverse” candidates - luckily these people have done it for you:,UNKNOWN,Brian,Jenney,109,109,5,0,0,0,0.045871559633027525,,2020-06-11 06:58:13,https://www.linkedin.com/feed/update/urn:li:activity:6676844980029530112
urn:li:activity:6669687789698859008,"I've heard more conspiracy theories from people I know than I ever expected. The misinformation/disinformation about this pandemic is pretty extraordinary. 

Check out this piece from Adweek, which uses insights from Zignal Labs to explore how online #misinformation around #COVID-19 is impacting our world.",ARTICLE,Brian,Jenney,91,91,0,0,0,0,0,#misinformation ,2020-05-22 12:58:05,https://www.linkedin.com/feed/update/urn:li:activity:6669687789698859008
urn:li:activity:6669604827959451648,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-05-22 07:28:26,https://www.linkedin.com/feed/update/urn:li:activity:6669604827959451648
urn:li:activity:6659592480952066048,,UNKNOWN,Brian,Jenney,50,50,0,0,0,0,0,,2020-04-24 16:22:56,https://www.linkedin.com/feed/update/urn:li:activity:6659592480952066048
urn:li:activity:6659473301934608384,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-04-24 08:29:22,https://www.linkedin.com/feed/update/urn:li:activity:6659473301934608384
urn:li:activity:6654797548475285504,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-04-11 10:49:35,https://www.linkedin.com/feed/update/urn:li:activity:6654797548475285504
urn:li:activity:6649442683389648897,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-03-27 16:11:16,https://www.linkedin.com/feed/update/urn:li:activity:6649442683389648897
urn:li:activity:6647877569087705090,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-03-23 08:32:04,https://www.linkedin.com/feed/update/urn:li:activity:6647877569087705090
urn:li:activity:6646071187896172545,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-03-18 08:54:09,https://www.linkedin.com/feed/update/urn:li:activity:6646071187896172545
urn:li:activity:6644268664851968000,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-03-13 09:31:34,https://www.linkedin.com/feed/update/urn:li:activity:6644268664851968000
urn:li:activity:6639217858050162688,"Why does every third article on finding your first job as a software developer suggest sending baked pastries to potential employers? This isn’t a bad idea but you’re gonna need more than donuts to get a foot in the door. Mmmm, donuts.

I know a lot of students I’ve worked with over the years are in various stages of the job search. Hopefully this gives you some practical advice you can use on your journey.

https://lnkd.in/gJWpwdX",UNKNOWN,Brian,Jenney,1733,1733,21,14,1,0,0.0207732256203116,,2020-02-28 10:01:27,https://www.linkedin.com/feed/update/urn:li:activity:6639217858050162688
urn:li:activity:6636683756134641664,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-02-21 10:11:50,https://www.linkedin.com/feed/update/urn:li:activity:6636683756134641664
urn:li:activity:6631397846719565824,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-02-06 20:07:31,https://www.linkedin.com/feed/update/urn:li:activity:6631397846719565824
urn:li:activity:6626961494523412480,"I'm always impressed by the #30days of coding challenges I see floating all over LinkedIn where developers make 30 small projects in 30 days. It also reminds me of the importance of having a #sideproject. My side project actually helped me land my current job. I wanted to learn React, NodeJS and MongoDB so I used them in a side-project/start-up project with the intention of taking these new skills to my next role. Before this I was using #angularjs (don't hate) Ember, Rails, SQL and C#. I use exactly 0% of these skills in my new job but 102% of the technologies I used in my side project project are in my daily stack at work (I' m no mathematician, so these figures may not be accurate). 

While the #30daychallenge for coding is a great idea, I think there's a lot to be said for taking on a larger project to really internalize some of the concepts and frameworks which take longer than a day. 

 ",UNKNOWN,Brian,Jenney,2351,2351,29,6,0,0,0.014887282007656316,"#sideproject.,#angularjs ",2020-01-25 14:19:03,https://www.linkedin.com/feed/update/urn:li:activity:6626961494523412480
urn:li:activity:6623688629611040768,Zignal is a really great place to work that I’d recommend to anyone. If you’re a senior #scala person (or senior <insert backend language here> person) interested in joining the platform team this open position may interest you  #backend  #developer,UNKNOWN,Brian,Jenney,288,288,8,0,0,0,0.027777777777777776,"#scala ,#backend ,#developer",2020-01-16 13:33:51,https://www.linkedin.com/feed/update/urn:li:activity:6623688629611040768
urn:li:activity:6623269032005111808,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-01-15 09:46:31,https://www.linkedin.com/feed/update/urn:li:activity:6623269032005111808
urn:li:activity:6621396969254457344,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2020-01-10 05:47:37,https://www.linkedin.com/feed/update/urn:li:activity:6621396969254457344
urn:li:activity:6608396386008473600,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2019-12-05 08:47:56,https://www.linkedin.com/feed/update/urn:li:activity:6608396386008473600
urn:li:activity:6600440430574268416,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2019-11-13 09:53:48,https://www.linkedin.com/feed/update/urn:li:activity:6600440430574268416
urn:li:activity:6596762324558839808,,UNKNOWN,Brian,Jenney,90,90,1,0,0,0,0.011111111111111112,,2019-11-03 06:18:20,https://www.linkedin.com/feed/update/urn:li:activity:6596762324558839808
urn:li:activity:6590304710194970624,"In the spirit of #hacktober or perhaps by coincidence, ZignalLabs hosted its second HackWeek this year. HackWeek is a full week where developers from all teams suggest projects to build, form groups and create a working prototype of their brainchild! 

This year, I and a few other developers from the SF office got to travel to meet our fellow teammates who work outside of the US. Within 4 days, each team had successfully created a project (not writing tests for the win!) and we got to show off our creations. The real benefit of weeks like this is that these projects often end up being incorporated in our actual applications, driving innovation and also creating opportunities to work across teams. Makes me wonder why more companies don't do this. #zignallabs #hacktoberfest ",IMAGE,Brian,Jenney,2191,2191,42,2,2,0,0.020994979461433135,"#hacktober ,#zignallabs ,#hacktoberfest ",2019-10-16 11:38:04,https://www.linkedin.com/feed/update/urn:li:activity:6590304710194970624
urn:li:activity:6590300580789448705,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2019-10-16 11:21:40,https://www.linkedin.com/feed/update/urn:li:activity:6590300580789448705
urn:li:activity:6579533211083292672,,UNKNOWN,Brian,Jenney,59,59,0,0,0,0,0,,2019-09-16 18:15:59,https://www.linkedin.com/feed/update/urn:li:activity:6579533211083292672
urn:li:activity:6577641193071620096,Curious which candidate is in the lead ahead of the third presidential debate tomorrow night? Read our debate preview blog to find out.,ARTICLE,Brian,Jenney,121,121,0,0,0,0,0,,2019-09-11 12:57:46,https://www.linkedin.com/feed/update/urn:li:activity:6577641193071620096
urn:li:activity:6571855947319304192,"Check out the latest blog post from Zignal Labs to learn how impact-driven metrics can help you work smarter, not harder (in fincomms and beyond) :",ARTICLE,Brian,Jenney,0,0,1,0,0,0,0,,2019-08-26 13:49:16,https://www.linkedin.com/feed/update/urn:li:activity:6571855947319304192
urn:li:activity:6566726433069248512,Great read – commentary from Zignal Labs CEO Josh Ginsberg around the Equinox/SoulCycle backlash featured in The New York Times.,ARTICLE,Brian,Jenney,0,0,1,0,0,0,0,,2019-08-12 10:06:25,https://www.linkedin.com/feed/update/urn:li:activity:6566726433069248512
urn:li:activity:6561741855879503872,I used to work here and had a great experience. If you’re interested in a career in marketing check out the link!,UNKNOWN,Brian,Jenney,0,0,2,2,0,0,0,,2019-07-29 15:59:29,https://www.linkedin.com/feed/update/urn:li:activity:6561741855879503872
urn:li:activity:6559601253893181440,Axios using Zignal Labs data for a piece on the election! Interesting to see the different use cases for Zignal especially as this election nears. #zignallabs,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,#zignallabs,2019-07-23 18:13:30,https://www.linkedin.com/feed/update/urn:li:activity:6559601253893181440
urn:li:activity:6527583744054960128,"Sad that I was pretty sick the last day of our intro to coding bootcamp for  #skylinecollege middle college high school students but overall had an amazing time and was very impressed with the students who are 16-17 and their ability to go from 0 to deployed in a few sessions. 

We talk a lot about equity in tech and it struck me how diverse this class was. I got into coding late in life but if we want more women and POC sitting next to us with their earphones on drinking lacroix while looking up the latest JS framework, we need to reach kids like this earlier and introduce to them to what coding is. Almost none of these students who live in SF had any clue about coding or exactly what it entailed which is kinda shocking considering they live in the epicenter of tech.

I hope they take what they’ve learned and can fill in some more of the gaps as they continue working on their personal sites.  #zignallabs",IMAGE,Brian,Jenney,0,0,32,6,0,0,0,"#skylinecollege ,#zignallabs",2019-04-26 09:47:21,https://www.linkedin.com/feed/update/urn:li:activity:6527583744054960128
urn:li:activity:6522275227806896128,"Put my volunteer time off from #zignallabs to good use today and got to teach some high school students the basics of html and css. They walked away with a sorta fugly web page that we will beautify next week. Then... Skynet. #skylinecollege thanks Alexander Jones, MSW for putting this together",IMAGE,Brian,Jenney,0,0,88,14,1,0,0,"#zignallabs ,#skylinecollege ",2019-04-11 18:13:12,https://www.linkedin.com/feed/update/urn:li:activity:6522275227806896128
urn:li:activity:6517795647616352256,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2019-03-30 09:32:57,https://www.linkedin.com/feed/update/urn:li:activity:6517795647616352256
urn:li:activity:6497273301113671680,Just finished my first Hack Week at #zignallabs - they gave us a week to form teams and implement a project then share it with the group. Pretty shocked with the awesome things people came up with - from image recognition to widgets. I’m no photog so I’m posting the best shot I got,IMAGE,Brian,Jenney,0,0,42,7,0,0,0,#zignallabs ,2019-02-01 17:24:28,https://www.linkedin.com/feed/update/urn:li:activity:6497273301113671680
urn:li:activity:6496957645835116544,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2019-01-31 20:30:10,https://www.linkedin.com/feed/update/urn:li:activity:6496957645835116544
urn:li:activity:6471876719660924928,,UNKNOWN,Brian,Jenney,0,0,1,0,0,0,0,,2018-11-23 15:27:31,https://www.linkedin.com/feed/update/urn:li:activity:6471876719660924928
urn:li:activity:6460930215819513856,Any experienced .Net developers in my connections looking for work in SF? Recruiter contacted me but I’m off the market. Shoot me your contact and I’ll send it to him.,UNKNOWN,Brian,Jenney,0,0,2,0,0,0,0,,2018-10-24 11:30:01,https://www.linkedin.com/feed/update/urn:li:activity:6460930215819513856
urn:li:activity:6193112684393672704,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2016-10-15 10:38:46,https://www.linkedin.com/feed/update/urn:li:activity:6193112684393672704
urn:li:activity:6189225580693565440,Marcus Turner,UNKNOWN,Brian,Jenney,0,0,5,0,0,0,0,,2016-10-04 17:12:48,https://www.linkedin.com/feed/update/urn:li:activity:6189225580693565440
urn:li:activity:6183975694473641984,https://lnkd.in/bnDbg4m,UNKNOWN,Brian,Jenney,0,0,2,1,0,0,0,,2016-09-20 05:31:38,https://www.linkedin.com/feed/update/urn:li:activity:6183975694473641984
urn:li:activity:6158444649255026688,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2016-07-11 18:40:22,https://www.linkedin.com/feed/update/urn:li:activity:6158444649255026688
urn:li:activity:6149196022896680960,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2016-06-16 06:09:38,https://www.linkedin.com/feed/update/urn:li:activity:6149196022896680960
urn:li:activity:6073240045043593216,After speaking to a lot of recruiters as of late I thought this was interesting. Thanks Mike Ovadia,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2015-11-19 14:47:42,https://www.linkedin.com/feed/update/urn:li:activity:6073240045043593216
urn:li:activity:6065259141876703232,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2015-10-28 15:14:26,https://www.linkedin.com/feed/update/urn:li:activity:6065259141876703232
urn:li:activity:6064960504726573056,Quick draft of an Oakland City page .... someone design it so I can make it. We really need a cooler page for the city.,IMAGE,Brian,Jenney,0,0,0,0,0,0,0,,2015-10-27 19:27:45,https://www.linkedin.com/feed/update/urn:li:activity:6064960504726573056
urn:li:activity:6063042669637029888,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2015-10-22 12:26:58,https://www.linkedin.com/feed/update/urn:li:activity:6063042669637029888
urn:li:activity:6061900093508825088,,UNKNOWN,Brian,Jenney,0,0,0,0,0,0,0,,2015-10-19 08:46:46,https://www.linkedin.com/feed/update/urn:li:activity:6061900093508825088
